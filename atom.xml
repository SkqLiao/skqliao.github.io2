<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Skqliao&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://skqliao.github.io/"/>
  <updated>2019-03-11T09:21:42.127Z</updated>
  <id>https://skqliao.github.io/</id>
  
  <author>
    <name>Skqliao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019省选联合训练4 解题报告</title>
    <link href="https://skqliao.github.io/2019-Multi-School-Training-Contest-4/"/>
    <id>https://skqliao.github.io/2019-Multi-School-Training-Contest-4/</id>
    <published>2019-03-11T08:58:34.000Z</published>
    <updated>2019-03-11T09:21:42.127Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="2019 Multi-School Training Contest 4" />    <label for="pass">2019 Multi-School Training Contest 4</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none"></div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      2019省选联合训练4（十一学校） 解题报告
    
    </summary>
    
      <category term="模拟赛" scheme="https://skqliao.github.io/categories/%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
    
      <category term="线段树" scheme="https://skqliao.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="欧拉序" scheme="https://skqliao.github.io/tags/%E6%AC%A7%E6%8B%89%E5%BA%8F/"/>
    
      <category term="倍增" scheme="https://skqliao.github.io/tags/%E5%80%8D%E5%A2%9E/"/>
    
  </entry>
  
  <entry>
    <title>「TJOI 2018」BZOJ 5335 智力竞赛</title>
    <link href="https://skqliao.github.io/BZOJ-5335/"/>
    <id>https://skqliao.github.io/BZOJ-5335/</id>
    <published>2019-03-06T04:23:23.000Z</published>
    <updated>2019-03-08T06:09:57.827Z</updated>
    
    <content type="html"><![CDATA[<p>用 $n+1$ 条链覆盖一个点权有向无环图，若可以全部覆盖输出<code>AK</code>，否则求不能被覆盖的点的点权最小值的最大值。</p><p>$n\leq 50,m\leq 500$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先判断是否能全部覆盖，即求可重点DAG的最小路径覆盖，传递闭包后求二分图最大匹配。</p><p>否则二分答案，判断边权小于当前二分值 $w$ 的子图是否能被完全覆盖。</p><p>复杂度 $O(n^2\log{n})$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: TJOI 2018</span></span><br><span class="line"><span class="comment"> * @Problem: 5335: [TJOI2018]智力竞赛</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=5335</span></span><br><span class="line"><span class="comment"> * @Date: 2019-03-05 20:00:52</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-03-06 12:29:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">500</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;MAXN&gt; G[MAXN], g[MAXN];</span><br><span class="line"><span class="keyword">int</span> W[MAXN];</span><br><span class="line"><span class="keyword">int</span> Match[MAXN], Vis[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Vis[x])</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (g[x][i] &amp;&amp; (!Match[i] || dfs(Match[i]))) &#123;</span><br><span class="line">            Match[i] = x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) tot += W[i] &lt; w;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (W[i] &lt; w &amp;&amp; W[j] &lt; w)</span><br><span class="line">                g[i][j] = G[i][j];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                g[i][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(Match, <span class="number">0</span>, <span class="keyword">sizeof</span> Match);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(Vis, <span class="number">0</span>, <span class="keyword">sizeof</span> Vis);</span><br><span class="line">        tot -= dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tot &lt;= M + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num, x, mx = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;M, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;W[i], &amp;num);</span><br><span class="line">        mx = <span class="built_in">std</span>::max(mx, W[i]);</span><br><span class="line">        <span class="keyword">while</span> (num--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">            G[i][x] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (G[i][j])</span><br><span class="line">                G[i] |= G[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check(mx + <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"AK"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = mx, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">            <span class="keyword">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (check(m)) &#123;</span><br><span class="line">                ans = m;</span><br><span class="line">                l = m + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                r = m - <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用 $n+1$ 条链覆盖一个点权有向无环图，若可以全部覆盖输出&lt;code&gt;AK&lt;/code&gt;，否则求不能被覆盖的点的点权最小值的最大值。&lt;/p&gt;
&lt;p&gt;$n\leq 50,m\leq 500$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="传递闭包" scheme="https://skqliao.github.io/tags/%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85/"/>
    
      <category term="二分图最大匹配" scheme="https://skqliao.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    
      <category term="二分答案" scheme="https://skqliao.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>「CTSC 2008」BZOJ 1143 祭祀river</title>
    <link href="https://skqliao.github.io/BZOJ-1143/"/>
    <id>https://skqliao.github.io/BZOJ-1143/</id>
    <published>2019-03-06T03:30:50.000Z</published>
    <updated>2019-03-17T05:35:38.746Z</updated>
    
    <content type="html"><![CDATA[<p>求有向无环图的最长反链，反链中任意两点不联通。</p><p>$N\leq 100,M\leq 1000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>传递闭包后做二分图最大匹配，答案为点数-最大匹配数。</p><p>复杂度 $O(NM)$</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: CTSC 2008</span></span><br><span class="line"><span class="comment"> * @Problem: 1143: [CTSC2008]祭祀river</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1143</span></span><br><span class="line"><span class="comment"> * @Date: 2019-03-05 21:15:32</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-03-05 21:29:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;MAXN&gt; B[MAXN];</span><br><span class="line"><span class="keyword">bool</span> Vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> Match[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Vis[x]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Vis[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (B[x][i] &amp;&amp; (!Match[i] || dfs(Match[i]))) &#123;</span><br><span class="line">            Match[i] = x;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> u, v;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;u, &amp;v);</span><br><span class="line">        B[u][v] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (B[i][j]) B[i] |= B[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(Vis, <span class="number">0</span>, <span class="keyword">sizeof</span> Vis);</span><br><span class="line">        ans += dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, N - ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;求有向无环图的最长反链，反链中任意两点不联通。&lt;/p&gt;
&lt;p&gt;$N\leq 100,M\leq 1000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="传递闭包" scheme="https://skqliao.github.io/tags/%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85/"/>
    
      <category term="二分图最大匹配" scheme="https://skqliao.github.io/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>「JSOI 2010」BZOJ 2208 连通数</title>
    <link href="https://skqliao.github.io/BZOJ-2208/"/>
    <id>https://skqliao.github.io/BZOJ-2208/</id>
    <published>2019-03-05T12:49:47.000Z</published>
    <updated>2019-03-08T03:33:21.126Z</updated>
    
    <content type="html"><![CDATA[<p>给定 $n\times n$ 的01矩阵表示有向图的连边情况。求有多少组 $(a,b)$ 满足 $a$ 到 $b$ 联通（$a,b$ 可以相同）。</p><p>$n\leq 2000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>Folyd传递闭包+bitset优化的模板题。</p><p>复杂度 $O(n^3/64)$ 或 $O(nm/64)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: JSOI 2010</span></span><br><span class="line"><span class="comment"> * @Problem: 2208: [Jsoi2010]连通数</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2208</span></span><br><span class="line"><span class="comment"> * @Date: 2019-03-05 20:26:54</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-03-05 21:11:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">2000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">char</span> S[MAXN];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;MAXN&gt; B[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, S);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            B[i][j] = S[j] == <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        B[i][i] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (B[i][j]) B[i] |= B[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        ans += B[i].count();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定 $n\times n$ 的01矩阵表示有向图的连边情况。求有多少组 $(a,b)$ 满足 $a$ 到 $b$ 联通（$a,b$ 可以相同）。&lt;/p&gt;
&lt;p&gt;$n\leq 2000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="传递闭包" scheme="https://skqliao.github.io/tags/%E4%BC%A0%E9%80%92%E9%97%AD%E5%8C%85/"/>
    
      <category term="Floyd" scheme="https://skqliao.github.io/tags/Floyd/"/>
    
  </entry>
  
  <entry>
    <title>「TJOI 2018」BZOJ 5334 数学计算</title>
    <link href="https://skqliao.github.io/BZOJ-5334/"/>
    <id>https://skqliao.github.io/BZOJ-5334/</id>
    <published>2019-03-05T11:12:35.000Z</published>
    <updated>2019-03-17T04:13:13.467Z</updated>
    
    <content type="html"><![CDATA[<p>维护 $x\% mod$，初值 $x=1$，有 $Q$ 个操作。</p><p><code>1 a</code> $x=x\times a$</p><p><code>2 a</code> $x=x / A[a]$，其中 $A[a]$ 为第 $a$ 次操作乘的数，保证第 $i$ 次是操作1，且每个位置最多被除一次</p><p>$T$ 组数据。</p><p>$T\leq 5,Q\leq 100000,mod\leq 10^9$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这是一类常见套路，根据时间分治。</p><p>具体而言，以时间为区间建线段树，维护区间乘积。</p><p>复杂度 $T\times Q\log{Q}$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: BZOJ 5334</span></span><br><span class="line"><span class="comment"> * @Problem: 5334: [Tjoi2018]数学计算</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=5334</span></span><br><span class="line"><span class="comment"> * @Date: 2019-03-05 17:36:17</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-03-05 19:10:49</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Q, MOD;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Mul[MAXN &lt;&lt; <span class="number">2</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LT rt &lt;&lt; 1, l, m</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> RT rt &lt;&lt; 1 | 1, m + 1, r</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> rt)</span> </span>&#123; Mul[rt] = Mul[rt &lt;&lt; <span class="number">1</span>] * Mul[rt &lt;&lt; <span class="number">1</span> | <span class="number">1</span>] % MOD; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        Mul[rt] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(LT);</span><br><span class="line">    build(RT);</span><br><span class="line">    pushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> rt, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        Mul[rt] = x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (p &lt;= m) &#123;</span><br><span class="line">        update(LT, p, x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        update(RT, p, x);</span><br><span class="line">    &#125;</span><br><span class="line">    pushUp(rt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;Q, &amp;MOD);</span><br><span class="line">    build(<span class="number">1</span>, <span class="number">1</span>, Q);</span><br><span class="line">    <span class="keyword">int</span> opt, x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;opt, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (opt == <span class="number">1</span>) &#123;</span><br><span class="line">            update(<span class="number">1</span>, <span class="number">1</span>, Q, i, x);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            update(<span class="number">1</span>, <span class="number">1</span>, Q, x, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, Mul[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;维护 $x\% mod$，初值 $x=1$，有 $Q$ 个操作。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1 a&lt;/code&gt; $x=x\times a$&lt;/p&gt;
&lt;p&gt;&lt;code&gt;2 a&lt;/code&gt; $x=x / A[a]$，其中 $A[a]$ 为第 $a$ 次操作乘的数，保证第 $i$ 次是操作1，且每个位置最多被除一次&lt;/p&gt;
&lt;p&gt;$T$ 组数据。&lt;/p&gt;
&lt;p&gt;$T\leq 5,Q\leq 100000,mod\leq 10^9$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="线段树" scheme="https://skqliao.github.io/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>「FJWC 2019」FZOJ 184 签到题</title>
    <link href="https://skqliao.github.io/FZOJ-184/"/>
    <id>https://skqliao.github.io/FZOJ-184/</id>
    <published>2019-03-03T07:43:21.000Z</published>
    <updated>2019-03-08T03:32:29.754Z</updated>
    
    <content type="html"><![CDATA[<p>给定序列 $A[1 \cdots N]$，有 $M$ 次操作。每次修改 $A[p]=x$，修改后询问最小的 $y$ 满足新序列 $B[i]=A[i] \oplus y$ 单调递增，无解输出 <code>-1</code>。</p><p>$N,M\leq 10^6,A_i,x\leq 2^{30}$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>记 $F(x,i)$ 表示 $x$ 二进制分解后第 $i$ 位的值，$S_{a,b}$ 为满足 $[F(a,x)\not=F(b,x)]$ 的 $x$ 的集合，$G(a,b)=\max{S_{a,b}}$。那么通过第 $G(a,b)$ 位的大小关系即可判定$a,b$ 的大小关系。</p><p>统计 $Cnt[x][0]$ 为所有满足 $G(A[i],A[i+1])=x$，且 $F(A[i],x)&lt;F(A[i+1],x)$ 的个数。同理 $Cnt[x][1]$ 为满足 $F(A[i],x)&gt;F(A[i+1],x)$ 的个数。</p><p>那么求最小的 $y$ 只需要从最高位向下贪心。对于当前位 $i$，若存在 $Cnt[i][0]&gt;0$ 且 $Cnt[i][1]&gt;0$，则无解，因为无论这一位是否异或，都会存在若干个 $A[i]&gt;A[i+1]$。若 $Cnt[i][1]&gt;0$ 且 $Cnt[i][0]=0$，则这一位必须异或， $y$ 增加 $2^i$。</p><p>修改 $A[p]=x$，只影响 $(p-1,p)$ 和 $(p,p+1)$，那么先删去这两对原先对 $Cnt$ 的贡献，再重新加入即可。</p><p>复杂度 $O((N+M)\log{N})$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: FJWC 2019</span></span><br><span class="line"><span class="comment"> * @Problem: #184. 「2019冬令营提高组」签到题</span></span><br><span class="line"><span class="comment"> * @Url: http://218.5.5.242:9021/problem/184</span></span><br><span class="line"><span class="comment"> * @Date: 2019-03-03 09:33:27</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-03-03 10:03:11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    freopen(<span class="string">"sort.in"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">"sort.out"</span>, <span class="string">"w"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> In[<span class="number">1</span> &lt;&lt; <span class="number">23</span>], *at = In, *en = In;</span><br><span class="line">    <span class="keyword">if</span> (at == en) &#123;</span><br><span class="line">        en = (at = In) + fread(In, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">23</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> at == en ? EOF : *at++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = gc();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c))</span><br><span class="line">        c = gc();</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (; <span class="built_in">isdigit</span>(c); c = gc())</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">30</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">bitset</span>&lt;LOG&gt; A[MAXN];</span><br><span class="line"><span class="keyword">int</span> Cnt[LOG][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; LOG; d++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (Cnt[d][<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Cnt[d][<span class="number">0</span>]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                x += (<span class="number">1</span> &lt;&lt; d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = l + <span class="number">1</span>; i &lt;= r; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> d = LOG - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (d &gt;= <span class="number">0</span> &amp;&amp; A[i - <span class="number">1</span>][d] == A[i][d])</span><br><span class="line">            d--;</span><br><span class="line">        <span class="keyword">if</span> (d &gt;= <span class="number">0</span>)</span><br><span class="line">            Cnt[d][A[i - <span class="number">1</span>][d]] += x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    open();</span><br><span class="line">    N = gt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)</span><br><span class="line">        A[i] = gt();</span><br><span class="line">    update(<span class="number">1</span>, N, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    <span class="keyword">int</span> Q = gt();</span><br><span class="line">    <span class="keyword">while</span> (Q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = gt(), y = gt();</span><br><span class="line">        <span class="keyword">int</span> l = <span class="built_in">std</span>::max(<span class="number">1</span>, x - <span class="number">1</span>), r = <span class="built_in">std</span>::min(N, x + <span class="number">1</span>);</span><br><span class="line">        update(l, r, <span class="number">-1</span>);</span><br><span class="line">        A[x] = y;</span><br><span class="line">        update(l, r, <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;给定序列 $A[1 \cdots N]$，有 $M$ 次操作。每次修改 $A[p]=x$，修改后询问最小的 $y$ 满足新序列 $B[i]=A[i] \oplus y$ 单调递增，无解输出 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;$N,M\leq 10^6,A_i,x\leq 2^{30}$&lt;/p&gt;
    
    </summary>
    
      <category term="FZOJ" scheme="https://skqliao.github.io/categories/FZOJ/"/>
    
    
      <category term="贪心" scheme="https://skqliao.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>「HAOI 2007」BZOJ 1047 理想的正方形</title>
    <link href="https://skqliao.github.io/BZOJ-1047/"/>
    <id>https://skqliao.github.io/BZOJ-1047/</id>
    <published>2019-02-28T12:03:37.000Z</published>
    <updated>2019-03-08T03:33:02.522Z</updated>
    
    <content type="html"><![CDATA[<p>在 $N\times M$ 的矩阵中，求 $K\times K$ 的子矩阵中两最值之差的最小值。</p><p>$N,M\leq 1000,K\leq 100$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>二维ST表，用 $Max(x,y,k),Min(x,y,z)$ 分别表示左上角为 $(x,y)$，边长为 $2^k$ 的子矩阵中的最大值与最小值。</p><p>然后枚举子矩阵左上角，求当前矩阵两最值最差，取最小值。</p><p>复杂度 $O(NM\log{N}+NM)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: HAOI 2007</span></span><br><span class="line"><span class="comment"> * @Problem: 1047: [HAOI2007]理想的正方形</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1047</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-28 19:29:48</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-28 19:48:10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M, K;</span><br><span class="line"><span class="keyword">int</span> Mx[MAXN][MAXN][LOG], Mn[MAXN][MAXN][LOG];</span><br><span class="line"><span class="keyword">int</span> Log[MAXN], Bin[LOG];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMax</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = Log[n];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::max(<span class="built_in">std</span>::max(Mx[x][y][k], Mx[x + n - Bin[k]][y][k]),</span><br><span class="line">                <span class="built_in">std</span>::max(Mx[x][y + n - Bin[k]][k], Mx[x + n - Bin[k]][y + n - Bin[k]][k]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryMin</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> k = Log[n];</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">std</span>::min(<span class="built_in">std</span>::min(Mn[x][y][k], Mn[x + n - Bin[k]][y][k]),</span><br><span class="line">                <span class="built_in">std</span>::min(Mn[x][y + n - Bin[k]][k], Mn[x + n - Bin[k]][y + n - Bin[k]][k]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;N, &amp;M, &amp;K);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Mx[i][j][<span class="number">0</span>]);</span><br><span class="line">        Mn[i][j][<span class="number">0</span>] = Mx[i][j][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">std</span>::max(N, M); ++i) &#123;</span><br><span class="line">    Log[i] = Log[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">Bin[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Log[<span class="built_in">std</span>::max(N, M)]; ++i) &#123;</span><br><span class="line">    Bin[i] = Bin[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= Log[<span class="built_in">std</span>::max(N, M)]; ++k) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + Bin[k] - <span class="number">1</span> &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j + Bin[k] - <span class="number">1</span> &lt;= M; ++j) &#123;</span><br><span class="line">            Mx[i][j][k] = <span class="built_in">std</span>::max(<span class="built_in">std</span>::max(Mx[i][j][k - <span class="number">1</span>], Mx[i + Bin[k - <span class="number">1</span>]][j][k - <span class="number">1</span>]),</span><br><span class="line">                                   <span class="built_in">std</span>::max(Mx[i][j + Bin[k - <span class="number">1</span>]][k - <span class="number">1</span>],</span><br><span class="line">                                            Mx[i + Bin[k - <span class="number">1</span>]][j + Bin[k - <span class="number">1</span>]][k - <span class="number">1</span>]));</span><br><span class="line">            Mn[i][j][k] = <span class="built_in">std</span>::min(<span class="built_in">std</span>::min(Mn[i][j][k - <span class="number">1</span>], Mn[i + Bin[k - <span class="number">1</span>]][j][k - <span class="number">1</span>]),</span><br><span class="line">                                   <span class="built_in">std</span>::min(Mn[i][j + Bin[k - <span class="number">1</span>]][k - <span class="number">1</span>],</span><br><span class="line">                                            Mn[i + Bin[k - <span class="number">1</span>]][j + Bin[k - <span class="number">1</span>]][k - <span class="number">1</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N - K + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M - K + <span class="number">1</span>; ++j) &#123;</span><br><span class="line">        ans = <span class="built_in">std</span>::min(ans, queryMax(i, j, K) - queryMin(i, j, K));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 $N\times M$ 的矩阵中，求 $K\times K$ 的子矩阵中两最值之差的最小值。&lt;/p&gt;
&lt;p&gt;$N,M\leq 1000,K\leq 100$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="ST表" scheme="https://skqliao.github.io/tags/ST%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3437 小P的牧场</title>
    <link href="https://skqliao.github.io/BZOJ-3437/"/>
    <id>https://skqliao.github.io/BZOJ-3437/</id>
    <published>2019-02-27T12:28:18.000Z</published>
    <updated>2019-03-08T03:33:33.908Z</updated>
    
    <content type="html"><![CDATA[<p>每个点 $i$ 要么花费 $a_i$ 建塔，要么花费 $(j-i)\cdot b_i$ （$j$ 为 $i$ 右边第一个塔的标号）。求最小总花费。</p><p>$n\leq 10^6,0 &lt; a_i,b_i\leq 10^5$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>设 $X_i=\sum\limits_{j=1}^{i-1}{B_j}$,$Y_i=\sum\limits_{j=1}^{i-1}{b_i\cdot i}$，则转移方程为 $f_i=a_i+\min\limits_{j &lt; i}{(f_j+X_{i-1}-X_j-Y_{i-1}+Y_j)}$</p><p>若决策点 $j$ 优于决策点 $k(j &lt; k)$，需满足 $\frac{f_k-f_j+Y_k-Y_j}{X_k-X_j} &gt; i$。</p><p>维护决策点队列斜率单调递增，且斜率 $&gt;i$。</p><p>复杂度 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: BZOJ</span></span><br><span class="line"><span class="comment"> * @Problem: 3437: 小P的牧场</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3437</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-27 20:22:08</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-27 20:27:08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> X[MAXN], Y[MAXN], F[MAXN];</span><br><span class="line"><span class="keyword">int</span> Que[MAXN], qh, qt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) (F[k] - F[j] + Y[k] - Y[j]) / (X[k] - X[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;B[i]);</span><br><span class="line">        X[i] = X[i - <span class="number">1</span>] + B[i];</span><br><span class="line">        Y[i] = Y[i - <span class="number">1</span>] + i * B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + <span class="number">1</span>]) &lt;= i) ++qh;</span><br><span class="line">        <span class="keyword">int</span> j = Que[qh];</span><br><span class="line">        F[i] = F[j] + i * (X[i - <span class="number">1</span>] - X[j]) - (Y[i - <span class="number">1</span>] - Y[j]) + A[i];</span><br><span class="line">        <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slope(Que[qt - <span class="number">1</span>], Que[qt]) &gt;= slope(Que[qt], i)) --qt;</span><br><span class="line">        Que[++qt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, F[N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个点 $i$ 要么花费 $a_i$ 建塔，要么花费 $(j-i)\cdot b_i$ （$j$ 为 $i$ 右边第一个塔的标号）。求最小总花费。&lt;/p&gt;
&lt;p&gt;$n\leq 10^6,0 &amp;lt; a_i,b_i\leq 10^5$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="斜率优化" scheme="https://skqliao.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="DP" scheme="https://skqliao.github.io/tags/DP/"/>
    
      <category term="单调队列" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ 3156 防御准备</title>
    <link href="https://skqliao.github.io/BZOJ-3156/"/>
    <id>https://skqliao.github.io/BZOJ-3156/</id>
    <published>2019-02-27T12:11:58.000Z</published>
    <updated>2019-03-08T03:33:29.597Z</updated>
    
    <content type="html"><![CDATA[<p>每个点 $i$ 要么花费 $a_i$ 建塔，要么花费 $j-i$ （$j$ 为 $i$ 右边第一个塔的标号）。点 $n$ 必须建塔，求最小总花费。</p><p>$n\leq 10^6,a_i\leq 10^9$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>将点左右翻转，点 $1$ 必须建塔，则转移方程为 $f_i=a_i+\min\limits_{j &lt; i}{(f_j+(i-j)\cdot (i-j-1)/2)}$</p><p>若决策点 $j$ 优于决策点 $k(j &lt; k)$，需满足 $\frac{2(f_k-f_j)+k(k+1)-j(j+1)}{2(k-j)} &gt; i$。</p><p>维护决策点队列斜率单调递增，且斜率 $&gt;i$。</p><p>复杂度 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: BZOJ</span></span><br><span class="line"><span class="comment"> * @Problem: 3156: 防御准备</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3156</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-26 21:32:07</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-27 20:02:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], S[MAXN], F[MAXN];</span><br><span class="line"><span class="keyword">int</span> Que[MAXN], qh, qt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(<span class="number">2</span> * (F[k] - F[j]) + (<span class="keyword">long</span> <span class="keyword">long</span>)k * (k + <span class="number">1</span>) - (<span class="keyword">long</span> <span class="keyword">long</span>)j * (j + <span class="number">1</span>)) / (<span class="number">2</span> * (k - j));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::reverse(A + <span class="number">1</span>, A + N + <span class="number">1</span>);</span><br><span class="line">    F[<span class="number">1</span>] = A[<span class="number">1</span>];</span><br><span class="line">    Que[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = LLONG_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (qh &lt; qt &amp;&amp; slope(Que[qh], Que[qh + <span class="number">1</span>]) &lt;= i) ++qh;</span><br><span class="line">        <span class="keyword">int</span> j = Que[qh];</span><br><span class="line">        F[i] = F[j] + (<span class="keyword">long</span> <span class="keyword">long</span>)(i - j) * (i - j - <span class="number">1</span>) / <span class="number">2</span> + A[i];</span><br><span class="line">        <span class="keyword">while</span> (qh &lt; qt &amp;&amp; slope(Que[qt - <span class="number">1</span>], Que[qt]) &gt;= slope(Que[qt], i)) --qt;</span><br><span class="line">        Que[++qt] = i;</span><br><span class="line">        ans = <span class="built_in">std</span>::min(ans, F[i] + (<span class="keyword">long</span> <span class="keyword">long</span>)(N - i) * (N - i + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个点 $i$ 要么花费 $a_i$ 建塔，要么花费 $j-i$ （$j$ 为 $i$ 右边第一个塔的标号）。点 $n$ 必须建塔，求最小总花费。&lt;/p&gt;
&lt;p&gt;$n\leq 10^6,a_i\leq 10^9$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="斜率优化" scheme="https://skqliao.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="DP" scheme="https://skqliao.github.io/tags/DP/"/>
    
      <category term="单调队列" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>「USACO2008 MAR」BZOJ 1597 土地购买</title>
    <link href="https://skqliao.github.io/BZOJ-1597/"/>
    <id>https://skqliao.github.io/BZOJ-1597/</id>
    <published>2019-02-25T14:19:05.000Z</published>
    <updated>2019-03-08T03:33:11.940Z</updated>
    
    <content type="html"><![CDATA[<p>有 $n$ 个 $X_i\times Y_i$ 的矩形，购买矩形的花费为它的面积。允许一次性购买多个矩形，其花费为 $\max(X_i)\times \max(Y_i)$。求购买所有矩形的最小花费。</p><p>$n\leq 50000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>若存在若干个矩形满足 $X_1\leq X_2\leq\cdots\leq X_m$ 且 $Y_1\cdots Y_i\leq Y_m$，则一定打包购买，花费为 $X_m\times Y_m$。那么剩下的矩形一定满足 $X_i\leq X_2\leq\cdots\leq X_p$ 且 $Y_1 &gt; Y_2 &gt; \cdots&gt; Y_p$。</p><p>新序列可以通过排序（第一关键字 $x$，第二关键字 $y$）后用单调栈维护 $y$ 值递减处理。</p><p>转移方程为 $F_i=\min\limits_{1\leq j &lt; i}{(F_j+X_i\times Y_{j+1})}$。</p><p>决策点 $j$ 优于决策点 $k(j &lt; k)$，当且仅当 $\frac{F_j-F_k}{B_{k+1}-B_{j+1}} &gt; A_i$。</p><p>维护决策点队列，满足斜率单调递增，且大于 $A_i$。</p><p>复杂度 $O(n\log{n})$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: USACO2008 Mar</span></span><br><span class="line"><span class="comment"> * @Problem: 1597: [Usaco2008 Mar]土地购买</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1597</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-25 20:43:09</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-25 22:14:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node &amp;a) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x == a.x ? a.y &gt; y : x &lt; a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; A[MAXN], B[MAXN];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> Que[MAXN], qh, qt;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> F[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>) (F[j] - F[k]) / (B[k + <span class="number">1</span>].y - B[j + <span class="number">1</span>].y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;A[i].x, &amp;A[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(A + <span class="number">1</span>, A + N + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> top = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (top &amp;&amp; B[top].y &lt;= A[i].y) --top;</span><br><span class="line">        B[++top] = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Que[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= top; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + <span class="number">1</span>]) &lt;= B[i].x) ++qh;</span><br><span class="line">        <span class="keyword">int</span> j = Que[qh];</span><br><span class="line">        F[i] = F[j] + (<span class="keyword">long</span> <span class="keyword">long</span>)B[i].x * B[j + <span class="number">1</span>].y;</span><br><span class="line">        <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slope(Que[qt - <span class="number">1</span>], Que[qt]) &gt;= slope(Que[qt], i)) --qt;</span><br><span class="line">        Que[++qt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, F[top]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有 $n$ 个 $X_i\times Y_i$ 的矩形，购买矩形的花费为它的面积。允许一次性购买多个矩形，其花费为 $\max(X_i)\times \max(Y_i)$。求购买所有矩形的最小花费。&lt;/p&gt;
&lt;p&gt;$n\leq 50000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="斜率优化" scheme="https://skqliao.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="DP" scheme="https://skqliao.github.io/tags/DP/"/>
    
      <category term="单调队列" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
      <category term="单调栈" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>「ZJOI 2007」BZOJ 1096 仓库建设</title>
    <link href="https://skqliao.github.io/BZOJ-1096/"/>
    <id>https://skqliao.github.io/BZOJ-1096/</id>
    <published>2019-02-25T12:05:24.000Z</published>
    <updated>2019-03-08T03:33:04.906Z</updated>
    
    <content type="html"><![CDATA[<p>从左到右有若干个点，点 $1$ 和点 $i$ 的距离为 $D_i$，点 $i$ 有 $A_i$ 个货物，在点 $i$ 建仓库的费用为 $C_i$。现要在若干个点建造仓库，使得每个点的货物向右能移动到某个仓库中，每个货物运动 $1$ 距离的花费为 $1$。求建造与移动的总花费的最小值。</p><p>$N\leq 1000000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>转移方程显然为 $F_i=\min\limits_{1\leq j &lt; i}{(F_j+\sum\limits_{k=j+1}^{i}{(D_i-D_k)\cdot A_k})} +C_i$。</p><p>设 $Y_i=\sum\limits_{j=1}^{i}{A_j\cdot D_j}$，$S_i=\sum\limits_{j=1}^{i}{A_j}$。若点 $k$ 优于点 $j(j &lt; k)$，则满足 $\frac{F_k-F_j+Y_k-Y_j}{S_k-S_j} &gt; D_i$</p><p>维护斜率单调递增的决策点队列，且队首斜率大于 $D_i$。</p><p>复杂度 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: ZJOI 2007</span></span><br><span class="line"><span class="comment"> * @Problem: 1096: [ZJOI2007]仓库建设</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1096</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-25 19:14:22</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-25 20:02:31</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> D[MAXN], A[MAXN], C[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> S[MAXN], Y[MAXN], F[MAXN];</span><br><span class="line"><span class="keyword">int</span> Que[MAXN], qh, qt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slope</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">double</span>)(F[k] - F[j] + Y[k] - Y[j]) / (S[k] - S[j]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;D[i], &amp;A[i], &amp;C[i]);</span><br><span class="line">    S[i] = S[i - <span class="number">1</span>] + A[i];</span><br><span class="line">    Y[i] = Y[i - <span class="number">1</span>] + A[i] * D[i];</span><br><span class="line">&#125;</span><br><span class="line">Que[qt] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + <span class="number">1</span>]) &lt;= D[i]) ++qh;</span><br><span class="line">    <span class="keyword">int</span> j = Que[qh];</span><br><span class="line">    F[i] = F[j] + (S[i] - S[j]) * D[i] - Y[i] + Y[j] + C[i];</span><br><span class="line">    <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slope(Que[qt - <span class="number">1</span>], Que[qt]) &gt;= slope(Que[qt], i)) --qt;</span><br><span class="line">    Que[++qt] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, F[N]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;从左到右有若干个点，点 $1$ 和点 $i$ 的距离为 $D_i$，点 $i$ 有 $A_i$ 个货物，在点 $i$ 建仓库的费用为 $C_i$。现要在若干个点建造仓库，使得每个点的货物向右能移动到某个仓库中，每个货物运动 $1$ 距离的花费为 $1$。求建造与移动的总花费的最小值。&lt;/p&gt;
&lt;p&gt;$N\leq 1000000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="斜率优化" scheme="https://skqliao.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="DP" scheme="https://skqliao.github.io/tags/DP/"/>
    
      <category term="单调队列" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>「ZJOI 2007」BZOJ 1095 捉迷藏</title>
    <link href="https://skqliao.github.io/BZOJ-1095/"/>
    <id>https://skqliao.github.io/BZOJ-1095/</id>
    <published>2019-02-24T07:25:46.000Z</published>
    <updated>2019-03-09T07:05:09.200Z</updated>
    
    <content type="html"><![CDATA[<p>无权树上有黑点和白点共 $N$ 个，开始均为白点。有 $M$个操作，分为两种：取反点 $x$的颜色或查询树上白点对的最大距离。</p><p>$N\leq 100000, M\leq 500000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>做的第一道动态点分治的题。。</p><p>首先考虑假如没有修改操作，那么求最远白点对只需要点分治，每次在重心合并子树中的最长和次长链，得到最大值。</p><p>有了修改，我们考虑动态点分治。</p><p>由于树的形态不变，因此各个子树的重心不变。那么我们可以将重心记录下来，形成一棵点分树，点分树上的父亲节点即为上一层重心，儿子节点为各子树重心。根据重心的性质，树高是<br>$O(log{n})$ 的。</p><p>发现修改一个点的颜色会对它上级的每一层重心造成影响。</p><p>用一个优先队列 $S1[i]$维护子树中每个白点到上一层重心的距离，$S2[i]$维护所有子树中距离的最大值，即所有 $S1$的堆顶。再用一个堆来维护全局答案，即不同的两个 $S2$堆顶之和。</p><p>那么修改一个点会导致 $S1$ 发生变化，从而导致上层的 $S2$发生变化，从而导致答案发生变化。</p><p>插入删除两点间的距离可以先用ST表预处理出欧拉序对应的深度的区间最小值，做到$O(n\log{n})$ 预处理，$O(1)$ 查询。</p><p>由于我们不知道修改的这个点是否是堆顶，因此插入 /删除前先在上层 $S2$ 中弹出当前 $S1$ 的堆顶，完成对 $S1$的操作后，再重新向 $S2$ 插入最大值。维护答案同理。</p><p>在堆中删除元素有一个常见的trick，即用两个堆分别维护所有和已删除的元素，一同弹出堆顶直到堆顶不同为止。</p><p>总复杂度 $O((n + m)\log ^ 2{n})$ 。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: ZJOI 2007</span></span><br><span class="line"><span class="comment"> * @Problem: 1095: [ZJOI2007]Hide 捉迷藏</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1095</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-24 10:24:53</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-24 15:46:29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> In[<span class="number">1</span> &lt;&lt; <span class="number">24</span>], *at = In, *en = In;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (at == en) &#123;</span><br><span class="line">        en = (at = In) + fread(In, <span class="number">1</span>, <span class="number">1</span> &lt;&lt; <span class="number">24</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> at == en ? EOF : *at++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ga</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c = gc();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isalpha</span>(c)) c = gc();</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> c = gc();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(c)) c = gc();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(c)) &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">'0'</span>;</span><br><span class="line">        c = gc();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> LOG = <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Prioirty_Queue</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::priority_queue&lt;<span class="keyword">int</span>&gt; In, Out;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; In.push(x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; Out.push(x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!Out.empty() &amp;&amp; In.top() == Out.top()) &#123;</span><br><span class="line">            In.pop();</span><br><span class="line">            Out.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        update();</span><br><span class="line">        In.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        update();</span><br><span class="line">        <span class="keyword">return</span> In.top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">secondtop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x = top();</span><br><span class="line">        pop();</span><br><span class="line">        <span class="keyword">int</span> y = top();</span><br><span class="line">        insert(x);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> In.size() - Out.size(); &#125;</span><br><span class="line">&#125; S1[MAXN], S2[MAXN], ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(Prioirty_Queue &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        ans.insert(s.top() + s.secondtop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Erase</span><span class="params">(Prioirty_Queue &amp;s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s.size() &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        ans.erase(s.top() + s.secondtop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> v, nxt;</span><br><span class="line">&#125; E[MAXN &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> H[MAXN], cntE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    E[++cntE] = (Edge) &#123;v, H[u]&#125;;</span><br><span class="line">    H[u] = cntE;</span><br><span class="line">    E[++cntE] = (Edge) &#123;u, H[v]&#125;;</span><br><span class="line">    H[v] = cntE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Sz[MAXN], MxSz[MAXN];</span><br><span class="line"><span class="keyword">bool</span> Vis[MAXN];</span><br><span class="line"><span class="keyword">int</span> rt, sigma;</span><br><span class="line"><span class="keyword">int</span> Depth[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRoot</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    MxSz[x] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = H[x]; i; i = E[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v != fa &amp;&amp; !Vis[v]) &#123;</span><br><span class="line">            getRoot(v, x);</span><br><span class="line">            MxSz[x] = <span class="built_in">std</span>::max(MxSz[x], Sz[v]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    MxSz[x] = <span class="built_in">std</span>::max(MxSz[x], sigma - Sz[x]);</span><br><span class="line">    <span class="keyword">if</span> (MxSz[x] &lt; MxSz[rt])</span><br><span class="line">        rt = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Fa[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa, <span class="keyword">int</span> dep, Prioirty_Queue &amp;s)</span> </span>&#123;</span><br><span class="line">    s.insert(dep);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = H[x]; i; i = E[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v != fa &amp;&amp; !Vis[v]) &#123;</span><br><span class="line">            cal(v, x, dep + <span class="number">1</span>, s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Sz[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = H[x]; i; i = E[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v != fa &amp;&amp; !Vis[v]) &#123;</span><br><span class="line">            Sz[x] += getSize(v, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Sz[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Dep[MAXN &lt;&lt; <span class="number">1</span>][LOG], cntD, Pos[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    rt = <span class="number">0</span>;</span><br><span class="line">    sigma = getSize(x, <span class="number">0</span>);</span><br><span class="line">    getRoot(x, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> p = rt;</span><br><span class="line">    Vis[p] = <span class="number">1</span>;</span><br><span class="line">    S2[p].insert(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = H[p]; i; i = E[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (!Vis[v]) &#123;</span><br><span class="line">            Prioirty_Queue tmp;</span><br><span class="line">            cal(v, <span class="number">0</span>, <span class="number">1</span>, tmp);</span><br><span class="line">            <span class="keyword">int</span> p2 = build(v);</span><br><span class="line">            Fa[p2] = p;</span><br><span class="line">            S1[p2] = tmp;</span><br><span class="line">            S2[p].insert(S1[p2].top());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Insert(S2[p]);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    Depth[x] = Depth[fa] + <span class="number">1</span>;</span><br><span class="line">    Dep[Pos[x] = ++cntD][<span class="number">0</span>] = Depth[x];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = H[x]; i; i = E[i].nxt) &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;v = E[i].v;</span><br><span class="line">        <span class="keyword">if</span> (v != fa) &#123;</span><br><span class="line">            dfs(v, x);</span><br><span class="line">            Dep[++cntD][<span class="number">0</span>] = Depth[x];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Log[MAXN &lt;&lt; <span class="number">1</span>], Bin[LOG];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryLcaDepth</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = Pos[x], y = Pos[y];</span><br><span class="line">    <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">        <span class="built_in">std</span>::swap(x, y);</span><br><span class="line">    <span class="keyword">int</span> d = Log[y - x + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">std</span>::min(Dep[x][d], Dep[y - Bin[d] + <span class="number">1</span>][d]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryDis</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> Depth[x] + Depth[y] - <span class="number">2</span> * queryLcaDepth(x, y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turnOn</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    Erase(S2[x]);</span><br><span class="line">    S2[x].insert(<span class="number">0</span>);</span><br><span class="line">    Insert(S2[x]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; Fa[i]; i = Fa[i]) &#123;</span><br><span class="line">        Erase(S2[Fa[i]]);</span><br><span class="line">        <span class="keyword">if</span> (S1[i].size()) &#123;</span><br><span class="line">            S2[Fa[i]].erase(S1[i].top());</span><br><span class="line">        &#125;</span><br><span class="line">        S1[i].insert(queryDis(Fa[i], x));</span><br><span class="line">        <span class="keyword">if</span> (S1[i].size()) &#123;</span><br><span class="line">            S2[Fa[i]].insert(S1[i].top());</span><br><span class="line">        &#125;</span><br><span class="line">        Insert(S2[Fa[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">turnOff</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    Erase(S2[x]);</span><br><span class="line">    S2[x].erase(<span class="number">0</span>);</span><br><span class="line">    Insert(S2[x]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x; Fa[i]; i = Fa[i]) &#123;</span><br><span class="line">        Erase(S2[Fa[i]]);</span><br><span class="line">        <span class="keyword">if</span> (S1[i].size()) &#123;</span><br><span class="line">            S2[Fa[i]].erase(S1[i].top());</span><br><span class="line">        &#125;</span><br><span class="line">        S1[i].erase(queryDis(Fa[i], x));</span><br><span class="line">        <span class="keyword">if</span> (S1[i].size()) &#123;</span><br><span class="line">            S2[Fa[i]].insert(S1[i].top());</span><br><span class="line">        &#125;</span><br><span class="line">        Insert(S2[Fa[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Status[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    N = gt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; ++i) &#123;</span><br><span class="line">        addEdge(gt(), gt());</span><br><span class="line">    &#125;</span><br><span class="line">    MxSz[<span class="number">0</span>] = N;</span><br><span class="line">    build(<span class="number">1</span>);</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    Log[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cntD; ++i) &#123;</span><br><span class="line">        Log[i] = Log[i &gt;&gt; <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Bin[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Log[cntD]; ++i) &#123;</span><br><span class="line">        Bin[i] = Bin[i - <span class="number">1</span>] &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= Log[cntD]; ++j) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i + Bin[j - <span class="number">1</span>] - <span class="number">1</span> &lt;= cntD; ++i) &#123;</span><br><span class="line">            Dep[i][j] = <span class="built_in">std</span>::min(Dep[i][j - <span class="number">1</span>], Dep[i + Bin[j - <span class="number">1</span>]][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::fill(Status + <span class="number">1</span>, Status + N + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> cnt = N;</span><br><span class="line">    M = gt();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= M; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ga() == <span class="string">'G'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cnt &lt; <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt - <span class="number">1</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans.top());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> u = gt();</span><br><span class="line">            <span class="keyword">if</span> (Status[u]) &#123;</span><br><span class="line">                --cnt;</span><br><span class="line">                turnOff(u);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++cnt;</span><br><span class="line">                turnOn(u);</span><br><span class="line">            &#125;</span><br><span class="line">            Status[u] ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无权树上有黑点和白点共 $N$ 个，开始均为白点。有 $M$个操作，分为两种：取反点 $x$的颜色或查询树上白点对的最大距离。&lt;/p&gt;
&lt;p&gt;$N\leq 100000, M\leq 500000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="欧拉序" scheme="https://skqliao.github.io/tags/%E6%AC%A7%E6%8B%89%E5%BA%8F/"/>
    
      <category term="ST表" scheme="https://skqliao.github.io/tags/ST%E8%A1%A8/"/>
    
      <category term="动态点分治" scheme="https://skqliao.github.io/tags/%E5%8A%A8%E6%80%81%E7%82%B9%E5%88%86%E6%B2%BB/"/>
    
      <category term="堆" scheme="https://skqliao.github.io/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>「APIO 2010」BZOJ 1911 特别行动队</title>
    <link href="https://skqliao.github.io/BZOJ-1911/"/>
    <id>https://skqliao.github.io/BZOJ-1911/</id>
    <published>2019-02-24T02:04:43.000Z</published>
    <updated>2019-03-08T03:33:18.197Z</updated>
    
    <content type="html"><![CDATA[<p>将序列 $A[1 \cdots n]$划分成若干个不相交区间，区间 $[l,r]$ 的权值为 $a\cdot x^2+b\cdot x+c$，其中 $x=\sum\limits_{i=l}^{r}{A[i]}$。求最大权值和。</p><p>$n\leq 1000000,-5\leq a\leq -1, |b|,|c|\leq 10000000,A[i]\leq 100$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>令 $S_i=\sum\limits_{j=1}^{i}{A_i}$，$F_i$ 表示将前 $i$ 个数划分成若干区间的最大权值和。</p><p>则 $F_i=\min\limits_{1\leq j &lt; i}{(F_j+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c)}$。</p><p>考虑 $i$ 从两个决策点 $j,k$ 转移，若 $j$ 更优，则需要满足：</p><p>$F_j-F_k+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c-(a\cdot (S_i-S_k)^2+b\cdot (S_i-S_k) + c) &gt; 0$</p><p>移项整理可得 $\frac{F_j-F_k+a(S_j^2-S_k^2)}{S_j-S_k} &lt; 2aS_i+b$。</p><p>维护单调队列，每次取队首更新当前答案，维护队列中斜率单调递减，且不超过 $2aS_i+b$。</p><p>复杂度 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: APIO 2010</span></span><br><span class="line"><span class="comment"> * @Problem: 1911: [Apio2010]特别行动队</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1911</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-23 17:04:48</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-24 10:03:05</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a, b, c;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> S[MAXN], F[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">sqr</span>(<span class="title">T</span> <span class="title">x</span>) &#123;</span></span><br><span class="line">    <span class="keyword">return</span> x * x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">slop</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)(F[x] - F[y] + a * (S[x] + S[y]) * (S[x] - S[y])) / (S[x] - S[y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Que[MAXN], qh, qt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld%lld%lld"</span>, &amp;N, &amp;a, &amp;b, &amp;c);</span><br><span class="line">    Que[qt] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;x);</span><br><span class="line">        S[i] = S[i - <span class="number">1</span>] + x;</span><br><span class="line">        <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slop(Que[qh], Que[qh + <span class="number">1</span>]) &gt;= <span class="number">2</span> * a * S[i] + b) ++qh;</span><br><span class="line">        <span class="keyword">int</span> j = Que[qh];</span><br><span class="line">        F[i] = F[j] + a * sqr(S[i] - S[j]) + b * (S[i] - S[j]) + c;</span><br><span class="line">        <span class="keyword">while</span> (qt &gt; qh &amp;&amp; slop(Que[qt], i) &gt;= slop(Que[qt - <span class="number">1</span>], Que[qt])) --qt;</span><br><span class="line">        Que[++qt] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, F[N]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将序列 $A[1 \cdots n]$划分成若干个不相交区间，区间 $[l,r]$ 的权值为 $a\cdot x^2+b\cdot x+c$，其中 $x=\sum\limits_{i=l}^{r}{A[i]}$。求最大权值和。&lt;/p&gt;
&lt;p&gt;$n\leq 1000000,-5\leq a\leq -1, |b|,|c|\leq 10000000,A[i]\leq 100$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="斜率优化" scheme="https://skqliao.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="DP" scheme="https://skqliao.github.io/tags/DP/"/>
    
      <category term="单调队列" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>「CEOI 2004」JZOJ 1131 锯木场选址</title>
    <link href="https://skqliao.github.io/JZOJ-1131/"/>
    <id>https://skqliao.github.io/JZOJ-1131/</id>
    <published>2019-02-23T08:37:44.000Z</published>
    <updated>2019-03-08T03:32:40.170Z</updated>
    
    <content type="html"><![CDATA[<p>数轴从左到右有 $n + 1$ 点，每个点有 $A_i$ 个人，相邻两点距离为 $B_i$。一个人移动 $1$ 的花费为 $1$。第 $n + 1$ 个点为集合点，现可以在前 $n$ 个点中再选择两个点作为集合点，如此一共有三个集合点。所有人必须向右移动到某一个集合点中，求所有人移动花费总和的最小值。</p><p>$n\leq 20000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>记 $D(i)$ 为点 $1$ 和点 $i$ 间的距离，$G(i,j)$ 为将点 $[i,j]$ 的人移动到 $j$ 的花费，则 $G(x,y)=\sum\limits_{x\leq i\leq y}{(D(y)-D(i))\cdot A(i)}$。</p><p>若当前选择点 $i$ 为第二个集合点，点 $j(1\leq j &lt; i)$ 为第一个集合点，则总花费为 $\min\limits_{1\leq i &lt; j}(G(1,j)+G(j+1,i)+G(i+1,n+1))$。</p><p>设 $X(i)=\sum\limits_{j=1}^{i}{A(j)\cdot D(j)}$，$Y(i)=\sum\limits_{j=1}^{i}{A(j)}$，则 $G(x,y)=D(y)(Y(y)-Y(x-1))-X(y)+X(x-1)$。</p><p>若从点 $j$ 转移比从点 $k(1\leq j &lt; k &lt; i)$ 转移更优，则需要满足：$G(1,j)+G(j+1,i)+G(i+1,n+1) &lt; G(1,k)+G(k+1,i)+G(i+1,n+1)$，移项整理可得 $\frac{D(j)Y(j)-D(k)Y(k)}{Y(j)-Y(k)} &gt; D(i)$。</p><p>$D(i)$ 单调递增，左式与 $i$ 无关，称之为 $j,k$ 点间的斜率。因此可以斜率优化DP。</p><p>维护单调队列，求当前点 $i$ 时，队内元素 $q_1 &lt; q_2 &lt; \cdots q_m$ 满足相邻两点 $q_i,q_j$ 的斜率大于 $D(i)$，且斜率单调递增。</p><p>复杂度 $O(n)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: CEOI 2004</span></span><br><span class="line"><span class="comment"> * @Problem: 1131. 【CEOI2004】锯木场选址Two(踢我)</span></span><br><span class="line"><span class="comment"> * @Url: https://jzoj.net/senior/#main/show/1131</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-23 11:47:58</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-23 16:36:42</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">20000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], B[MAXN], D[MAXN], X[MAXN], Y[MAXN];</span><br><span class="line"><span class="keyword">int</span> Que[MAXN], qh, qt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">cost</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> D[r] * (Y[r] - Y[l - <span class="number">1</span>]) - (X[r] - X[l - <span class="number">1</span>]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (<span class="keyword">double</span>)(D[x] * Y[x] - D[y] * Y[y]) / (Y[x] - Y[y]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;A[i], &amp;B[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        Y[i] = Y[i - <span class="number">1</span>] + A[i];</span><br><span class="line">        D[i] = D[i - <span class="number">1</span>] + B[i - <span class="number">1</span>];</span><br><span class="line">        X[i] = X[i - <span class="number">1</span>] + D[i] * A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    Que[qt++] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = LLONG_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (qt - qh &gt; <span class="number">1</span> &amp;&amp; cal(Que[qh], Que[qh + <span class="number">1</span>]) &lt;= D[i]) ++qh;</span><br><span class="line">        ans = <span class="built_in">std</span>::min(ans, cost(<span class="number">1</span>, Que[qh]) + cost(Que[qh] + <span class="number">1</span>, i) + cost(i + <span class="number">1</span>, N + <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span> (qt - qh &gt; <span class="number">1</span> &amp;&amp; cal(Que[qt - <span class="number">2</span>], Que[qt - <span class="number">1</span>]) &gt;= cal(Que[qt - <span class="number">1</span>], i)) --qt;</span><br><span class="line">        Que[qt++] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数轴从左到右有 $n + 1$ 点，每个点有 $A_i$ 个人，相邻两点距离为 $B_i$。一个人移动 $1$ 的花费为 $1$。第 $n + 1$ 个点为集合点，现可以在前 $n$ 个点中再选择两个点作为集合点，如此一共有三个集合点。所有人必须向右移动到某一个集合点中，求所有人移动花费总和的最小值。&lt;/p&gt;
&lt;p&gt;$n\leq 20000$&lt;/p&gt;
    
    </summary>
    
      <category term="JZOJ" scheme="https://skqliao.github.io/categories/JZOJ/"/>
    
    
      <category term="斜率优化" scheme="https://skqliao.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="DP" scheme="https://skqliao.github.io/tags/DP/"/>
    
      <category term="单调队列" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>「HNOI 2008」BZOJ 1010 玩具装箱toy</title>
    <link href="https://skqliao.github.io/BZOJ-1010/"/>
    <id>https://skqliao.github.io/BZOJ-1010/</id>
    <published>2019-02-23T03:14:20.000Z</published>
    <updated>2019-03-08T07:38:53.222Z</updated>
    
    <content type="html"><![CDATA[<p>用若干个区间覆盖 $n$ 个数 $A[1 \cdots n]$，区间 $[l,r]$ 的花费为 $(\sum\limits_{i=l}^{r}{A[i]}+r-l-L)^2$。求总花费的最小值。</p><p>$n\leq 50000,A_i,L &gt; 0$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>记 $F[i]$ 为覆盖前 $i$ 个数的最小花费，$S[i]=\sum\limits_{j=1}^{i}{A[j]}$ 。即可得到一个simple的DP转移方程，$F[i]=\min\limits_{1\leq j &lt; i}(F[j]+(S[i]-S[j]+i-j-1-L)^2)$。</p><p>但是复杂度太高，为 $O(n^2)$，需要优化。</p><p>考虑两个决策点 $j,k(j &lt; k)$，什么时候 $j$ 会更优。</p><p>即满足 $F[j]+(S[i]-S[j]+i-j-1-L)^2-F[k]+(S[i]-S[k]+i-k-1-L)^2 &gt; 0$。</p><p>设 $S’[i]=S[i]+i-1$，整理可得：$F[j]-F[k]-2(S’[i]-L-1)(S’[j]-S’[k])+S’^2[j]-S’^2[k]&gt;0$。</p><p>移项得 $\frac{F[i]-F[k]+(S’[j]+S’[k]+2L+2)(S’[j]-S’[k])}{2(s’[j]-s’[k])}&gt;S’[i]$。</p><p>发现左式与 $i$ 无关，且 $S’[i]$ 单调不减。这是一个斜率优化的题。</p><p>设左式为 $j,k$ 间的斜率，维护单调队列，满足相邻两点间的斜率单调递增，且大于 $S’[i]$。每次取队首决策点更新当前 $F[i]$，并将 $i$ 插入队尾。</p><p>复杂度 $O(n))$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: HNOI 2008</span></span><br><span class="line"><span class="comment"> * @Problem: 1010: [HNOI2008]玩具装箱toy</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1010</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-23 09:47:42</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-23 11:03:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, L;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> A[MAXN], F[MAXN], S[MAXN];</span><br><span class="line"><span class="keyword">int</span> Que[MAXN], qh, qt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">int</span> j, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (F[j] - F[k] + (S[j] + S[k] + <span class="number">2</span> * L + <span class="number">2</span>) * (S[j] - S[k])) / <span class="number">2</span> / (S[j] - S[k]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;L);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;A[i]);</span><br><span class="line">&#125;</span><br><span class="line">Que[qt++] = <span class="number">0</span>;</span><br><span class="line">S[<span class="number">0</span>] = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">    S[i] = S[i - <span class="number">1</span>] + A[i] + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (qt - qh &gt; <span class="number">1</span> &amp;&amp; cal(Que[qh], Que[qh + <span class="number">1</span>]) &lt;= S[i]) &#123;</span><br><span class="line">        ++qh;</span><br><span class="line">    &#125;</span><br><span class="line">    F[i] = F[Que[qh]] + (S[i] - S[Que[qh]] - L - <span class="number">1</span>) * (S[i] - S[Que[qh]] - L - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (qt - qh &gt; <span class="number">1</span> &amp;&amp; cal(Que[qt - <span class="number">2</span>], Que[qt - <span class="number">1</span>]) &gt;= cal(Que[qt - <span class="number">1</span>], i)) &#123;</span><br><span class="line">        --qt;</span><br><span class="line">    &#125;</span><br><span class="line">    Que[qt++] = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, F[N]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用若干个区间覆盖 $n$ 个数 $A[1 \cdots n]$，区间 $[l,r]$ 的花费为 $(\sum\limits_{i=l}^{r}{A[i]}+r-l-L)^2$。求总花费的最小值。&lt;/p&gt;
&lt;p&gt;$n\leq 50000,A_i,L &amp;gt; 0$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="斜率优化" scheme="https://skqliao.github.io/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96/"/>
    
      <category term="DP" scheme="https://skqliao.github.io/tags/DP/"/>
    
      <category term="单调队列" scheme="https://skqliao.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>「USACO2007 Mar」BZOJ 1639 Monthly Expense 月度开支</title>
    <link href="https://skqliao.github.io/BZOJ-1639/"/>
    <id>https://skqliao.github.io/BZOJ-1639/</id>
    <published>2019-02-22T09:20:20.000Z</published>
    <updated>2019-03-08T03:33:12.909Z</updated>
    
    <content type="html"><![CDATA[<p>将 $A[1 \cdots N]$ 划分成 $M$ 个区间，使得各区间和的最大值最小。</p><p>$N,M\leq 100000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>二分答案。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: USACO2007 Mar</span></span><br><span class="line"><span class="comment"> * @Problem: 1639: [Usaco2007 Mar]Monthly Expense 月度开支</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1639</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-22 17:05:58</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-22 17:19:34</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">100000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = M;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum + A[i] &gt; x) &#123;</span><br><span class="line">            sum = <span class="number">0</span>;</span><br><span class="line">            --left;</span><br><span class="line">        &#125;</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> mx = <span class="number">0</span>, sum = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i]);</span><br><span class="line">        sum += A[i];</span><br><span class="line">        mx = <span class="built_in">std</span>::max(mx, (<span class="keyword">long</span> <span class="keyword">long</span>)A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = mx, r = sum;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(m)) &#123;</span><br><span class="line">            r = m - <span class="number">1</span>;</span><br><span class="line">            ans = m;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将 $A[1 \cdots N]$ 划分成 $M$ 个区间，使得各区间和的最大值最小。&lt;/p&gt;
&lt;p&gt;$N,M\leq 100000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="二分答案" scheme="https://skqliao.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>「CQOI 2010」BZOJ 1816 扑克牌</title>
    <link href="https://skqliao.github.io/BZOJ-1816/"/>
    <id>https://skqliao.github.io/BZOJ-1816/</id>
    <published>2019-02-22T08:48:10.000Z</published>
    <updated>2019-03-08T03:33:15.287Z</updated>
    
    <content type="html"><![CDATA[<p>有 $N$ 种牌，各有 $A_i$ 张。还有一类特殊的牌，有 $M$ 张。每副牌由 $N$ 张不同的牌组成，求最多能凑出多少副牌。</p><p>$N\leq 50,M,A_i\leq 5000000000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>答案显然具有单调性，因此可以二分答案将求最值问题转为判定可行性问题。</p><p>假设当前判定是否能凑出 $x$ 副牌。对于 $A_i\geq x$ 的牌，显然每副牌中都能放一张；对于 $A_i &lt; x$ 的牌，需要用特殊的牌补。若特殊的牌不够或者在一副牌中出现两次，则判定失败。</p><p>也就是说这些牌需要至少凑够前 $N-1$ 个位置，用特殊的牌补最后一张，即需要满足 $\sum{min(x,A_i)} &lt; min(M,x)$ 。</p><p>复杂度 $O(M\log{\sum{A_i}})$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: CQOI 2010</span></span><br><span class="line"><span class="comment"> * @Problem: 1816: [Cqoi2010]扑克牌</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1816</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-22 16:23:14</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-22 16:55:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">50</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> M, A[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        tot += <span class="built_in">std</span>::min(x, A[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> N * x - tot &lt;= <span class="built_in">std</span>::min(x, M);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%lld"</span>, &amp;N, &amp;M);</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> sum = M;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;A[i]);</span><br><span class="line">        sum += A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l = <span class="number">0</span>, r = sum / N;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">long</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(m)) &#123;</span><br><span class="line">            ans = m;</span><br><span class="line">            l = m + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">            r = m - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有 $N$ 种牌，各有 $A_i$ 张。还有一类特殊的牌，有 $M$ 张。每副牌由 $N$ 张不同的牌组成，求最多能凑出多少副牌。&lt;/p&gt;
&lt;p&gt;$N\leq 50,M,A_i\leq 5000000000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="二分答案" scheme="https://skqliao.github.io/tags/%E4%BA%8C%E5%88%86%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>「USACO2005 Dec」BZOJ 1671 Knights of Ni 骑士</title>
    <link href="https://skqliao.github.io/BZOJ-1671/"/>
    <id>https://skqliao.github.io/BZOJ-1671/</id>
    <published>2019-02-22T07:53:49.000Z</published>
    <updated>2019-03-08T03:33:13.369Z</updated>
    
    <content type="html"><![CDATA[<p>在 $N\times M$ 的网格图中，初始位于 $(x,y)$。每个点有属性 $1-4$，若属性为 $1$ 则不可经过。要求先走到一个属性为 $4$ 的格子，再走到一个属性为 $3$ 的格子，要求在走到 $4$ 之前不能经过 $3$。求最少步数。</p><p>$N,M\leq 1000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>做两次BFS，第一次初始为 $(x,y)$，求出到每个 $4$ 的最小步数，再以这些点为起点求出总步数。</p><p>复杂度 $O(NM)$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: USACO2005 Dec</span></span><br><span class="line"><span class="comment"> * @Problem: 1671: [Usaco2005 Dec]Knights of Ni 骑士</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1671</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-22 15:35:46</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-22 16:14:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicx[] = &#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Dicy[] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N, M;</span><br><span class="line"><span class="keyword">int</span> A[MAXN][MAXN];</span><br><span class="line"><span class="keyword">int</span> Step[MAXN][MAXN];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; Que;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> sx, <span class="keyword">int</span> sy)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(Step, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> Step);</span><br><span class="line">    Step[sx][sy] = <span class="number">0</span>;</span><br><span class="line">    Que.push(<span class="built_in">std</span>::make_pair(sx, sy));</span><br><span class="line">    <span class="keyword">while</span> (!Que.empty()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a = Que.front();</span><br><span class="line">        Que.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = a.first + Dicx[i];</span><br><span class="line">            <span class="keyword">int</span> y = a.second + Dicy[i];</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; N || y &gt; M) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (A[x][y] != <span class="number">1</span> &amp;&amp; A[x][y] != <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Step[x][y] &gt; Step[a.first][a.second] + <span class="number">1</span>) &#123;</span><br><span class="line">                    Step[x][y] = Step[a.first][a.second] + <span class="number">1</span>;</span><br><span class="line">                    Que.push(<span class="built_in">std</span>::make_pair(x, y));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] == <span class="number">4</span>) &#123;</span><br><span class="line">                Que.push(<span class="built_in">std</span>::make_pair(i, j));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Step[i][j] = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!Que.empty()) &#123;</span><br><span class="line">        <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a = Que.front();</span><br><span class="line">        Que.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = a.first + Dicx[i];</span><br><span class="line">            <span class="keyword">int</span> y = a.second + Dicy[i];</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">1</span> || y &lt; <span class="number">1</span> || x &gt; N || y &gt; M) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (A[x][y] != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Step[x][y] &gt; Step[a.first][a.second] + <span class="number">1</span>) &#123;</span><br><span class="line">                    Step[x][y] = Step[a.first][a.second] + <span class="number">1</span>;</span><br><span class="line">                    Que.push(<span class="built_in">std</span>::make_pair(x, y));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans = INT_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] == <span class="number">3</span>) ans = <span class="built_in">std</span>::min(ans, Step[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sx = <span class="number">0</span>, sy = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;M, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= M; ++j) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;A[i][j]);</span><br><span class="line">            <span class="keyword">if</span> (A[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">                sx = i, sy = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, bfs(sx, sy));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 $N\times M$ 的网格图中，初始位于 $(x,y)$。每个点有属性 $1-4$，若属性为 $1$ 则不可经过。要求先走到一个属性为 $4$ 的格子，再走到一个属性为 $3$ 的格子，要求在走到 $4$ 之前不能经过 $3$。求最少步数。&lt;/p&gt;
&lt;p&gt;$N,M\leq 1000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="BFS" scheme="https://skqliao.github.io/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>「TJOI 2013」BZOJ 3170 松鼠聚会</title>
    <link href="https://skqliao.github.io/BZOJ-3170/"/>
    <id>https://skqliao.github.io/BZOJ-3170/</id>
    <published>2019-02-22T07:18:47.000Z</published>
    <updated>2019-03-08T03:33:30.625Z</updated>
    
    <content type="html"><![CDATA[<p>坐标系中有 $n$ 个点 $(x_i,y_i)$，选择一点 $(x_j,y_j)$，使得所有点到该点的切比雪夫距离之和最小。</p><p>$n\leq 10^5$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>$dis(i,j)=max(|x_i-x_j|,|y_i-y_j|)$。</p><p>设 $X_i=x_i-y_i,Y_i=x_i+y_i$，则 $dis(i,j)=\frac{|X_i-X_j|+|Y_i-Y_j|}{2}$，因此 $x,y$ 两部分可以分别计算。</p><p>分别按 $x,y$ 排序，做前缀和，则 $\sum\limits_{i=1}^{n}|{X_i-X_j}|=(j-1)\cdot X_j-sumx_{j-1}+sum_n-sum_j-(n-j)\cdot X_j$。即可 $O(n)$ 计算出最小距离。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: TJOI 2013</span></span><br><span class="line"><span class="comment"> * @Problem: 3170: [Tjoi2013]松鼠聚会</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3170</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-22 14:13:36</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-22 15:06:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1e5</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x, y;</span><br><span class="line">&#125; A[MAXN];</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> Node&amp; x, <span class="keyword">const</span> Node&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.x &lt; y.x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> Node&amp; x, <span class="keyword">const</span> Node&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.y &lt; y.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Sum[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> X[MAXN], Y[MAXN];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        A[i] = (Node) &#123;i, x - y, x + y&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(A + <span class="number">1</span>, A + N + <span class="number">1</span>, cmp1);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Sum[i] = Sum[i - <span class="number">1</span>] + A[i].x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        X[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].x;</span><br><span class="line">        X[A[i].id] += (i - <span class="number">1</span>) * A[i].x - Sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(A + <span class="number">1</span>, A + N + <span class="number">1</span>, cmp2);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Sum[i] = Sum[i - <span class="number">1</span>] + A[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        Y[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].y;</span><br><span class="line">        Y[A[i].id] += (i - <span class="number">1</span>) * A[i].y - Sum[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans = LLONG_MAX;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        ans = <span class="built_in">std</span>::min(ans, X[i] + Y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;坐标系中有 $n$ 个点 $(x_i,y_i)$，选择一点 $(x_j,y_j)$，使得所有点到该点的切比雪夫距离之和最小。&lt;/p&gt;
&lt;p&gt;$n\leq 10^5$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="前缀和" scheme="https://skqliao.github.io/tags/%E5%89%8D%E7%BC%80%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>「ZJOI 2006」BZOJ 1862 GameZ游戏排名系统</title>
    <link href="https://skqliao.github.io/BZOJ-1862/"/>
    <id>https://skqliao.github.io/BZOJ-1862/</id>
    <published>2019-02-22T05:59:16.000Z</published>
    <updated>2019-03-08T03:33:17.206Z</updated>
    
    <content type="html"><![CDATA[<p>有 $n$ 个操作：</p><ul><li>更新<code>name</code>的得分为score（删除以前的得分）</li><li>查询<code>name</code>的排名（得分相同按照时间先后排名）</li><li>查询得分第 $[k,k+10]$ 名的人的名字（如果没有 $k+10$ 个人就输出到最后一名为止）</li></ul><p>$n\leq 250000$</p><a id="more"></a><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>很明显的平衡树的板子，只是处理起来麻烦一些。</p><p>按照得分为第一关键字，时间为第二关键字维护平衡树，用一个map映射名字对应的得分。</p><p>平衡树需支持插入，删除，查询第 $k$ 大，查询名次，查询前驱的操作。</p><p>复杂度 $O(n\log{n})$。</p><h2 id="参考代码"><a href="#参考代码" class="headerlink" title="参考代码"></a>参考代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Author: Skqliao</span></span><br><span class="line"><span class="comment"> * @Source: ZJOJ 2006</span></span><br><span class="line"><span class="comment"> * @Problem: 1862: [Zjoi2006]GameZ游戏排名系统</span></span><br><span class="line"><span class="comment"> * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1862</span></span><br><span class="line"><span class="comment"> * @Date: 2019-02-21 16:26:15</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2019-02-22 13:59:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/extc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">250000</span> + <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Treap</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> key, key2, fix;</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    Treap* ch[<span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (key == x) &#123;</span><br><span class="line">            <span class="keyword">return</span> y == key2 ? <span class="number">-1</span> : y &lt; key2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> x &gt; key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        sz = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">0</span>]) sz += ch[<span class="number">0</span>]-&gt;sz;</span><br><span class="line">        <span class="keyword">if</span> (ch[<span class="number">1</span>]) sz += ch[<span class="number">1</span>]-&gt;sz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; *R(<span class="literal">NULL</span>), Pool[MAXN];</span><br><span class="line"><span class="keyword">int</span> cntP;</span><br><span class="line"></span><br><span class="line"><span class="function">Treap* <span class="title">newTreap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    Pool[++cntP] = (Treap) &#123;s, x, t, rand(), <span class="number">1</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>&#125;;</span><br><span class="line">    <span class="keyword">return</span> Pool + cntP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(Treap*&amp; t, <span class="keyword">int</span> d)</span> </span>&#123;</span><br><span class="line">    Treap* k = t-&gt;ch[d ^ <span class="number">1</span>];</span><br><span class="line">    t-&gt;ch[d ^ <span class="number">1</span>] = k-&gt;ch[d];</span><br><span class="line">    k-&gt;ch[d] = t;</span><br><span class="line">    t-&gt;pushUp();</span><br><span class="line">    k-&gt;pushUp();</span><br><span class="line">    t = k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(Treap*&amp; t, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) &#123;</span><br><span class="line">        t = newTreap(x, y);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> d = t-&gt;cmp(x, y);</span><br><span class="line">    ++t-&gt;sz;</span><br><span class="line">    insert(t-&gt;ch[d], x, y);</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123;</span><br><span class="line">        rotate(t, d ^ <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(Treap*&amp; t, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span>;</span><br><span class="line">    --t-&gt;sz;</span><br><span class="line">    <span class="keyword">int</span> d = t-&gt;cmp(x, y);</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!t-&gt;ch[<span class="number">0</span>]) &#123;</span><br><span class="line">            t = t-&gt;ch[<span class="number">1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!t-&gt;ch[<span class="number">1</span>]) &#123;</span><br><span class="line">            t = t-&gt;ch[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> e = t-&gt;ch[<span class="number">0</span>]-&gt;fix &gt; t-&gt;ch[<span class="number">1</span>]-&gt;fix;</span><br><span class="line">            rotate(t, e);</span><br><span class="line">            erase(t-&gt;ch[e], x, y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        erase(t-&gt;ch[d], x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t) &#123;</span><br><span class="line">        t-&gt;pushUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">queryRank</span><span class="params">(Treap*&amp; t, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = t-&gt;ch[<span class="number">1</span>] ? t-&gt;ch[<span class="number">1</span>]-&gt;sz : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> d = t-&gt;cmp(x, y);</span><br><span class="line">    <span class="keyword">if</span> (d == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (d == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num + <span class="number">1</span> + queryRank(t-&gt;ch[<span class="number">0</span>], x, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queryRank(t-&gt;ch[<span class="number">1</span>], x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; queryKth(Treap*&amp; t, <span class="keyword">int</span> x) &#123;</span><br><span class="line">    <span class="keyword">int</span> num = t-&gt;ch[<span class="number">1</span>] ? t-&gt;ch[<span class="number">1</span>]-&gt;sz : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == num + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">std</span>::make_pair(t-&gt;key, t-&gt;key2);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= num) &#123;</span><br><span class="line">        <span class="keyword">return</span> queryKth(t-&gt;ch[<span class="number">1</span>], x);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> queryKth(t-&gt;ch[<span class="number">0</span>], x - num - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mn, mn2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queryPre</span><span class="params">(Treap*&amp; t, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!t) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> d = t-&gt;cmp(x, y);</span><br><span class="line">    <span class="keyword">if</span> (d != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (t-&gt;key &gt; mn) &#123;</span><br><span class="line">            mn = t-&gt;key;</span><br><span class="line">            mn2 = t-&gt;key2;</span><br><span class="line">            s = t-&gt;name;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t-&gt;key == mn &amp;&amp; t-&gt;key2 &lt; mn2) &#123;</span><br><span class="line">            mn2 = t-&gt;key2;</span><br><span class="line">            s = t-&gt;name;</span><br><span class="line">        &#125;</span><br><span class="line">        queryPre(t-&gt;ch[<span class="number">1</span>], x, y);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        queryPre(t-&gt;ch[<span class="number">0</span>], x, y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__gnu_pbds::gp_hash_table&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, <span class="keyword">int</span>&gt; Map, Map2;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="comment">//srand((unsigned long long)new char);</span></span><br><span class="line">    <span class="built_in">std</span>::ios_base::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    s = <span class="string">"skqliao"</span>;</span><br><span class="line">    insert(R, -INT_MAX, INT_MAX);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; s;</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'+'</span>) &#123;</span><br><span class="line">            s = s.substr(<span class="number">1</span>);</span><br><span class="line">            <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">            <span class="keyword">if</span> (Map.find(s) != Map.end()) &#123;</span><br><span class="line">                erase(R, Map[s], Map2[s]);</span><br><span class="line">            &#125;</span><br><span class="line">            Map[s] = x;</span><br><span class="line">            Map2[s] = i;</span><br><span class="line">            insert(R, x, i);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == <span class="string">'?'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">isdigit</span>(s[<span class="number">1</span>])) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">1</span>; i &lt; s.size(); ++i) &#123;</span><br><span class="line">                    x = x * <span class="number">10</span> + s[i] - <span class="string">'0'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; a = queryKth(R, x);</span><br><span class="line">                x = a.first;</span><br><span class="line">                <span class="keyword">int</span> y = a.second;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">                    mn = -INT_MAX;</span><br><span class="line">                    mn2 = INT_MAX;</span><br><span class="line">                    queryPre(R, x, y);</span><br><span class="line">                    <span class="keyword">if</span> (mn == -INT_MAX) <span class="keyword">break</span>;</span><br><span class="line">                    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">                    x = mn, y = mn2 + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; queryRank(R, Map[s.substr(<span class="number">1</span>)], Map2[s.substr(<span class="number">1</span>)]) &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有 $n$ 个操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更新&lt;code&gt;name&lt;/code&gt;的得分为score（删除以前的得分）&lt;/li&gt;
&lt;li&gt;查询&lt;code&gt;name&lt;/code&gt;的排名（得分相同按照时间先后排名）&lt;/li&gt;
&lt;li&gt;查询得分第 $[k,k+10]$ 名的人的名字（如果没有 $k+10$ 个人就输出到最后一名为止）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;$n\leq 250000$&lt;/p&gt;
    
    </summary>
    
      <category term="BZOJ" scheme="https://skqliao.github.io/categories/BZOJ/"/>
    
    
      <category term="平衡树" scheme="https://skqliao.github.io/tags/%E5%B9%B3%E8%A1%A1%E6%A0%91/"/>
    
  </entry>
  
</feed>
