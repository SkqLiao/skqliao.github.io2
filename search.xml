<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[「九省联考 2018」BZOJ 5248 一双木棋]]></title>
    <url>%2FBZOJ-5248%2F</url>
    <content type="text"><![CDATA[在 N\times M 的网格图中，两个人轮流放棋子。一个格能放棋子当且仅当这个格子没有放棋子且它的左边和上边的所有格子都放了棋子。菲菲先手，下子获得收益 A_{i,j} ，牛牛下子获得收益 B_{i,j} ，两方都希望最终己方收益与对方收益的差最大。两方都采用最优策略且知晓对方也采用最优策略。求最终菲菲与牛牛收益差的最大值。 N,M\leq 10 分析 根据规则，合法的局面一定满足每行的棋子是从最左边连续的一段，且从上往下个数单调不递增。那么其轮廓即可代表局面的状态，即用 M+1 进制压缩每行的棋子数。 由于两方均采用最优策略，因此只能从最终局面向初始局面推。采用Min-Max搜索，用一个map存储局面的收益差。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include &lt;bits/stdc++.h&gt;const int MAXN = 10 + 5;int N, M;int A[MAXN][MAXN], B[MAXN][MAXN];int Num[MAXN];std::map&lt;long long, int&gt; F;long long zip() &#123; long long ans = 0; for (int i = 1; i &lt;= N; ++i) &#123; ans = ans * (M + 1) + Num[i]; &#125; return ans;&#125;int unzip(long long x) &#123; int ans = 0; for (int i = N; i &gt; 0; --i) &#123; Num[i] = x % (M + 1); x /= (M + 1); ans += Num[i]; &#125; return ans &amp; 1;&#125;int dfs(long long x) &#123; if (F.find(x) != F.end()) return F[x]; int opt = unzip(x); int ans = opt ? INT_MAX : INT_MIN; for (int i = 1; i &lt;= N; ++i) &#123; if ((i == 1 || Num[i] &lt; Num[i - 1]) &amp;&amp; Num[i] &lt; M) &#123; ++Num[i]; if (opt) ans = std::min(ans, dfs(zip()) - B[i][Num[i]]); else ans = std::max(ans, dfs(zip()) + A[i][Num[i]]); --Num[i]; &#125; &#125; return F[x] = ans;&#125;int main() &#123;#ifndef ONLINE_JUDGE freopen("test.in", "r", stdin); freopen("test.out", "w", stdout);#endif scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; Num[i] = M; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;B[i][j]); &#125; &#125; F[zip()] = 0; dfs(0); printf("%d\n", F[0]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>哈希</tag>
        <tag>Min-Max搜索</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[克鲁斯卡尔重构树学习笔记]]></title>
    <url>%2Fkruskal-tree%2F</url>
    <content type="text"><![CDATA[所谓克鲁斯卡尔重构树就是通过克鲁斯卡尔算法构造的树。通常用于求无向图中条件为满足两点间最长边的距离不超过 k 的一些询问。 构造方法 在进行克鲁斯卡尔算法的过程中，每次新建一个点作为合并的两个联通块代表节点的父亲节点，权值为该边长度。 复杂度 O(M\log{M}) 。 性质 克鲁斯卡尔是一棵二叉树，具体而言是一个堆 两点间距离的最大值为LCA的权值 例题 BZOJ 5415: [Noi2018]归程 BZOJ 3732: Network BZOJ 3545: [ONTAK2010]Peaks]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>克鲁斯卡尔重构树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「NOI 2018」BZOJ 5415 归程]]></title>
    <url>%2FBZOJ-5415%2F</url>
    <content type="text"><![CDATA[在无向图 G 中，每条边有距离 D_i 和海拔 H_i 。有 Q 个询问，每次从节点 x 出发，提供一辆新车，可以行驶在任意海拔大于 h 的边上。若要经过海拔不超过 h 的边，只能弃车步行，且之后该车子不能再使用。他要到达节点 1 ，求步行的最短距离。 强制在线。 N\leq 2\times 10^5,M,Q\leq 4\times 10^5 分析 构建克鲁斯卡尔重构树，那么车子可以行驶到满足权值大于 h 的 x 的最远祖先的叶子节点中。 预处理每个点到 1 号节点的最短路，那么答案为这些叶子节点距离的最小值。 可以用倍增预处理。 复杂度 O(M\log{M}+(N+Q)\log{N}) 。 温馨提示 十二省联考命题组温馨提醒您： 数据千万条，清空第一条。 多测不清空，爆零两行泪。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include &lt;bits/stdc++.h&gt;#define debug(...) fprintf(stderr, __VA_ARGS__)const int MAXN = 600000 + 5;const int LOG = 20;struct Edge &#123; int u, v, w, a, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;int N, M;int Fa[MAXN][LOG];int W[MAXN];int Ch[MAXN][2];int D[MAXN];int Anc[MAXN];std::priority_queue&lt;std::pair&lt;int, int&gt;, std::vector&lt;std::pair&lt;int, int&gt; &gt;, std::greater&lt;std::pair&lt;int, int&gt; &gt; &gt; Pq;int lstans;int Q, K, S;void init() &#123; while (!Pq.empty()) Pq.pop(); lstans = cntE = 0; memset(H, 0, sizeof H); memset(Fa, 0, sizeof Fa); memset(W, 0, sizeof W); memset(Ch, 0, sizeof Ch); memset(D, 0x3f, sizeof D); memset(Anc, 0, sizeof Anc);&#125;bool cmp(const Edge &amp;a, const Edge &amp;b) &#123; return a.a &gt; b.a; &#125;void addEdge(int u, int v, int l, int a) &#123; E[++cntE] = (Edge)&#123;u, v, l, a, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;v, u, l, a, H[v]&#125;; H[v] = cntE;&#125;void input() &#123; int u, v, l, a; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d%d", &amp;u, &amp;v, &amp;l, &amp;a); addEdge(u, v, l, a); &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]); &#125;void dijkstra(int s) &#123; D[s] = 0; Pq.push(std::make_pair(D[s], s)); while (!Pq.empty()) &#123; while (!Pq.empty() &amp;&amp; D[Pq.top().second] &lt; Pq.top().first) Pq.pop(); if (Pq.empty()) break; int x = Pq.top().second; Pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (D[v] &gt; D[x] + E[i].w) &#123; D[v] = D[x] + E[i].w; Pq.push(std::make_pair(D[v], v)); &#125; &#125; &#125;&#125;void dfs(int x) &#123; if (!x) return; for (int i = 1; i &lt; LOG; ++i) &#123; Fa[x][i] = Fa[Fa[x][i - 1]][i - 1]; if (!Fa[x][i]) break; &#125; dfs(Ch[x][0]); dfs(Ch[x][1]);&#125;void pre() &#123; int n = N; dijkstra(1); for (int i = 1; i &lt;= N; ++i) Anc[i] = i; std::sort(E + 1, E + cntE + 1, cmp); for (int i = 1; i &lt;= cntE; ++i) &#123; int u = findAnc(E[i].u), v = findAnc(E[i].v); if (u != v) &#123; Anc[u] = Anc[v] = ++n; Anc[n] = n; Fa[u][0] = Fa[v][0] = n; W[n] = E[i].a; D[n] = std::min(D[u], D[v]); Ch[n][0] = u; Ch[n][1] = v; &#125; &#125; dfs(n);&#125;void solve() &#123; int x, y; scanf("%d%d%d", &amp;Q, &amp;K, &amp;S); while (Q--) &#123; scanf("%d%d", &amp;x, &amp;y); x = (x + K * lstans - 1) % N + 1; y = (y + K * lstans) % (S + 1); for (int i = LOG - 1; i &gt;= 0; --i) &#123; if (Fa[x][i] &amp;&amp; W[Fa[x][i]] &gt; y) x = Fa[x][i]; &#125; printf("%d\n", lstans = D[x]); &#125;&#125;int main() &#123; int T; scanf("%d", &amp;T); while (T--) &#123; init(); input(); pre(); solve(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>克鲁斯卡尔重构树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ONTAK 2010」BZOJ 3551 Peaks加强版]]></title>
    <url>%2FBZOJ-3551%2F</url>
    <content type="text"><![CDATA[在无向图 G 中，每个点有高度 H_i ，每条边有困难值 W_i 。有 K 个询问，查询从节点 u 出发，经过困难值不超过 W_i 的边能抵达的所有点中，高度第 K 大的点的高度。 强制在线。 N\leq 10^5,M\leq 5\times 10^5,H_i,W_i\leq 10^9 分析 同BZOJ 3545。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include &lt;bits/stdc++.h&gt;#define debug(...) fprintf(stderr, __VA_ARGS__)char gc() &#123; static char In[1 &lt;&lt; 24], *at = In, *en = In; if (at == en) en = (at = In) + fread(In, 1, 1 &lt;&lt; 24, stdin); return at == en ? EOF : *at++;&#125;int gt() &#123; int x = 0, f = 0; char c; for (c = gc(); !isdigit(c); c = gc()) f |= c == '-'; x = c - '0'; for (c = gc(); isdigit(c); c = gc()) x = x * 10 + c - '0'; return f ? -x : x;&#125;const int MAXN = 2e5;const int MAXM = 5e5 + 5;const int LOG = 20;int N, M, Q;struct Edge &#123; int u, v, w;&#125; E[MAXM];int H[MAXN];int W[MAXN];int Anc[MAXN];int Dfn[MAXN], cntD;int Fa[MAXN][LOG];int n;int Sz[MAXN];int Ch[MAXN][2];struct Node &#123; int sum, lc, rc;&#125; T[MAXN * LOG];int Rt[MAXN], cntT;int insert(int pre, int l, int r, int p) &#123; int rt = ++cntT; T[rt] = T[pre]; T[rt].sum++; if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) T[rt].lc = insert(T[pre].lc, l, m, p); else T[rt].rc = insert(T[pre].rc, m + 1, r, p); &#125; return rt;&#125;int query(int u, int v, int l, int r, int k) &#123; if (l == r) return l; int m = (l + r) &gt;&gt; 1; int x = T[T[v].rc].sum - T[T[u].rc].sum; if (k &lt;= x) return query(T[u].rc, T[v].rc, m + 1, r, k); else return query(T[u].lc, T[v].lc, l, m, k - x);&#125;bool cmp(const Edge &amp;x, const Edge &amp;y) &#123; return x.w &lt; y.w; &#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]); &#125;int dfs(int x) &#123; if (!x) return 0; for (int i = 1; i &lt; LOG; ++i) &#123; Fa[x][i] = Fa[Fa[x][i - 1]][i - 1]; if (!Fa[x][i]) break; &#125; Dfn[x] = ++cntD; Rt[cntD] = insert(Rt[cntD - 1], 1, n, H[x]); Sz[x] = 1; Sz[x] += dfs(Ch[x][0]); Sz[x] += dfs(Ch[x][1]); return Sz[x];&#125;void pre() &#123; for (int i = 1; i &lt;= N; ++i) Anc[i] = i; std::sort(E + 1, E + M + 1, cmp); for (int i = 1; i &lt;= M; ++i) &#123; int u = findAnc(E[i].u), v = findAnc(E[i].v); if (u != v) &#123; Anc[u] = Anc[v] = ++N; Anc[N] = N; Fa[u][0] = Fa[v][0] = N; Ch[N][0] = u; Ch[N][1] = v; W[N] = E[i].w; H[N] = 1; &#125; &#125; dfs(N);&#125;int get(int x, int y) &#123; for (int i = LOG - 1; i &gt;= 0; --i) &#123; if (Fa[x][i] &amp;&amp; W[Fa[x][i]] &lt;= y) x = Fa[x][i]; &#125; return x;&#125;std::vector&lt;int&gt; V;int Back[MAXN], H2[MAXN];int getX(int x) &#123; return std::lower_bound(V.begin(), V.end(), x) - V.begin() + 1; &#125;int main() &#123; N = gt(), M = gt(), Q = gt(); int u, x, k; for (int i = 1; i &lt;= N; ++i) &#123; H2[i] = H[i] = gt(); V.push_back(H[i]); &#125; for (int i = 1; i &lt;= M; ++i) &#123; E[i].u = gt(), E[i].v = gt(), E[i].w = gt(); &#125; V.push_back(INT_MIN); std::sort(V.begin(), V.end()); V.erase(std::unique(V.begin(), V.end()), V.end()); for (int i = 1; i &lt;= N; ++i) &#123; H[i] = getX(H[i]); Back[H[i]] = i; &#125; n = V.size(); pre(); int lstans = 0; for (int i = 1; i &lt;= Q; ++i) &#123; u = gt(), x = gt(), k = gt(); if (lstans != -1) u ^= lstans, x ^= lstans, k ^= lstans; u = get(u, x); int ans = query(Rt[Dfn[u] - 1], Rt[Dfn[u] + Sz[u] - 1], 1, n, k); if (ans == 1) lstans = -1; else lstans = H2[Back[ans]]; printf("%d\n", lstans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>克鲁斯卡尔重构树</tag>
        <tag>可持久化线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ONTAK2010」BZOJ 3545 Peaks]]></title>
    <url>%2FBZOJ-3545%2F</url>
    <content type="text"><![CDATA[在无向图 G 中，每个点有高度 H_i ，每条边有困难值 W_i 。有 K 个询问，查询从节点 u 出发，经过困难值不超过 W_i 的边能抵达的所有点中，高度第 K 大的点的高度。 N\leq 10^5,M\leq 5\times 10^5,H_i,W_i\leq 10^9 分析 对 G 构造克鲁斯卡尔重构树，任意两点间边权的最大值为它们的LCA的权值。那么 u 能合法抵达的节点就是满足权值不超过 W_i 的 u 的最远祖先，可以用倍增求。而高度第 K 大的节点就是查询子树权值第 K 大，可以离散化后用可持久化线段树求得。 复杂度 O(M\log{M}+(N+K)\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#include &lt;bits/stdc++.h&gt;#define debug(...) fprintf(stderr, __VA_ARGS__)char gc() &#123; static char In[1 &lt;&lt; 24], *at = In, *en = In; if (at == en) en = (at = In) + fread(In, 1, 1 &lt;&lt; 24, stdin); return at == en ? EOF : *at++;&#125;int gt() &#123; int x = 0, f = 0; char c; for (c = gc(); !isdigit(c); c = gc()) f |= c == '-'; x = c - '0'; for (c = gc(); isdigit(c); c = gc()) x = x * 10 + c - '0'; return f ? -x : x;&#125;const int MAXN = 2e5;const int MAXM = 5e5 + 5;const int LOG = 20;int N, M, Q;struct Edge &#123; int u, v, w;&#125; E[MAXM];int H[MAXN];int W[MAXN];int Anc[MAXN];int Dfn[MAXN], cntD;int Fa[MAXN][LOG];int n;int Sz[MAXN];int Ch[MAXN][2];struct Node &#123; int sum, lc, rc;&#125; T[MAXN * LOG];int Rt[MAXN], cntT;int insert(int pre, int l, int r, int p) &#123; int rt = ++cntT; T[rt] = T[pre]; T[rt].sum++; if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) T[rt].lc = insert(T[pre].lc, l, m, p); else T[rt].rc = insert(T[pre].rc, m + 1, r, p); &#125; return rt;&#125;int query(int u, int v, int l, int r, int k) &#123; if (l == r) return l; int m = (l + r) &gt;&gt; 1; int x = T[T[v].rc].sum - T[T[u].rc].sum; if (k &lt;= x) return query(T[u].rc, T[v].rc, m + 1, r, k); else return query(T[u].lc, T[v].lc, l, m, k - x);&#125;bool cmp(const Edge &amp;x, const Edge &amp;y) &#123; return x.w &lt; y.w; &#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]); &#125;int dfs(int x) &#123; if (!x) return 0; for (int i = 1; i &lt; LOG; ++i) &#123; Fa[x][i] = Fa[Fa[x][i - 1]][i - 1]; if (!Fa[x][i]) break; &#125; Dfn[x] = ++cntD; Rt[cntD] = insert(Rt[cntD - 1], 1, n, H[x]); Sz[x] = 1; Sz[x] += dfs(Ch[x][0]); Sz[x] += dfs(Ch[x][1]); return Sz[x];&#125;void pre() &#123; for (int i = 1; i &lt;= N; ++i) Anc[i] = i; std::sort(E + 1, E + M + 1, cmp); for (int i = 1; i &lt;= M; ++i) &#123; int u = findAnc(E[i].u), v = findAnc(E[i].v); if (u != v) &#123; Anc[u] = Anc[v] = ++N; Anc[N] = N; Fa[u][0] = Fa[v][0] = N; Ch[N][0] = u; Ch[N][1] = v; W[N] = E[i].w; H[N] = 1; &#125; &#125; dfs(N);&#125;int get(int x, int y) &#123; for (int i = LOG - 1; i &gt;= 0; --i) &#123; if (Fa[x][i] &amp;&amp; W[Fa[x][i]] &lt;= y) x = Fa[x][i]; &#125; return x;&#125;std::vector&lt;int&gt; V;int Back[MAXN], H2[MAXN];int getX(int x) &#123; return std::lower_bound(V.begin(), V.end(), x) - V.begin() + 1; &#125;int main() &#123; N = gt(), M = gt(), Q = gt(); int u, x, k; for (int i = 1; i &lt;= N; ++i) &#123; H2[i] = H[i] = gt(); V.push_back(H[i]); &#125; for (int i = 1; i &lt;= M; ++i) &#123; E[i].u = gt(), E[i].v = gt(), E[i].w = gt(); &#125; V.push_back(INT_MIN); std::sort(V.begin(), V.end()); V.erase(std::unique(V.begin(), V.end()), V.end()); for (int i = 1; i &lt;= N; ++i) &#123; H[i] = getX(H[i]); Back[H[i]] = i; &#125; n = V.size(); pre(); for (int i = 1; i &lt;= Q; ++i) &#123; u = gt(), x = gt(), k = gt(); u = get(u, x); int ans = query(Rt[Dfn[u] - 1], Rt[Dfn[u] + Sz[u] - 1], 1, n, k); if (ans == 1) puts("-1"); else printf("%d\n", H2[Back[ans]]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>克鲁斯卡尔重构树</tag>
        <tag>可持久化线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3732 Network]]></title>
    <url>%2FBZOJ-3732%2F</url>
    <content type="text"><![CDATA[在无向图 G 中，有 K 个询问，每次查询点对 u,v 之间的所有路径中最长边的最小值。 N\leq 15000,M\leq 30000,K\leq 15000 分析 对 G 构建克鲁斯卡尔重构树，那么两点间路径中的最长边的最小值为它们在树上的LCA的节点权值，倍增预处理即可。 复杂度 O(M\log{M} + N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include &lt;bits/stdc++.h&gt;const int MAXN = 60000 + 5;const int LOG = 20;int N, M, K;struct Edge &#123; int u, v, w;&#125; E[MAXN];int cntE;bool cmp(const Edge &amp;x, const Edge &amp;y) &#123; return x.w &lt; y.w; &#125;int Anc[MAXN];int Ch[MAXN][2];int Fa[MAXN][LOG];int Dep[MAXN];int W[MAXN];int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]); &#125;void dfs(int x) &#123; if (!x) return; Dep[x] = Dep[Fa[x][0]] + 1; for (int i = 1; i &lt; LOG; ++i) &#123; Fa[x][i] = Fa[Fa[x][i - 1]][i - 1]; if (!Fa[x][i]) break; &#125; dfs(Ch[x][0]); dfs(Ch[x][1]);&#125;void pre() &#123; std::sort(E + 1, E + M + 1, cmp); for (int i = 1; i &lt;= N; ++i) Anc[i] = i; for (int i = 1; i &lt;= cntE; ++i) &#123; int u = findAnc(E[i].u), v = findAnc(E[i].v); if (u != v) &#123; Anc[u] = Anc[v] = ++N; Anc[N] = N; Fa[u][0] = Fa[v][0] = N; Ch[N][0] = u; Ch[N][1] = v; W[N] = E[i].w; &#125; &#125; dfs(N);&#125;int lca(int x, int y) &#123; if (Dep[x] &lt; Dep[y]) std::swap(x, y); for (int i = LOG - 1; i &gt;= 0; --i) &#123; if (Dep[Fa[x][i]] &gt;= Dep[y]) x = Fa[x][i]; &#125; if (x == y) return x; for (int i = LOG - 1; i &gt;= 0; --i) &#123; if (Fa[x][i] != Fa[y][i]) &#123; x = Fa[x][i]; y = Fa[y][i]; &#125; &#125; return Fa[x][0];&#125;int main() &#123; scanf("%d%d%d", &amp;N, &amp;M, &amp;K); int u, v, w; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); E[++cntE] = (Edge)&#123;u, v, w&#125;; &#125; pre(); while (K--) &#123; scanf("%d%d", &amp;u, &amp;v); printf("%d\n", W[lca(u, v)]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>克鲁斯卡尔重构树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「APIO 2014」BZOJ 3676 回文串]]></title>
    <url>%2FBZOJ-3676%2F</url>
    <content type="text"><![CDATA[求字符串 S 的回文子串长度与出现次数的乘积最大值。 |S|\leq 300000 3676: [Apio2014]回文串 分析 由于一个长为 n 的字符串本质不同的回文子串只有 O(n) 个，因此可以通过manacher得到所有回文子串后，在后缀自动机上匹配得到出现次数。 由于Parent树上一条链越往上集合越大，因此每次查询包含子串 S[l,r] 且出现次数最多的节点只需要倍增跳Parent树，找到满足最大长度不小于 |S[l,r]| 且深度最小的祖先即可。 复杂度 O(|S|\log{|S|}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122#include &lt;bits/stdc++.h&gt;const int MAXN = 300000 + 5;struct SuffixAutomation &#123; static const int MAXN = ::MAXN &lt;&lt; 1; struct State &#123; int len, fail, ch[26]; &#125; St[MAXN]; int root, cntT, lst; int Sz[MAXN], Rpos[MAXN]; void init() &#123; root = cntT = lst = 1; &#125; void push_back(int c, int id) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; Rpos[id] = cur; Sz[cur] = 1; for (; p &amp;&amp; !St[p].ch[c]; p = St[p].fail) St[p].ch[c] = cur; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; for (; p &amp;&amp; St[p].ch[c] == q; p = St[p].fail) St[p].ch[c] = clone; &#125; &#125; lst = cur; &#125; int A[MAXN], C[MAXN]; void sort() &#123; for (int i = 1; i &lt;= cntT; ++i) &#123; A[St[i].len]++; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; C[A[St[i].len]--] = i; &#125; &#125; int Anc[MAXN][20]; void build() &#123; sort(); for (int i = cntT; i &gt;= 1; --i) &#123; Sz[St[C[i]].fail] += Sz[C[i]]; Anc[i][0] = St[i].fail; &#125; for (int i = 1; i &lt; 20; ++i) &#123; for (int j = 1; j &lt;= cntT; ++j) &#123; Anc[j][i] = Anc[Anc[j][i - 1]][i - 1]; &#125; &#125; &#125; long long query(int p, int len) &#123; for (int i = 19; i &gt;= 0; --i) &#123; if (St[Anc[p][i]].len &gt;= len) p = Anc[p][i]; &#125; return 1ll * Sz[p] * len; &#125;&#125; S;long long ans;void manacher(char *s, int n) &#123; static int R[MAXN]; int mr = 0, id = 0; for (int i = 1; i &lt;= n; ++i) &#123; if (i &lt; mr) &#123; R[i] = std::min(R[id * 2 - i], mr - i - 1); &#125; else &#123; R[i] = 1; ans = std::max(ans, S.query(S.Rpos[i], 1)); &#125; while (s[i + R[i]] == s[i - R[i]]) &#123; ++R[i]; ans = std::max(ans, S.query(S.Rpos[i + R[i] - 1], 2 * R[i] - 1)); &#125; if (R[i] + i &gt; mr) &#123; mr = R[i] + i; id = i; &#125; &#125; mr = 0, id = 0; for (int i = 1; i &lt;= n; ++i) &#123; if (i &lt; mr) &#123; R[i] = std::min(R[id * 2 - i - 1], mr - i); &#125; else &#123; R[i] = 0; &#125; while (s[i + R[i] + 1] == s[i - R[i]]) &#123; ++R[i]; ans = std::max(ans, S.query(S.Rpos[i + R[i]], 2 * R[i])); &#125; if (R[i] + i &gt; mr) &#123; mr = R[i] + i; id = i; &#125; &#125;&#125;char s[MAXN];int main() &#123; scanf("%s", s + 1); S.init(); int n = strlen(s + 1); for (int i = 1; i &lt;= n; ++i) &#123; S.push_back(s[i] - 'a', i); &#125; S.build(); s[0] = '@'; s[n + 1] = '#'; manacher(s, n); printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>倍增</tag>
        <tag>后缀自动机</tag>
        <tag>manacher</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3473 字符串]]></title>
    <url>%2FBZOJ-3473%2F</url>
    <content type="text"><![CDATA[给定 n 个字符串 S_i ，对于每个字符串求有多少子串是至少 K 个字符串的子串。 n\leq 10^5, \sum{|S_i|}\leq 10^5 3473: 字符串 3277: 串 分析 构造广义后缀自动机，实现方法为每个字符串从根节点插入，在每个节点用一个set维护经过它的字符串编号。 然后自底而上合并Fail树节点的编号集合，那么满足条件的即满足集合大小不小于 K 的节点。 计算答案时，按位匹配，失配时跳Fail直到节点集合大小不小于 K ，累计集合大小。 复杂度 O(\sum{|S_i|}\log{\sum{|S_i|}}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include &lt;bits/stdc++.h&gt;const int MAXN = 2e5 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge)&#123;v, H[u]&#125;; H[u] = cntE;&#125;struct SuffixAutomation &#123; struct State &#123; int fail, len, ch[26]; &#125; St[MAXN &lt;&lt; 1]; int root, cntT, lst; int Sum[MAXN &lt;&lt; 1]; std::set&lt;int&gt; Sz[MAXN &lt;&lt; 1]; void init() &#123; cntT = lst = root = 1; &#125; void push_back(int c, int id) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; Sz[cur].insert(id); while (p &amp;&amp; !St[p].ch[c]) &#123; St[p].ch[c] = cur; p = St[p].fail; &#125; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; while (p &amp;&amp; St[p].ch[c] == q) &#123; St[p].ch[c] = clone; p = St[p].fail; &#125; &#125; &#125; lst = cur; &#125; void build() &#123; for (int i = 1; i &lt;= cntT; ++i) &#123; if (St[i].fail) addEdge(St[i].fail, i); &#125; &#125; void dfs(int x) &#123; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; dfs(v); if (Sz[v] &gt; Sz[x]) std::swap(Sz[v], Sz[v]); for (std::set&lt;int&gt;::iterator p = Sz[v].begin(); p != Sz[v].end(); ++p) &#123; Sz[x].insert(*p); &#125; &#125; Sum[x] = Sz[x].size(); &#125;&#125; SAM;int N, K;std::string s[MAXN];int main() &#123; std::cin &gt;&gt; N &gt;&gt; K; SAM.init(); for (int i = 1; i &lt;= N; ++i) &#123; std::cin &gt;&gt; s[i]; SAM.lst = 1; for (size_t j = 0; j &lt; s[i].size(); ++j) &#123; SAM.push_back(s[i][j] - 'a', i); &#125; &#125; SAM.build(); SAM.dfs(SAM.root); for (int i = 1; i &lt;= N; ++i) &#123; int p = SAM.root; long long sum = 0; for (size_t j = 0; j &lt; s[i].size(); ++j) &#123; p = SAM.St[p].ch[s[i][j] - 'a']; while (SAM.Sum[p] &lt; K &amp;&amp; p) p = SAM.St[p].fail; sum += SAM.St[p].len; &#125; printf("%lld ", sum); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>启发式合并</tag>
        <tag>广义后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「NOI 2018」UOJ 395 你的名字]]></title>
    <url>%2FUOJ-395%2F</url>
    <content type="text"><![CDATA[给定字符串 S ，有 M 个询问。每次询问给定区间 [L,R] 和字符串 T 。求 T 中不在 S[L,R] 中出现的本质不同的子串个数。 |S|,|T|\leq 5\times 10^5,\sum|T|\leq 10^6,M\leq 10^5 #395. 【NOI2018】你的名字 分析 Case 1: L=1,R=|S| 问题简化为求 T 不在 S 中出现的本质不同的子串。 分别对 S,T 构造后缀自动机， T 中本质不同的子串对应着SAM中的节点。 对于 T 的所有前缀 T[1,i] ，求出它对应 S 的子串 P_i 为 T[1,i] 的最长后缀。 那么 T 的SAM中节点 i 中满足条件的子串数为 len_i-max\{|P_{r(i)}|,len_{fa(i)}\} ，其中 r(i) 表示等价类 i 的最右端点， fa(i) 为 i 在Parent树上的父节点。 求 P_i 只需要在 S 的SAM上按位匹配，失配时跳Fail指针直到有一条当前匹配字符的出边为止。 Case 2: L,R 任取 核心思想与Case 1相同，只是在求 P_i 失配时不能单纯跳Fail指针。 考虑跳Fail指针的意义是在减少前缀的限制，但是Parent树上一个节点会对应多个区间，不一定在当前要求的区间 [L,R] 中。 因此可以通过可持久化线段树或者线段树合并的方法得到每个节点子树中Right集情况，然后匹配时增加当前节点子树中的Right集必须包含 [L,R] 的限制。 复杂度 O(|T|\log{|S|}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140#pragma GCC optimize("Ofast")#include &lt;bits/stdc++.h&gt;const int MAXN = 5e5 + 5;struct PresidentTree &#123; static const int MAXN = ::MAXN * 40; struct Node &#123; int lc, rc; &#125; T[MAXN]; int cntT; void insert(int &amp;rt, int l, int r, int p) &#123; if (!rt) rt = ++cntT; if (l == r) return; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) insert(T[rt].lc, l, m, p); else insert(T[rt].rc, m + 1, r, p); &#125; int merge(int x, int y) &#123; if (!x || !y) return x + y; int rt = ++cntT; T[rt].lc = merge(T[x].lc, T[y].lc); T[rt].rc = merge(T[x].rc, T[y].rc); return rt; &#125; int query(int rt, int l, int r, int a, int b) &#123; if (!rt || b &lt; l || a &gt; r) return 0; if (a &lt;= l &amp;&amp; r &lt;= b) return 1; int m = (l + r) &gt;&gt; 1; return query(T[rt].lc, l, m, a, b) | query(T[rt].rc, m + 1, r, a, b); &#125;&#125; Tree;int Rt[MAXN &lt;&lt; 1];bool flag;struct SuffixAutomation &#123; static const int MAXN = ::MAXN &lt;&lt; 1; struct State &#123; int len, fail, ch[26]; &#125; St[MAXN]; int Rpos[MAXN]; int n, root, cntT, lst; void init() &#123; for (int i = 1; i &lt;= cntT; ++i) &#123; memset(St[i].ch, 0, sizeof St[i].ch); St[i].len = St[i].fail = 0; &#125; root = cntT = lst = 1; &#125; void push_back(int c) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; Rpos[cur] = St[cur].len; if (!flag) Tree.insert(Rt[cur], 1, n, Rpos[cur]); for (; p &amp;&amp; !St[p].ch[c]; p = St[p].fail) St[p].ch[c] = cur; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; Rpos[clone] = Rpos[q]; for (; p &amp;&amp; St[p].ch[c] == q; p = St[p].fail) St[p].ch[c] = clone; &#125; &#125; lst = cur; &#125; int A[MAXN], C[MAXN]; void sort() &#123; for (int i = 1; i &lt;= cntT; ++i) &#123; ++A[St[i].len]; &#125; for (int i = 1; i &lt;= n; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; C[A[St[i].len]--] = i; &#125; &#125; void build(char *s) &#123; n = strlen(s + 1); init(); for (int i = 1; i &lt;= n; ++i) &#123; push_back(s[i] - 'a'); &#125; &#125; void find(int &amp;p, int &amp;len, int L, int R, int c) &#123; while (true) &#123; if (St[p].ch[c] &amp;&amp; Tree.query(Rt[St[p].ch[c]], 1, n, L + len, R)) &#123; ++len; p = St[p].ch[c]; return; &#125; if (!len) return; if (--len == St[St[p].fail].len) p = St[p].fail; &#125; &#125; long long cal(int *F) &#123; long long sum = 0; for (int i = 1; i &lt;= cntT; ++i) &#123; sum += std::max(0, St[i].len - std::max(St[St[i].fail].len, F[Rpos[i]])); &#125; return sum; &#125;&#125; S, T;char s[MAXN], t[MAXN];int Q;int F[MAXN];int main() &#123; int l, r; scanf("%s%d", s + 1, &amp;Q); S.build(s); S.sort(); for (int i = S.cntT; i &gt;= 1; --i) &#123; int p = S.C[i]; Rt[S.St[p].fail] = Tree.merge(Rt[p], Rt[S.St[p].fail]); &#125; flag = 1; while (Q--) &#123; scanf("%s%d%d", t + 1, &amp;l, &amp;r); T.build(t); int p = S.root; for (int i = 1; i &lt;= T.n; ++i) &#123; F[i] = F[i - 1]; S.find(p, F[i], l, r, t[i] - 'a'); &#125; printf("%lld\n", T.cal(F)); &#125; return 0;&#125;]]></content>
      <categories>
        <category>UOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
        <tag>线段树合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「AHOI 2013」BZOJ 3238 差异]]></title>
    <url>%2FBZOJ-3238%2F</url>
    <content type="text"><![CDATA[对于字符串 S ，求 \sum\limits_{0&lt;i&lt;j&lt;|S|}{Len(T_i)+Len(T_j)-2\times LCP(T_i,T_j)} 。 即任意两后缀长度之和与它们最长公共前缀的长度之差的和。 |S|\leq 500000 分析 在后缀自动机上，两个子串的最长公共后缀对应Fail树上两串对应节点的LCA。因此可以反着建后缀自动机，变成求两前缀的最长公共后缀。 记 f(x) 为 x 子树的子串数量，则 x 的贡献为 len(x)\times (f(x)\times (f(x)-1)-\sum\limits_{v\in Son(x)}{f(v)\times ((f(v)-1))} 。转化一下，总贡献为 \sum{(len(x)-len(fa(x)))\times f(x)\times (f(x)-1)} 。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;bits/stdc++.h&gt;const int MAXN = 500000 * 2 + 5;struct State &#123; int len, fail, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;int Sz[MAXN], A[MAXN], C[MAXN];void push_back(int c) &#123; int cur = ++cntT, p = lst; Sz[cur] = 1; St[cur].len = St[p].len + 1; for (; p &amp;&amp; !St[p].ch[c]; p = St[p].fail) St[p].ch[c] = cur; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; for (; p &amp;&amp; St[p].ch[c] == q; p = St[p].fail) St[p].ch[c] = clone; &#125; &#125; lst = cur;&#125;char S[MAXN];int main() &#123; scanf("%s", S); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[St[i].len]++; &#125; for (int i = 1; i &lt;= len; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; C[A[St[i].len]--] = i; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; Sz[St[C[i]].fail] += Sz[C[i]]; &#125; long long ans = 1ll * (len + 1) * len / 2 * (len - 1); for (int i = 1; i &lt;= cntT; ++i) &#123; ans -= 1ll * (St[i].len - St[St[i].fail].len) * (Sz[i] - 1) * Sz[i]; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1396 识别子串]]></title>
    <url>%2FBZOJ-1396%2F</url>
    <content type="text"><![CDATA[在字符串 S 中，对于 \forall i ，求包含位置 i 且只出现一次的最短子串的长度。 |S|\leq 10^5 所有出现一次的子串一定是对 S 建立后缀自动机后Fail树的叶子节点。 而对于任意叶子节点 p ，它能包含位置 [1,max(p)] 。对于 i\in[1, max(p)-min(p)] ，贡献为 max(p)-i+1 ，对于 i\in [max(p)-min(p),max(p)] ，贡献为 max(p)-min(p)+1 。每个位置的答案可以通过两棵线段树维护。第一棵维护情况1的差分值，第二棵维护情况2，答案对两棵线段树对应位置的最小值取min。 复杂度 O(|S|\log{|S|}) 。 分析 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include &lt;bits/stdc++.h&gt;const int MAXN = 2e5 + 5;struct State &#123; int len, fail, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;void push_back(int c) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; for (; p &amp;&amp; !St[p].ch[c]; p = St[p].fail) St[p].ch[c] = cur; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; for (; p &amp;&amp; St[p].ch[c] == q; p = St[p].fail) St[p].ch[c] = clone; &#125; &#125; lst = cur;&#125;char S[MAXN];bool Vis[MAXN];struct SegmentTree &#123; static const int INF = 0x3f3f3f3f;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r int Min[MAXN &lt;&lt; 1]; void pushDown(int rt) &#123; if (Min[rt] == INF) return; Min[rt &lt;&lt; 1] = std::min(Min[rt &lt;&lt; 1], Min[rt]); Min[rt &lt;&lt; 1 | 1] = std::min(Min[rt &lt;&lt; 1 | 1], Min[rt]); &#125; void init() &#123; memset(Min, 0x3f, sizeof Min); &#125; void update(int rt, int l, int r, int a, int b, int x) &#123; if (b &lt; a) return; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; Min[rt] = std::min(Min[rt], x); return; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; update(LT, a, b, x); &#125; if (m &lt; b) &#123; update(RT, a, b, x); &#125; &#125; int query(int rt, int l, int r, int p) &#123; if (l == r) &#123; return Min[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125; &#125;&#125; Seg1, Seg2;int main() &#123; scanf("%s", S); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; Vis[St[i].fail] = 1; &#125; Seg1.init(); Seg2.init(); for (int i = cntT; i &gt;= 1; --i) &#123; if (Vis[i]) continue; int l = St[i].len - St[St[i].fail].len; int r = St[i].len; Seg1.update(1, 1, len, 1, l - 1, r + 1); Seg2.update(1, 1, len, l, r, r - l + 1); &#125; for (int i = 1; i &lt;= len; ++i) &#123; printf("%d\n", std::min(Seg1.query(1, 1, len, i) - i, Seg2.query(1, 1, len, i))); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2015」BZOJ 3998 弦论]]></title>
    <url>%2FBZOJ-3998%2F</url>
    <content type="text"><![CDATA[求字符串 S 的字典序第 K 小的子串。 对于 T=0 ，相同子串不被重复计算，对于 T=1 ，不同位置的相同子串被认为是不同的。如果不存在 K 个子串，输出-1。 |S|\leq 5\times 10^5 分析 对 S 建立后缀自动机，通过Fail树合并子树得到每个状态出现的次数，若 T=0 ，则赋初值为 1 ，否则为 |Right| 。然后在DAG上统计经过每个点的路径条数。最后比较当前 K 与经过点的路径数，从根节点遍历自动机得到答案字符串。 复杂度 O(|S|) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;struct State &#123; int len, fail, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;int OPT, K;int A[MAXN], C[MAXN];long long Sz[MAXN], Sum[MAXN];void push_back(int c) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; Sz[cur] = 1; while (p &amp;&amp; !St[p].ch[c]) &#123; St[p].ch[c] = cur; p = St[p].fail; &#125; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; while (p &amp;&amp; St[p].ch[c] == q) &#123; St[p].ch[c] = clone; p = St[p].fail; &#125; &#125; &#125; lst = cur;&#125;void get(int x, int k) &#123; if (k &lt;= Sz[x]) return; k -= Sz[x]; for (int i = 0; i &lt; 26; ++i) &#123; int v = St[x].ch[i]; if (Sum[v] &lt; k) k -= Sum[v]; else &#123; putchar(i + 'a'); get(v, k); return; &#125; &#125;&#125;char S[MAXN];int main() &#123; scanf("%s%d%d", S, &amp;OPT, &amp;K); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[St[i].len]++; &#125; for (int i = 1; i &lt;= len; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; C[A[St[i].len]--] = i; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; Sz[St[C[i]].fail] += Sz[C[i]]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; if (!OPT) &#123; Sum[i] = Sz[i] = 1; &#125; else &#123; Sum[i] = Sz[i]; &#125; &#125; Sum[1] = Sz[1] = 0; for (int i = cntT; i &gt;= 1; --i) &#123; for (int j = 0; j &lt; 26; ++j) &#123; Sum[C[i]] += Sum[St[C[i]].ch[j]]; &#125; &#125; if (Sum[root] &lt; K) &#123; puts("-1"); &#125; else &#123; get(root, K); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SPOJ 8222 NSUBSTR - Substrings]]></title>
    <url>%2FSPOJ-8222%2F</url>
    <content type="text"><![CDATA[对于字符串 S ，定义 f(i) 表示所有长度为 i 的子串在 S 中出现的最大次数。求 f(1),\cdots,f(|S|) 。 |S|\leq 250000 分析 显然 f(i) 单调不减。 对 S 建立后缀自动机，状态 p 对应长度为 [min(p),max(p)] 的子串，由于 f(i) 可以更新 f(i+1) ，因此只需要维护 min(p) 的最大次数。而 p 对应的子串次数为它在Fail树子树状态出现次数之和，因此可以逆拓扑序维护每个状态的出现次数维护 f(min(p)) ，最后从 f(1) 扫到 f(n) 取最大值。 复杂度 O(|S|) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;bits/stdc++.h&gt;const int MAXN = 250000 * 2 + 5;struct State &#123; int fail, len, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;void push_back(int c) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; while (p &amp;&amp; !St[p].ch[c]) &#123; St[p].ch[c] = cur; p = St[p].fail; &#125; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; while (p &amp;&amp; St[p].ch[c] == q) &#123; St[p].ch[c] = clone; p = St[p].fail; &#125; &#125; &#125; lst = cur;&#125;char S[MAXN];int A[MAXN], C[MAXN];int Cnt[MAXN];int F[MAXN];int main() &#123; scanf("%s", S); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 0, p = root; i &lt; len; ++i) &#123; p = St[p].ch[S[i] - 'a']; ++Cnt[p]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[St[i].len]++; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; C[A[St[i].len]--] = i; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; Cnt[St[C[i]].fail] += Cnt[C[i]]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; F[St[i].len] = std::max(F[St[i].len], Cnt[i]); &#125; for (int i = len - 1; i &gt;= 1; --i) &#123; F[i] = std::max(F[i], F[i + 1]); &#125; for (int i = 1; i &lt;= len; ++i) &#123; printf("%d\n", F[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>SPOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019省选联合训练4 解题报告]]></title>
    <url>%2F2019-Multi-School-Training-Contest-4%2F</url>
    <content type="text"><![CDATA[2019 Multi-School Training Contest 4 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>模拟赛</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>欧拉序</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2018」BZOJ 5335 智力竞赛]]></title>
    <url>%2FBZOJ-5335%2F</url>
    <content type="text"><![CDATA[用 n+1 条链覆盖一个点权有向无环图，若可以全部覆盖输出AK，否则求不能被覆盖的点的点权最小值的最大值。 n\leq 50,m\leq 500 分析 首先判断是否能全部覆盖，即求可重点DAG的最小路径覆盖，传递闭包后求二分图最大匹配。 考虑增量法，根据点权从小到大插入点和与它相连的边，在残余网络上跑最大流。 复杂度 O(\frac{m^3}{64}+m^2) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("contest.in", "r", stdin); freopen("contest.out", "w", stdout);&#125;char In[1 &lt;&lt; 25], *at = In;#define gc() *at++int gt() &#123; int x = 0; char c = gc(); for (; !isdigit(c); c = gc()) ; for (; isdigit(c); c = gc()) x = x * 10 + c - '0'; return x;&#125;const int MAXN = 500 + 5;int N, M;int W[MAXN];std::bitset&lt;MAXN&gt; G[MAXN];struct Edge &#123; int v, f, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN &lt;&lt; 1], cntE;int Cur[MAXN &lt;&lt; 1], Dis[MAXN &lt;&lt; 1], Lev[MAXN], cntL;int S = 0, T = 1;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); Lev[S] = ++cntL; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lev[v] != cntL &amp;&amp; E[i].f) &#123; Lev[v] = cntL; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lev[v] == Lev[x] &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int f = dfs(v, std::min(E[i].f, left)); if (!f) &#123; Dis[v] = -1; &#125; else &#123; E[i].f -= f; E[i ^ 1].f += f; left -= f; if (!left) return maxf; &#125; &#125; &#125; return maxf - left;&#125;int w[MAXN], tot;bool check(int p) &#123; for (int i = 1; i &lt;= N; ++i) &#123; if (W[i] == w[p - 1]) &#123; ++tot; addEdge(S, i &lt;&lt; 1, 1); addEdge(i &lt;&lt; 1 | 1, T, 1); for (int j = 1; j &lt;= N; ++j) &#123; if (W[j] &lt; w[p]) &#123; if (G[i][j]) addEdge(i &lt;&lt; 1, j &lt;&lt; 1 | 1, 1); if (G[j][i]) addEdge(j &lt;&lt; 1, i &lt;&lt; 1 | 1, 1); &#125; &#125; &#125; &#125; while (bfs()) &#123; memcpy(Cur, H, sizeof H); tot -= dfs(S, 1e9); &#125; return tot &lt;= M + 1;&#125;int main() &#123; fread(In, 1, 1 &lt;&lt; 25, stdin); int n; M = gt(), N = gt(); for (int i = 1; i &lt;= N; ++i) &#123; w[i] = W[i] = gt(), n = gt(); for (int j = 1; j &lt;= n; ++j) &#123; G[i][gt()] = 1; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; if (G[i][j]) G[i] |= G[j]; &#125; &#125; std::sort(w + 1, w + N); n = std::unique(w + 1, w + N) - w; memset(H, -1, sizeof H); cntE = -1; for (int i = 1; i &lt;= n; ++i) &#123; if (!check(i)) &#123; printf("%d\n", w[i - 1]); return 0; &#125; &#125; puts("AK"); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>二分图最大匹配</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CTSC 2008」BZOJ 1143 祭祀river]]></title>
    <url>%2FBZOJ-1143%2F</url>
    <content type="text"><![CDATA[求有向无环图的最长反链，反链中任意两点不联通。 N\leq 100,M\leq 1000 分析 传递闭包后做二分图最大匹配，答案为点数-最大匹配数。 复杂度 O(NM) 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* * @Author: Skqliao * @Source: CTSC 2008 * @Problem: 1143: [CTSC2008]祭祀river * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1143 * @Date: 2019-03-05 21:15:32 * @LastEditTime: 2019-03-05 21:29:55 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N, M;std::bitset&lt;MAXN&gt; B[MAXN];bool Vis[MAXN];int Match[MAXN];int dfs(int x) &#123; if (Vis[x]) return 0; Vis[x] = 1; for (int i = 1; i &lt;= N; ++i) &#123; if (B[x][i] &amp;&amp; (!Match[i] || dfs(Match[i]))) &#123; Match[i] = x; return 1; &#125; &#125; return 0;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); B[u][v] = 1; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; if (B[i][j]) B[i] |= B[j]; &#125; &#125; int ans = 0; for (int i = 1; i &lt;= N; ++i) &#123; memset(Vis, 0, sizeof Vis); ans += dfs(i); &#125; printf("%d\n", N - ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>二分图最大匹配</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2010」BZOJ 2208 连通数]]></title>
    <url>%2FBZOJ-2208%2F</url>
    <content type="text"><![CDATA[给定 n\times n 的01矩阵表示有向图的连边情况。求有多少组 (a,b) 满足 a 到 b 联通（ a,b 可以相同）。 n\leq 2000 分析 Folyd传递闭包+bitset优化的模板题。 复杂度 O(n^3/64) 或 O(nm/64) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637/* * @Author: Skqliao * @Source: JSOI 2010 * @Problem: 2208: [Jsoi2010]连通数 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2208 * @Date: 2019-03-05 20:26:54 * @LastEditTime: 2019-03-05 21:11:23 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2000 + 5;int N;char S[MAXN];std::bitset&lt;MAXN&gt; B[MAXN];int main() &#123; scanf("%d", &amp;N); for (int i = 0; i &lt; N; ++i) &#123; scanf("%s", S); for (int j = 0; j &lt; N; ++j) &#123; B[i][j] = S[j] == '1'; &#125; B[i][i] = 1; &#125; for (int i = 0; i &lt; N; ++i) &#123; for (int j = 0; j &lt; N; ++j) &#123; if (B[i][j]) B[i] |= B[j]; &#125; &#125; int ans = 0; for (int i = 0; i &lt; N; ++i) &#123; ans += B[i].count(); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2018」BZOJ 5334 数学计算]]></title>
    <url>%2FBZOJ-5334%2F</url>
    <content type="text"><![CDATA[维护 x\% mod ，初值 x=1 ，有 Q 个操作。 1 a x=x\times a 2 a x=x / A[a] ，其中 A[a] 为第 a 次操作乘的数，保证第 i 次是操作1，且每个位置最多被除一次 T 组数据。 T\leq 5,Q\leq 100000,mod\leq 10^9 分析 这是一类常见套路，根据时间分治。 具体而言，以时间为区间建线段树，维护区间乘积。 复杂度 T\times Q\log{Q} 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/* * @Author: Skqliao * @Source: BZOJ 5334 * @Problem: 5334: [Tjoi2018]数学计算 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=5334 * @Date: 2019-03-05 17:36:17 * @LastEditTime: 2019-03-05 19:10:49 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int Q, MOD;long long Mul[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid pushUp(int rt) &#123; Mul[rt] = Mul[rt &lt;&lt; 1] * Mul[rt &lt;&lt; 1 | 1] % MOD; &#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Mul[rt] = 1; return; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void update(int rt, int l, int r, int p, int x) &#123; if (l == r) &#123; Mul[rt] = x; return; &#125; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; update(LT, p, x); &#125; else &#123; update(RT, p, x); &#125; pushUp(rt);&#125;void solve() &#123; scanf("%d%d", &amp;Q, &amp;MOD); build(1, 1, Q); int opt, x; for (int i = 1; i &lt;= Q; ++i) &#123; scanf("%d%d", &amp;opt, &amp;x); if (opt == 1) &#123; update(1, 1, Q, i, x); &#125; else &#123; update(1, 1, Q, x, 1); &#125; printf("%lld\n", Mul[1]); &#125;&#125;int main() &#123; int T; scanf("%d", &amp;T); while (T--) &#123; solve(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「FJWC 2019」FZOJ 184 签到题]]></title>
    <url>%2FFZOJ-184%2F</url>
    <content type="text"><![CDATA[给定序列 A[1 \cdots N] ，有 M 次操作。每次修改 A[p]=x ，修改后询问最小的 y 满足新序列 B[i]=A[i] \oplus y 单调递增，无解输出 -1。 N,M\leq 10^6,A_i,x\leq 2^{30} 分析 记 F(x,i) 表示 x 二进制分解后第 i 位的值， S_{a,b} 为满足 [F(a,x)\not=F(b,x)] 的 x 的集合， G(a,b)=\max\{S_{a,b}\} 。那么通过第 G(a,b) 位的大小关系即可判定 a,b 的大小关系。 统计 Cnt[x][0] 为所有满足 G(A[i],A[i+1])=x ，且 F(A[i],x)&lt;F(A[i+1],x) 的个数。同理 Cnt[x][1] 为满足 F(A[i],x)&gt;F(A[i+1],x) 的个数。 那么求最小的 y 只需要从最高位向下贪心。对于当前位 i ，若存在 Cnt[i][0]&gt;0 且 Cnt[i][1]&gt;0 ，则无解，因为无论这一位是否异或，都会存在若干个 A[i]&gt;A[i+1] 。若 Cnt[i][1]&gt;0 且 Cnt[i][0]=0 ，则这一位必须异或， y 增加 2^i 。 修改 A[p]=x ，只影响 (p-1,p) 和 (p,p+1) ，那么先删去这两对原先对 Cnt 的贡献，再重新加入即可。 复杂度 O((N+M)\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283/* * @Author: Skqliao * @Source: FJWC 2019 * @Problem: #184. 「2019冬令营提高组」签到题 * @Url: http://218.5.5.242:9021/problem/184 * @Date: 2019-03-03 09:33:27 * @LastEditTime: 2019-03-03 10:03:11 */#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("sort.in", "r", stdin); freopen("sort.out", "w", stdout);&#125;char gc() &#123; static char In[1 &lt;&lt; 23], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, 1 &lt;&lt; 23, stdin); &#125; return at == en ? EOF : *at++;&#125;int gt() &#123; char c = gc(); while (!isdigit(c)) c = gc(); int x = 0; for (; isdigit(c); c = gc()) x = x * 10 + c - '0'; return x;&#125;const int MAXN = 1e6 + 5;const int LOG = 30 + 1;int N;std::bitset&lt;LOG&gt; A[MAXN];int Cnt[LOG][2];int solve() &#123; int x = 0; for (int d = 0; d &lt; LOG; d++) &#123; if (Cnt[d][1]) &#123; if (Cnt[d][0]) &#123; return -1; &#125; else &#123; x += (1 &lt;&lt; d); &#125; &#125; &#125; return x;&#125;void update(int l, int r, int x) &#123; for (int i = l + 1; i &lt;= r; i++) &#123; int d = LOG - 1; while (d &gt;= 0 &amp;&amp; A[i - 1][d] == A[i][d]) d--; if (d &gt;= 0) Cnt[d][A[i - 1][d]] += x; &#125;&#125;int main() &#123; open(); N = gt(); for (int i = 1; i &lt;= N; i++) A[i] = gt(); update(1, N, 1); printf("%d\n", solve()); int Q = gt(); while (Q--) &#123; int x = gt(), y = gt(); int l = std::max(1, x - 1), r = std::min(N, x + 1); update(l, r, -1); A[x] = y; update(l, r, 1); printf("%d\n", solve()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>FZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2007」BZOJ 1047 理想的正方形]]></title>
    <url>%2FBZOJ-1047%2F</url>
    <content type="text"><![CDATA[在 N\times M 的矩阵中，求 K\times K 的子矩阵中两最值之差的最小值。 N,M\leq 1000,K\leq 100 分析 二维ST表，用 Max(x,y,k),Min(x,y,z) 分别表示左上角为 (x,y) ，边长为 2^k 的子矩阵中的最大值与最小值。 然后枚举子矩阵左上角，求当前矩阵两最值最差，取最小值。 复杂度 O(NM\log{N}+NM) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/* * @Author: Skqliao * @Source: HAOI 2007 * @Problem: 1047: [HAOI2007]理想的正方形 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1047 * @Date: 2019-02-28 19:29:48 * @LastEditTime: 2019-02-28 19:48:10 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 5;const int LOG = 10;int N, M, K;int Mx[MAXN][MAXN][LOG], Mn[MAXN][MAXN][LOG];int Log[MAXN], Bin[LOG];int queryMax(int x, int y, int n) &#123;int k = Log[n];return std::max(std::max(Mx[x][y][k], Mx[x + n - Bin[k]][y][k]), std::max(Mx[x][y + n - Bin[k]][k], Mx[x + n - Bin[k]][y + n - Bin[k]][k]));&#125;int queryMin(int x, int y, int n) &#123;int k = Log[n];return std::min(std::min(Mn[x][y][k], Mn[x + n - Bin[k]][y][k]), std::min(Mn[x][y + n - Bin[k]][k], Mn[x + n - Bin[k]][y + n - Bin[k]][k]));&#125;int main() &#123;scanf("%d%d%d", &amp;N, &amp;M, &amp;K);for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;Mx[i][j][0]); Mn[i][j][0] = Mx[i][j][0]; &#125;&#125;for (int i = 2; i &lt;= std::max(N, M); ++i) &#123; Log[i] = Log[i &gt;&gt; 1] + 1;&#125;Bin[0] = 1;for (int i = 1; i &lt;= Log[std::max(N, M)]; ++i) &#123; Bin[i] = Bin[i - 1] &lt;&lt; 1;&#125;for (int k = 1; k &lt;= Log[std::max(N, M)]; ++k) &#123; for (int i = 1; i + Bin[k] - 1 &lt;= N; ++i) &#123; for (int j = 1; j + Bin[k] - 1 &lt;= M; ++j) &#123; Mx[i][j][k] = std::max(std::max(Mx[i][j][k - 1], Mx[i + Bin[k - 1]][j][k - 1]), std::max(Mx[i][j + Bin[k - 1]][k - 1], Mx[i + Bin[k - 1]][j + Bin[k - 1]][k - 1])); Mn[i][j][k] = std::min(std::min(Mn[i][j][k - 1], Mn[i + Bin[k - 1]][j][k - 1]), std::min(Mn[i][j + Bin[k - 1]][k - 1], Mn[i + Bin[k - 1]][j + Bin[k - 1]][k - 1])); &#125; &#125;&#125;int ans = INT_MAX;for (int i = 1; i &lt;= N - K + 1; ++i) &#123; for (int j = 1; j &lt;= M - K + 1; ++j) &#123; ans = std::min(ans, queryMax(i, j, K) - queryMin(i, j, K)); &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3437 小P的牧场]]></title>
    <url>%2FBZOJ-3437%2F</url>
    <content type="text"><![CDATA[每个点 i 要么花费 a_i 建塔，要么花费 (j-i)\cdot b_i （ j 为 i 右边第一个塔的标号）。求最小总花费。 n\leq 10^6,0 &lt; a_i,b_i\leq 10^5 分析 设 X_i=\sum\limits_{j=1}^{i-1}{B_j} , Y_i=\sum\limits_{j=1}^{i-1}{b_i\cdot i} ，则转移方程为 f_i=a_i+\min\limits_{j &lt; i}{(f_j+X_{i-1}-X_j-Y_{i-1}+Y_j)} 若决策点 j 优于决策点 k(j &lt; k) ，需满足 \frac{f_k-f_j+Y_k-Y_j}{X_k-X_j} &gt; i 。 维护决策点队列斜率单调递增，且斜率 &gt;i 。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: BZOJ * @Problem: 3437: 小P的牧场 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3437 * @Date: 2019-02-27 20:22:08 * @LastEditTime: 2019-02-27 20:27:08 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;int N;long long A[MAXN], B[MAXN];long long X[MAXN], Y[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123; return (double) (F[k] - F[j] + Y[k] - Y[j]) / (X[k] - X[j]);&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); &#125; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;B[i]); X[i] = X[i - 1] + B[i]; Y[i] = Y[i - 1] + i * B[i]; &#125; for (int i = 1; i &lt;= N; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= i) ++qh; int j = Que[qh]; F[i] = F[j] + i * (X[i - 1] - X[j]) - (Y[i - 1] - Y[j]) + A[i]; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[N]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3156 防御准备]]></title>
    <url>%2FBZOJ-3156%2F</url>
    <content type="text"><![CDATA[每个点 i 要么花费 a_i 建塔，要么花费 j-i （ j 为 i 右边第一个塔的标号）。点 n 必须建塔，求最小总花费。 n\leq 10^6,a_i\leq 10^9 分析 将点左右翻转，点 1 必须建塔，则转移方程为 f_i=a_i+\min\limits_{j &lt; i}{(f_j+(i-j)\cdot (i-j-1)/2)} 若决策点 j 优于决策点 k(j &lt; k) ，需满足 \frac{2(f_k-f_j)+k(k+1)-j(j+1)}{2(k-j)} &gt; i 。 维护决策点队列斜率单调递增，且斜率 &gt;i 。 复杂度 O(n) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940/* * @Author: Skqliao * @Source: BZOJ * @Problem: 3156: 防御准备 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3156 * @Date: 2019-02-26 21:32:07 * @LastEditTime: 2019-02-27 20:02:09 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;int N;long long A[MAXN], S[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123; return (double)(2 * (F[k] - F[j]) + (long long)k * (k + 1) - (long long)j * (j + 1)) / (2 * (k - j));&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); &#125; std::reverse(A + 1, A + N + 1); F[1] = A[1]; Que[0] = 1; long long ans = LLONG_MAX; for (int i = 2; i &lt;= N; ++i) &#123; while (qh &lt; qt &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= i) ++qh; int j = Que[qh]; F[i] = F[j] + (long long)(i - j) * (i - j - 1) / 2 + A[i]; while (qh &lt; qt &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; ans = std::min(ans, F[i] + (long long)(N - i) * (N - i + 1) / 2); &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2008 MAR」BZOJ 1597 土地购买]]></title>
    <url>%2FBZOJ-1597%2F</url>
    <content type="text"><![CDATA[有 n 个 X_i\times Y_i 的矩形，购买矩形的花费为它的面积。允许一次性购买多个矩形，其花费为 \max(X_i)\times \max(Y_i) 。求购买所有矩形的最小花费。 n\leq 50000 分析 若存在若干个矩形满足 X_1\leq X_2\leq\cdots\leq X_m 且 Y_1\cdots Y_i\leq Y_m ，则一定打包购买，花费为 X_m\times Y_m 。那么剩下的矩形一定满足 X_i\leq X_2\leq\cdots\leq X_p 且 Y_1 &gt; Y_2 &gt; \cdots&gt; Y_p 。 新序列可以通过排序（第一关键字 x ，第二关键字 y ）后用单调栈维护 y 值递减处理。 转移方程为 F_i=\min\limits_{1\leq j &lt; i}{(F_j+X_i\times Y_{j+1})} 。 决策点 j 优于决策点 k(j &lt; k) ，当且仅当 \frac{F_j-F_k}{B_{k+1}-B_{j+1}} &gt; A_i 。 维护决策点队列，满足斜率单调递增，且大于 A_i 。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* * @Author: Skqliao * @Source: USACO2008 Mar * @Problem: 1597: [Usaco2008 Mar]土地购买 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1597 * @Date: 2019-02-25 20:43:09 * @LastEditTime: 2019-02-25 22:14:02 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;struct Node &#123; int x, y; bool operator &lt; (const Node &amp;a) const &#123; return x == a.x ? a.y &gt; y : x &lt; a.x; &#125;&#125; A[MAXN], B[MAXN];int N;int Que[MAXN], qh, qt;long long F[MAXN];double slope(int j, int k) &#123; return (double) (F[j] - F[k]) / (B[k + 1].y - B[j + 1].y);&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;A[i].x, &amp;A[i].y); &#125; std::sort(A + 1, A + N + 1); int top = 0; for (int i = 1; i &lt;= N; ++i) &#123; while (top &amp;&amp; B[top].y &lt;= A[i].y) --top; B[++top] = A[i]; &#125; Que[0] = 0; for (int i = 1; i &lt;= top; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= B[i].x) ++qh; int j = Que[qh]; F[i] = F[j] + (long long)B[i].x * B[j + 1].y; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[top]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2007」BZOJ 1096 仓库建设]]></title>
    <url>%2FBZOJ-1096%2F</url>
    <content type="text"><![CDATA[从左到右有若干个点，点 1 和点 i 的距离为 D_i ，点 i 有 A_i 个货物，在点 i 建仓库的费用为 C_i 。现要在若干个点建造仓库，使得每个点的货物向右能移动到某个仓库中，每个货物运动 1 距离的花费为 1 。求建造与移动的总花费的最小值。 N\leq 1000000 分析 转移方程显然为 F_i=\min\limits_{1\leq j &lt; i}{(F_j+\sum\limits_{k=j+1}^{i}{(D_i-D_k)\cdot A_k})} +C_i 。 设 Y_i=\sum\limits_{j=1}^{i}{A_j\cdot D_j} ， S_i=\sum\limits_{j=1}^{i}{A_j} 。若点 k 优于点 j(j &lt; k) ，则满足 \frac{F_k-F_j+Y_k-Y_j}{S_k-S_j} &gt; D_i 维护斜率单调递增的决策点队列，且队首斜率大于 D_i 。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839/* * @Author: Skqliao * @Source: ZJOI 2007 * @Problem: 1096: [ZJOI2007]仓库建设 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1096 * @Date: 2019-02-25 19:14:22 * @LastEditTime: 2019-02-25 20:02:31 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;long long D[MAXN], A[MAXN], C[MAXN];long long S[MAXN], Y[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123;return (double)(F[k] - F[j] + Y[k] - Y[j]) / (S[k] - S[j]);&#125;int main() &#123;scanf("%d", &amp;N);for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld%lld%lld", &amp;D[i], &amp;A[i], &amp;C[i]); S[i] = S[i - 1] + A[i]; Y[i] = Y[i - 1] + A[i] * D[i];&#125;Que[qt] = 0;for (int i = 1; i &lt;= N; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= D[i]) ++qh; int j = Que[qh]; F[i] = F[j] + (S[i] - S[j]) * D[i] - Y[i] + Y[j] + C[i]; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i;&#125;printf("%lld\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2007」BZOJ 1095 捉迷藏]]></title>
    <url>%2FBZOJ-1095%2F</url>
    <content type="text"><![CDATA[无权树上有黑点和白点共 N 个，开始均为白点。有 M 个操作，分为两种：取反点 x 的颜色或查询树上白点对的最大距离。 N\leq 100000, M\leq 500000 分析 做的第一道动态点分治的题。。 首先考虑假如没有修改操作，那么求最远白点对只需要点分治，每次在重心合并子树中的最长和次长链，得到最大值。 有了修改，我们考虑动态点分治。 由于树的形态不变，因此各个子树的重心不变。那么我们可以将重心记录下来，形成一棵点分树，点分树上的父亲节点即为上一层重心，儿子节点为各子树重心。根据重心的性质，树高是 O(log{n}) 的。 发现修改一个点的颜色会对它上级的每一层重心造成影响。 用一个优先队列 S1[i] 维护子树中每个白点到上一层重心的距离， S2[i] 维护所有子树中距离的最大值，即所有 S1 的堆顶。再用一个堆来维护全局答案，即不同的两个 S2 堆顶之和。 那么修改一个点会导致 S1 发生变化，从而导致上层的 S2 发生变化，从而导致答案发生变化。 插入删除两点间的距离可以先用ST表预处理出欧拉序对应的深度的区间最小值，做到 O(n\log{n}) 预处理， O(1) 查询。 由于我们不知道修改的这个点是否是堆顶，因此插入 /删除前先在上层 S2 中弹出当前 S1 的堆顶，完成对 S1 的操作后，再重新向 S2 插入最大值。维护答案同理。 在堆中删除元素有一个常见的trick，即用两个堆分别维护所有和已删除的元素，一同弹出堆顶直到堆顶不同为止。 总复杂度 O((n + m)\log ^ 2{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263/* * @Author: Skqliao * @Source: ZJOI 2007 * @Problem: 1095: [ZJOI2007]Hide 捉迷藏 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1095 * @Date: 2019-02-24 10:24:53 * @LastEditTime: 2019-02-24 15:46:29 */#include &lt;bits/stdc++.h&gt;char In[1 &lt;&lt; 24], *at = In, *en = In;char gc() &#123; if (at == en) &#123; en = (at = In) + fread(In, 1, 1 &lt;&lt; 24, stdin); &#125; return at == en ? EOF : *at++;&#125;int ga() &#123; char c = gc(); while (!isalpha(c)) c = gc(); return c;&#125;int gt() &#123; int x = 0; char c = gc(); while (!isdigit(c)) c = gc(); while (isdigit(c)) &#123; x = x * 10 + c - '0'; c = gc(); &#125; return x;&#125;const int MAXN = 100000 + 5;const int LOG = 18;struct Prioirty_Queue &#123; std::priority_queue&lt;int&gt; In, Out; void insert(int x) &#123; In.push(x); &#125; void erase(int x) &#123; Out.push(x); &#125; void update() &#123; while (!Out.empty() &amp;&amp; In.top() == Out.top()) &#123; In.pop(); Out.pop(); &#125; &#125; void pop() &#123; update(); In.pop(); &#125; int top() &#123; update(); return In.top(); &#125; int secondtop() &#123; int x = top(); pop(); int y = top(); insert(x); return y; &#125; int size() &#123; return In.size() - Out.size(); &#125;&#125; S1[MAXN], S2[MAXN], ans;void Insert(Prioirty_Queue &amp;s) &#123; if (s.size() &gt;= 2) &#123; ans.insert(s.top() + s.secondtop()); &#125;&#125;void Erase(Prioirty_Queue &amp;s) &#123; if (s.size() &gt;= 2) &#123; ans.erase(s.top() + s.secondtop()); &#125;&#125;int N, M;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Sz[MAXN], MxSz[MAXN];bool Vis[MAXN];int rt, sigma;int Depth[MAXN];void getRoot(int x, int fa) &#123; MxSz[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; getRoot(v, x); MxSz[x] = std::max(MxSz[x], Sz[v]); &#125; &#125; MxSz[x] = std::max(MxSz[x], sigma - Sz[x]); if (MxSz[x] &lt; MxSz[rt]) rt = x;&#125;int Fa[MAXN];void cal(int x, int fa, int dep, Prioirty_Queue &amp;s) &#123; s.insert(dep); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; cal(v, x, dep + 1, s); &#125; &#125;&#125;int getSize(int x, int fa) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; Sz[x] += getSize(v, x); &#125; &#125; return Sz[x];&#125;int Dep[MAXN &lt;&lt; 1][LOG], cntD, Pos[MAXN];int build(int x) &#123; rt = 0; sigma = getSize(x, 0); getRoot(x, 0); int p = rt; Vis[p] = 1; S2[p].insert(0); for (int i = H[p]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (!Vis[v]) &#123; Prioirty_Queue tmp; cal(v, 0, 1, tmp); int p2 = build(v); Fa[p2] = p; S1[p2] = tmp; S2[p].insert(S1[p2].top()); &#125; &#125; Insert(S2[p]); return p;&#125;void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Dep[Pos[x] = ++cntD][0] = Depth[x]; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); Dep[++cntD][0] = Depth[x]; &#125; &#125;&#125;int Log[MAXN &lt;&lt; 1], Bin[LOG];int queryLcaDepth(int x, int y) &#123; x = Pos[x], y = Pos[y]; if (x &gt; y) std::swap(x, y); int d = Log[y - x + 1]; return std::min(Dep[x][d], Dep[y - Bin[d] + 1][d]);&#125;int queryDis(int x, int y) &#123; return Depth[x] + Depth[y] - 2 * queryLcaDepth(x, y); &#125;void turnOn(int x) &#123; Erase(S2[x]); S2[x].insert(0); Insert(S2[x]); for (int i = x; Fa[i]; i = Fa[i]) &#123; Erase(S2[Fa[i]]); if (S1[i].size()) &#123; S2[Fa[i]].erase(S1[i].top()); &#125; S1[i].insert(queryDis(Fa[i], x)); if (S1[i].size()) &#123; S2[Fa[i]].insert(S1[i].top()); &#125; Insert(S2[Fa[i]]); &#125;&#125;void turnOff(int x) &#123; Erase(S2[x]); S2[x].erase(0); Insert(S2[x]); for (int i = x; Fa[i]; i = Fa[i]) &#123; Erase(S2[Fa[i]]); if (S1[i].size()) &#123; S2[Fa[i]].erase(S1[i].top()); &#125; S1[i].erase(queryDis(Fa[i], x)); if (S1[i].size()) &#123; S2[Fa[i]].insert(S1[i].top()); &#125; Insert(S2[Fa[i]]); &#125;&#125;bool Status[MAXN];int main() &#123; N = gt(); for (int i = 1; i &lt; N; ++i) &#123; addEdge(gt(), gt()); &#125; MxSz[0] = N; build(1); dfs(1, 0); Log[0] = -1; for (int i = 1; i &lt;= cntD; ++i) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; Bin[0] = 1; for (int i = 1; i &lt;= Log[cntD]; ++i) &#123; Bin[i] = Bin[i - 1] &lt;&lt; 1; &#125; for (int j = 1; j &lt;= Log[cntD]; ++j) &#123; for (int i = 1; i + Bin[j - 1] - 1 &lt;= cntD; ++i) &#123; Dep[i][j] = std::min(Dep[i][j - 1], Dep[i + Bin[j - 1]][j - 1]); &#125; &#125; std::fill(Status + 1, Status + N + 1, 1); int cnt = N; M = gt(); for (int i = 1; i &lt;= M; ++i) &#123; if (ga() == 'G') &#123; if (cnt &lt; 2) &#123; printf("%d\n", cnt - 1); &#125; else &#123; printf("%d\n", ans.top()); &#125; &#125; else &#123; int u = gt(); if (Status[u]) &#123; --cnt; turnOff(u); &#125; else &#123; ++cnt; turnOn(u); &#125; Status[u] ^= 1; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉序</tag>
        <tag>ST表</tag>
        <tag>动态点分治</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「APIO 2010」BZOJ 1911 特别行动队]]></title>
    <url>%2FBZOJ-1911%2F</url>
    <content type="text"><![CDATA[将序列 A[1 \cdots n] 划分成若干个不相交区间，区间 [l,r] 的权值为 a\cdot x^2+b\cdot x+c ，其中 x=\sum\limits_{i=l}^{r}{A[i]} 。求最大权值和。 n\leq 1000000,-5\leq a\leq -1, |b|,|c|\leq 10000000,A[i]\leq 100 分析 令 S_i=\sum\limits_{j=1}^{i}{A_i} ， F_i 表示将前 i 个数划分成若干区间的最大权值和。 则 F_i=\min\limits_{1\leq j &lt; i}{(F_j+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c)} 。 考虑 i 从两个决策点 j,k 转移，若 j 更优，则需要满足： F_j-F_k+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c-(a\cdot (S_i-S_k)^2+b\cdot (S_i-S_k) + c) &gt; 0 移项整理可得 \frac{F_j-F_k+a(S_j^2-S_k^2)}{S_j-S_k} &lt; 2aS_i+b 。 维护单调队列，每次取队首更新当前答案，维护队列中斜率单调递减，且不超过 2aS_i+b 。 复杂度 O(n) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * @Author: Skqliao * @Source: APIO 2010 * @Problem: 1911: [Apio2010]特别行动队 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1911 * @Date: 2019-02-23 17:04:48 * @LastEditTime: 2019-02-24 10:03:05 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;long long a, b, c;long long S[MAXN], F[MAXN];template &lt;class T&gt;T sqr(T x) &#123; return x * x;&#125;double slop(int x, int y) &#123; return (double)(F[x] - F[y] + a * (S[x] + S[y]) * (S[x] - S[y])) / (S[x] - S[y]);&#125;int Que[MAXN], qh, qt;int main() &#123; long long x; scanf("%d%lld%lld%lld", &amp;N, &amp;a, &amp;b, &amp;c); Que[qt] = 0; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;x); S[i] = S[i - 1] + x; while (qt &gt; qh &amp;&amp; slop(Que[qh], Que[qh + 1]) &gt;= 2 * a * S[i] + b) ++qh; int j = Que[qh]; F[i] = F[j] + a * sqr(S[i] - S[j]) + b * (S[i] - S[j]) + c; while (qt &gt; qh &amp;&amp; slop(Que[qt], i) &gt;= slop(Que[qt - 1], Que[qt])) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[N]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CEOI 2004」JZOJ 1131 锯木场选址]]></title>
    <url>%2FJZOJ-1131%2F</url>
    <content type="text"><![CDATA[数轴从左到右有 n + 1 点，每个点有 A_i 个人，相邻两点距离为 B_i 。一个人移动 1 的花费为 1 。第 n + 1 个点为集合点，现可以在前 n 个点中再选择两个点作为集合点，如此一共有三个集合点。所有人必须向右移动到某一个集合点中，求所有人移动花费总和的最小值。 n\leq 20000 分析 记 D(i) 为点 1 和点 i 间的距离， G(i,j) 为将点 [i,j] 的人移动到 j 的花费，则 G(x,y)=\sum\limits_{x\leq i\leq y}{(D(y)-D(i))\cdot A(i)} 。 若当前选择点 i 为第二个集合点，点 j(1\leq j &lt; i) 为第一个集合点，则总花费为 \min\limits_{1\leq i &lt; j}(G(1,j)+G(j+1,i)+G(i+1,n+1)) 。 设 X(i)=\sum\limits_{j=1}^{i}{A(j)\cdot D(j)} ， Y(i)=\sum\limits_{j=1}^{i}{A(j)} ，则 G(x,y)=D(y)(Y(y)-Y(x-1))-X(y)+X(x-1) 。 若从点 j 转移比从点 k(1\leq j &lt; k &lt; i) 转移更优，则需要满足： G(1,j)+G(j+1,i)+G(i+1,n+1) &lt; G(1,k)+G(k+1,i)+G(i+1,n+1) ，移项整理可得 \frac{D(j)Y(j)-D(k)Y(k)}{Y(j)-Y(k)} &gt; D(i) 。 D(i) 单调递增，左式与 i 无关，称之为 j,k 点间的斜率。因此可以斜率优化DP。 维护单调队列，求当前点 i 时，队内元素 q_1 &lt; q_2 &lt; \cdots q_m 满足相邻两点 q_i,q_j 的斜率大于 D(i) ，且斜率单调递增。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: CEOI 2004 * @Problem: 1131. 【CEOI2004】锯木场选址Two(踢我) * @Url: https://jzoj.net/senior/#main/show/1131 * @Date: 2019-02-23 11:47:58 * @LastEditTime: 2019-02-23 16:36:42 */#include &lt;bits/stdc++.h&gt;const int MAXN = 20000 + 5;int N;long long A[MAXN], B[MAXN], D[MAXN], X[MAXN], Y[MAXN];int Que[MAXN], qh, qt;long long cost(int l, int r) &#123; return D[r] * (Y[r] - Y[l - 1]) - (X[r] - X[l - 1]); &#125;double cal(int x, int y) &#123; return (double)(D[x] * Y[x] - D[y] * Y[y]) / (Y[x] - Y[y]); &#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld%lld", &amp;A[i], &amp;B[i]); &#125; for (int i = 1; i &lt;= N + 1; ++i) &#123; Y[i] = Y[i - 1] + A[i]; D[i] = D[i - 1] + B[i - 1]; X[i] = X[i - 1] + D[i] * A[i]; &#125; Que[qt++] = 0; long long ans = LLONG_MAX; for (int i = 1; i &lt;= N; ++i) &#123; while (qt - qh &gt; 1 &amp;&amp; cal(Que[qh], Que[qh + 1]) &lt;= D[i]) ++qh; ans = std::min(ans, cost(1, Que[qh]) + cost(Que[qh] + 1, i) + cost(i + 1, N + 1)); while (qt - qh &gt; 1 &amp;&amp; cal(Que[qt - 2], Que[qt - 1]) &gt;= cal(Que[qt - 1], i)) --qt; Que[qt++] = i; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>JZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2008」BZOJ 1010 玩具装箱toy]]></title>
    <url>%2FBZOJ-1010%2F</url>
    <content type="text"><![CDATA[用若干个区间覆盖 n 个数 A[1 \cdots n] ，区间 [l,r] 的花费为 (\sum\limits_{i=l}^{r}{A[i]}+r-l-L)^2 。求总花费的最小值。 n\leq 50000,A_i,L &gt; 0 分析 记 F[i] 为覆盖前 i 个数的最小花费， S[i]=\sum\limits_{j=1}^{i}{A[j]} 。即可得到一个simple的DP转移方程， F[i]=\min\limits_{1\leq j &lt; i}(F[j]+(S[i]-S[j]+i-j-1-L)^2) 。 但是复杂度太高，为 O(n^2) ，需要优化。 考虑两个决策点 j,k(j &lt; k) ，什么时候 j 会更优。 即满足 F[j]+(S[i]-S[j]+i-j-1-L)^2-F[k]+(S[i]-S[k]+i-k-1-L)^2 &gt; 0 。 设 S'[i]=S[i]+i-1 ，整理可得： F[j]-F[k]-2(S'[i]-L-1)(S'[j]-S'[k])+S'^2[j]-S'^2[k]&gt;0 。 移项得 \frac{F[i]-F[k]+(S'[j]+S'[k]+2L+2)(S'[j]-S'[k])}{2(s'[j]-s'[k])}&gt;S'[i] 。 发现左式与 i 无关，且 S'[i] 单调不减。这是一个斜率优化的题。 设左式为 j,k 间的斜率，维护单调队列，满足相邻两点间的斜率单调递增，且大于 S'[i] 。每次取队首决策点更新当前 F[i] ，并将 i 插入队尾。 复杂度 O(n)) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: HNOI 2008 * @Problem: 1010: [HNOI2008]玩具装箱toy * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1010 * @Date: 2019-02-23 09:47:42 * @LastEditTime: 2019-02-23 11:03:34 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;int N, L;long long A[MAXN], F[MAXN], S[MAXN];int Que[MAXN], qh, qt;double cal(int j, int k) &#123;return (F[j] - F[k] + (S[j] + S[k] + 2 * L + 2) * (S[j] - S[k])) / 2 / (S[j] - S[k]);&#125;int main() &#123;scanf("%d%d", &amp;N, &amp;L);for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]);&#125;Que[qt++] = 0;S[0] = -1;for (int i = 1; i &lt;= N; ++i) &#123; S[i] = S[i - 1] + A[i] + 1; while (qt - qh &gt; 1 &amp;&amp; cal(Que[qh], Que[qh + 1]) &lt;= S[i]) &#123; ++qh; &#125; F[i] = F[Que[qh]] + (S[i] - S[Que[qh]] - L - 1) * (S[i] - S[Que[qh]] - L - 1); while (qt - qh &gt; 1 &amp;&amp; cal(Que[qt - 2], Que[qt - 1]) &gt;= cal(Que[qt - 1], i)) &#123; --qt; &#125; Que[qt++] = i;&#125;printf("%lld\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2007 Mar」BZOJ 1639 Monthly Expense 月度开支]]></title>
    <url>%2FBZOJ-1639%2F</url>
    <content type="text"><![CDATA[将 A[1 \cdots N] 划分成 M 个区间，使得各区间和的最大值最小。 N,M\leq 100000 分析 二分答案。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* * @Author: Skqliao * @Source: USACO2007 Mar * @Problem: 1639: [Usaco2007 Mar]Monthly Expense 月度开支 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1639 * @Date: 2019-02-22 17:05:58 * @LastEditTime: 2019-02-22 17:19:34 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int N, M;int A[MAXN];bool check(long long x) &#123; int left = M; long long sum = 0; for (int i = 1; i &lt;= N; ++i) &#123; if (sum + A[i] &gt; x) &#123; sum = 0; --left; &#125; sum += A[i]; &#125; return left &gt; 0;&#125;int main() &#123; long long mx = 0, sum = 0; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); sum += A[i]; mx = std::max(mx, (long long)A[i]); &#125; long long l = mx, r = sum; long long ans = 0; while (l &lt;= r) &#123; long long m = (l + r) / 2; if (check(m)) &#123; r = m - 1; ans = m; &#125; else l = m + 1; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2010」BZOJ 1816 扑克牌]]></title>
    <url>%2FBZOJ-1816%2F</url>
    <content type="text"><![CDATA[有 N 种牌，各有 A_i 张。还有一类特殊的牌，有 M 张。每副牌由 N 张不同的牌组成，求最多能凑出多少副牌。 N\leq 50,M,A_i\leq 5000000000 分析 答案显然具有单调性，因此可以二分答案将求最值问题转为判定可行性问题。 假设当前判定是否能凑出 x 副牌。对于 A_i\geq x 的牌，显然每副牌中都能放一张；对于 A_i &lt; x 的牌，需要用特殊的牌补。若特殊的牌不够或者在一副牌中出现两次，则判定失败。 也就是说这些牌需要至少凑够前 N-1 个位置，用特殊的牌补最后一张，即需要满足 \sum{min(x,A_i)} &lt; min(M,x) 。 复杂度 O(M\log{\sum{A_i}}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * @Author: Skqliao * @Source: CQOI 2010 * @Problem: 1816: [Cqoi2010]扑克牌 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1816 * @Date: 2019-02-22 16:23:14 * @LastEditTime: 2019-02-22 16:55:38 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50 + 5;int N;long long M, A[MAXN];bool check(long long x) &#123; long long tot = 0; for (int i = 1; i &lt;= N; ++i) &#123; tot += std::min(x, A[i]); &#125; return N * x - tot &lt;= std::min(x, M);&#125;int main() &#123; scanf("%d%lld", &amp;N, &amp;M); long long sum = M; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); sum += A[i]; &#125; long long l = 0, r = sum / N; long long ans = 0; while (l &lt;= r) &#123; long long m = (l + r) / 2; if (check(m)) &#123; ans = m; l = m + 1; &#125; else r = m - 1; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2005 Dec」BZOJ 1671 Knights of Ni 骑士]]></title>
    <url>%2FBZOJ-1671%2F</url>
    <content type="text"><![CDATA[在 N\times M 的网格图中，初始位于 (x,y) 。每个点有属性 1-4 ，若属性为 1 则不可经过。要求先走到一个属性为 4 的格子，再走到一个属性为 3 的格子，要求在走到 4 之前不能经过 3 。求最少步数。 N,M\leq 1000 分析 做两次BFS，第一次初始为 (x,y) ，求出到每个 4 的最小步数，再以这些点为起点求出总步数。 复杂度 O(NM) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/* * @Author: Skqliao * @Source: USACO2005 Dec * @Problem: 1671: [Usaco2005 Dec]Knights of Ni 骑士 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1671 * @Date: 2019-02-22 15:35:46 * @LastEditTime: 2019-02-22 16:14:24 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int A[MAXN][MAXN];int Step[MAXN][MAXN];std::queue&lt;std::pair&lt;int, int&gt; &gt; Que;int bfs(int sx, int sy) &#123; memset(Step, 0x3f, sizeof Step); Step[sx][sy] = 0; Que.push(std::make_pair(sx, sy)); while (!Que.empty()) &#123; std::pair&lt;int, int&gt; a = Que.front(); Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.first + Dicx[i]; int y = a.second + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) continue; if (A[x][y] != 1 &amp;&amp; A[x][y] != 3) &#123; if (Step[x][y] &gt; Step[a.first][a.second] + 1) &#123; Step[x][y] = Step[a.first][a.second] + 1; Que.push(std::make_pair(x, y)); &#125; &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 4) &#123; Que.push(std::make_pair(i, j)); &#125; else &#123; Step[i][j] = 0x3f3f3f3f; &#125; &#125; &#125; while (!Que.empty()) &#123; std::pair&lt;int, int&gt; a = Que.front(); Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.first + Dicx[i]; int y = a.second + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) continue; if (A[x][y] != 1) &#123; if (Step[x][y] &gt; Step[a.first][a.second] + 1) &#123; Step[x][y] = Step[a.first][a.second] + 1; Que.push(std::make_pair(x, y)); &#125; &#125; &#125; &#125; int ans = INT_MAX; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 3) ans = std::min(ans, Step[i][j]); &#125; &#125; return ans;&#125;int main() &#123; int sx = 0, sy = 0; scanf("%d%d", &amp;M, &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); if (A[i][j] == 2) &#123; sx = i, sy = j; &#125; &#125; &#125; printf("%d\n", bfs(sx, sy)); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2013」BZOJ 3170 松鼠聚会]]></title>
    <url>%2FBZOJ-3170%2F</url>
    <content type="text"><![CDATA[坐标系中有 n 个点 (x_i,y_i) ，选择一点 (x_j,y_j) ，使得所有点到该点的切比雪夫距离之和最小。 n\leq 10^5 分析 dis(i,j)=max(|x_i-x_j|,|y_i-y_j|) 。 设 X_i=x_i-y_i,Y_i=x_i+y_i ，则 dis(i,j)=\frac{|X_i-X_j|+|Y_i-Y_j|}{2} ，因此 x,y 两部分可以分别计算。 分别按 x,y 排序，做前缀和，则 \sum\limits_{i=1}^{n}|{X_i-X_j}|=(j-1)\cdot X_j-sumx_{j-1}+sum_n-sum_j-(n-j)\cdot X_j 。即可 O(n) 计算出最小距离。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/* * @Author: Skqliao * @Source: TJOI 2013 * @Problem: 3170: [Tjoi2013]松鼠聚会 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3170 * @Date: 2019-02-22 14:13:36 * @LastEditTime: 2019-02-22 15:06:32 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;struct Node &#123; int id; long long x, y;&#125; A[MAXN];int N;bool cmp1(const Node&amp; x, const Node&amp; y) &#123; return x.x &lt; y.x;&#125;bool cmp2(const Node&amp; x, const Node&amp; y) &#123; return x.y &lt; y.y;&#125;long long Sum[MAXN];long long X[MAXN], Y[MAXN];int main() &#123; int x, y; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;x, &amp;y); A[i] = (Node) &#123;i, x - y, x + y&#125;; &#125; std::sort(A + 1, A + N + 1, cmp1); for (int i = 1; i &lt;= N; ++i) &#123; Sum[i] = Sum[i - 1] + A[i].x; &#125; for (int i = 1; i &lt;= N; ++i) &#123; X[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].x; X[A[i].id] += (i - 1) * A[i].x - Sum[i - 1]; &#125; std::sort(A + 1, A + N + 1, cmp2); for (int i = 1; i &lt;= N; ++i) &#123; Sum[i] = Sum[i - 1] + A[i].y; &#125; for (int i = 1; i &lt;= N; ++i) &#123; Y[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].y; Y[A[i].id] += (i - 1) * A[i].y - Sum[i - 1]; &#125; long long ans = LLONG_MAX; for (int i = 1; i &lt;= N; ++i) &#123; ans = std::min(ans, X[i] + Y[i]); &#125; printf("%lld\n", ans / 2); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2006」BZOJ 1862 GameZ游戏排名系统]]></title>
    <url>%2FBZOJ-1862%2F</url>
    <content type="text"><![CDATA[有 n 个操作： 更新name的得分为score（删除以前的得分） 查询name的排名（得分相同按照时间先后排名） 查询得分第 [k,k+10] 名的人的名字（如果没有 k+10 个人就输出到最后一名为止） n\leq 250000 分析 很明显的平衡树的板子，只是处理起来麻烦一些。 按照得分为第一关键字，时间为第二关键字维护平衡树，用一个map映射名字对应的得分。 平衡树需支持插入，删除，查询第 k 大，查询名次，查询前驱的操作。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173/* * @Author: Skqliao * @Source: ZJOJ 2006 * @Problem: 1862: [Zjoi2006]GameZ游戏排名系统 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1862 * @Date: 2019-02-21 16:26:15 * @LastEditTime: 2019-02-22 13:59:09 */#include &lt;bits/stdc++.h&gt;#include &lt;bits/extc++.h&gt;const int MAXN = 250000 + 5;int N;std::string s;struct Treap &#123; std::string name; int key, key2, fix; int sz; Treap* ch[2]; int cmp(int x, int y) &#123; if (key == x) &#123; return y == key2 ? -1 : y &lt; key2; &#125; return x &gt; key; &#125; void pushUp() &#123; sz = 1; if (ch[0]) sz += ch[0]-&gt;sz; if (ch[1]) sz += ch[1]-&gt;sz; &#125;&#125; *R(NULL), Pool[MAXN];int cntP;Treap* newTreap(int x, int t) &#123; Pool[++cntP] = (Treap) &#123;s, x, t, rand(), 1, NULL, NULL&#125;; return Pool + cntP;&#125;void rotate(Treap*&amp; t, int d) &#123; Treap* k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap*&amp; t, int x, int y) &#123; if (!t) &#123; t = newTreap(x, y); return; &#125; int d = t-&gt;cmp(x, y); ++t-&gt;sz; insert(t-&gt;ch[d], x, y); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125;&#125;void erase(Treap*&amp; t, int x, int y) &#123; if (!t) return; --t-&gt;sz; int d = t-&gt;cmp(x, y); if (d == -1) &#123; if (!t-&gt;ch[0]) &#123; t = t-&gt;ch[1]; &#125; else if (!t-&gt;ch[1]) &#123; t = t-&gt;ch[0]; &#125; else &#123; int e = t-&gt;ch[0]-&gt;fix &gt; t-&gt;ch[1]-&gt;fix; rotate(t, e); erase(t-&gt;ch[e], x, y); &#125; &#125; else &#123; erase(t-&gt;ch[d], x, y); &#125; if (t) &#123; t-&gt;pushUp(); &#125;&#125;int queryRank(Treap*&amp; t, int x, int y) &#123; int num = t-&gt;ch[1] ? t-&gt;ch[1]-&gt;sz : 0; int d = t-&gt;cmp(x, y); if (d == -1) &#123; return num + 1; &#125; else if (d == 0) &#123; return num + 1 + queryRank(t-&gt;ch[0], x, y); &#125; else &#123; return queryRank(t-&gt;ch[1], x, y); &#125;&#125;std::pair&lt;int, int&gt; queryKth(Treap*&amp; t, int x) &#123; int num = t-&gt;ch[1] ? t-&gt;ch[1]-&gt;sz : 0; if (x == num + 1) &#123; return std::make_pair(t-&gt;key, t-&gt;key2); &#125; else if (x &lt;= num) &#123; return queryKth(t-&gt;ch[1], x); &#125; else &#123; return queryKth(t-&gt;ch[0], x - num - 1); &#125;&#125;int mn, mn2;void queryPre(Treap*&amp; t, int x, int y) &#123; if (!t) return; int d = t-&gt;cmp(x, y); if (d != 0) &#123; if (t-&gt;key &gt; mn) &#123; mn = t-&gt;key; mn2 = t-&gt;key2; s = t-&gt;name; &#125; else if (t-&gt;key == mn &amp;&amp; t-&gt;key2 &lt; mn2) &#123; mn2 = t-&gt;key2; s = t-&gt;name; &#125; queryPre(t-&gt;ch[1], x, y); &#125; else &#123; queryPre(t-&gt;ch[0], x, y); &#125;&#125;__gnu_pbds::gp_hash_table&lt;std::string, int&gt; Map, Map2;int main() &#123; int x; //srand((unsigned long long)new char); std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cin &gt;&gt; N; s = "skqliao"; insert(R, -INT_MAX, INT_MAX); for (int i = 1; i &lt;= N; ++i) &#123; std::cin &gt;&gt; s; if (s[0] == '+') &#123; s = s.substr(1); std::cin &gt;&gt; x; if (Map.find(s) != Map.end()) &#123; erase(R, Map[s], Map2[s]); &#125; Map[s] = x; Map2[s] = i; insert(R, x, i); &#125; else if (s[0] == '?') &#123; if (isdigit(s[1])) &#123; int x = 0; for (size_t i = 1; i &lt; s.size(); ++i) &#123; x = x * 10 + s[i] - '0'; &#125; std::pair&lt;int, int&gt; a = queryKth(R, x); x = a.first; int y = a.second; for (int i = 0; i &lt; 10; ++i) &#123; mn = -INT_MAX; mn2 = INT_MAX; queryPre(R, x, y); if (mn == -INT_MAX) break; std::cout &lt;&lt; s &lt;&lt; " "; x = mn, y = mn2 + 1; &#125; std::cout &lt;&lt; "\n"; &#125; else &#123; std::cout &lt;&lt; queryRank(R, Map[s.substr(1)], Map2[s.substr(1)]) &lt;&lt; "\n"; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2008」BZOJ 1040 骑士]]></title>
    <url>%2FBZOJ-1040%2F</url>
    <content type="text"><![CDATA[每个点有权值 W_i ，选择点 i 后不能选择点 A_i 。选择任意多个点，使得权值和最大。 N\leq 1000000 分析 根据题意，不能同时选择点 i 和 A_i 。 该图有 N 个点 N 条边，因此是个基环树森林。 对于每棵基环树，断掉环上任意一条边 (u,v) 。以 u,v 分别为根跑树形DP，父亲儿子不能被同时选择，且根节点不能被选。则这棵基环树的贡献为两次DP的较大值。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778/* * @Author: Skqliao * @Source: BZOJ 2008 * @Problem: 1040: [ZJOI2008]骑士 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1040 * @Date: 2019-02-21 15:39:58 * @LastEditTime: 2019-02-21 16:12:59 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;int W[MAXN];struct Edge &#123;int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE = -1;void addEdge(int u, int v) &#123;E[++cntE] = (Edge) &#123;v, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, H[v]&#125;;H[v] = cntE;&#125;int Vis[MAXN], cnt;int fir, sec, cut;void dfs(int x, int fa) &#123;Vis[x] = cnt;for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; if (!Vis[v]) &#123; dfs(v, x); &#125; else &#123; fir = x; sec = v; cut = i; &#125; &#125;&#125;&#125;long long F[MAXN][2];long long dp(int x, int fa) &#123;F[x][1] = W[x];F[x][0] = 0;for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (i == cut || i == (cut ^ 1) || v == fa) continue; dp(v, x); F[x][0] += std::max(F[v][0], F[v][1]); F[x][1] += F[v][0];&#125;return F[x][0];&#125;int main() &#123;memset(H, -1, sizeof H);scanf("%d", &amp;N);int x;for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;W[i], &amp;x); addEdge(x, i);&#125;long long ans = 0;for (int i = 1; i &lt;= N; ++i) &#123; if (Vis[i]) continue; ++cnt; dfs(i, 0); ans += std::max(dp(fir, 0), dp(sec, 0));&#125;printf("%lld\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>基环树</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2008」BZOJ 1054 移动玩具]]></title>
    <url>%2FBZOJ-1054%2F</url>
    <content type="text"><![CDATA[给定两个 4\times 4 的01矩阵，每次可以交换一对相邻的 0,1 ，求前一个矩阵转移到后一个矩阵的最少步数。 分析 BFS+Hash。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/* * @Author: Skqliao * @Source: HAOI 2008 * @Problem: 1054: [HAOI2008]移动玩具 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1054 * @Date: 2019-02-18 22:53:30 * @LastEditTime: 2019-02-21 15:15:00 */#include &lt;bits/stdc++.h&gt;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;struct Node &#123;std::string code;int step;&#125;;std::string s, t, x;std::multiset&lt;std::string&gt; Vis;std::queue&lt;Node&gt; Que;int bfs() &#123;Que.push((Node) &#123;s, 0&#125;);while (!Que.empty()) &#123; Node a = Que.front(); Que.pop(); for (int p = 0; p &lt; 16; ++p) &#123; if (a.code[p] == '0') continue; int i = p / 4, j = p % 4; for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k], y = j + Dicy[k]; if (x &lt; 0 || y &lt; 0 || x &gt; 3 || y &gt; 3) continue; if (a.code[x * 4 + y] == '1') continue; std::string b = a.code; b[p] = '0'; b[x * 4 + y] = '1'; if (Vis.count(b)) continue; Vis.insert(b); if (t == b) return a.step + 1; Que.push((Node) &#123;b, a.step + 1&#125;); &#125; &#125;&#125;&#125;int main() &#123;for (int i = 0; i &lt; 4; ++i) &#123; std::cin &gt;&gt; x; s += x;&#125;for (int i = 0; i &lt; 4; ++i) &#123; std::cin &gt;&gt; x; t += x;&#125;if (s == t) std::cout &lt;&lt; 0;else std::cout &lt;&lt; bfs();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「FJOI 2007」BZOJ 1002 轮状病毒]]></title>
    <url>%2FBZOJ-1002%2F</url>
    <content type="text"><![CDATA[求 N 轮状病毒的不同状态数。 N\leq 100 分析 发现中间的点度数为 N ，其他点度数为 3 ，用矩阵树定理解即可。 也可以暴力打表找规律，记 f(i) 为 i 轮状病毒的状态数，递推式为 f(i)=3\cdot f(i-1)-f(i-2)+2 。 python打表或者写高精度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687/* * @Author: Skqliao * @Date: 2019-02-16 20:21:57 * @LastEditTime: 2019-02-16 21:10:05 * @Source: FJOI 2007 * @Problem: 1002: [FJOI2007]轮状病毒 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1002 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N;struct Int &#123;static const int MAXN = 10000 + 5;int len, S[MAXN];Int operator=(int x) &#123; memset(S, 0, sizeof S); len = 0; while (x) &#123; S[len++] = x % 10; x /= 10; &#125; return *this;&#125;Int operator+(const Int &amp;x) &#123; Int c; c.len = std::max(len, x.len); memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i] += S[i] + x.S[i]; c.S[i + 1] += c.S[i] / 10; c.S[i] %= 10; &#125; if (c.S[c.len]) ++c.len; return c;&#125;Int operator-(const Int &amp;x) &#123; Int c; c.len = len; memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i] = S[i] - x.S[i]; while (c.S[i] &lt; 0) &#123; c.S[i] += 10; S[i + 1]--; &#125; &#125; while (!c.S[c.len - 1]) --c.len; return c;&#125;Int operator*(const Int &amp;x) &#123; Int c; c.len = len + x.len - 1; memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; len; ++i) &#123; for (int j = 0; j &lt; x.len; ++j) &#123; c.S[i + j] += S[i] * x.S[j]; &#125; &#125; for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i + 1] += c.S[i] / 10; c.S[i] %= 10; &#125; if (c.S[c.len]) ++c.len; return c;&#125;void print() &#123; for (int i = len - 1; i &gt;= 0; --i) &#123; printf("%d", S[i]); &#125;&#125;&#125; F[MAXN], x, y;int main() &#123;scanf("%d", &amp;N);x = 2;y = 3;F[1] = 1;F[2] = 5;for (int i = 3; i &lt;= N; ++i) &#123; F[i] = y * F[i - 1] - F[i - 2] + x;&#125;F[N].print();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>矩阵树定理</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2006」BZOJ 1003 物流运输]]></title>
    <url>%2FBZOJ-1003%2F</url>
    <content type="text"><![CDATA[一共有 n 天，每天要在无向图 G 中从 1 走到 m 。有 k 个限制条件，即不能在第 [l,r] 天中经过点 i 。每天的花费为路径总长度，每次更换线路（相比于前一天）会额外增加 k 的花费，求最小花费。 n\leq 100,m\leq 20 分析 点数极少，因此我们可以通过 n^2 次最短路，预处理出来第 [l,r] 天的每天的最小花费 C[l][r] （保证该花费对应的路径在第 [l,r] 天都是合法的）。 然后DP， F[i] 表示前 i 天最小的总花费。枚举上一次更换的时间 j ，则 F[i]=\min\{F[j-1]+(j-i+1)\cdot C[j][i]+K\cdot[j\not = 1]\}(1\leq j\leq i) 。 复杂度 O(n^2m\log{m}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586/* * @Author: Skqliao * @Date: 2019-02-16 18:54:21 * @LastEditTime: 2019-02-16 20:02:16 * @Source: ZJOI 2006 * @Problem: 1003: [ZJOI2006]物流运输 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1003 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N, M, K, P, D;int W[MAXN][MAXN];struct Edge &#123;int v, w, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, w, H[v]&#125;;H[v] = cntE;&#125;typedef std::pair&lt;int, int&gt; pii;int dijkstra(int l, int r) &#123;static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq;static int Dis[MAXN];static bool Vis[MAXN];memset(Vis, 0, sizeof Vis);memset(Dis, 0x3f, sizeof Dis);Dis[1] = 0;Pq.push(std::make_pair(0, 1));for (int i = l; i &lt;= r; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (W[i][j]) Vis[j] = 1; &#125;&#125;while (!Pq.empty()) &#123; while (!Pq.empty() &amp;&amp; Pq.top().first &gt; Dis[Pq.top().second]) Pq.pop(); if (Pq.empty()) break; int x = Pq.top().second; Pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v] || Dis[v] &lt; Dis[x] + E[i].w) continue; Dis[v] = Dis[x] + E[i].w; Pq.push(std::make_pair(Dis[v], v)); &#125;&#125;return Dis[M];&#125;int F[MAXN], G[MAXN][MAXN];int main() &#123;int u, v, w;scanf("%d%d%d%d", &amp;N, &amp;M, &amp;K, &amp;P);for (int i = 1; i &lt;= P; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w);&#125;scanf("%d", &amp;D);for (int i = 1; i &lt;= D; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); for (int j = v; j &lt;= w; ++j) W[j][u] = 1;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = i; j &lt;= N; ++j) &#123; G[i][j] = dijkstra(i, j); &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; F[i] = INT_MAX; if (G[1][i] != 0x3f3f3f3f) F[i] = i * G[1][i]; for (int j = 2; j &lt;= i; ++j) &#123; if (G[j][i] != 0x3f3f3f3f) F[i] = std::min(F[i], F[j - 1] + G[j][i] * (i - j + 1) + K); &#125;&#125;printf("%d\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ICPC-Beijing 2006」BZOJ 1001 狼抓兔子]]></title>
    <url>%2FBZOJ-1001%2F</url>
    <content type="text"><![CDATA[在网格图中，任意点 (x,y) 都有 (x,y)\rightarrow (x+1,y) / (x,y)\rightarrow (x,y+1) / (x,y)\rightarrow (x+1,y+1) 这三种边。起点 S 位于 (1,1) ，终点 T 位于 (n,m) 。求 S-T 最小割。 n,m\leq 1000 分析 如果根据最大流最小割定理，通过求 S-T 最大流得到最小割的话，是行不通的，因为该图有最多 1000^2 个点。 但是本题特殊的一点在于这是一个平面图，可以将其转化为对偶图，通过求对偶图上的最短路得到原图的最小割。 平面图转对偶图的流程如下： 用一条不与其他任何边相交的新边连接 S,T ，构成一个新面 将平面图的每个面对应为对偶图的点，第一步构造的新面和无边界的面作为新图的起点 s 和终点 t 如果原图中边 e 同时属于两个面 s1,s2 ，则在新图中 s1 和 s2 之间连一条权值与 e 相同的无向边 删去 s,t 之间的边 则 s-t 最短路对应 S-T 最大流。 复杂度 O(nm\lg{nm}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596/* * @Author: Skqliao * @Date: 2019-02-13 12:36:43 * @LastEditTime: 2019-02-13 18:20:57 * @Source: BJOI 2006 * @Problem: 1001: [BeiJing2006]狼抓兔子 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1001 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2 * 1000 * 1000 + 5;const int MAXM = MAXN * 3;struct Edge &#123;int v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, w, H[v]&#125;;H[v] = cntE;&#125;int N, M;int S, T;typedef std::pair&lt;int, int&gt; pii;int Dis[MAXN];int dijkstra() &#123;static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq;memset(Dis, 0x3f, sizeof Dis);Dis[S] = 0;Pq.push(std::make_pair(Dis[S], S));while (!Pq.empty()) &#123; while (!Pq.empty() &amp;&amp; Dis[Pq.top().second] &lt; Pq.top().first) Pq.pop(); if (Pq.empty()) break; int x = Pq.top().second; Pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125;&#125;return Dis[T];&#125;int main() &#123;int x;scanf("%d%d", &amp;N, &amp;M);if (N == 1 || M == 1) &#123; int ans = INT_MAX; while (~scanf("%d", &amp;x)) ans = std::min(ans, x); printf("%d\n", ans);&#125; else &#123; N--, M--; S = 0, T = N * M * 2 + 1; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d", &amp;x); addEdge(i, T, x); &#125; for (int i = 2; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 3) * M + j, (2 * i - 2) * M + j, x); &#125; &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d", &amp;x); addEdge((2 * N - 1) * M + i, S, x); &#125; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); addEdge((2 * i - 1) * M + 1, S, x); for (int j = 1; j &lt;= M - 1; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 2) * M + j, (2 * i - 2) * M + j + M + 1, x); &#125; scanf("%d", &amp;x); addEdge((2 * i - 1) * M, T, x); &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 2) * M + j, (2 * i - 2) * M + j + M, x); &#125; &#125; printf("%d\n", dijkstra());&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>对偶图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1312 Neerc2006 Hard Life]]></title>
    <url>%2FBZOJ-1312%2F</url>
    <content type="text"><![CDATA[无向图 G 有 n 个点 m 条边，对于任意子图 G'\in G ，定义它的权值为 |E|/|V| ，其中 |E|,|V| 分别为子图的边数和点数。求在最大化子图权值的条件下，子图点数的最大值。 n\leq 100,m\leq 1000 分析 如果将 |E|,|V| 拓展为边权和与点权和，那么最大化子图 |E|/|V| 即求最大密度子图。而本题只是边权点权皆为 1 的特殊情况。 对于这类问题，可采用分数规划+最小割来解决。 首先二分 k=|E|/|V| ，则 |E| = k\cdot |V| 。如果两个点被选择，则可以获得这条边的权值，由此问题可以转化为求最大权闭合子图。 将每条边 (u_i,v_i) 抽象为新点 A_i ，连接 (S,A_i) ，容量为 1 。 A_i 向 u_i,v_i 连接容量为无穷的边。原点向 T 连边，容量为二分的 k 值。 二分 k 直到求得最大权闭合子图权值 &lt; 0 为止。 既然要求在最大化权值情况下的点个数的最大值，那么再跑一遍最小割（ k 取允许的最大值），与 S 联通的原点即为子图的点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130/* * @Author: Skqliao * @Date: 2019-02-12 18:50:43 * @LastEditTime: 2019-02-12 22:17:09 * @Source: BZOJ * @Problem: Neerc2006 Hard Life * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1312 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2100 + 5;const int MAXM = MAXN * 5;const double eps = 8e-6;struct Edge &#123; int v; double f, cap; int nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Cur[MAXN], Dis[MAXN];int S, T;void addEdge(int u, int v, double f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); if (x == T) return true; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f &gt; eps) &#123; Dis[v] = Dis[x] + 1; Que.push(v); &#125; &#125; &#125; return false;&#125;double dfs(int x, double maxf) &#123; if (x == T) return maxf; double left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &gt; eps) &#123; double flow = dfs(v, std::min(left, E[i].f)); if (flow &gt; eps) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (left &lt; eps) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;double dinic() &#123; double flow = 0; while (bfs()) &#123; flow += dfs(S, INT_MAX); &#125; return flow;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;int N, M;bool check(double x) &#123; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = H[i]; ~j; j = E[j].nxt) &#123; if (E[j].v == T) &#123; E[j].f = E[j].cap = x; &#125; &#125; &#125; return M - dinic() &gt; eps;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); if (M == 0) &#123; puts("1"); return 0; &#125; init(N + M); for (int i = 1; i &lt;= N; ++i) &#123; addEdge(i, T, 0); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(S, i + N, 1); addEdge(i + N, u, INT_MAX); addEdge(i + N, v, INT_MAX); &#125; double l = 0, r = M; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; l = m; &#125; else r = m; &#125; check(l - eps); int ans = 0; for (int i = 1; i &lt;= N; ++i) &#123; if (Dis[i] != -1) ++ans; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最大密度子图</tag>
        <tag>分数规划</tag>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「NOI 2006」BZOJ 1497 最大获利]]></title>
    <url>%2FBZOJ-1497%2F</url>
    <content type="text"><![CDATA[有 N 个点，选择点 i 花费 A_i 的代价。有 M 个关系，如果点 x_i,y_i 均被选择，则可以获得收益 B_i 。求收益-代价的最大值。 N\leq 5000,M\leq 50000 分析 这类问题也是常见的二元关系类题目，称之为最大权闭合子图。 将每个点的花费作为该点的点权（负数），将两点间的边抽象成一个点，点权为收益，新点向这两个点连有向边。 那么如果选择收益对应的点，就必须也选择其所有后继。最终求选择的子图点权和的最大值，这正是求最大权闭合子图。 根据相关建图方法，该问题可以转化为求最小割。 S 向所有正点权的点连边，容量为该点点权。所有负权点向 T 连边，容量为点权的绝对值。原图的所有边保留，容量为无穷大。则原图的最大权闭合子图的权值和为原图中所有正点权权值之和-新图最小割。 简易证明如下： 考虑一条有向边 x\rightarrow y ，如果 x 被选择则 y 必须被选择。即若 y 不选且 x 选，需要付出无穷的代价。清楚这一点后，根据网络流之二元关系的建图套路便能得到新图。 按照常理说这么多点和边的图跑网络流是很慢的，1s的时间跑不出来。但是对于这道题而言，图只有四层，即 S /正权点/负权点/ T ，所以每次增广时的深度很小，也就跑的很快。（纯粹口胡） 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-02-12 18:09:52 * @LastEditTime: 2019-02-12 18:23:18 * @Source: NOI 2006 * @Problem: 1497: [NOI2006]最大获利 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1497 */#include &lt;bits/stdc++.h&gt;const int MAXN = 55000 + 5;const int MAXM = MAXN * 3;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int S, T;int Cur[MAXN], Dis[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memset(Dis, -1, sizeof Dis); memcpy(Cur, H, sizeof H); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) &#123; flow += dfs(S, INT_MAX); &#125; return flow;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;int N, M;int ans;int main() &#123; int x, y, z; scanf("%d%d", &amp;N, &amp;M); init(N + M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); addEdge(i, T, x); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); addEdge(S, i + N, z); addEdge(i + N, x, INT_MAX); addEdge(i + N, y, INT_MAX); ans += z; &#125; printf("%d\n", ans - dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割</tag>
        <tag>最大权闭合子图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「湖南省队训练 2013」BZOJ 3894 文理分科]]></title>
    <url>%2FBZOJ-3894%2F</url>
    <content type="text"><![CDATA[在 n\times m 的矩阵中，每个格子可以选择 0 或 1 ，分别获得收益 A_{i,j} 与 B_{i,j} 。如果一个格子和与它四相邻的格子选择相同，则额外获得收益 C_{i,j} 与 D_{i,j} （都选 0 或都选 1 ）。求总收益的最大值。 n,m\leq 100,A_{i,j},B_{i,j},C_{i,j},D_{i,j}\leq 500 分析 还是二元关系的题目，相比于happiness要复杂一些。 照旧将最大值转化为所有收益-最小割。 建图方法如下： 对于每个点 x ，割去 (S,x) 表示不选文科，割去 (x,T) 表示不选理科，容量为 A_x 和 B_x 。 新建点 a_x,b_x ，表示 x 以及四相邻的点均选择 0 或 1 。连接 (S,a_x) 和 (b_x,T) ，容量分别为 C_x 和 D_x 。 但是可能会出现不合法的情况，即相邻点选择理科，但是又割去 (b_x,T) 。因此让 a_x 向这五个点（ x 与相邻的四个点）连接一条容量为无穷的边。这就使在这种情况下 (b_x,T) 无法被割去（因为割会经过一条容量为无穷的边，这样的割显然不是最小割）。 同理，让这五个点向 b_x 连接一条容量为无穷的边。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143/* * @Author: Skqliao * @Date: 2019-02-11 22:29:59 * @LastEditTime: 2019-02-11 22:56:26 * @Source: 2013湖南省队集训 * @Problem: 3894: 文理分科 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3894 */#include &lt;bits/stdc++.h&gt;namespace mxf &#123;const int MAXN = 3 * 100 * 100 + 10;const int MAXM = MAXN * 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int S, T;int Cur[MAXN], Dis[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow;&#125;&#125; // namespace mxfusing mxf::addEdge;using mxf::S;using mxf::T;const int MAXN = 100 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int ans;int Id[MAXN][MAXN];bool judge(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= M; &#125;int main() &#123; int x; scanf("%d%d", &amp;N, &amp;M); mxf::init(N * M * 3); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; Id[i][j] = (i - 1) * M + j; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(S, Id[i][j], x); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(Id[i][j], T, x); &#125; &#125; int cur = N * M; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(S, ++cur, x); addEdge(cur, Id[i][j], INT_MAX); for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k]; int y = j + Dicy[k]; if (judge(x, y)) addEdge(cur, Id[x][y], INT_MAX); &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(++cur, T, x); addEdge(Id[i][j], cur, INT_MAX); for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k]; int y = j + Dicy[k]; if (judge(x, y)) addEdge(Id[x][y], cur, INT_MAX); &#125; &#125; &#125; printf("%d\n", ans - mxf::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二元关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 413E Maze 2D]]></title>
    <url>%2Fcodeforces-413E%2F</url>
    <content type="text"><![CDATA[给你一个 2\times N 的矩阵，你可以上下左右移动，其中'.'可以走，'X'不能走。 M 个询问，问任意两点间距离。 1\leq N,M\leq 2\times 10^5 分析 对于所有 2\times 2 的子矩阵，维护左上到右上、右下，左下到右上、右下所需要的步数。 建立线段树，发现两个中间重叠的子矩阵可以合并信息，得到最左边一列到最右边一列所需的最小步数。 每次将结果（一个子矩阵）对应那两个查询格子的相对位置，步数超出 2\times N 意味着无解。 复杂度 O(M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 2e5 + 5;const int INF = 0x3f3f3f3f;char S[2][MAXN];int N, Q;struct Segment &#123; int A[2][2];&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rSegment merge(Segment x, Segment y) &#123; Segment tmp; tmp.A[0][0] = std::min(INF, std::min(x.A[0][0] + y.A[0][0], x.A[0][1] + y.A[1][0])); tmp.A[1][0] = std::min(INF, std::min(x.A[1][1] + y.A[1][0], x.A[1][0] + y.A[0][0])); tmp.A[0][1] = std::min(INF, std::min(x.A[0][0] + y.A[0][1], x.A[0][1] + y.A[1][1])); tmp.A[1][1] = std::min(INF, std::min(x.A[1][0] + y.A[0][1], x.A[1][1] + y.A[1][1])); return tmp;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Segment &amp;x = T[rt]; memset(x.A, 0x3f, sizeof x.A); if (S[0][l] == '.' &amp;&amp; S[1][l] == 'X') &#123; x.A[0][0] = 1; &#125; else if (S[0][l] == 'X' &amp;&amp; S[1][l] == '.') &#123; x.A[1][1] = 1; &#125; else if (S[0][l] == '.' &amp;&amp; S[1][l] == '.') &#123; x.A[0][0] = x.A[1][1] = 1; x.A[0][1] = x.A[1][0] = 2; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;Segment querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; int m = (l + r) &gt;&gt; 1; if (b &lt;= m) &#123; return querySum(LT, a, b); &#125; else if (m &lt; a) &#123; return querySum(RT, a, b); &#125; else &#123; return merge(querySum(LT, a, b), querySum(RT, a, b)); &#125;&#125;int query(int x, int y) &#123; int a = x, b = y, fa = 0, fb = 0; if (x &gt; N) &#123; fa = 1; a = x - N; &#125; if (y &gt; N) &#123; fb = 1; b = y - N; &#125; if(a &gt; b) &#123; std::swap(a, b); std::swap(fa, fb); &#125; return querySum(1, 1, N, a, b).A[fa][fb] - 1;&#125;int main() &#123; int x, y; scanf("%d%d%s%s", &amp;N, &amp;Q, S[0] + 1, S[1] + 1); build(1, 1, N); while (Q--) &#123; scanf("%d%d", &amp;x, &amp;y); int res = query(x, y); printf("%d\n", res &lt;= 2 * N ? res : -1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 145E Lucky Queries]]></title>
    <url>%2Fcodeforces-145E%2F</url>
    <content type="text"><![CDATA[长度为 N 的 01 序列 A 有 M 次操作，每次将 A[l,r] 中的每个数异或 1 ，或查询 A 的最长不下降子序列的长度。 1 \leq N\leq 10^6, 1\leq M\leq 3\times 10^5 分析 由于序列中只有 0 和 1 ，因此最长不下降子序列只有两种情况：都是 0 或 1 ，或者前面都是 0 后面都是 1 。 用线段树维护区间中完全由 0 与 1 组成，以及最长不上升与不下降子序列的长度， 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).sizo())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0;&#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0;&#125;const int MAXN = 1e6 + 5;int N, M;char Str[MAXN];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rstruct Node &#123; int zero, one, up, down, mrk; Node () &#123; zero = one = up = down = mrk = 0; &#125; Node (int a, int b, int c, int d) : zero(a), one(b), up(c), down(d), mrk(0) &#123;&#125; Node operator + (const Node &amp;x) &#123; Node y; y.zero = zero + x.zero; y.one = one + x.one; y.up = std::max(up + x.one, zero + x.up); y.down = std::max(down + x.zero, one + x.down); y.mrk = 0; return y; &#125; void swap() &#123; mrk ^= 1; std::swap(zero, one); std::swap(up, down); &#125;&#125; T[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; T[rt] = T[rt &lt;&lt; 1] + T[rt &lt;&lt; 1 | 1];&#125;void pushDown(int rt) &#123; if (T[rt].mrk) &#123; T[rt &lt;&lt; 1].swap(); T[rt &lt;&lt; 1 | 1].swap(); T[rt].mrk = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; if (Str[l] == '4') &#123; T[rt] = (Node) &#123; 1, 0, 1, 1 &#125;; &#125; else &#123; T[rt] = (Node) &#123; 0, 1, 1, 1 &#125;; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void change(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].swap(); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; change(LT, a, b); &#125; if (m &lt; b) &#123; change(RT, a, b); &#125; pushUp(rt);&#125;Node queryMax(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &gt; m) &#123; return queryMax(RT, a, b); &#125; else if (b &lt;= m) &#123; return queryMax(LT, a, b); &#125; else &#123; return queryMax(LT, a, b) + queryMax(RT, a, b); &#125;&#125;int main() &#123; int N, M, l, r; scanf("%d%d%s", &amp;N, &amp;M, Str + 1); build(1, 1, N); while (M--) &#123; scanf("%s", Str); if (Str[0] == 'c') &#123; Node res = queryMax(1, 1, N, 1, N); printf("%d\n", res.up); &#125; else &#123; scanf("%d%d", &amp;l, &amp;r); change(1, 1, N, l, r); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 280D k-Maximum Subsequence Sum]]></title>
    <url>%2Fcodeforces-280D%2F</url>
    <content type="text"><![CDATA[序列 A[1...N] 中进行 M 次操作，分为两种： 将 A[p] 修改为 x 查询 A[l,r] 中不相交至多 K 个不相交子段的和的最大值。 N,M\leq 10^5, K\leq 20 分析 对于第二个询问，有个很熟悉的网络流模型，最小费用最大流。 但是对于每个询问都重新建图跑网络流显然是会超时的，需要优化。 网络流的流程就是每次增广最大的费用，然后将这些边取反变成反向边，继续增广，直到费用为负或者没有流量为止。 那么考虑手动模拟它，即每次找到区间中和最大的字段，统计贡献后将其取反，继续直到最大和为负数，或者完成 k 次为止。 这种区间打标记，区间求最值的操作，让人联想到线段树。 用线段树维护区间中子段的最大/最小和（因为取反后两者就交换了），以及左右最大子段（用来合并）的值和对应子段的左右端点，以及取反标记。 查询时记录所有被取反的区间，结束时再将其恢复。 复杂度 O(M\times K\times log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define All(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;struct Line &#123; int l, r, s; Line(int l = 0, int r = 0, int s = 0): l(l), r(r), s(s) &#123;&#125; Line operator + (const Line &amp;x) &#123; return (Line) &#123;l, x.r, s + x.s&#125;; &#125; bool operator &lt; (const Line &amp;x) const &#123; return s &lt; x.s; &#125;&#125;;struct Node &#123; Line lMax, lMin, rMax, rMin, vMax, vMin, v; int rev; Node (int l = 0, int r = 0, int s = 0) &#123; lMax = lMin = rMax = rMin = vMax = vMin = v = Line(l, r, s); rev = 0; &#125; void pushUp(Node ls, Node rs) &#123; if (ls.lMax.l == 0) &#123; *this = rs; return; &#125; lMax = std::max(ls.lMax, ls.v + rs.lMax); lMin = std::min(ls.lMin, ls.v + rs.lMin); rMax = std::max(ls.rMax + rs.v, rs.rMax); rMin = std::min(ls.rMin + rs.v, rs.rMin); vMax = std::max(ls.rMax, rs.lMax); vMax = std::max(vMax, std::max(ls.vMax, rs.vMax)); vMax = std::max(vMax, ls.rMax + rs.lMax); vMax = std::max(vMax, std::max(lMax, rMax)); vMin = std::min(ls.rMin, rs.lMin); vMin = std::min(vMin, std::min(ls.vMin, rs.vMin)); vMin = std::min(vMin, ls.rMin + rs.lMin); vMin = std::min(vMin, std::min(lMin, rMin)); v = ls.v + rs.v; &#125;&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid rev(Node&amp; x) &#123; x.rev ^= 1; std::swap(x.lMin, x.lMax); std::swap(x.rMin, x.rMax); std::swap(x.vMin, x.vMax); x.lMin.s *= -1, x.lMax.s *= -1; x.rMin.s *= -1, x.rMax.s *= -1; x.vMin.s *= -1, x.vMax.s *= -1; x.v.s *= -1;&#125;void pushDown(int rt) &#123; if(T[rt].rev) &#123; rev(T[rt &lt;&lt; 1]); rev(T[rt &lt;&lt; 1 | 1]); T[rt].rev = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; T[rt] = Node(l, r, io::gt&lt;int&gt;()); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void modify(int rt, int l, int r, int p, int x) &#123; if(l == r) &#123; T[rt] = Node(l, r, x); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; modify(LT, p, x); &#125; else &#123; modify(RT, p, x); &#125; T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void reverse(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; rev(T[rt]); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; reverse(LT, a, b); &#125; if(m &lt; b) &#123; reverse(RT, a, b); &#125; T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;Node queryMax(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; Node res; if(a &lt;= m) &#123; res.pushUp(res, queryMax(LT, a, b)); &#125; if(m &lt; b) &#123; res.pushUp(res, queryMax(RT, a, b)); &#125; return res;&#125;int main() &#123; int N = io::gt&lt;int&gt;(); build(1, 1, N); int M = io::gt&lt;int&gt;(); std::vector&lt;Line&gt; V; while(M--) &#123; int opt = io::gt&lt;int&gt;(); if(opt == 0) &#123; int p = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); modify(1, 1, N, p, x); &#125; else &#123; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); int sum = 0; V.clear(); rep(i, 0, k) &#123; Line x = queryMax(1, 1, N, l, r).vMax; if(x.s &lt; 0) &#123; break; &#125; sum += x.s; V.push_back(x); reverse(1, 1, N, x.l, x.r); &#125; io::pt(sum); rep(i, 0, SZ(V)) &#123; reverse(1, 1, N, V[i].l, V[i].r); &#125; &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2008」BZOJ 1036 树的统计]]></title>
    <url>%2FBZOJ-1036%2F</url>
    <content type="text"><![CDATA[一棵有 N 个节点的树，每个节点有初始权值 W_i 。共有 M 次操作，分别为： 查询节点 (u,v) 间所有节点的权值和 查询节点 (u,v) 间所有节点的最大权值 修改 W_u 为 x 1\leq N\leq30000,0\leq M\leq 200000 ，中途操作中保证每个节点的权值 w 在 -30000 到 30000 之间。 分析 又是一道树链剖分模板题... 树剖后，线段树维护区间最大值和区间和。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;#define ONLINE_JUDGEnamespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if(cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace iostruct Graph &#123;static const int MAXN = 30000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, R;int H[MAXN], cntE;int Depth[MAXN], Fa[MAXN], Son[MAXN], Sz[MAXN];int Dfn[MAXN], Top[MAXN], cntD;int W[MAXN], Wp[MAXN];void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Max[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; Max[rt] = std::max(Max[rt &lt;&lt; 1], Max[rt &lt;&lt; 1 | 1]);&#125;void build(int rt, int l, int r) &#123; if(l == r) &#123; Max[rt] = Sum[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void modify(int rt, int l, int r, int p, int x) &#123; if(l == r) &#123; Sum[rt] = Max[rt] = x; return ; &#125; int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; modify(LT, p, x); &#125; else &#123; modify(RT, p, x); &#125; pushUp(rt);&#125;int querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; int m = (l + r) &gt;&gt; 1; int res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res;&#125;int queryMax(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Max[rt]; &#125; int m = (l + r) &gt;&gt; 1; int res = -INT_MAX; if(a &lt;= m) &#123; res = std::max(res, queryMax(LT, a, b)); &#125; if(m &lt; b) &#123; res = std::max(res, queryMax(RT, a, b)); &#125; return res;&#125;void change(int u, int x) &#123; modify(1, 1, N, Dfn[u], x);&#125;int queryPathS(int u, int v) &#123; int res = 0; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[tv], Dfn[v]); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[u], Dfn[v]); return res;&#125;int queryPathM(int u, int v) &#123; int res = -INT_MAX; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res = std::max(res, queryMax(1, 1, N, Dfn[tv], Dfn[v])); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res = std::max(res, queryMax(1, 1, N, Dfn[u], Dfn[v])); return res;&#125;void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N);&#125;&#125; G;int main() &#123;G.N = io::gt&lt;int&gt;();G.R = 1;rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;());&#125;rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;();&#125;G.prepare();int M = io::gt&lt;int&gt;();rep(i, 0, M) &#123; char ch = io::gc(); while(!isalpha(ch)) &#123; ch = io::gc(); &#125; if(ch == 'Q') &#123; ch = io::gc(); int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if(ch == 'S') &#123; io::pt(G.queryPathS(u, v)); &#125; else &#123; io::pt(G.queryPathM(u, v)); &#125; &#125; else &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.change(u, x); &#125;&#125;io::flush();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SHOI 2009」BZOJ 2028 会场预约]]></title>
    <url>%2FBZOJ-2028%2F</url>
    <content type="text"><![CDATA[初始集合为空，有两种操作： 插入一个区间，并删去集合中与它相交的区间，输出删除的区间个数 查询集合中区间个数 N\leq 200000,1\leq Start End\leq 100000 分析 首先根据题意，可以得到集合中任意时刻不存在相交的区间。 假设集合中区间是有序的，那么插入一个区间 [L,R ] 后所需要删除的区间一定是连续的。 两个区间 [l,r] 和 [L,R] ( l\leq L )如果相交，会有两种情况： l \leq L\leq R\leq r L\leq l\leq r\leq R 总结一下，如果满足 l\leq R 且 L\leq r ，那么这两个区间就是相交的。 那么找到第一个满足 L\leq r 的区间 [l,r] 后，如果再满足 l\leq R ，就删除 [l,r] ，重复该步骤直到集合为空或者 R &lt; l 。 集合有序，二分寻找 [l,r] ，删除节点，统计集合大小，STL库提供std::set 可以轻松实现上述功能。 值得注意的是，std::lower_bound(s.begin(),s.end(),x) 和 s.lower_bound(x) 的效率是不同的。由于std::set 的元素存储是随机的，因此直接二分寻找必须考虑寻找元素的复杂度，而它的提供的内置函数可以避免这个问题。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Node &#123; int l, r; bool operator &lt; (const Node &amp;a) const &#123; return r &lt; a.r; &#125;&#125;;std::set&lt;Node&gt; Set;int main() &#123; int N = io::gt&lt;int&gt;(); while (N--) &#123; char opt = io::gc(); while (!isalpha(opt)) &#123; opt = io::gc(); &#125; if (opt == 'A') &#123; int ans = 0; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); std::set&lt;Node&gt;::iterator p = Set.lower_bound((Node) &#123;0, l&#125;); while (p != Set.end() &amp;&amp; r &gt;= p-&gt;l) &#123; Set.erase(p++); ++ans; &#125; Set.insert((Node) &#123;l, r&#125;); io::pt(ans); &#125; else &#123; io::pt(SZ(Set)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2011」BZOJ 2243 染色]]></title>
    <url>%2FBZOJ-2243%2F</url>
    <content type="text"><![CDATA[给定一棵有 N 个节点的树，每个节点有一个颜色。 现有 M 个操作，分为两类： 将节点对 (u,v) 之间路径上的所有节点的颜色染成 x 查询节点对 (u,v) 之间颜色段的个数（相邻且相同颜色的节点对属于同一个颜色段） N,M\leq 10^5,x\leq 10^9 分析 思路很简单，树剖之后用线段树维护区间颜色段的个数。 线段树总共需要维护区间的颜色段个数，最左边颜色和最右边颜色，当然还有lazy标签。 如果区间 [l,m] 的最右边的颜色和区间 [m+1,r+1] 最左边的颜色相同，则 [l,r] 区间中颜色段个数为两者的和减一。 查询的时候有一个细节。 (u,v) 之间颜色段的个数即若干条链上颜色段的个数之和，但是要注意链顶和它的父亲颜色是否相同。 这两个节点也是相邻的，但是在链的查询中不会被涉及到。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 4;struct Graph &#123; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int Depth[MAXN], Son[MAXN], Fa[MAXN], Sz[MAXN]; int Dfn[MAXN], cntD, Top[MAXN]; int W[MAXN], Wp[MAXN]; int H[MAXN], cntE; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125; &#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r int Num[MAXN &lt;&lt; 2], Mark[MAXN &lt;&lt; 2], Left[MAXN &lt;&lt; 2], Right[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Num[rt] = Num[rt &lt;&lt; 1] + Num[rt &lt;&lt; 1 | 1] - (Right[rt &lt;&lt; 1] == Left[rt &lt;&lt; 1 | 1]); Left[rt] = Left[rt &lt;&lt; 1]; Right[rt] = Right[rt &lt;&lt; 1 | 1]; &#125; void pushDown(int rt, int L) &#123; int &amp;mrk = Mark[rt]; if(!mrk) &#123; return ; &#125; Mark[rt &lt;&lt; 1] = Mark[rt &lt;&lt; 1 | 1] = mrk; Num[rt &lt;&lt; 1] = Num[rt &lt;&lt; 1 | 1] = 1; Left[rt &lt;&lt; 1] = Left[rt &lt;&lt; 1 | 1] = mrk; Right[rt &lt;&lt; 1] = Right[rt &lt;&lt; 1 | 1] = mrk; mrk = 0; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Num[rt] = 1; Left[rt] = Right[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void change(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Num[rt] = 1; Left[rt] = Right[rt] = x; Mark[rt] = x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b, x); &#125; if(m &lt; b) &#123; change(RT, a, b, x); &#125; pushUp(rt); &#125; int queryNum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Num[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; int res = 0, times = 0; if(a &lt;= m) &#123; res += queryNum(LT, a, b); ++times; &#125; if(m &lt; b) &#123; res += queryNum(RT, a, b); ++times; &#125; if(times == 2 &amp;&amp; Right[rt &lt;&lt; 1] == Left[rt &lt;&lt; 1 | 1]) &#123; --res; &#125; return res; &#125; int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Left[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125; &#125; void changePath(int u, int v, int x) &#123; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; change(1, 1, N, Dfn[tv], Dfn[v], x); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; change(1, 1, N, Dfn[u], Dfn[v], x); &#125; int queryPath(int u, int v) &#123; int res = 0, tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += queryNum(1, 1, N, Dfn[tv], Dfn[v]); if(query(1, 1, N, Dfn[tv]) == query(1, 1, N, Dfn[Fa[tv]])) &#123; --res; &#125; v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += queryNum(1, 1, N, Dfn[u], Dfn[v]); return res; &#125; void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); G.R = 1; int M = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;(); &#125; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); while(M--) &#123; char c = io::gc(); while(!isalpha(c)) &#123; c = io::gc(); &#125; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if(c == 'C') &#123; G.changePath(u, v, io::gt&lt;int&gt;()); &#125; else &#123; io::pt(G.queryPath(u, v)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2009」BZOJ 1878 HH的项链]]></title>
    <url>%2FBZOJ-1878%2F</url>
    <content type="text"><![CDATA[在序列 A[1 \cdots N] 中，有 M 个询问，查询 [L_i,R_i] 中不同的数的个数。 N\leq 500000,M\leq 200000 。 分析 原题的数据 N\leq 50000 ，莫队可以直接 O(N\sqrt{N+M}) 水过。但是数据加强后 N 增大到了原来10倍，带根号的复杂度不再满足要求，考虑一个log的方法。 这道题本质就是查询区间 [l,r] 中不同的数的数目，重点在于处理相同的数。可以显然发现这是不符合区间减法的，因此单纯统计区间中数的出现次数是不行的。 如果同一时间只维护记录所有相同的数中的一个数，那么能保证不会重复统计；如果再保证查询的时候如果这个数存在于区间中，就一定能被查询到，那么就不会保证算少。 如果满足这两条，那么就使得原本查询区间中不同数的个数变成了查询区间中数的个数。 假如查询的区间都是 [1,R_i] ，那么只需要统计同一个数中位置最靠左的那个数是否在 [1, R_i] 中；如果是 [L_i,R_i] ，同理统计的数就变成了出现位置尽可能接近 L_i 且大于它的那个数是否在 [L_i,R_i] 中。 那么维护方法就很显然了，记录每个数 A[i] 的下一个相同的数的位置 Nxt[i] ，即满足 A[i] = A[Nxt[i]] 。 随着区间的右移，删去 A[i] 并插入 A[Nxt[i]] ，再统计 [L_i,R_i] 中数的个数。 这样的话查询的区间一定是要求有序的，因此需要离线操作，将所有区间按照左端点排序。 复杂度 O(M\log{M}+M\log{N}) 。 P.S 参考代码中是按照右端点排序的，操作同理，记录最靠右的数以及它靠前的相同的数的位置即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 500000 + 5;const int MAXM = 1000000 + 5;int N, M, A[MAXN];int Lst[MAXM], Pre[MAXN];int C[MAXN];int lowbit(int x) &#123; return x &amp; -x;&#125;void add(int p, int x) &#123; for(; p &lt; MAXM; p += lowbit(p)) &#123; C[p] += x; &#125;&#125;int query(int p) &#123; int res = 0; for(; p &gt; 0; p -= lowbit(p)) &#123; res += C[p]; &#125; return res;&#125;struct Query &#123; int l, r, id; bool operator &lt; (const Query &amp;x) const &#123; return r &gt; x.r; &#125;&#125; Q[MAXN];int Ans[MAXN];int main() &#123; N = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); if(Lst[A[i]] != 0) &#123; add(Lst[A[i]], -1); Pre[i] = Lst[A[i]]; &#125; Lst[A[i]] = i; add(i, 1); &#125; int M = io::gt&lt;int&gt;(); rep(i, 0, M) &#123; Q[i].l = io::gt&lt;int&gt;(); Q[i].r = io::gt&lt;int&gt;(); Q[i].id = i; &#125; std::sort(Q, Q + M); int pre = N; rep(i, 0, M) &#123; while(pre &gt; Q[i].r) &#123; add(pre, -1); if(Pre[pre]) &#123; add(Pre[pre], 1); &#125; pre--; &#125; Ans[Q[i].id] = query(Q[i].r) - query(Q[i].l - 1); pre = Q[i].r; &#125; rep(i, 0, M) &#123; io::pt(Ans[i]); &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2012」BZOJ 2753 滑雪与时间胶囊]]></title>
    <url>%2FBZOJ-2753%2F</url>
    <content type="text"><![CDATA[有 N 个点，每个点存在权值 H_i 。有 M 条边 (u, v, w) ，如果 H_u &lt; H_v ，那么这条边就是 u\rightarrow v ，反之是 v \rightarrow u 的。如果 H_u = H_v ，那么这是一条无向边。 求以 1 为根节点的生成树的最大节点个数，以及在节点数最大的情况下的最小权值和。 1\leq N\leq 10^5,1\leq M\leq 10^ 6,1\leq H_i\leq 10^9 分析 最小树形图 如果不看数据范围，这是一个裸的最小树形图（无向边拆成两条有向边）。 先用bfs跑一遍可以得到节点 1 可以到达的所有点，即第一问。复杂度 O(N) 。 然后重新构图，使用朱刘算法在新图上求最小树形图的权值和。复杂度 O(N\times M) 。 这个上界很松，而且发现时间瓶颈很大程度在读入 3e6 的数据上。 随机数据应该是远远跑不满的，而且也没有听说专门卡它的构造数据方法。 最后提交发现该代码在BZOJ和luogu的评测机上均能通过。 BZOJ上此题时限50s，实测39.3s，并不算卡过去的。 最小生成树 实际上刚看到这个数据范围，给我的第一感觉是：“就算上界很松也肯定跑不过啊……”。 但是求有向图的最小树形图，朱刘算法已经是很高效的了。 虽然存在 R.E.Tarjan 在1986年提出的 O(E+V\log{V}) 的改进算法，但是国内基本没有相关资料。 看来出题人考不存在的（没见过=不存在）改进算法的几率不大。 相比于最小树形图，求无向图的最小生成树就有很好写，而且复杂度更低的算法。 例如 Prim's algorithm （复杂度 O(V\times \log{V} ）和 Kruskal's algorithm （复杂度 O(E\times \log{E}) ）。 再思考为什么有向图求最小树形图的时候不能用它们，是因为最后可能会出现边指向根节点的情况，这样就不是一棵生成树了。 对于这道题而言，发现反向边只会在 H_u=H_v 的时候出现。 假如可以处理掉它，那么模型就从最小树形图转化成最小生成树，复杂度也就足够优秀了。 根据这道题节点间的特殊性质，对于一棵生成树的任意节点所有可能的父亲节点，权值一定都大于等于它。 那么对于有向边 (u, v, w) ，优先处理 H_v 大的边， H_v 相同时优先选择 w 小的边，就能保证不会出现反向边。 如果生成树 T1 中某节点 y 通过边 (x,y,w) 合并到另一个生成树 T2 的节点 x 上，那么就会出现反向边（即边 (y,x,w) ）。 但是这是不会发生的，因为如果出现两棵生成树，那么图就不存在生成树了（ 已经经过了所有以 T2 根节点为终点的边，既然没有与 T1 合并，就说明无法合并了。而这是与第一问得到的都联通情况相违背） 因此通过 Kruskal's algorithm 求最小生成树是正确的，求得权值和即为第二问答案。 参考代码 最小树形图 - Chu-Liu/Edmonds' algorithm 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1e5 + 5;const int MAXM = 1e6 + 5;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace iostruct Graph &#123; struct Edge &#123; int u, v, w; &#125;; int N; std::vector&lt;Edge&gt; E; void init(int n) &#123; N = n; E.clear(); &#125; void addEdge(int u, int v, int w) &#123; E.push_back((Edge) &#123;u, v, w&#125;); &#125; ll MST_Directed(int rt) &#123; static int Pre[MAXN], Cir[MAXN], Id[MAXN]; static ll Inw[MAXN]; ll ans = 0; while(true) &#123; memset(Inw, 127 / 3, sizeof(ll) * N); memset(Pre, -1, sizeof(int) * N); memset(Cir, -1, sizeof(int) * N); memset(Id, -1, sizeof(int) * N); ll INF = Inw[0]; rep(i, 0, SZ(E)) &#123; if(Inw[E[i].v] &gt; E[i].w &amp;&amp; E[i].v != E[i].u) &#123; Inw[E[i].v] = E[i].w; Pre[E[i].v] = E[i].u; &#125; &#125; Pre[rt] = rt, Inw[rt] = 0; rep(i, 0, N) &#123; if(Inw[i] == INF) &#123; return -1; &#125; ans += Inw[i]; &#125; int circle = 0; rep(i, 0, N) &#123; if(Cir[i] != -1) &#123; continue; &#125; int t = i; while(Cir[t] == -1) &#123; Cir[t] = i; t = Pre[t]; &#125; if(t != rt &amp;&amp; Cir[t] == i) &#123; Id[t] = circle++; for(int j = Pre[t]; j != t; j = Pre[j]) &#123; Id[j] = circle - 1; &#125; &#125; &#125; if(!circle) &#123; return ans; &#125; rep(i, 0, N) &#123; if(Id[i] == -1) &#123; Id[i] = circle++; &#125; &#125; rep(i, 0, SZ(E)) &#123; E[i].w -= Inw[E[i].v]; E[i].u = Id[E[i].u]; E[i].v = Id[E[i].v]; &#125; N = circle; rt = Id[rt]; &#125; &#125;&#125;G;int H[MAXN], Id[MAXN];struct Graph2 &#123; struct Edge &#123; int v, nxt; &#125;E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; void init(int n) &#123; memset(H, -1, sizeof(int) * n); cntE = -1; &#125; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; &#125; int bfs(int x) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; static std::bitset&lt;MAXN&gt; Vis; int n = 1; Id[x] = n++; Vis[x] = 1; Que.push(x); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); for(int i = H[x]; ~i; i = E[i].nxt) &#123; if(!Vis[E[i].v]) &#123; Que.push(E[i].v); Vis[E[i].v] = 1; Id[E[i].v] = n++; &#125; &#125; &#125; return n; &#125;&#125;G2;int U[MAXM], V[MAXM], W[MAXM];int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; H[i] = io::gt&lt;int&gt;(); &#125; G2.init(N + 1); rep(i, 0, M) &#123; U[i] = io::gt&lt;int&gt;(); V[i] = io::gt&lt;int&gt;(); W[i] = io::gt&lt;int&gt;(); if(H[U[i]] &gt;= H[V[i]]) &#123; G2.addEdge(U[i], V[i]); &#125; if(H[U[i]] &lt;= H[V[i]]) &#123; G2.addEdge(V[i], U[i]); &#125; &#125; int n = G2.bfs(1); rep(i, 0, M) &#123; if(Id[U[i]] &amp;&amp; Id[V[i]]) &#123; if(H[U[i]] &gt;= H[V[i]]) &#123; G.addEdge(Id[U[i]], Id[V[i]], W[i]); &#125; if(H[V[i]] &gt;= H[U[i]]) &#123; G.addEdge(Id[V[i]], Id[U[i]], W[i]); &#125; &#125; &#125; G.addEdge(0, Id[1], 0); G.N = n; ll ans = G.MST_Directed(0); printf("%d %lld\n", n - 1, ans); return 0;&#125; 最小生成树 - Kruskal's algorithm 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;const int MAXM = 1e6 + 5;int H[MAXN];struct Graph &#123; struct Edge &#123; int u, v, w, nxt, can; bool operator &lt; (const Edge &amp;x) const &#123; return ::H[v] != ::H[x.v] ? ::H[v] &gt; ::H[x.v] : w &lt; x.w; &#125; &#125;E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; int Fa[MAXN], Rank[MAXN]; void init(int n) &#123; memset(H, -1, sizeof(int) * n); cntE = -1; rep(i, 0, n) &#123; Fa[i] = i; Rank[i] = 1; &#125; &#125; void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u], 0&#125;; H[u] = cntE; &#125; int bfs(int x) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; static std::bitset&lt;MAXN&gt; Vis; int n = 1; Vis[x] = 1; Que.push(x); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); for(int i = H[x]; ~i; i = E[i].nxt) &#123; E[i].can = 1; if(!Vis[E[i].v]) &#123; Que.push(E[i].v); Vis[E[i].v] = 1; n++; &#125; &#125; &#125; return n; &#125; int findFa(int x) &#123; return x == Fa[x] ? x : Fa[x] = findFa(Fa[x]); &#125; bool merge(int u, int v) &#123; u = findFa(u), v = findFa(v); if(u == v) &#123; return false; &#125; if(Rank[u] &lt; Rank[v]) &#123; Fa[u] = v; &#125; else &#123; Fa[v] = u; if(Rank[u] == Rank[v]) &#123; Rank[u]++; &#125; &#125; return true; &#125; ll kruskal(int n) &#123; ll ans = 0; int k = 1; static std::vector&lt;Edge&gt; V; rep(i, 0, cntE + 1) &#123; if(E[i].can) &#123; V.push_back(E[i]); &#125; &#125; std::sort(ALL(V)); rep(i, 0, SZ(V)) &#123; if(k == n) &#123; return ans; &#125; if(merge(V[i].u, V[i].v)) &#123; ans += V[i].w; ++k; &#125; &#125; &#125;&#125;G;int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; H[i] = io::gt&lt;int&gt;(); &#125; G.init(N + 1); rep(i, 0, M) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(), w = io::gt&lt;int&gt;(); if(H[u] &gt;= H[v]) &#123; G.addEdge(u, v, w); &#125; if(H[u] &lt;= H[v]) &#123; G.addEdge(v, u, w); &#125; &#125; int n = G.bfs(1); ll sum = G.kruskal(n); printf("%d %lld\n", n, sum); return 0;&#125; 参考资料 【最小树形图】——bzoj2753——朱刘算法达不到复杂度要求时的，改模板kruskal算法]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2010」BZOJ 1858 序列操作]]></title>
    <url>%2FBZOJ-1858%2F</url>
    <content type="text"><![CDATA[在一个01序列中，有五种变换操作和询问操作： 0 a b 把 [a, b] 区间内的所有数全变成 0 1 a b 把 [a, b] 区间内的所有数全变成 1 2 a b 把 [a,b] 区间内的所有数全部取反，也就是说把所有的 0 变成 1 ，把所有的 1 变成 0 3 a b 询问 [a, b] 区间内总共有多少个 1 4 a b 询问 [a, b] 区间内最多有多少个连续的 1 1\leq n, m\leq 100000 分析 这种区间操作、区间查询，且满足区间加法的题，再看一下 1e5 的数据范围，很显然是用线段树来维护。 维护区间中 1 的数目（即区间和），左右连续 0,1 的长度，最长的连续的 0,1 的长度，当然还有取反和重置 0/1 的标记。 那么合并的时候，连续的 0,1 有两种合并方式：继承左右，或者左右合并（即左区间的右+右区间的左，这两段拼起来是连续的）。 区间取反，即交换所有关于 0,1 的信息；区间重置，根据区间长度直接更新信息。 复杂度 O(m\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rstruct Segment &#123; int l, r; int sum, rev, trn; int ln[2], rn[2], mx[2];&#125; T[MAXN &lt;&lt; 2];int max3(int a, int b, int c) &#123; return std::max(a, std::max(b, c));&#125;Segment merge(Segment x, Segment y) &#123; Segment a; a.trn = -1, a.rev = 0; a.l = x.l, a.r = y.r; a.sum = x.sum + y.sum; rep(i, 0, 2) &#123; a.ln[i] = x.ln[i], a.rn[i] = y.rn[i]; a.mx[i] = max3(x.mx[i], y.mx[i], x.rn[i] + y.ln[i]); if (!x.mx[i ^ 1]) &#123; a.ln[i] = x.mx[i] + y.ln[i]; &#125; if (!y.mx[i ^ 1]) &#123; a.rn[i] = y.mx[i] + x.rn[i]; &#125; &#125; return a;&#125;void turn(Segment &amp;x, int d) &#123; x.rev = 0; x.ln[d] = x.rn[d] = x.mx[d] = x.r - x.l + 1; x.ln[d ^ 1] = x.rn[d ^ 1] = x.mx[d ^ 1] = 0; if (d == 1) &#123; x.sum = x.r - x.l + 1; &#125; else &#123; x.sum = 0; &#125;&#125;void rever(Segment &amp;x) &#123; x.sum = x.r - x.l + 1 - x.sum; std::swap(x.mx[0], x.mx[1]); std::swap(x.ln[0], x.ln[1]); std::swap(x.rn[0], x.rn[1]);&#125;void pushDown(int rt) &#123; Segment &amp;x = T[rt], &amp;ls = T[rt &lt;&lt; 1], &amp;rs = T[rt &lt;&lt; 1 | 1]; if (x.trn != -1) &#123; ls.trn = rs.trn = x.trn; turn(ls, x.trn); turn(rs, x.trn); x.trn = -1; &#125; if (x.rev) &#123; ls.rev ^= 1; rs.rev ^= 1; rever(ls); rever(rs); x.rev = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Segment &amp;x = T[rt]; x.rev = 0, x.trn = -1; x.l = x.r = l; x.sum = io::gt&lt;int&gt;(); x.ln[x.sum] = x.rn[x.sum] = x.mx[x.sum] = 1; x.ln[x.sum ^ 1] = x.rn[x.sum ^ 1] = x.mx[x.sum ^ 1] = 0; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void change(int rt, int a, int b, int x) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].trn = x; turn(T[rt], x); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; change(rt &lt;&lt; 1, a, b, x); &#125; if (m &lt; b) &#123; change(rt &lt;&lt; 1 | 1, a, b, x); &#125; T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void reverse(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].rev ^= 1; rever(T[rt]); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; reverse(rt &lt;&lt; 1, a, b); &#125; if (m &lt; b) &#123; reverse(rt &lt;&lt; 1 | 1, a, b); &#125; T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;int querySum(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].sum; &#125; pushDown(rt); int res = 0; int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; res += querySum(rt &lt;&lt; 1, a, b); &#125; if (m &lt; b) &#123; res += querySum(rt &lt;&lt; 1 | 1, a, b); &#125; return res;&#125;Segment queryMax(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (b &lt;= m) &#123; return queryMax(rt &lt;&lt; 1, a, b); &#125; else if (m &lt; a) &#123; return queryMax(rt &lt;&lt; 1 | 1, a, b); &#125; else &#123; return merge(queryMax(rt &lt;&lt; 1, a, b), queryMax(rt &lt;&lt; 1 | 1, a, b)); &#125;&#125;int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); build(1, 1, N); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); ++l, ++r; if (opt == 0 || opt == 1) &#123; change(1, l, r, opt); &#125; else if (opt == 2) &#123; reverse(1, l, r); &#125; else if (opt == 3) &#123; io::pt(querySum(1, l, r)); &#125; else if (opt == 4) &#123; io::pt(queryMax(1, l, r).mx[1]); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2007」BZOJ 1067 降雨量]]></title>
    <url>%2FBZOJ-1067%2F</url>
    <content type="text"><![CDATA[已知 N 个年份 Y_i 的降雨量 R_i 。 现有 M 个询问。给定年份 X,Y ，判断“X年是自Y年以来降雨量最多的”的正确性。 该语句正确的当且仅当 R_X\leq R_Y 且对于所有 Y&lt;Z&lt;X ，满足 R_Z&lt;R_X 。 如果判断语句正确，输出true；如果可能正确，输出maybe；如果一定错误输出false。 1\leq N\leq 50000, 1\leq M\leq 10000,&nbsp;-10^9\leq Y_i\leq&nbsp;10^9&nbsp;, 1\leq R_i\leq&nbsp;10^9 分析 比较细节的题，听取WA声一片后改起来很烦... 思路其实很简单，就是找到 X,Y 年对应的降水量和 (X,Y) 年间降水量的最大值进行一番比较。 下面分析各种情况对应的结果是什么。 如果 [X,Y] 中所有年份的降水量信息已知。那么当 R_Y\leq R_X 且 MAX(X+1,Y-1) &lt; R_Y 时，该语句是true，反之则是false。（其中 MAX(L,R) 为 [L,R] 年间已知降水量的最大值） 如果 X,Y 降水量已知。那么当 R_Y\leq R_X 且 MAX(X+1,Y-1) &lt; R_Y 时，该语句是maybe，反之则是false。 如果 X,Y 已知其一 Z 年的降水量。那么当 MAX(X+1,Y-1) &lt; R_Z 时，该语句是maybe，反之则是false。 如果 X,Y 的降水量皆未知，则该语句是maybe。 由于没有修改操作，因此用Sparse Table来查询区间最大值。 至于如何判断 X,Y 是否降水量已知，可以直接在 Y[1...N] 中二分寻找，复杂度 O(\log{N}) ； 判断是否 [X,Y] 中所有年份降水量已知，直接检查 Y-X=P_Y-P_X 。（其中 P_i 为 i 在 Y[1...N] 中的下标） 需要特别注意的一点，便是当 P_Y=P_X+1 时， TeX parse error: Undefined control sequence \empty 。查询该区间时应该直接返回一个极小值或者单独判断。不然只有稳稳50分.... 复杂度 O((N+M)\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 50000 + 5;int A[MAXN], B[MAXN];int F[MAXN][20], Log[MAXN], Pow[20];void buildST(int n) &#123;rep(i, 1, n + 1) &#123; F[i][0] = B[i];&#125;rep(i, 2, n + 1) &#123; Log[i] = Log[i &gt;&gt; 1] + 1;&#125;int k = log2(n);Pow[0] = 1;rep(i, 1, k + 1) &#123; Pow[i] = Pow[i - 1] &lt;&lt; 1;&#125;rep(j, 1, k + 1) &#123; rof(i, n + 1, 1) &#123; if (i + Pow[j - 1] &lt;= n) &#123; F[i][j] = std::max(F[i][j - 1], F[i + Pow[j - 1]][j - 1]); &#125; &#125;&#125;return ;&#125;int queryMax(int l, int r) &#123;if(l &gt; r) &#123; return -1;&#125;int k = Log[r - l + 1];return std::max(F[l][k], F[r - Pow[k] + 1][k]);&#125;int main() &#123;int N = io::gt&lt;int&gt;();rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); B[i] = io::gt&lt;int&gt;();&#125;buildST(N);int M = io::gt&lt;int&gt;();while (M--) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); int p1 = std::lower_bound(A + 1, A + N + 1, x) - A; int p2 = std::lower_bound(A + 1, A + N + 1, y) - A; if (A[p1] == x &amp;&amp; A[p2] == y &amp;&amp; p2 - p1 == y - x) &#123; int mx = queryMax(p1 + 1, p2 - 1); if (B[p2] &lt;= B[p1] &amp;&amp; B[p2] &gt; mx) &#123; puts("true"); &#125; else &#123; puts("false"); &#125; &#125; else &#123; if (A[p1] != x &amp;&amp; A[p2] != y) &#123; puts("maybe"); &#125; else if (A[p1] == x &amp;&amp; A[p2] != y) &#123; int mx = queryMax(p1 + 1, p2 - 1); if (mx &lt; B[p1]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; else if (A[p1] != x &amp;&amp; A[p2] == y) &#123; int mx = queryMax(p1, p2 - 1); if (mx &lt; B[p2]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; else &#123; int mx = queryMax(p1 + 1, p2 - 1); if (mx &lt; B[p2] &amp;&amp; B[p2] &lt;= B[p1]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; &#125;&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2008」BZOJ 1012 最大数]]></title>
    <url>%2FBZOJ-1012%2F</url>
    <content type="text"><![CDATA[维护一个数列，具有 M 个以下两种操作： 查询并输出当前数列中末尾L个数中的最大的数 将 n 加上最近一次查询操作的答案，对 D 取模后，插入到数列的末尾 M \leq 200000 分析 对 [1...M] 建线段树，记录当前序列末尾的下标。 那么问题就变成了线段树区间查询最大值，单点修改（开始默认每个元素都是 0 ）。 值得注意的一点是，对 D​ 取模并不意味着一定要变成正数。例如 D=5​ ，上次结果为 1​ ， n=-10​ ，那么实际插入的数就是 -4​ ，而不是 1​ ，这一点题目并没有明确。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 200000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint N = 1, M, P;int Max[MAXN &lt;&lt; 2];void pushUp(int rt) &#123;Max[rt] = std::max(Max[rt &lt;&lt; 1], Max[rt &lt;&lt; 1 | 1]);&#125;void modify(int rt, int l, int r, int p, int x) &#123;if (l == r) &#123; Max[rt] = x; return ;&#125;int m = (l + r) &gt;&gt; 1;if (p &lt;= m) &#123; modify(LT, p, x);&#125; else &#123; modify(RT, p, x);&#125;pushUp(rt);&#125;int queryMax(int rt, int l, int r, int a, int b) &#123;if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return Max[rt];&#125;int m = (l + r) &gt;&gt; 1;int res = 0;if (a &lt;= m) &#123; res = std::max(res, queryMax(LT, a, b));&#125;if (m &lt; b) &#123; res = std::max(res, queryMax(RT, a, b));&#125;return res;&#125;int main() &#123;int res = 0;M = io::gt&lt;int&gt;(), P = io::gt&lt;int&gt;();while (M--) &#123; char opt = io::gc(); while (!isalpha(opt)) &#123; opt = io::gc(); &#125; int x = io::gt&lt;int&gt;(); if (opt == 'Q') &#123; io::pt(res = queryMax(1, 1, MAXN, N - x, N - 1)); &#125; else &#123; modify(1, 1, MAXN, N++, (x + res) % P); &#125;&#125;io::flush();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JLOI 2014」BZOJ 3631 松鼠的新家]]></title>
    <url>%2FBZOJ-3631%2F</url>
    <content type="text"><![CDATA[一棵树有 N 个节点，需要按照 A[1...N] 的顺序依次访问，每次走最短路径。 求每个节点各经过多少次。 2\leq N\leq 300000 分析 树上差分 从 u 到 v 的路径即 u\rightarrow lca(u,v)\rightarrow v 。 由于只需要输出一次，考虑树上差分。 O(1) 修改， O(N) 查询的复杂度在这里正合适。 用Tarjan或者其他lca算法得到 lca(A[i],A[i+1]) ，然后对两段路径进行差分。 最后将除了根节点的每个节点经过次数-1，因为它们在差分的过程中既被当成前一条路径终点，又被当作后一条路径的起点，重复计算两次。 复杂度 O(N) 。 树状数组 树链剖分+区间修改/单点查询树状数组。 复杂度 O(N\log^2{N}) 。 参考代码 树上差分 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; void pt(T x, char c = '\n') &#123; static int S[20], *vp; vp = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++vp = x % 10, x /= 10; &#125; while (x); while (vp != S) &#123; *cur++ = *vp-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; fflush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 300000 + 5;int Faa[MAXN], Lca[MAXN];int H[MAXN], cnt;int N, R;int Fa[MAXN], Add[MAXN];struct Edge &#123; int v, nxt;&#125; Q[MAXN &lt;&lt; 1], E[MAXN &lt;&lt; 1];int H2[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; return ;&#125;void addQuery(int u, int v) &#123; Q[cnt] = (Edge) &#123;v, H2[u]&#125;; H2[u] = cnt++; Q[cnt] = (Edge) &#123;u, H2[v]&#125;; H2[v] = cnt++; return ;&#125;int findFa(int x) &#123; return Faa[x] == x ? x : Faa[x] = findFa(Faa[x]);&#125;void dfs(int x) &#123; Faa[x] = x; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; dfs(v); Faa[v] = x; &#125; &#125; for (int i = H2[x]; ~i; i = Q[i].nxt) &#123; int &amp;v = Q[i].v; if (Fa[v]) &#123; Lca[i &gt;&gt; 1] = findFa(v); &#125; &#125;&#125;void dfs2(int x) &#123; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; dfs2(v); Add[x] += Add[v]; &#125; &#125;&#125;int A[MAXN];int main() &#123; N = io::gt&lt;int&gt;(); memset(H2, -1, sizeof H2); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); &#125; R = A[1]; rep(i, 2, N + 1) &#123; addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); addQuery(A[i - 1], A[i]); &#125; dfs(R); rep(i, 2, N + 1) &#123; ++Add[A[i - 1]]; ++Add[A[i]]; --Add[Lca[i - 2]]; --Add[Fa[Lca[i - 2]]]; &#125; dfs2(R); ++Add[R]; rep(i, 1, N + 1) &#123; io::pt(Add[i] - 1); &#125; io::fflush(); return 0;&#125; 树状数组 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; fflush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 300000 + 5;int A[MAXN];struct Graph &#123; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int H[MAXN], cntE; int Depth[MAXN], Sz[MAXN], Son[MAXN], Fa[MAXN]; int Dfn[MAXN], cntD, Top[MAXN]; int C[MAXN]; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Sz[x] = 1, Son[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if (Sz[Son[x]] &lt; Sz[v]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if (Son[x]) &#123; dfs2(Son[x], top); &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125; &#125; int lowbit(int x) &#123; return x &amp; -x; &#125; void update(int A[], int p, int x) &#123; for (; p &lt;= N; p += lowbit(p)) &#123; A[p] += x; &#125; &#125; void add(int l, int r, int x) &#123; update(C, l, x); update(C, r + 1, -x); &#125; int sum(int A[], int p) &#123; int res = 0; for (; p &gt; 0; p -= lowbit(p)) &#123; res += A[p]; &#125; return res; &#125; int query(int x) &#123; return sum(C, x); &#125; void prepare() &#123; dfs(R); dfs2(R, R); &#125; void addPath(int u, int v, int x = 1) &#123; int tu = Top[u], tv = Top[v]; while (tu != tv) &#123; if (Depth[tu] &gt; Depth[tv]) &#123; std::swap(u, v); std::swap(tu, tv); &#125; add(Dfn[tv], Dfn[v], x); v = Fa[tv]; tv = Top[v]; &#125; if (Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; add(Dfn[u], Dfn[v], x); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; A[i] = io::gt&lt;int&gt;(); &#125; G.R = A[1]; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); rep(i, 2, G.N + 1) &#123; G.addPath(A[i], A[i - 1]); &#125; G.add(G.Dfn[A[1]], G.Dfn[A[1]], 1); rep(i, 1, G.N + 1) &#123; io::pt(G.query(G.Dfn[i]) - 1); &#125; io::fflush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>轻重链剖分</tag>
        <tag>树状数组</tag>
        <tag>树上差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2012」BZOJ 2733 永无乡]]></title>
    <url>%2FBZOJ-2733%2F</url>
    <content type="text"><![CDATA[N 个点分别有权值 W_i ，其中有 M 条无向边使其分成若干个联通分量。 现有 Q 次操作，分为两类： 查询点 x 所在的联通分量中，权值第 k 小的节点编号 合并点 x,y 所在的联通分量 M\leq N\leq 100000,Q\leq 300000 分析 动态查询第 k 大，考虑用Treap，Splay等数据结构来维护。 那么如何合并两棵平衡树？通过启发式合并。 说是启发式合并，不过就是暴力合并，把两棵树中较小的一棵的所有节点拆下来插入到较大的那棵中，复杂度 O(N\log{N}) 。 总复杂度分析，每个点至多被合并 N 次，但是复杂度显然不是 O(N^2\log{N}) ，其实不大会算... 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Treap &#123; int key, fix, belong, sz; Treap *ch[2]; Treap() &#123; key = INT_MAX, fix = rand(); belong = -1, sz = 1; ch[0] = ch[1] = NULL; &#125; Treap(int x, int y)&#123; key = x, fix = rand(); belong = y, sz = 1; ch[0] = ch[1] = NULL; &#125; int cmp(int x) &#123; return key &lt;= x; &#125; void pushUp() &#123; sz = 1; if(ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if(ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125;&#125; T[MAXN &lt;&lt; 2];int Belong[MAXN];int cntT;std::vector&lt;Treap*&gt; R;Treap* newTreap(std::pair&lt;int, int&gt; x) &#123; T[++cntT] = Treap(x.first, x.second); return &amp;T[cntT];&#125;void rotate(Treap* &amp;t, int d) &#123; Treap *k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap* &amp;t, std::pair&lt;int, int&gt; x) &#123; if(!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x.first); ++t-&gt;sz; insert(t-&gt;ch[d], x); if(t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125;&#125;int queryKth(Treap* &amp;t, int k) &#123; int num = t-&gt;ch[0] ? t-&gt;ch[0]-&gt;sz : 0; if (k == num + 1) &#123; return t-&gt;belong; &#125; else if(k &lt;= num) &#123; return queryKth(t-&gt;ch[0], k); &#125; else &#123; return queryKth(t-&gt;ch[1], k - num - 1); &#125;&#125;void merge(Treap* &amp;t, Treap* &amp;k, int rt) &#123; if(t-&gt;ch[0]) &#123; merge(t-&gt;ch[0], k, rt); &#125; if(t-&gt;ch[1]) &#123; merge(t-&gt;ch[1], k, rt); &#125; if(t-&gt;belong != -1) &#123; Belong[t-&gt;belong] = rt; insert(k, std::make_pair(t-&gt;key, t-&gt;belong)); &#125;&#125;void mergeTree(int x, int y) &#123; int bx = Belong[x], by = Belong[y]; if(bx != by) &#123; if(R[bx]-&gt;sz &gt; R[by]-&gt;sz) &#123; merge(R[by], R[bx], bx); &#125; else &#123; merge(R[bx], R[by], by); &#125; &#125;&#125;int query(int x, int k) &#123; if(R[Belong[x]]-&gt;sz &lt;= k) &#123; return -1; &#125; return queryKth(R[Belong[x]], k);&#125;int A[MAXN];int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); R.push_back(new Treap); insert(R.back(), std::make_pair(A[i], i)); Belong[i] = SZ(R) - 1; &#125; while(M--) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); mergeTree(x, y); &#125; int Q = io::gt&lt;int&gt;(); while(Q--) &#123; char opt = io::gc(); while(!isalpha(opt)) &#123; opt = io::gc(); &#125; if(opt == 'Q') &#123; int x = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); io::pt(query(x, k)); &#125; else &#123; mergeTree(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2004」BZOJ 1208 宠物收养所]]></title>
    <url>%2FBZOJ-1208%2F</url>
    <content type="text"><![CDATA[有两个正整数集合 A,B ，起初都是它们都是空集。 现按顺序插入 N 个数 A[1...N] ，每个数属于 A 或 B 。 如果插入的数 x 属于集合 A ，当集合 B 不为空时，删去 B 中 与 x 差绝对值最小的数 y 。如果存在 b = x+a,c=x-a ，则优先删去 c 。该操作的代价为两数差的绝对值。当集合 B 为空时，将 x 直接插入集合 A 中，没有代价。 如果插入的数属于集合 B ，操作同理。 求插入完 N 个数后的代价，答案对 1000000 取模。 N\leq 80000,0&lt; A_i&lt; 2^{31} 分析 根据题意可得，在任何时候集合 A,B 至少有一个为空，因此只需要维护一个集合。 通过Treap等数据结构维护当前有数的集合。每次插入 x 后，查询集合中 x 的前驱后继，取较小值删去，并计算代价。 由于可能存在没有前驱后继的情况，初始化时插入一个极大值和一个极小值可以避免各种讨论，当树的 size=2 时认为其为空即可。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 80000 + 5;struct TreapTree &#123;struct Treap &#123; int key, fix; int cnt, sz; Treap *ch[2]; int cmp(int x) &#123; return key == x ? -1 : key &lt; x; &#125; void pushUp() &#123; sz = cnt; if (ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if (ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125;&#125; Pool[MAXN], *R;int cntP;Treap* newTreap(int x) &#123; Pool[++cntP] = (Treap) &#123;x, rand(), 1, 1, NULL, NULL&#125;; return &amp;Pool[cntP];&#125;void rotate(Treap* &amp;t, int d) &#123; Treap* k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap* &amp;t, int x) &#123; if (!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x); ++t-&gt;sz; if (d == -1) &#123; ++t-&gt;cnt; &#125; else &#123; insert(t-&gt;ch[d], x); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125; &#125;&#125;void erase(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; int d = t-&gt;cmp(x); if (d == -1) &#123; if (t-&gt;cnt &gt; 1) &#123; --t-&gt;cnt; --t-&gt;sz; &#125; else if (!t-&gt;ch[0]) &#123; t = t-&gt;ch[1]; &#125; else if (!t-&gt;ch[1]) &#123; t = t-&gt;ch[0]; &#125; else &#123; int e = t-&gt;ch[0]-&gt;fix &gt; t-&gt;ch[1]-&gt;fix; rotate(t, e); erase(t-&gt;ch[e], x); &#125; &#125; else &#123; erase(t-&gt;ch[d], x); &#125; if (t) &#123; t-&gt;pushUp(); &#125;&#125;int res;void queryPre(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &lt;= x) &#123; res = t-&gt;key; queryPre(t-&gt;ch[1], x); &#125; else &#123; queryPre(t-&gt;ch[0], x); &#125;&#125;void querySub(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &gt;= x) &#123; res = t-&gt;key; querySub(t-&gt;ch[0], x); &#125; else &#123; querySub(t-&gt;ch[1], x); &#125;&#125;&#125; T;int main() &#123;int N = io::gt&lt;int&gt;();int type;ll res = 0;T.insert(T.R, -INT_MAX);T.insert(T.R, INT_MAX);while (N--) &#123; int opt = io::gt&lt;int&gt;(); int x = io::gt&lt;int&gt;(); if (T.R-&gt;sz == 2 || type == opt) &#123; T.insert(T.R, x); type = opt; &#125; else &#123; T.queryPre(T.R, x); int pre = T.res; T.querySub(T.R, x); int sub = T.res; if (pre == -INT_MAX) &#123; res += sub - x; T.erase(T.R, sub); &#125; else if (sub == INT_MAX) &#123; res += x - pre; T.erase(T.R, pre); &#125; else &#123; if (x - pre &lt;= sub - x) &#123; res += x - pre; T.erase(T.R, pre); &#125; else &#123; res += sub - x; T.erase(T.R, sub); &#125; &#125; &#125;&#125;printf("%lld\n", res % 1000000);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2004」BZOJ 1212 L语言]]></title>
    <url>%2FBZOJ-1212%2F</url>
    <content type="text"><![CDATA[有 N 个字符串作为字典，一个字符串能被该字典理解当且仅当它可以被拆成若干个字串，每个字串都是字典中的单词。 现每次查询某个字符串 S_i 能被该字典理解的最长前缀大小，查询 M 次。 1\leq N,M\leq 20 ，单词长度不超过 10 ， S_i 的长度不超过 1M 。 分析 看到多个字符串做字典查询，想到Trie树。 Trie树能够进行字符串的最长前缀匹配，很明显与这道题关系密切。 记 F_i = 1 当 S[0...i] 能被若干个单词拼接而成，如果 S[i+1...k] 也能被若干个单词拼接，那么 F_k=1 。 因此在进行匹配过程中，如果中间恰好为某个单词的结束，那么置对应位置的 F 值为 1 。 进行以 S[i] 为首的字符串匹配的条件为 F_{i-1}=1 （ S[0] 除外）。 那么答案满足即为满足 F_i=1 的最大值。 复杂度不好分析，为 O(\sum{len}) 级别。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1000 + 5;const int MAXM = 1024 * 1024 + 5;struct Node &#123;static const int MAX_SIZE = 26;bool flag;int Nxt[MAX_SIZE];&#125;Pool[MAXN];int cntP = -1, root;int newNode() &#123;Node &amp;x = Pool[++cntP];x.flag = 0;memset(x.Nxt, -1, sizeof x.Nxt);return cntP;&#125;void insert(int rt, char *S) &#123;while(*S) &#123; int id = *S++ - 'a'; if(!~Pool[rt].Nxt[id]) &#123; Pool[rt].Nxt[id] = newNode(); &#125; rt = Pool[rt].Nxt[id];&#125;Pool[rt].flag = true;&#125;void match(int rt, char *S, int st, int F[]) &#123;char *s = S + st;while(*s) &#123; int id = *s++ - 'a'; if(!~Pool[rt].Nxt[id]) &#123; return ; &#125; rt = Pool[rt].Nxt[id]; if(Pool[rt].flag) &#123; F[s - S] = 1; &#125;&#125;&#125;int solve(char *S) &#123;static int F[MAXM];memset(F, 0, sizeof F);match(root, S, 0, F);F[0] = 1;rep(i, 1, strlen(S)) &#123; if(F[i]) &#123; match(root, S, i, F); &#125;&#125;rof(i, strlen(S) + 1, 0) &#123; if(F[i]) &#123; return i; &#125;&#125;&#125;int main() &#123;int n, m;root = newNode();char Str[MAXM];scanf("%d%d", &amp;n, &amp;m);rep(i, 0, n) &#123; scanf("%s", Str); insert(root, Str);&#125;rep(i, 0, m) &#123; scanf("%s", Str); printf("%d\n", solve(Str));&#125;return 0;&#125;]]></content>
      <tags>
        <tag>字典树</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2002」BZOJ 1588 营业额统计]]></title>
    <url>%2FBZOJ-1588%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A ，最小化 total = A_1+\sum\limits_{i=2}^{N}{|A_i-A_j|}(j &lt; i) 。 N\leq 32767, A_i\leq 1000000 分析 用一棵可以查询前驱后继的Treap/Splay等数据结构维护。 每次查询 A_i 的前驱后继，取与 A_i 的差较小的值计入 total ，然后将 A_i 插入。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 32767 + 5;const int INF = 1e9;struct TreapTree &#123; struct Treap &#123; int key, fix; int cnt, sz; Treap *ch[2]; void pushUp() &#123; sz = cnt; if (ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if (ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125; int cmp(int x) &#123; return key == x ? -1 : key &lt; x; &#125; &#125; Pool[MAXN], *R; int cntP; Treap* newTreap(int x) &#123; Pool[++cntP] = (Treap) &#123;x, rand(), 1, 1, NULL, NULL&#125;; return &amp;Pool[cntP]; &#125; void rotate(Treap* &amp;t, int d) &#123; Treap *k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k; &#125; void insert(Treap* &amp;t, int x) &#123; if (!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x); ++t-&gt;sz; if (d == -1) &#123; ++t-&gt;cnt; &#125; else &#123; insert(t-&gt;ch[d], x); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125; &#125; &#125; int res; void queryPre(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &lt;= x) &#123; res = t-&gt;key; queryPre(t-&gt;ch[1], x); &#125; else &#123; queryPre(t-&gt;ch[0], x); &#125; &#125; void querySub(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &gt;= x) &#123; res = t-&gt;key; querySub(t-&gt;ch[0], x); &#125; else &#123; querySub(t-&gt;ch[1], x); &#125; &#125;&#125; T;int main() &#123; int N = io::gt&lt;int&gt;(); int res = io::gt&lt;int&gt;(); T.insert(T.R, res); rep(i, 2, N + 1) &#123; int x = io::gt&lt;int&gt;(); T.res = -1; T.queryPre(T.R, x); int pre = T.res != -1 ? T.res : -INF; T.res = -1; T.querySub(T.R, x); int sub = T.res != -1 ? T.res : INF; res += std::min(x - pre, sub - x); T.insert(T.R, x); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2002」BZOJ 1224 彩票]]></title>
    <url>%2FBZOJ-1224%2F</url>
    <content type="text"><![CDATA[从 [1,M] 中选取 N 个不同整数 A_i ，使得 \sum{\frac{1}{A_i}} = \frac{p}{q} 。求有多少种不同选法。 1\leq p,q\leq 100 ， 1\leq N\leq10 ， 1\leq M\leq 50 ，结果不超过 10^5 。 分析 看到这个数据范围， N\leq 10 ，比较显然是一个搜索+剪枝。 那么如何剪枝？ 最简单的便是如果当前没选完且 sum\geq \frac{p}{q} ，那么就立即返回。 还有两个比较显然的优化。 假设顺序搜索，当前值为 x ，当前和为 sum ，剩余选取 n 个数。 那么如果可能得到 \frac{p}{q} ，至少要满足 sum + \frac{1}{x} * n \geq \frac{p}{q} 且 sum + \frac{1}{M} * n\leq \frac{p}{q} 。 即当前值加上选取剩余数的最小值 min 一定小于结果，加上最大值 max 一定大于结果，否则不可能存在 min\leq a\leq max 使得 sum + a = \frac{p}{q} 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const double eps = 1e-10;int N, M, X, Y;int ans;double goal;void dfs(int x, int total, double sum) &#123; if(goal - sum - 1.0 / x * (N - total) &gt; eps) &#123; return ; &#125; if(sum + 1.0 / M * (N - total) - goal &gt; eps) &#123; return ; &#125; if(total == N) &#123; if(fabs(sum - goal) &lt;= eps) &#123; ++ans; &#125; return ; &#125; if(x &lt;= M) &#123; dfs(x + 1, total + 1, sum + 1.0 / x); dfs(x + 1, total, sum); &#125;&#125;int main() &#123; scanf("%d%d%d%d", &amp;N, &amp;M, &amp;X, &amp;Y); goal = 1.0 * X / Y; dfs(1, 0, 0); printf("%d\n", ans); return 0;&#125;`]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI/HEOI2016」BZOJ 4551 树]]></title>
    <url>%2FBZOJ-4551%2F</url>
    <content type="text"><![CDATA[在有根树 T 中，有两种操作：给某点 x 打标记、查询离某点 x 最近被打标记的祖先，数据范围 10^6 。 1\leq N, Q\leq 100000 分析 跟USACO10 FEB Slowing down 思路相同，反着考虑标记一个点对其他点的影响。 显然标记一个点后会影响以它为根的整棵子树。 那么用线段树维护每个点DFS序后，离它最近的被打标记的祖先。 比较原值和新值的大小关系进行更新操作，易得标号大的点更深（在同一棵子树中）。 复杂度 O(Q\log{N}) 。 P.S 不得不说的是，此题数据水到感人，直接暴力树上走路比线段树快的多。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Dfn[MAXN], Nfd[MAXN], Sz[MAXN], cntD;void dfs(int x) &#123; Dfn[x] = ++cntD; Nfd[cntD] = x; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; dfs(v); Sz[x] += Sz[v]; &#125;&#125;int Max[MAXN &lt;&lt; 2], Mrk[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid pushUp(int rt) &#123; if(Max[rt &lt;&lt; 1] == Max[rt &lt;&lt; 1 | 1]) &#123; Max[rt] = Max[rt &lt;&lt; 1]; &#125; else &#123; Max[rt] = -1; &#125;&#125;void pushDown(int rt) &#123; int &amp;mrk = Mrk[rt]; if(mrk) &#123; Mrk[rt &lt;&lt; 1] = std::max(Mrk[rt &lt;&lt; 1], mrk); Mrk[rt &lt;&lt; 1 | 1] = std::max(Mrk[rt &lt;&lt; 1 | 1], mrk); Max[rt &lt;&lt; 1] = std::max(Max[rt &lt;&lt; 1], Max[rt]); Max[rt &lt;&lt; 1 | 1] = std::max(Max[rt &lt;&lt; 1 | 1], Max[rt]); mrk = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Max[rt] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void change(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; if(Max[rt] &lt;= x) &#123; Max[rt] = x; Mrk[rt] = std::max(x, Max[rt]); &#125; return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b, x); &#125; if(m &lt; b) &#123; change(RT, a, b, x); &#125; pushUp(rt);&#125;int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Max[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125;&#125;int main() &#123; int N = io::gt&lt;int&gt;(), Q = io::gt&lt;int&gt;(); rep(i, 1, N) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); addEdge(u, v); &#125; dfs(1); build(1, 1, N); while(Q--) &#123; char opt = io::gc(); while(!isalpha(opt)) &#123; opt = io::gc(); &#125; int x = io::gt&lt;int&gt;(); if(opt == 'C') &#123; change(1, 1, N, Dfn[x], Dfn[x] + Sz[x] - 1, Dfn[x]); &#125; else &#123; io::pt(Nfd[query(1, 1, N, Dfn[x])]); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2015」BZOJ 4034 树上操作]]></title>
    <url>%2FBZOJ-4034%2F</url>
    <content type="text"><![CDATA[在一棵有 N 个节点的树上，每个点有初始权值 W_i 。现有 M 个操作，分别为： ADD(u,x) 节点 u 权值增加 v ADD2(u,x)节点 u 的子树的所有节点权值增加 v QUERY(u) 查询节点 u 到根节点( 1 )的权值和 N,M\leq 100000 ，且所有输入数据的绝对值都不会超过 10^6 。 分析 树链剖分+线段树模板。 注意需要long long，否则只有30分。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Graph &#123; static const int MAXN = 100000 + 5; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int H[MAXN], cntE; int Depth[MAXN], Fa[MAXN], Son[MAXN], Sz[MAXN]; int Dfn[MAXN], Top[MAXN], cntD; int W[MAXN], Wp[MAXN]; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125; &#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r ll Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; &#125; void pushDown(int rt, int L) &#123; ll &amp;add = Add[rt]; if(!add) &#123; return ; &#125; Sum[rt &lt;&lt; 1] += add * (L - (L &gt;&gt; 1)); Sum[rt &lt;&lt; 1 | 1] += add * (L &gt;&gt; 1); Add[rt &lt;&lt; 1] += add; Add[rt &lt;&lt; 1 | 1] += add; add = 0; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void add(int rt, int l, int r, int a, int b, ll x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Sum[rt] += x * (r - l + 1); Add[rt] += x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; add(LT, a, b, x); &#125; if(m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt); &#125; ll querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; ll res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res; &#125; void addNode(int u, int x) &#123; add(1, 1, N, Dfn[u], Dfn[u], x); &#125; void addTree(int rt, int x) &#123; add(1, 1, N, Dfn[rt], Dfn[rt] + Sz[rt] - 1, x); &#125; ll queryPath(int v) &#123; ll res = 0; int u = R, tu = Top[R], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[tv], Dfn[v]); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[u], Dfn[v]); return res; &#125; void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); G.R = 1; int M = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;(); &#125; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); rep(i, 0, M) &#123; int opt = io::gt&lt;int&gt;(); if(opt == 1) &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.addNode(u, x); &#125; else if(opt == 2) &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.addTree(u, x); &#125; else &#123; io::pt(G.queryPath(io::gt&lt;int&gt;())); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2015」BZOJ 4033 树上染色]]></title>
    <url>%2FBZOJ-4033%2F</url>
    <content type="text"><![CDATA[有一棵点数为 N 的树，树边有边权。给你一个在 0 ~ N 之内的正整数 K ，你要在这棵树中选择 K 个点，将其染成黑色，并将其他的 N-K 个点染成白色 。将所有点染色后，你会获得黑点两两之间的距离加上白点两两之间的距离的和的受益。问受益最大值是多少。 0\leq K\leq N\leq 2000 分析 感觉就是一道联赛难度的树形DP，思路很simple。 枚举当前节点的某个儿子作为根的子树中染成黑色的节点数目，如此该子树内、外各自的黑白节点个数就已知了，可以计算当前这条边（当前节点和该儿子相连的边）对答案的贡献，进行类似01背包的操作。 计算复杂度的话，复杂度上界为 \sum\limits_{x=1}^{N}{\sum\limits_{u,v\in Son[x]}{Sz[u]\times Sz[v]}} 。 Sz[u]\times Sz[v] 可以将其视作从以 x 为根的子树中任意选择两个点，使得它们的LCA是 x 的方案数。由于每个节点对只有一个最近公共祖先，因此它就是在树上选取节点对的方案数，即 N^2 。 复杂度 O(N^2) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 2000 + 5;struct Edge &#123; int v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int N, K;int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, w, H[v]&#125;; H[v] = cntE;&#125;ll F[MAXN][MAXN];int Sz[MAXN];void dfs(int x, int fa) &#123; Sz[x] = 1; memset(F[x], -1, sizeof F[x]); F[x][0] = F[x][1] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v == fa) &#123; continue; &#125; dfs(v, x); Sz[x] += Sz[v]; &#125; for (int e = H[x]; e; e = E[e].nxt) &#123; int &amp;v = E[e].v, &amp;w = E[e].w; if (v == fa) &#123; continue; &#125; rof(i, std::min(Sz[x], K) + 1, 0) &#123; rep(j, 0, std::min(Sz[v], i) + 1) &#123; if (F[x][i - j] != -1) &#123; ll val = 1ll * w * (j * (K - j) + (Sz[v] - j) * (N - Sz[v] - K + j)); F[x][i] = std::max(F[x][i], F[x][i - j] + F[v][j] + val); &#125; &#125; &#125; &#125;&#125;int main() &#123; int u, v, w; scanf("%d%d", &amp;N, &amp;K); rep(i, 1, N) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; dfs(1, 0); printf("%lld\n", F[1][K]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2007」BZOJ1053 反素数]]></title>
    <url>%2FBZOJ-1053%2F</url>
    <content type="text"><![CDATA[求 [1,N]​ 中最大的反素数。 记 g(x) 为 x 的约束个数，反素数即满足 y \in [1,x-1], g(x) &gt; g(y) 。 1\leq N\leq 2000000000 分析 根据约数个数定理。设 x = \prod{A_{i}^{P_i}} ，则 x 的约数个数为 \prod{(P_i+1)} 。 假设 A_i 单调递增，那么 P_i 一定单调递减。 反证法：若 x 分解后，存在 A_i &lt; A_j, P_i \leq P_j ，那么互换 P_i, P_j 一定更优。 根据 N 的数据范围，发现前 11 个素数的乘积就已经超过 2e9 ，因此最多枚举 10 个素数 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;int Pri[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59&#125;;ll ans, N;int res;void dfs(int x, ll cur, int num, int last) &#123;if(cur * Pri[x] &gt; N) &#123; if(num &gt; res || num == res &amp;&amp; ans &gt; cur) &#123; res = num; ans = cur; &#125; return ;&#125;ll mul = Pri[x];rep(i, 1, last + 1) &#123; if(cur * mul &gt; N) &#123; break; &#125; dfs(x + 1, cur * mul, num * (i + 1), i); mul *= Pri[x];&#125;&#125;int main() &#123;scanf("%lld", &amp;N);dfs(0, 1, 1, 64);printf("%lld\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>约数个数定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2018」BZOJ 5301 异或序列]]></title>
    <url>%2FBZOJ-5301%2F</url>
    <content type="text"><![CDATA[在序列 A[1...N] 中查询 M 次，每次查询 A[L_i,R_i] 中异或和为 K 的子序列的个数。 1\leq N,M\leq 10^5,0\leq K, A_i\leq 105,1\leq L_i\leq R_i\leq N 分析 记 A[l...r] = A[l]\bigoplus A[l+1]\bigoplus...A[r] ，若 A[1...L-1] = x，A[1....R] = y ， 那么 A[L...R] = x\bigoplus y 。 也就是说如果满足 x\bigoplus y=k ，那么 A[L,R] 就是一个合法子序列。 考虑增加一个数 A[x] 产生的影响。 记 Cnt[x] 为满足 A[1...r] = x 的 r 的个数，那么区间个数会因此增加 Cnt[x\bigoplus K] 个，增加的区间分别为 A[\min(x,r)+1,\max(x,r)] 。 删除一个数同理，都是 O(1) 的。 想到莫队算法。 复杂度 O(M\log{M} + N\sqrt{N+M}) 。 P.S 注意细节， [l,r] 是通过 [1,r]\bigoplus[1,l-1] 异或得到的，而不是 [1,l] ；想清楚增加/删除一个数时，是先改统计数，还是先改答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;int Pos[MAXN];struct Query &#123; int l, r, id; bool operator &lt; (const Query &amp;x) const &#123; return Pos[l] == Pos[x.l] ? Pos[x.l] &amp; 1 ? r &gt; x.r : r &lt; x.r : Pos[l] &lt; Pos[x.l]; &#125;&#125; Q[MAXN];int N, M, K;int A[MAXN], Num[MAXN &lt;&lt; 1];int l = 1, r;ll Ans[MAXN], ans;void del(int x) &#123; --Num[A[x]]; ans -= Num[A[x] ^ K];&#125;void add(int x) &#123; ans += Num[A[x] ^ K]; Num[A[x]]++;&#125;int main() &#123; N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(), K = io::gt&lt;int&gt;(); int sz = sqrt(N); rep(i, 1, N + 1) &#123; Pos[i] = i / sz; A[i] = io::gt&lt;int&gt;(); A[i] ^= A[i - 1]; &#125; rep(i, 1, M + 1) &#123; Q[i].l = io::gt&lt;int&gt;(), Q[i].r = io::gt&lt;int&gt;(); Q[i].id = i; &#125; std::sort(Q + 1, Q + M + 1); Num[0] = 1; rep(i, 1, M + 1) &#123; while (l &lt; Q[i].l) &#123; del(l++ - 1); &#125; while (l &gt; Q[i].l) &#123; add(--l - 1); &#125; while (r &lt; Q[i].r) &#123; add(++r); &#125; while (r &gt; Q[i].r) &#123; del(r--); &#125; Ans[Q[i].id] = ans; &#125; rep(i, 1, M + 1) &#123; io::pt(Ans[i]); &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BJOI 2018」BZOJ 5293 求和]]></title>
    <url>%2FBZOJ-5293%2F</url>
    <content type="text"><![CDATA[在一棵有 n 个节点，根节点为 1 的树上进行 m 次询问。 每次查询 (u,v) 之间的简单路径的“ k 次深度和”。 k 次深度和即 \sum_{i\in(u,v)}Depth(i)^k ， Depth(1)=0 。 询问的结果对 998244353 取模。 1\leq n,m\leq 300000,1\leq k\leq 50 分析 首先注意到没有修改操作，只有查询。 其次注意到 k 很小， k 次方可以预处理。 最后注意到每次查询就是一个 k 次的两段连续区间的求和。 记 lca 为 (u,v) 的最近公共祖先。 那么查询的结果即为 \sum_{i=Depth(lca)}^{Depth(u)}i^k+\sum_{i=Depth(lca)+1}^{Depth(v)}i^k 预处理 F_{i,j} = \sum_{u=0}^{j}u^i 则查询的结果为 F_{k,Depth(v)}-F_{k,Depth(lca)}+F_{k,Depth(u)}-F_{k,Depth(lca)}+Depth(lca)^k 对于 m 组 (u,v) 求LCA，树剖、倍增、Tarjan都可以。 如果选择树剖、倍增，复杂度 O(n\times k+m\times \log{n}) ； 如果选择Tarjan，复杂度 O(n\times k+m) 。 实测Tarjan常数较大，运行时间相对更长（可能是写渣了）。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEinline char gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst static int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-'); register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125;const int MAXN = 300000 + 5;const int MOD = 998244353;std::vector&lt;int&gt; G[MAXN];int maxDep;int Fa[MAXN], Sz[MAXN], Depth[MAXN];int Son[MAXN], Top[MAXN];void dfs1(int x) &#123; Sz[x] = 1; if(x == 1) &#123; Depth[x] = 0; &#125; else &#123; Depth[x] = Depth[Fa[x]] + 1; &#125; maxDep = std::max(maxDep, Depth[x]); rep(i, 0, SZ(G[x])) &#123; int &amp;v = G[x][i]; if(Fa[x] != v) &#123; Fa[v] = x; dfs1(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]] || !Son[x]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int fa) &#123; Top[x] = fa; if(Son[x]) &#123; dfs2(Son[x], fa); &#125; rep(i, 0, SZ(G[x])) &#123; int &amp;v = G[x][i]; if(v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;int query(int u, int v) &#123; while(Top[u] ^ Top[v]) &#123; if(Depth[Top[u]] &gt; Depth[Top[v]]) &#123; u = Fa[Top[u]]; &#125; else &#123; v = Fa[Top[v]]; &#125; &#125; return Depth[u] &lt; Depth[v] ? u : v;&#125;std::vector&lt;int&gt; Sum[MAXN];ll poww(ll x, ll t) &#123; ll ans = 1; for(; t; t &gt;&gt;= 1, x = x * x % MOD) &#123; if(t &amp; 1) &#123; ans = ans * x % MOD; &#125; &#125; return ans;&#125;void pre() &#123; rep(i, 1, 51) &#123; Sum[i].push_back(0); rep(j, 1, maxDep + 1) &#123; ll cur = (poww(j, i) + Sum[i].back()) % MOD; Sum[i].push_back(cur); &#125; &#125;&#125;int main() &#123; rep(i, 1, io::gt&lt;int&gt;()) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); G[u].push_back(v); G[v].push_back(u); &#125; dfs1(1); dfs2(1, 1); pre(); rep(i, 0, io::gt&lt;int&gt;()) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); int lca = query(u, v); int &amp;depx = Depth[u], &amp;depy = Depth[v]; int &amp;depl = Depth[lca]; int ans = ((Sum[k][depy] - Sum[k][depl] + Sum[k][depx] - Sum[k][depl] + poww(depl, k)) % MOD + MOD) % MOD; io::pt(ans); &#125; io::fflush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「AHOI 2009」BZOJ 1798 维护序列]]></title>
    <url>%2FBZOJ-1798%2F</url>
    <content type="text"><![CDATA[维护序列 A[1...N] ，共 M 次操作，分为三种： A[l,r] 所有数加 x A[l,r] 所有数乘 x A[l,r] 求和 答案对 P 取模。 N,M\leq 100000,1\leq P\leq 1000000000 分析 线段树模板，注意lazy标签先处理乘法。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Segment &#123; int sum, add, mul;&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rll P;template&lt;class T, class G&gt; void inc(T &amp;x, G y) &#123; (x += y) %= P;&#125;template&lt;class T, class G&gt; void inu(T &amp;x, G y) &#123; (x *= y) %= P;&#125;void pushUp(int rt) &#123; inc(T[rt].sum = 0, T[rt &lt;&lt; 1].sum + T[rt &lt;&lt; 1 | 1].sum);&#125;void pushDown(int rt, int L) &#123; Segment &amp;ls = T[rt &lt;&lt; 1], &amp;rs = T[rt &lt;&lt; 1 | 1]; int &amp;add = T[rt].add, &amp;mul = T[rt].mul; if (mul != 1) &#123; inu(ls.sum, mul); inu(rs.sum, mul); inu(ls.add, mul); inu(rs.add, mul); inu(ls.mul, mul); inu(rs.mul, mul); mul = 1; &#125; if (add != 0) &#123; inc(ls.sum, add * (L - (L &gt;&gt; 1))); inc(rs.sum, add * (L &gt;&gt; 1)); inc(ls.add, add); inc(rs.add, add); add = 0; &#125;&#125;void build(int rt, int l, int r) &#123; T[rt].add = 0, T[rt].mul = 1; if (l == r) &#123; inc(T[rt].sum = 0, io::gt&lt;ll&gt;()); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void mul(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inu(T[rt].sum, x); inu(T[rt].add, x); inu(T[rt].mul, x); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; mul(LT, a, b, x); &#125; if (m &lt; b) &#123; mul(RT, a, b, x); &#125; pushUp(rt);&#125;void add(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inc(T[rt].sum, x * (r - l + 1)); inc(T[rt].add, x); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b, x); &#125; if (m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt);&#125;ll querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].sum; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; ll res = 0; if (a &lt;= m) &#123; inc(res, querySum(LT, a, b)); &#125; if (m &lt; b) &#123; inc(res, querySum(RT, a, b)); &#125; return res;&#125;int main() &#123; int N = io::gt&lt;int&gt;(); P = io::gt&lt;ll&gt;(); build(1, 1, N); int M = io::gt&lt;int&gt;(); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); if (opt == 1) &#123; mul(1, 1, N, l, r, io::gt&lt;ll&gt;() % P); &#125; else if (opt == 2) &#123; add(1, 1, N, l, r, io::gt&lt;ll&gt;() % P); &#125; else &#123; io::pt(querySum(1, 1, N, l, r)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BJWC 2018」BZOJ 5148 kakuro]]></title>
    <url>%2FBZOJ-5148%2F</url>
    <content type="text"><![CDATA[kakuro是一个神奇的数独游戏，大致规则如下： N\times M​ 的网格图中，由一些格子为空格需要填数，一些格子填线索，一些格子什么都不填 线索有两个方向，分别为右和下，线索的值表示该方向连续空格所填数之和 对于任意一个空格，其左边与上边的一定存在一个格子为线 游戏规则： 空格中填入正整数。 被斜线分开的方格中，右上角的数字等于其右侧邻接之连续方格中数字之和，左下角的数字等于其下方邻接之连续方格中数字之和。 Apia 给了Rimbaud 一个Kakuro 谜题。心不灵手不巧的Rimbaud 根本不会做Kakuro，所以只在空格里面填上了一些随机的数字，称这个为一个局面，即包含了谜题一开始给出的线索和后面填入的数字。 现在Rimbaud 希望能修改这个局面使得她的答案是一个合法解。这个局面中有些数字(包括一开始的给出线索和后面填入的数字) 是可以修改的。每个数字都有个特定的代价，将这个数字加 1 或者减 1 都得付出这个数字对应的代价。注意对于一组合法解，必须满足游戏规则，也就是空格中填的数字必须是正整数并且满足和的条件，但是不要求不重复。 Rimbaud 希望用最少的代价让这个局面变得合法，如果不可能那么输出-1 。 3 \leq n,m \leq 30 ，保证初始局面中的每个数字不超过 10^6 ，保证每个数字的代价不超过 10^6 。 分析 致谢 感谢AloNE的讲解。 正题 一个思路就是先做出一个合法解，然后再去修改权值以减少总花费。 那么最简单的合法解，就是每个空格都填 1 ，线索填对应格子的个数。 如此保证了每个空格都是正整数，这是一个最小解。 记当前花费为 Ans 。 记某个格子现在的值为 A(x,y) ，原来的值为 O(x,y) ，修改 1 的价格为 C(x,y) 。 那么每个空格和线索只能往大修改，那么有两种情况。 A(x,y) \leq O(x,y) ，那么当 A(x,y) 最初变大直到 O(x,y) 时，相当于对最开始的修改进行反悔，也就是说花费 -C(x,y) ；当然对于超出 O(x,y) 的部分继续花费 C(x,y) 。 A(x,y) \geq O(x,y) ，那么修改继续增加花费 C(x,y) 。 转化成网络流问题，将这些关系抽象成如下的边： 发现对于修改一个空格会对其左边和上边的两个线索产生影响，约束方法很简单，就是流量从其上面的线索流入，从其左边的线索流出，那么保证所有增加的流量都是合法的；也就是说空格本质就是一条连接横向和竖向线索的边； 根据上面的建模方法， S 连接所有竖向线索，费用为 C(x,y) ，流量不限； 所有横向线索连接 T ，费用为 C(x,y) ，流量不限； 对于所有空格，如果 A(x,y) \leq O(x,y) ，连接费用为 -C(x,y) 流量为 O(x,y) - A(x,y) ，意为对最初的修改进行反悔；（对应的两个线索之间连边） 对于所有空格，连接费用为 C(x,y) ，流量不限的边，因为每个格子都可以无限增大。 跑最小费用可行流，当前费用 Cost \geq 0 时结束。 得到最小费用 C ，那么最终结果 Ans + C 。 那么如何判断无解的情况？ 无解也就是说修改了不能修改的边。 那么将不能修改的边的费用置为 INF ，跑完最小费用可行流之后检查残余与网络是否存在费用为 INF 的反向边流量不为 0 或者费用为 -INF 的边流量不为 0 。 如果出现这种情况，说明了必须修改不能修改的格子权值以满足流量平衡，输出 -1 即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 30 + 5;const int INF = 1e9 + 7;namespace mcf &#123;const int MAXN = ::MAXN * ::MAXN * 4;const int MAXM = MAXN;struct Edge &#123; int v, c, f, nxt;&#125; E[MAXM &lt;&lt; 1];int S, T;ll C, F, Dis[MAXN];int H[MAXN], cntE;int Lp[MAXN], Le[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::bitset&lt;MAXN&gt; Inq; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] &lt; 0;&#125;void mcf() &#123; while (spfa()) &#123; int f = INF; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; C = F = 0;&#125;bool check() &#123; for (int i = 0; i &lt;= cntE; i += 2) &#123; if (E[i].c == INF &amp;&amp; E[i ^ 1].f &gt; 0) &#123; return false; &#125; if (E[i].c == -INF &amp;&amp; E[i].f &gt; 0) &#123; return false; &#125; &#125; return true;&#125;&#125;int N, M;int Type[MAXN][MAXN];int Column[MAXN][MAXN], Line[MAXN][MAXN], Ori[MAXN][MAXN];int ChangeC[MAXN][MAXN], ChangeL[MAXN][MAXN], ChangeO[MAXN][MAXN];int IdC[MAXN][MAXN], IdL[MAXN][MAXN];int Left[MAXN][MAXN], Up[MAXN][MAXN];int AfterC[MAXN][MAXN], AfterL[MAXN][MAXN], AfterO[MAXN][MAXN];int main() &#123; mcf::init(); int cnt = 0; N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; Type[i][j] = io::gt&lt;int&gt;(); &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; Column[i][j] = io::gt&lt;int&gt;(); IdC[i][j] = ++cnt; &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; Line[i][j] = io::gt&lt;int&gt;(); IdL[i][j] = ++cnt; &#125; if (Type[i][j] == 4) &#123; Ori[i][j] = io::gt&lt;int&gt;(); &#125; &#125; &#125; mcf::S = 0, mcf::T = cnt + 1; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; ChangeC[i][j] = io::gt&lt;int&gt;(); if (ChangeC[i][j] == -1) &#123; ChangeC[i][j] = INF; &#125; &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; ChangeL[i][j] = io::gt&lt;int&gt;(); if (ChangeL[i][j] == -1) &#123; ChangeL[i][j] = INF; &#125; &#125; if (Type[i][j] == 4) &#123; ChangeO[i][j] = io::gt&lt;int&gt;(); if (ChangeO[i][j] == -1) &#123; ChangeO[i][j] = INF; &#125; &#125; &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; int k = i + 1; while (k &lt;= N &amp;&amp; Type[k][j] == 4) &#123; Up[k++][j] = IdC[i][j]; &#125; AfterC[i][j] = k - i - 1; mcf::C += 1ll * ChangeC[i][j] * std::abs(AfterC[i][j] - Column[i][j]); &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; int k = j + 1; while (k &lt;= M &amp;&amp; Type[i][k] == 4) &#123; Left[i][k++] = IdL[i][j]; &#125; AfterL[i][j] = k - j - 1; mcf::C += 1ll * ChangeL[i][j] * std::abs(AfterL[i][j] - Line[i][j]); &#125; if (Type[i][j] == 4) &#123; AfterO[i][j] = 1; mcf::C += 1ll * ChangeO[i][j] * std::abs(AfterO[i][j] - Ori[i][j]); &#125; &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; if (AfterC[i][j] &lt; Column[i][j]) &#123; mcf::addEdge(mcf::S, IdC[i][j], Column[i][j] - AfterC[i][j], -ChangeC[i][j]); &#125; mcf::addEdge(mcf::S, IdC[i][j], INF, ChangeC[i][j]); &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; if (AfterL[i][j] &lt; Line[i][j]) &#123; mcf::addEdge(IdL[i][j], mcf::T, Line[i][j] - AfterL[i][j], -ChangeL[i][j]); &#125; mcf::addEdge(IdL[i][j], mcf::T, INF, ChangeL[i][j]); &#125; if (Type[i][j] == 4) &#123; if (AfterO[i][j] &lt; Ori[i][j]) &#123; mcf::addEdge(Up[i][j], Left[i][j], Ori[i][j] - AfterO[i][j], -ChangeO[i][j]); &#125; mcf::addEdge(Up[i][j], Left[i][j], INF, ChangeO[i][j]); &#125; &#125; &#125; mcf::mcf(); if (!mcf::check()) &#123; printf("-1\n"); &#125; else &#123; printf("%lld\n", mcf::C); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」BZOJ 2465 小球]]></title>
    <url>%2FBZOJ-2465%2F</url>
    <content type="text"><![CDATA[n 个球放进 m 个瓶子里，每个球有分数 A_i ，每个瓶子有容积 B_i ，且瓶中球的分数都不能超过 C_i ，求可放入球的最大数量以及在该条件下的最大分数和。 1\leq n\leq 200,0\leq m\leq 200,1 \leq p\leq 10^6, 0\leq c\leq 200, 1\leq q\leq 10^6 分析 费用流 第一看看就是个很裸的费用流，用最大流来保证取的球最多，最小费用来保证总分数最大（分数取反作费用）。 用 (u,v,f,c) 表示一条由 u 到 v 流量限制为 f 费用为 c 的边，那么本题建图方法如下： (S, i, 1, 0) ,i \in[1, n] (i,T,B_i,0),i\in[n+1,n+m] (i,j,1,-A_i),A_i\leq C_j 复杂度 O(NMF) ， F 为最大流的值。 贪心 其实此题更明显的做法应该是贪心。 将球按照分数排序，由于它们空间相同（都是 1 ），因此将分数大的球放到分数限制大的瓶子里一定会放置最多的球。 复杂度 O(M\log{M}+N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt; #define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("ball.in", "r", stdin); freopen("ball.out", "w", stdout);&#125; const int MAXN = 400 + 5;const int INF = INT_MAX;int A[MAXN], B[MAXN], C[MAXN]; struct Edge &#123; int v, c, f, nxt;&#125; E[MAXN * MAXN];int N, M, S, T;int cost, flow;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq; void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125; bool spfa() &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125; void buildGraph() &#123; S = N + M + 1, T = N + M + 2; memset(H, -1, sizeof H); cntE = -1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); &#125; rep(i, 1, M + 1) &#123; addEdge(i + N, T, B[i], 0); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (::A[i] &lt;= ::C[j]) &#123; addEdge(i, N + j, INF, -::A[i]); &#125; &#125; &#125;&#125; void mcmf() &#123; buildGraph(); cost = flow = 0; while (spfa()) &#123; int f = INF; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125;&#125; int main() &#123; //open(); while (true) &#123; scanf("%d%d", &amp;N, &amp;M); if (N + M == 0) &#123; break; &#125; rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); &#125; rep(i, 1, M + 1) &#123; scanf("%d%d", &amp;B[i], &amp;C[i]); &#125; mcmf(); printf("%d %d\n", flow, -cost); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」BZOJ 2466 树]]></title>
    <url>%2FBZOJ-2466%2F</url>
    <content type="text"><![CDATA[树 T 上的每个节点都一盏熄灭的灯，已知按下某个节点的开关会改变它与它相连的所有节点的灯的状态，求将所有灯变亮的最少操作次数。 1\leq n\leq 100 分析 发现每个操作都是独立的，也就是说至多每个开关按一次。 再根据按开关会改变所有与它相连的灯的状态，想到一定是自叶子到根进行操作，那么就树形DP。 DP中注意当前节点无论亮与否，它的子树一定是全亮的（因为操作是一直往根上走的）。 对于一个节点有四种状态：按开关且亮、按开关且灭、不按开关且亮、不按开关且灭。 可以发现第二种没有意义（不按都亮了那还按它干什么）。 考虑剩余三种的状态如何从儿子转移。 其中“按开关且亮”的状态最简单，因为按了它之后要保证它的子树的灯全是亮的，因此从“它的所有儿子都灭且没按”的状态转移而来。 “不按开关且灭”的状态从“当前亮+当前儿子按且亮”或“当前灭+当前儿子不按且亮”转移。 “不按开关且亮”的状态从“当前亮+当前儿子不按且亮”或“当前灭+当前儿子按且亮”转移。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("tree.in", "r", stdin); freopen("tree.out", "w", stdout);&#125;const int MAXN = 100 + 5;const int INF = 0x03ffffff;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int F[MAXN][2][2];void dfs(int x, int fa) &#123; int a = 0, b = INF, c = 0; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; int aa = a, bb = b; dfs(v, x); a = std::min(aa + F[v][0][1], bb + F[v][1][1]); b = std::min(aa + F[v][1][1], bb + F[v][0][1]); c += F[v][0][0]; &#125; &#125; F[x][0][0] = a; F[x][0][1] = b; F[x][1][1] = c + 1;&#125;int main() &#123; //open(); int u, v; while (true) &#123; scanf("%d", &amp;N); if (N == 0) &#123; break; &#125; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(1, 0); printf("%d\n", std::min(F[1][0][1], F[1][1][1])); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」 BZOJ 2464 小明的游戏]]></title>
    <url>%2FBZOJ-2464%2F</url>
    <content type="text"><![CDATA[在一个 N\times M 的01网格图中，每次可以向相邻的格子移动，移动到同一类型的格子的花费为 0 ，否则为 1 ，求起点到终点的最小花费。 1\leq n, m\leq 500 分析 由于边权非 0 即 1 ，因此SPFA的复杂度上限就是点数，即 N^2 。 复杂度 O(T\times N^2) ，其中 T 为数据组数。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("game.in", "r", stdin); freopen("game.out", "w", stdout);&#125;const int MAXN = 500 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;char Str[MAXN][MAXN];int sx, sy, ex, ey;bool check(int x, int y) &#123; return x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; N &amp;&amp; y &lt; M;&#125;int spfa() &#123; static int Dis[MAXN][MAXN]; static bool Inq[MAXN][MAXN]; std::queue&lt;int, std::deque&lt;int&gt; &gt; Qx, Qy; memset(Inq, 0, sizeof Inq); memset(Dis, 0x3f, sizeof Dis); Qx.push(sx); Qy.push(sy); Dis[sx][sy] = 0; while (!Qx.empty()) &#123; int x = Qx.front(), y = Qy.front(); Qx.pop(), Qy.pop(); Inq[x][y] = 0; rep(i, 0, 4) &#123; int nx = x + Dicx[i];; int ny = y + Dicy[i]; if (!check(nx, ny)) &#123; continue ; &#125; int dis = Dis[x][y] + (Str[x][y] != Str[nx][ny]); if (Dis[nx][ny] &gt; dis) &#123; Dis[nx][ny] = dis; if (!Inq[nx][ny]) &#123; Inq[nx][ny] = 1; Qx.push(nx); Qy.push(ny); &#125; &#125; &#125; &#125; return Dis[ex][ey];&#125;int main() &#123; //open(); while (true) &#123; scanf("%d%d", &amp;N, &amp;M); if (N + M == 0) &#123; break; &#125; rep(i, 0, N) &#123; scanf("%s", Str[i]); &#125; scanf("%d%d%d%d", &amp;sx, &amp;sy, &amp;ex, &amp;ey); printf("%d\n", spfa()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HEOI 2013」BZOJ 3166 Alo]]></title>
    <url>%2FBZOJ-3166%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A[1 \cdots N] ，定义 F[i,j] 为 A[i \cdots j] 的次大值与区间内另一个数异或的最大值。求 A 所有子区间的 F 最大值。 1\leq N\leq 50000, A_i\leq 10^9 分析 将问题反过来看，其实就是找到每一个数对应的区间，使得它在区间中是次大值，且区间长度最大。 记 L[i],R[i] 为 A[i] 左右第一个比它大的数， LL[i],RR[i] 为 A[i] 左右第二个大的数，那么区间为 [LL[i]+1,R[i]-1] 和 [L[i]+1,RR[i]-1] 。 可以通过在ST表上二分的方法求出 LL[i],RR[i] ，复杂度 O(N\log{N}) 。 最后用可持久化Trie求每个区间与 A[i] 的最大异或值，答案为这些值取max，这一步操作的复杂度为 O(N\log{max(A_i)}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;const int MAXM = 40;struct Trie &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], cntT;int insert(int pre, int x) &#123; int rt = ++cntT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++cntT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int N, A[MAXN];int L[MAXN], R[MAXN];int Stk[MAXN], top;int LL[MAXN], RR[MAXN];int bSearch(int x) &#123; int l = 1, r = top; int ans = 0; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (A[Stk[m]] &gt; A[x]) &#123; ans = Stk[m]; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; return ans;&#125;int F[MAXN][MAXM];void buildST(int n) &#123; for (int i = 1; i &lt;= n; ++i) &#123; F[i][0] = A[i]; &#125; int k = log2(n); for (int j = 1; j &lt;= k; ++j) &#123; for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= n; ++i) &#123; if (F[i][j - 1] &gt; F[i + (1 &lt;&lt; (j - 1))][j - 1]) &#123; F[i][j] = F[i][j - 1]; &#125; else &#123; F[i][j] = F[i + (1 &lt;&lt; (j - 1))][j - 1]; &#125; &#125; &#125;&#125;int queryMax(int l, int r) &#123; int k = log2(r - l + 1); return std::max(F[l][k], F[r - (1 &lt;&lt; k) + 1][k]);&#125;int getL(int i) &#123; int p = L[i], x = A[i]; int l = 1, r = p - 1, ans = 1; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (queryMax(m, p - 1) &gt; x) &#123; ans = m; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; return ans;&#125;int getR(int i) &#123; int p = R[i], x = A[i]; int l = p + 1, r = N + 1, ans = N + 1; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (queryMax(p + 1, m) &gt; x) &#123; ans = m; r = m - 1; &#125; else &#123; l = m + 1; &#125; &#125; return ans;&#125;int main() &#123; scanf("%d", &amp;N); Rt[1] = insert(Rt[0], 0); ++N; for (int i = 2; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); Rt[i] = insert(Rt[i - 1], A[i]); &#125; A[1] = A[N + 1] = INT_MAX; Stk[top = 1] = 1; for (int i = 2; i &lt;= N; ++i) &#123; while (A[Stk[top]] &lt;= A[i]) &#123; --top; &#125; L[i] = Stk[top]; Stk[++top] = i; &#125; Stk[top = 1] = N + 1; for (int i = N; i &gt;= 2; --i) &#123; while (A[Stk[top]] &lt;= A[i]) &#123; --top; &#125; R[i] = Stk[top]; Stk[++top] = i; &#125; buildST(N + 1); for (int i = 2; i &lt;= N; ++i) &#123; LL[i] = getL(i); RR[i] = getR(i); &#125; int ans = 0; for (int i = 2; i &lt;= N; ++i) &#123; if (L[i] == 1 &amp;&amp; R[i] == N + 1) &#123; continue; &#125; ans = std::max(ans, query(Rt[LL[i]], Rt[R[i] - 1], A[i])); ans = std::max(ans, query(Rt[L[i]], Rt[RR[i] - 1], A[i])); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2018 OPEN」BZOJ 5281 Talent Show]]></title>
    <url>%2FBZOJ-5281%2F</url>
    <content type="text"><![CDATA[N 个点各有权值 W_i 和 T_i ，在其中选择任意多个点，在满足 \sum{W_i} \geq A 的条件下求 \sum{T_i}/\sum{W_i} 的最大值。 1\leq N\leq 250,1\leq W\leq 1000,1\leq W_i\leq 10^6,1\leq T_i\leq 10^3 分析 套路二分答案 x ，然后背包求在 \sum{W_i}\geq A 的情况下判定 \sum{T_i-W_i\times x}\geq 0 是否成立。 由于答案是 \times 1000 取整，为了避免浮点数运算，可以直接将 T_i 放大 1000 倍。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;const int MAXN = 250 + 5;const int MAXM = 1000 + 5;int N, M;int A[MAXN], B[MAXN];long long F[MAXM];bool check(int a) &#123; memset(F, 0xc2, sizeof F); long long tmp = F[0]; F[0] = 0; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = M; j &gt;= 0; --j) &#123; if (F[j] != tmp) &#123; int v = std::min(M, j + A[i]); F[v] = std::max(F[v], F[j] - (long long)A[i] * a + B[i]); &#125; &#125; &#125; return F[M] &gt;= 0;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;A[i], &amp;B[i]); B[i] *= 1000; &#125; int l = 0, r = 2e8, ans = 0; while (l &lt;= r) &#123; int m = (l + r) / 2; if (check(m)) &#123; ans = m; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2016」BZOJ 4753 最佳团体]]></title>
    <url>%2FBZOJ-4753%2F</url>
    <content type="text"><![CDATA[每个点有一个父亲，它能被选择当且仅当它父亲被选择，0号节点默认被选择。每个点有收益 X[i] ，代价 Y[i] 。选择恰好 K 个点（不算0号），使得其对应的 \sum{X[i]}/\sum{Y[i]} 最大。 N\leq 2500 分析 通过分数规划，二分答案来避免除法。 选择关系是一棵树，被选择的点处于一个联通分量。树形背包，转移时父亲被强制选择。 复杂度 O(NK\log{X[i]}) 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;const int MAXN = 2500 + 5;const double eps = 1e-4;int N, K;int A[MAXN], B[MAXN], P[MAXN];std::vector&lt;int&gt; G[MAXN];double F[MAXN][MAXN], Tmp[MAXN];int Sz[MAXN];void dfs(int x, double m) &#123; F[x][0] = 0; F[x][1] = B[x] - A[x] * m; Sz[x] = 1; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; dfs(v, m); memset(Tmp, 0xc2, sizeof Tmp); Tmp[0] = 0; for (int j = 1; j &lt;= Sz[x]; ++j) &#123; for (int k = 0; k &lt;= Sz[v] &amp;&amp; j + k &lt;= K; ++k) &#123; Tmp[j + k] = std::max(Tmp[j + k], F[x][j] + F[v][k]); &#125; &#125; Sz[x] += Sz[v]; memcpy(F[x], Tmp, sizeof Tmp); &#125;&#125;bool check(double m) &#123; memset(F, 0xc2, sizeof F); dfs(0, m); return F[0][K] &gt;= 0;&#125;int main() &#123; scanf("%d%d", &amp;K, &amp;N); ++K; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d%d", &amp;A[i], &amp;B[i], &amp;P[i]); G[P[i]].push_back(i); &#125; double l = 0, r = 1e4, ans; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; l = ans = m; &#125; else &#123; r = m; &#125; &#125; printf("%.3lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
        <tag>分数规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2014」BZOJ 3597 方伯伯运椰子]]></title>
    <url>%2FBZOJ-3597%2F</url>
    <content type="text"><![CDATA[在有向无环图 G 中，每条边的流量与容量相等。现可以修改每条边的容量，使得新的边依然满足流量与容量相等，且总流量不变。已知扩展/缩小每条边容量的单位花费，以及流量通过该边的单位花费。记原总花费 X ，现在总花费 Y （包括修改容量和流量的花费），修改了 K 条边的容量，则收益为 w=(X-Y)/K ，求 w 的最大值。 N\leq 5000 分析 这道题的核心在于理解“总流量不变且每条边跑满”，可以用网络流的模型理解。 所谓扩容即增广，花费为扩容费用+流量费用；压缩即退流，花费为压缩费用-流量费用。 假设 a\geq(X-Y)/K ，则 Y-X+a\cdot K\geq 0 。 而 Y-X 就是增广和退流的费用之和， K 可以分摊到每条边上，即让每条边的权值增加 K 。 a 显然是可以二分的，那么若新图出现负环，则说明 a 的值不够大，直到得到解为止。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;const int MAXN = 5000 + 5;const double INF = 1e9;const double eps = 1e-4;int N, M;struct Edge &#123; int v; double w; int nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;double Dis[MAXN];bool Vis[MAXN];bool dfs_spfa(int x, double xx) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; double dis = Dis[x] + E[i].w + xx; if (Dis[v] &gt; dis) &#123; Dis[v] = dis; if (Vis[v] || dfs_spfa(v, xx)) &#123; return true; &#125; &#125; &#125; return Vis[x] = 0;&#125;bool check(double a) &#123; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = INF; &#125; Dis[N - 1] = 0; memset(Vis, 0, sizeof Vis); for (int i = 1; i &lt;= N; ++i) &#123; if (dfs_spfa(i, a)) &#123; return true; &#125; &#125; return false;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); N += 2; int a, b, c, d, u, v; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d%d%d%d", &amp;u, &amp;v, &amp;a, &amp;b, &amp;c, &amp;d); if (u == N - 1) &#123; continue; &#125; if (c) &#123; addEdge(v, u, a - d); &#125; addEdge(u, v, b + d); &#125; double l = 0, r = INF, ans; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; ans = l = m; &#125; else &#123; r = m; &#125; &#125; printf("%.2lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2009」BZOJ 1486 最小圈]]></title>
    <url>%2FBZOJ-1486%2F</url>
    <content type="text"><![CDATA[在有向图 G 中，定义环 a 的权值 w_a=\sum{W[i]}/num ，其中 W[i] 为 a 上边的权值， num 为 a 上的节点数。求图中 w 的最小值。 n\leq 1000,m\leq 5000,|W[i]|\leq 5000 分析 设 w_a=x ，则 \sum{W[i]}/num \geq x ，即 \sum{W[i]}\geq num\cdot x 。 由于环上点数和边数相同，因此可以改写为 \sum(W[i]-x)\geq 0 。 x 显然可以二分，于是就变成了判断图中是否存在负环的问题，用SPFA可解。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;const int MAXN = 3000 + 5;const int MAXM = 10000 + 5;const double INF = 1e7;const double eps = 1e-9;int N, M;struct Edge &#123; int v; double w; int nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;double Dis[MAXN];bool Vis[MAXN], flag;bool dfs_spfa(int x, double xx) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; double dis = Dis[x] + E[i].w - xx; if (Dis[v] &gt; dis) &#123; Dis[v] = dis; if (Vis[v] || dfs_spfa(v, xx)) &#123; return true; &#125; &#125; &#125; return Vis[x] = 0;&#125;bool check(double a) &#123; flag = 0; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = INF; &#125; memset(Vis, 0, sizeof Vis); for (int i = 1; i &lt;= N; ++i) &#123; if (dfs_spfa(i, a)) &#123; return true; &#125; &#125; return false;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); int u, v; double w; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%lf", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; double l = -INF, r = INF, ans = 0; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; r = m; ans = m; &#125; else &#123; l = m; &#125; &#125; printf("%.8lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2017」BZOJ 4819 新生舞会]]></title>
    <url>%2FBZOJ-4819%2F</url>
    <content type="text"><![CDATA[双方各有 N 个人进行两两配对， i 和 j 配对会获得 x=A[i][j] 的收益和 y=B[i][j] 的代价。最小化 \sum{x}/\sum{y} 。 N\leq 100,x,y\leq 10^4 分析 若 \sum{x}/\sum{y}\geq a ，则 \sum{x}-a\cdot\sum{y} \geq 0 ，再转化变成 \sum{x-a\cdot y}\geq 0 。 a 显然是可以二分的，然后建图跑最小费用最大流，边权为 a\cdot B[i][j]-A[i][j] ，判定合法即总费用是否小于0。 有更快的Dinkelbach算法，考虑用迭代的方式求 a 。初始化 a=0 ，得到一组合法解后，更新 a 为当前情况下的 \sum{x}/\sum{y} ，直到求得答案。此方法实测比二分快了10倍。 费用流的过程本质就是一个二分图最大权匹配，因此跑KM也是可行的，复杂度上界 O(\log{(10^6\cdot x)}\cdot n^3) ，实则远远跑不满。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include &lt;bits/stdc++.h&gt;const int MAXN = 200 + 5;const int MAXM = MAXN * MAXN;const double eps = 1e-7;const double INF = 1e7;int N, A[MAXN][MAXN], B[MAXN][MAXN];struct Edge &#123; int v; double w; int f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w, int f) &#123; E[++cntE] = (Edge) &#123;v, w, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -w, 0, H[v]&#125;; H[v] = cntE;&#125;int S, T;void buildGraph(double x) &#123; memset(H, 0, sizeof H); cntE = 1; S = 0; T = N * 2 + 1; for (int i = 1; i &lt;= N; ++i) &#123; addEdge(S, i, 0, 1); addEdge(i + N, T, 0, 1); for (int j = 1; j &lt;= N; ++j) &#123; addEdge(i, j + N, x * B[i][j] - A[i][j], 1); &#125; &#125;&#125;int Pe[MAXN], Pv[MAXN];double Dis[MAXN];bool Vis[MAXN];struct cmp &#123; inline bool operator () (const int &amp;x, const int &amp;y) const &#123; return Dis[x] &gt; Dis[y]; &#125;&#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, cmp&gt; pq;int spfa(int s, int t) &#123; for (int i = s; i &lt;= t; ++i) &#123; Dis[i] = INF; &#125; memset(Vis, 0, sizeof Vis); Dis[s] = 0, pq.push(s); while (!pq.empty()) &#123; int x = pq.top(); Vis[x] = 0, pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Pe[v] = i, Pv[v] = x; if (!Vis[v]) &#123; Vis[v] = 1; pq.push(v); &#125; &#125; &#125; &#125; return Dis[t] &lt; INF;&#125;double cost;int flow;double ai, bi;void mcmf(int s, int t) &#123; cost = flow = 0; while (spfa(s, t)) &#123; int f = INF; for (int i = t; i != s; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[t]; flow += f; for (int i = t; i != s; i = Pv[i]) &#123; E[Pe[i]].f -= f, E[Pe[i] ^ 1].f += f; &#125; &#125; ai = bi = 0; for (int x = 1; x &lt;= N; ++x) &#123; for (int i = H[x]; i; i = E[i].nxt) &#123; if (E[i].f == 0 &amp;&amp; E[i].v &gt; N) &#123; ai += A[x][E[i].v - N]; bi += B[x][E[i].v - N]; break; &#125; &#125; &#125;&#125;bool check(double lim) &#123; buildGraph(lim); mcmf(S, T); return flow == N &amp;&amp; cost &lt; -eps;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; scanf("%d", &amp;A[i][j]); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; scanf("%d", &amp;B[i][j]); &#125; &#125; double ans = 0; while (check(ans)) &#123; ans = ai / bi; &#125; printf("%.6lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 2741【FOTILE模拟赛】L]]></title>
    <url>%2FBZOJ-2741%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A[1 \cdots N] ， M 个询问。查询 [l,r] 的最大异或和子区间，强制在线。 N\leq 12000,M\leq 6000 分析 可持久化Trie+分块。 记 s[i] 为第 i 块的左端点， f(i,j) 表示 [s[i],r-1] 中的某个点为左端点，右端点为 r 的最大异或子区间。 记 g(i,j) 为 [s[i],r] 中的最大异或子区间，则 g(i,j)=max(g(i,j-1),f(i,j)) 。 查询时跨越的完整块直接查 g 数组，剩下的部分在可持久化Trie中查询，取最大值。 复杂度 O(n\sqrt{n}\log{max(A_i)}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;bits/stdc++.h&gt;const int MAXN = 12000 + 5;const int MAXM = 40;const int MAXK = 130;int N, M, A[MAXN];struct Trie &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], nT = 1;int insert(int pre, int x) &#123; int rt = ++nT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++nT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int len, n, Belong[MAXN], G[MAXK][MAXN];int queryLR(int l, int r) &#123; int ans = 0, t = r; for (int i = 1; i &lt;= n; ++i) &#123; if ((i - 1) * len + 1 &gt;= l &amp;&amp; (i - 1) * len + 1 &lt;= r) &#123; ans = G[i][r]; t = (i - 1) * len + 1; break; &#125; &#125; for (int i = l; i &lt;= t; ++i) &#123; ans = std::max(ans, query(Rt[l - 1], Rt[r], A[i])); &#125; return ans;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); len = sqrt(N), n = N / len + (N % len &gt; 0); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); A[i] ^= A[i - 1]; Rt[i] = insert(Rt[i - 1], A[i]); &#125; for (int i = 1; i &lt;= n; ++i) &#123; for (int j = (i - 1) * len + 1; j &lt;= N; ++j) &#123; G[i][j] = std::max(G[i][j - 1], query(Rt[(i - 1) * len], Rt[j - 1], A[j])); if (i == 1) &#123; G[i][j] = std::max(G[i][j], A[j]); &#125; &#125; &#125; int ans = 0, l, r; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;l, &amp;r); ans %= N; l = (l + ans) % N + 1; r = (r + ans) % N + 1; if (l &gt; r) &#123; std::swap(l, r); &#125; printf("%d\n", ans = queryLR(l - 1, r)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3261 最大异或和]]></title>
    <url>%2FBZOJ-3261%2F</url>
    <content type="text"><![CDATA[开始给定一个长为 N 的序列 A[1\cdots N] ，有 M 个操作。在 A 的末尾插入 x ；或者给定 x,l,r ，查询 max(x\oplus A[p]\oplus\cdots\oplus A[N]) ，其中 p\in[l,r] ， N 为当前序列长度。 N\leq 300000,A[i]\leq 10^7 分析 维护前缀异或和，令 S[i]=A[1]\oplus\dots\oplus A[i] ，问题转化为查询 S[N]\oplus S[p-1]\oplus x 的最大值，其中 S[N] 和 x 都是已知的。 由于是区间问题，可以用可持久化Trie树维护。对于每个新插入的数在01Trie树新建一条链，并将链上所有点的状态+1。通过权值相减来判断区间内是否存在该点，剩下的就是常规01Tire树求异或最大值的操作。 需要注意的一个细节，由于存在插入操作，因此序列中的元素个数最大可能为 N+M ，需要开两倍空间。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;const int MAXN = 600000 + 5;const int MAXM = 50;struct Node &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], cntT;int N, M;int insert(int pre, int x) &#123; int rt = ++cntT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++cntT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); int cur = 0, x, l, r; char opt[10]; ++N; Rt[1] = insert(Rt[0], 0); for (int i = 2; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); cur ^= x; Rt[i] = insert(Rt[i - 1], cur); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%s", opt); if (opt[0] == 'A') &#123; scanf("%d", &amp;x); cur ^= x; ++N; Rt[N] = insert(Rt[N - 1], cur); &#125; else &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;x); printf("%d\n", query(Rt[l - 1], Rt[r], x ^ cur)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 4260 Codechef REBXOR]]></title>
    <url>%2FBZOJ-4260%2F</url>
    <content type="text"><![CDATA[对于长为 N 的序列 A[1\cdots N] ，求两个不相交区间的异或和之和的最大值。 2\leq N\leq 4\times 10^5,A[i]\leq 10^9 分析 根据异或的性质， 令 S[i]=A[1]\oplus A[2]\cdots \oplus A[i] ，则 A[l]\oplus\cdots \oplus A[r]=S[r]\oplus S[l-1] 。 令 L[i] 为 A[1\cdots i] 中的最大区间异或和， R[i] 为 A[i\cdots N] 中的最大区间异或和，如此 L[i],R[i+1] 一定不相交，答案为 max(L[i]+R[i+1]) 。 从前往后在01字典树中查询当前前缀异或和 cur 能异或得到的最大值，并将 cur 插入，则 L[i]=\max(L[i-1],query(cur)) 。 再从后往前插入后缀异或和，则 R[i]=\max(R[i+1],query(cur)) 。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;bits/stdc++.h&gt;const int MAXN = 4e5 + 5;const int MAXM = 40;struct Node &#123; int sz, num; int ch[2];&#125; T[MAXN * MAXM];int cntT;int N, A[MAXN];int L[MAXN], R[MAXN];void insert(int rt, int x) &#123; for (int i = 32; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (!T[rt].ch[c]) &#123; T[rt].ch[c] = ++cntT; T[cntT].ch[0] = T[cntT].ch[1] = 0; T[cntT].sz = 0; &#125; ++T[rt].sz; rt = T[rt].ch[c]; &#125; T[rt].num = x;&#125;int query(int rt, int x) &#123; for (int i = 32; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (!T[rt].ch[c ^ 1]) &#123; rt = T[rt].ch[c]; &#125; else &#123; rt = T[rt].ch[c ^ 1]; &#125; &#125; return x ^ T[rt].num;&#125;void init() &#123; cntT = 1; T[1].ch[0] = T[1].ch[1] = 0; T[1].sz = T[1].num = 0;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); &#125; int lst = 0; insert(1, 0); for (int i = 1; i &lt;= N; ++i) &#123; lst ^= A[i]; L[i] = std::max(L[i - 1], query(1, lst)); insert(1, lst); &#125; init(); lst = 0; insert(1, 0); for (int i = N; i &gt;= 1; --i) &#123; lst ^= A[i]; R[i] = std::max(R[i + 1], query(1, lst)); insert(1, lst); &#125; int ans = 0; for (int i = 1; i &lt; N; ++i) &#123; ans = std::max(ans, L[i] + R[i + 1]); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>字典树</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2011」BZOJ 2330 糖果]]></title>
    <url>%2FBZOJ-2330%2F</url>
    <content type="text"><![CDATA[有 N 个数 TeX parse error: Undefined control sequence \[，要求满足 M 个条件。条件形如： A[i] \leq A[j] ， A[i] &lt; A[j] ， A[i] = A[j] 。如果可以满足所有条件，求 \sum{A_i} 的最小值，否则输出 -1。 N,M\leq 100000 分析 将条件依次转化为 A[j] - A[i] \geq 0 ， A[j] - A[i]\geq 1 ， A[j]-A[i]\geq 0 \&amp; A[i]-A[j]\geq 0 。 根据 u - v\geq w 建有向边 (v, u, w) 的方式建图，求最长路。 如果单纯通过spfa进队 N 次来判断无解可能会导致超时，发现无解本质为出现正环。因此可以采用Tarjan求联通分量，判断各分量内是否存在非零边的方法做到 O(N+M) 判断无解。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int N, K;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;std::queue&lt;int&gt; Que;long long Dis[MAXN];bool Inq[MAXN];long long spfa() &#123; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = 1; Que.push(i); &#125; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &lt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; long long res = 0; for (int i = 1; i &lt;= N; ++i) &#123; res += Dis[i]; &#125; return res;&#125;int Dfn[MAXN], Low[MAXN], cntD;int Stk[MAXN], top;int Belong[MAXN], cntB;void dfs(int x) &#123; Dfn[x] = Low[x] = ++cntD; Stk[++top] = x; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (!Dfn[v]) &#123; dfs(v); Low[x] = std::min(Low[x], Low[v]); &#125; else if (!Belong[v]) &#123; Low[x] = std::min(Low[x], Dfn[v]); &#125; &#125; if (Dfn[x] == Low[x]) &#123; Belong[x] = ++cntB; do &#123; Belong[Stk[top]] = cntB; &#125; while (Stk[top--] != x); &#125;&#125;int main() &#123; int opt, x, y; scanf("%d%d", &amp;N, &amp;K); for (int i = 1; i &lt;= K; ++i) &#123; scanf("%d%d%d", &amp;opt, &amp;x, &amp;y); if (opt == 1) &#123; addEdge(x, y, 0); addEdge(y, x, 0); &#125; else if (opt == 2) &#123; addEdge(x, y, 1); &#125; else if (opt == 3) &#123; addEdge(y, x, 0); &#125; else if (opt == 4) &#123; addEdge(y, x, 1); &#125; else if (opt == 5) &#123; addEdge(x, y, 0); &#125; if (opt % 2 == 0 &amp;&amp; x == y) &#123; puts("-1"); return 0; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; if (!Dfn[i]) &#123; dfs(i); &#125; &#125; bool flag = 0; for (int i = 1; i &lt;= cntE; ++i) &#123; if (E[i].w &amp;&amp; Belong[E[i].u] == Belong[E[i].v]) &#123; flag = 1; break; &#125; &#125; if (flag) &#123; puts("-1"); &#125; else &#123; printf("%lld\n", spfa()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2005」BZOJ 1202 狡猾的商人]]></title>
    <url>%2FBZOJ-1202%2F</url>
    <content type="text"><![CDATA[给定 M 组关于 l, r, x 的等式，意为 \sum\limits_{i=l}^{r}{A_i}=x ，判断是否可以构造出 A[1\cdots N] 满足这些等式。 N\leq 100,M\leq 1000 分析 将等式写成前缀和的形式，用 Sum[i] 表示 \sum\limits_{j=1}^{i}{A_j} ，等式化为 Sum[r] - Sum[l-1] = x 。 可以将等式变形成两个不等式， Sum[r] - Sum[l-1] \geq x 和 Sum[l - 1] - Sum[r] \geq -x 。 那么原问题就转化为差分约束系统求解模型。连接边 (l - 1, r, x) 和 (r, l - 1, -x) ，SPFA判断是否存在负环，复杂度 O(NM) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;const int MAXM = 1000 + 5;int N, M;struct Edge &#123;int v, w, nxt;&#125; E[MAXM * 3];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;&#125;std::queue&lt;int&gt; Que;int Dis[MAXN], Cnt[MAXN], Inq[MAXN];bool Vis[MAXN];int n;bool spfa() &#123;while (!Que.empty()) &#123; Que.pop();&#125;memset(Dis, 0x3f, sizeof Dis);memset(Inq, 0, sizeof Inq);memset(Cnt, 0, sizeof Cnt);Que.push(N + 1);Dis[N + 1] = 0;while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Cnt[v] = Cnt[x] + 1; if (Cnt[v] &gt; n) &#123; return false; &#125; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125;&#125;return true;&#125;void init() &#123;cntE = 0;memset(H, 0, sizeof H);n = 0;memset(Vis, 0, sizeof Vis);&#125;int main() &#123;int T, u, v, w;scanf("%d", &amp;T);while (T--) &#123; scanf("%d%d", &amp;N, &amp;M); init(); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); if (!Vis[u - 1]) &#123; Vis[u - 1] = 1; ++n; &#125; if (!Vis[v]) &#123; Vis[v] = 1; ++n; &#125; addEdge(u - 1, v, -w); addEdge(v, u - 1, w); &#125; for (int i = 1; i &lt;= N; ++i) &#123; addEdge(N + 1, i, 0); &#125; if (spfa()) &#123; puts("true"); &#125; else &#123; puts("false"); &#125;&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「2010 集训队测验」BZOJ 2127 文理分科]]></title>
    <url>%2FBZOJ-2127%2F</url>
    <content type="text"><![CDATA[在 n\times m 的矩阵中，每个格子可以选择 0/1 ，分别获得收益 A_{i,j},B_{i,j} 。如果上下两个格子选择相同，则额外获得收益 C_{i,j} 与 D_{i,j} （都选 0 或都选 1 ），如果左右两个格子选择相同，则额外获得收益 E_{i,j} 与 F_{i,j} 。求总收益的最大值。 n,m\leq 100,A,B,C,D,E,F_{i,j}\leq 5000 分析 这是集训队论文《浅谈一类最小割问题》中的例题，也是网络流建模之二元关系的一道典型题目。 根据相关建图模型，对于每个点 x ，分别与 S,T 连边，割去 (S,x) 表示选择文科，割去 (x,T) 表示选择理科。 由于只能求最小割，因此可以先累计所有收益再减去最小割得到最大值。 由于每个点与相邻的点之间的选择会影响结果，因此 x 与相邻的点连边。 对于任意两个相邻点 x,y ，子图有边 (S,x),(S,y),(x,y),(y,x),(x,T),(y,T) 。 割去 (S,x),(S,y) 表示都选文，割去 (x,T),(y,T) 表示都选理，割去 (S,x),(x,y),(y,T) 表示 x 选文， y 选理，剩下一种情况同理第三种。 假设 x,y 选文的收益分别为 a_x,a_y ，选理的收益为 b_x,b_y ，都选文/理的收益为 c,d ，则边权应满足： (S,x)+(S,y)=b_x+b_y+d\ (x,T)+(y,T)=a_x+a_y+c\ (S,x)+(x,y)+(y,T)=a_y+b_x+c+d\ (S,y)+(y,x)+(x,T)=a_x+b_y+c+d\ 得到一组解： (x,y)=(y,x)=\frac{c+d}{2}\ (S,x)=a_x+\frac{c}{2}\ (S,y)=a_y+\frac{c}{2}\ (x,T)=b_x+\frac{d}{2}\ (y,T)=b_y+\frac{d}{2}\ 由此建图求最大流即可。 Tips：将两点间所有边的边权整合成一条边会大大提高运行速度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155/* * @Author: Skqliao * @Date: 2019-02-10 20:45:11 * @LastEditTime: 2019-02-10 21:37:48 * @Source: 2010 集训队测试题 * @Problem: 2127: happiness * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2127 */#include &lt;bits/stdc++.h&gt;namespace mxf &#123;const int MAXN = 100 * 100 + 5;const int MAXM = MAXN * 4;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int S, T;int H[MAXN], cntE;void addEdge(int u, int v, int f, bool directed = 1) &#123; E[++cntE] = (Edge)&#123;v, f, H[u]&#125;; H[u] = cntE; if (directed) f = 0; E[++cntE] = (Edge)&#123;u, f, H[v]&#125;; H[v] = cntE;&#125;int Dis[MAXN], Cur[MAXN];bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memset(Dis, -1, sizeof Dis); memcpy(Cur, H, sizeof H); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) &#123; flow += dfs(S, INT_MAX); &#125; return flow;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;&#125; // namespace mxfusing mxf::addEdge;using mxf::S;using mxf::T;const int MAXN = 100 + 5;int N, M;int Id[MAXN][MAXN];int A[MAXN][MAXN], B[MAXN][MAXN], C[MAXN][MAXN], D[MAXN][MAXN], E[MAXN][MAXN], F[MAXN][MAXN];int ans;int main() &#123; scanf("%d%d", &amp;N, &amp;M); mxf::init(N * M); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; Id[i][j] = (i - 1) * M + j; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); ans += A[i][j]; A[i][j] *= 2; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;B[i][j]); ans += B[i][j]; B[i][j] *= 2; &#125; &#125; for (int i = 1; i &lt; N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;C[i][j]); ans += C[i][j]; A[i][j] += C[i][j]; A[i + 1][j] += C[i][j]; &#125; &#125; for (int i = 1; i &lt; N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;D[i][j]); ans += D[i][j]; B[i][j] += D[i][j]; B[i + 1][j] += D[i][j]; addEdge(Id[i][j], Id[i + 1][j], C[i][j] + D[i][j], 0); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt; M; ++j) &#123; scanf("%d", &amp;E[i][j]); ans += E[i][j]; A[i][j] += E[i][j]; A[i][j + 1] += E[i][j]; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt; M; ++j) &#123; scanf("%d", &amp;F[i][j]); ans += F[i][j]; B[i][j] += F[i][j]; B[i][j + 1] += F[i][j]; addEdge(Id[i][j], Id[i][j + 1], E[i][j] + F[i][j], 0); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; addEdge(S, Id[i][j], A[i][j]); addEdge(Id[i][j], T, B[i][j]); &#125; &#125; printf("%d\n", ans - mxf::dinic() / 2); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二元关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[斯坦纳树学习笔记（Steiner Tree）]]></title>
    <url>%2FSteiner-Tree%2F</url>
    <content type="text"><![CDATA[总论 斯坦纳树可以理解为一棵使得指定点集合联通的树，而最小斯坦纳树在联通的基础上要求边权和最小。（是不是有点类似于最小生成树？） 通常通过状压DP+最短路松弛的方式来解决此类问题。 过程 具体过程不妨从一个简单问题出发。 无向图 G 上有 n 个点，选择若干个点使得它们包含点集合 S=\{a_1,a_2,\cdots,a_m\} ，且 S 联通。选择点 i 的代价为 A_i ，求最小代价。 设 F[i][S] 表示集合 S 的点被选择且当前选择节点 i 的最小花费，则 F[i][S] 有两种方式转移，一是枚举子集合并，二是集合内部松弛。 第一种： F[i][S]=\min\{F[i][T]+F[i][S-T]-A[i]\} ，其中 T 是 S 的一个子集。 可以通过 for (int x = S; x; x = (x - 1) &amp; S) 的方式枚举 S 的所有子集 x ，复杂度 O(3^m) 。 由于外层还要枚举当前集合状态 S 和当前点 i ，因此总复杂度为 n\cdot 6^m 。 第二种： F[i][S]=\min\{F[j][S]+A[i]\} ，其中点 i,j 联通。 在状压DP后，可以将所有更新过的点push进队列跑SPFA或其他最短路算法完成松弛。 总复杂度 O(n\cdot 6^m+2^m\cdot f) ， f 为最短路复杂度。 用途 最小斯坦树可以得到给定点集合所有子集的最小花费，可能会作为预处理使用。 例题 【最小斯坦纳树】[WC 2008] BZOJ 2595 游览计划 【最小斯坦纳树+状压DP】[JLOI 2015] BZOJ 4006 管道连接]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最小割树学习笔记（Gomory-Hu Tree）]]></title>
    <url>%2FGomory-Hu-Tree%2F</url>
    <content type="text"><![CDATA[总论 在无向图中，最小割树等价于所有点对间的最小割。 对于任意点对 (s,t) ，它们之间的最小割为最小割树上 (s,t) 路径间的最小边权值。 过程 可以通过求 n-1 次最大流构建出具有 n 个点的无向图 G 的最小割树。 具体步骤如下： 任意选择两点 s,t 求两点间最大流 f 得到最小割隔开的两个集合 最小割树上连接 (s,t) ，边权为 f 将图恢复成最初形态（还原边权） 递归到这两个新集合中，重复操作1，直到集合中只有 1 个点为止 由于每次集合总数增加 1 ，因此一共做 n-1 次以上流程。 Q &amp; A Q1：如何求最小割隔开的两个集合？ A1：由于最小割上的边一定将流量限制流满了，因此从 s 开始，通过未流满流量限制的边遍历到的且在当前集合中的点为与 s 联通的点集合，剩下的点与 t 联通的点集合。 Q2：用什么算法求最大流啊？会被卡吗？ A2：根据相关法律法规，ISAP和Dinic受到保护，应该不会被卡，EK死就死了。当然你愿意写HLPP也不拦着。 用途 可以得到任意点对间的最小割，通常用于预处理。 例题 luogu P4897 【模板】最小割树（Gomory-Hu Tree） 【最小割树】[CQOI 2016] BZOJ 4519 不同的最小割 【最小割树】[ZJOI 2011] BZOJ 2229 最小割]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2011」BZOJ 2229 最小割]]></title>
    <url>%2FBZOJ-2229%2F</url>
    <content type="text"><![CDATA[T 组数据， Q 个询问。在无向图 G 中，求有多少个点对 (s,t) 使得它们之间的最小割不超过 x 。 T\leq 10,n\leq 150,m\leq 3000,q\leq 30 分析 建完最小割树后，问题转化为求树上有多少个点对路径上的边权最小值不超过 x 。 枚举点对再用倍增判断，复杂度 O(n^2\log{n}) 。 也存在线性做法，对于边权不超过 x 的边，统计路径通过该边新增的点对数量，复杂度 O(n) 。 然而由于复杂度瓶颈在建立最小割树上，因此两种方法实际效率相仿。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189/* * @Author: Skqliao * @Date: 2019-02-02 22:57:06 * @LastEditTime: 2019-02-03 11:53:06 * @Source: ZJOI 2011 * @Problem: 2229: [Zjoi2011]最小割 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2229 */#include &lt;bits/stdc++.h&gt;const int MAXN = 150 + 5;const int MAXM = 3000 + 5;namespace GH_Tree &#123;struct Edge &#123; int v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge)&#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, w, H[v]&#125;; H[v] = cntE;&#125;int Fa[MAXN], Sz[MAXN];int dfs(int x) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; Sz[x] += dfs(v); &#125; &#125; return Sz[x];&#125;int ans;int dfs(int x, int sz, int mx) &#123; int tot = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; if (E[i].w &lt;= mx) &#123; tot += Sz[v]; ans += Sz[v] * (sz - Sz[v]); sz -= Sz[v]; dfs(v, Sz[v], mx); &#125; else &#123; int tmp = dfs(v, sz, mx); sz -= tmp; tot += tmp; &#125; &#125; &#125; return tot;&#125;void init() &#123; cntE = 0; memset(H, 0, sizeof H);&#125;int query(int x) &#123; ans = 0; dfs(1, Sz[1], x); return ans;&#125;namespace Init &#123; struct Edge &#123; int v, f, cap, nxt; &#125; E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; int Idx[MAXN], Tmp[MAXN]; int S, T; int Dis[MAXN], Cur[MAXN]; int Col[MAXN]; void init(int n) &#123; cntE = -1; memset(H, -1, sizeof H); for (int i = 1; i &lt;= n; ++i) &#123; Idx[i] = i; &#125; &#125; void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, f, f, H[v]&#125;; H[v] = cntE; &#125; bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false; &#125; int dfs(int x, int maxf) &#123; if (x == T || !maxf) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left; &#125; int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow; &#125; void dfs(int x) &#123; Col[x] = 1; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; !Col[v]) dfs(v); &#125; &#125; void build(int l, int r) &#123; if (l == r) return; S = Idx[l], T = Idx[r]; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; int f = dinic(); GH_Tree::addEdge(S, T, f); memset(Col, 0, sizeof Col); dfs(S); int L = l, R = r; for (int i = l; i &lt;= r; ++i) &#123; if (Col[Idx[i]]) Tmp[L++] = Idx[i]; else Tmp[R--] = Idx[i]; &#125; memcpy(Idx, Tmp, sizeof Tmp); build(l, R); build(L, r); &#125; void solve(int n, int m) &#123; init(n); int u, v, f; for (int i = 1; i &lt;= m; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;f); addEdge(u, v, f); &#125; build(1, n); &#125;&#125; // namespace Init&#125; // namespace GH_Treeint T, N, M, Q;int main() &#123; int x; scanf("%d", &amp;T); while (T--) &#123; scanf("%d%d", &amp;N, &amp;M); GH_Tree::init(); GH_Tree::Init::solve(N, M); GH_Tree::dfs(1); scanf("%d", &amp;Q); while (Q--) &#123; scanf("%d", &amp;x); printf("%d\n", GH_Tree::query(x)); &#125; puts(""); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2016」BZOJ 4519 不同的最小割]]></title>
    <url>%2FBZOJ-4519%2F</url>
    <content type="text"><![CDATA[题目大意 在无向图 G 中，对于任意点对 (i,j) 有最小割 cut(i,j) ，求有多少个数值不同的最小割。 N\leq 850,M\leq 8500 分析 最小割树模板题，求出最小割树后将所有边unique得到答案。 复杂度 O(n\times f) ， f 为最大流复杂度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128/* * @Author: Skqliao * @Date: 2019-02-02 22:26:52 * @LastEditTime: 2019-02-02 22:54:36 * @Source: CQOI 2016 * @Problem: 4519: [Cqoi2016]不同的最小割 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=4519 */#include &lt;bits/stdc++.h&gt;const int MAXN = 850 + 5;const int MAXM = 8500 + 5;namespace GH_Tree &#123;struct Edge &#123; int v, f, cap, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Idx[MAXN], Tmp[MAXN];int S, T;int Dis[MAXN], Cur[MAXN];int Col[MAXN];void init(int n) &#123; cntE = -1; memset(H, -1, sizeof H); for (int i = 1; i &lt;= n; ++i) &#123; Idx[i] = i; &#125;&#125;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, f, f, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow;&#125;void dfs(int x) &#123; Col[x] = 1; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; !Col[v]) dfs(v); &#125;&#125;std::vector&lt;int&gt; V;void build(int l, int r) &#123; if (l == r) return; S = Idx[l], T = Idx[r]; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; int f = dinic(); V.push_back(f); memset(Col, 0, sizeof Col); dfs(S); int L = l, R = r; for (int i = l; i &lt;= r; ++i) &#123; if (Col[Idx[i]]) Tmp[L++] = Idx[i]; else Tmp[R--] = Idx[i]; &#125; memcpy(Idx, Tmp, sizeof Tmp); build(l, R); build(L, r);&#125;int solve(int n, int m) &#123; init(n); int u, v, f; for (int i = 1; i &lt;= m; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;f); addEdge(u, v, f); &#125; build(1, n); std::sort(V.begin(), V.end()); V.erase(std::unique(V.begin(), V.end()), V.end()); return V.size();&#125;&#125; // namespace GH_Treeint N, M;int main() &#123; scanf("%d%d", &amp;N, &amp;M); printf("%d\n", GH_Tree::solve(N, M)); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JLOI 2015」BZOJ 4006 管道连接]]></title>
    <url>%2FBZOJ-4006%2F</url>
    <content type="text"><![CDATA[无向图中有 n 个 m 条边，边有权值 W_i ，有 p 个点有编号 A_i 。现要求选择一些边，使得（有编号且）编号相同的点联通，求最小权值和。 n\leq 1000,m\leq 3000,p\leq 10 分析 如果要求所有有编号的点联通，那么这就是一个最小斯坦纳树的模板题。 现在只要求编号相同的点联通，我们可以分别考虑每个编号的点联通的费用，然后组合出最终的答案。 因此依然先求这 p 个点的最小斯坦纳树。然后再用状压DP合并费用，注意合并时（ s=a+b ）， a,b 必须分别完整包含若干个编号的节点，否则不合题意。 复杂度 O(3^p\cdot n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113/* * @Author: Skqliao * @Date: 2019-01-27 13:24:25 * @LastEditTime: 2019-01-27 14:52:32 * @Source: JLOI 2015 * @Problem: 4006: [JLOI2015]管道连接 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=4006 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 2;const int MAXM = 30000 + 5;const int MAXS = 1 &lt;&lt; 12;const int INF = 0x3f3f3f3f;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, P;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;v, u, w, H[v]&#125;; H[v] = cntE;&#125;int F[MAXN][MAXS];std::queue&lt;int&gt; Que;bool Vis[MAXN];void spfa(int s) &#123; while (!Que.empty()) &#123; int x = Que.front(); Vis[x] = 0; Que.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (F[x][s] + E[i].w &lt; F[v][s]) &#123; F[v][s] = F[x][s] + E[i].w; if (!Vis[v]) &#123; Que.push(v); Vis[v] = 1; &#125; &#125; &#125; &#125;&#125;int Dp[MAXS];int St[MAXN];std::vector&lt;int&gt; V[MAXN];bool check(int s) &#123; for (int i = 1; i &lt;= 10; ++i) &#123; if (!St[i]) &#123; continue; &#125; if ((St[i] &amp; s) != 0 &amp;&amp; (St[i] &amp; s) != St[i]) &#123; return false; &#125; &#125; return true;&#125;int main() &#123; scanf("%d%d%d", &amp;N, &amp;M, &amp;P); int u, v, w; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; memset(F, 0x3f, sizeof F); int p = 0; for (int i = 1; i &lt;= P; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); V[u].push_back(p); F[v][1 &lt;&lt; p++] = 0; &#125; for (int i = 1; i &lt;= 10; ++i) &#123; for (size_t j = 0; j &lt; V[i].size(); ++j) &#123; St[i] |= 1 &lt;&lt; V[i][j]; &#125; &#125; int S = (1 &lt;&lt; p) - 1; memset(Dp, 0x3f, sizeof Dp); for (int s = 0; s &lt;= S; ++s) &#123; for (int i = 1; i &lt;= N; ++i) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; F[i][s] = std::min(F[i][s], F[i][x] + F[i][s - x]); &#125; if (F[i][s] &lt; INF) &#123; Que.push(i); &#125; &#125; spfa(s); for (int i = 1; i &lt;= N; ++i) &#123; Dp[s] = std::min(Dp[s], F[i][s]); &#125; &#125; for (int s = 0; s &lt;= S; ++s) &#123; if (check(s)) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; if (check(x)) &#123; Dp[s] = std::min(Dp[s], Dp[x] + Dp[s - x]); &#125; &#125; &#125; &#125; printf("%d\n", Dp[S]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「WC 2008」BZOJ 2595 游览计划]]></title>
    <url>%2FBZOJ-2595%2F</url>
    <content type="text"><![CDATA[在 n\times m 的网格图上有 k 个景点，图上选择任意一个点有费用 a_{i,j} 。求选择若干个点使得这 k​ 个景点联通，最小化花费并输出方案。 n,m,k\leq 10 分析 这是一道最小斯坦纳树（minimum Steiner tree）的模板题。 其实看到这么小的数据范围也不难想到状压DP。用 F[i][j][S] 表示当前选择点 (i,j) ，图的联通状态为 S 的最小花费。 转移方程有两个，一是状态间转移： F[i][j][S] = \min\limits_{T\in S}\{F[i][j][T]+F[i][j][S-T]-A[i][j]\} ；二是在同一个状态内松弛： F[i][j][S] = \min\{F[i'][j'][S]+A[i][j]\} ，其中 (i',j') 与 (i,j) 联通且属于 S 。 前者可以通过枚举子集的方法转移，复杂度 O(6^k\cdot n\cdot m) ，后者用spfa或其他最短路算法松弛，复杂度 O(2^k\cdot f) ， f 为最短路复杂度。总复杂度 O(6^k\cdot nm+2^k\cdot f) 。 在转移/松弛时记录前一个点的状态，最后从终点一遍dfs得到所有被选择的点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115 /* * @Author: Skqliao * @Date: 2019-01-27 10:29:05 * @LastEditTime: 2019-01-27 12:39:07 * @Source: WC2008 * @Problem: 2595: [Wc2008]游览计划 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2595 */#include &lt;bits/stdc++.h&gt;const int MAXN = 10 + 2;const int MAXS = 1 &lt;&lt; MAXN;const int INF = 0x3f3f3f3f;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int A[MAXN][MAXN];int F[MAXN][MAXN][MAXS];struct Node &#123; int x, y, s;&#125; Pre[MAXN][MAXN][MAXS];std::queue&lt;Node&gt; Que;bool Vis[MAXN][MAXN];void spfa(int s) &#123; while (!Que.empty()) &#123; Node a = Que.front(); Vis[a.x][a.y] = 0; Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.x + Dicx[i]; int y = a.y + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) &#123; continue; &#125; if (F[a.x][a.y][s] + A[x][y] &lt; F[x][y][s]) &#123; F[x][y][s] = F[a.x][a.y][s] + A[x][y]; Pre[x][y][s] = (Node)&#123;a.x, a.y, s&#125;; if (!Vis[x][y]) &#123; Que.push((Node) &#123;x, y, 0&#125;); Vis[x][y] = 1; &#125; &#125; &#125; &#125;&#125;void dfs(int x, int y, int s) &#123; Vis[x][y] = 1; Node &amp;a = Pre[x][y][s]; if (a.x == 0 &amp;&amp; a.y == 0) &#123; return ; &#125; dfs(a.x, a.y, a.s); if (x == a.x &amp;&amp; y == a.y) &#123; dfs(a.x, a.y, s - a.s); &#125;&#125;int main() &#123; int cnt = 0; scanf("%d%d", &amp;N, &amp;M); memset(F, 0x3f, sizeof F); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); if (!A[i][j]) &#123; F[i][j][1 &lt;&lt; cnt++] = 0; &#125; &#125; &#125; int S = (1 &lt;&lt; cnt) - 1; for (int s = 0; s &lt;= S; ++s) &#123; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; if (F[i][j][x] + F[i][j][s - x] - A[i][j] &lt; F[i][j][s]) &#123; F[i][j][s] = F[i][j][x] + F[i][j][s - x] - A[i][j]; Pre[i][j][s] = (Node) &#123;i, j, x&#125;; &#125; &#125; if (F[i][j][s] &lt; INF) &#123; Que.push((Node) &#123;i, j, 0&#125;); Vis[i][j] = 1; &#125; &#125; &#125; spfa(s); &#125; bool flag = 0; for (int i = 1; i &lt;= N &amp;&amp; !flag; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 0) &#123; printf("%d\n", F[i][j][S]); dfs(i, j, S); flag = 1; break; &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (!A[i][j]) &#123; putchar('x'); &#125; else if (Vis[i][j]) &#123; putchar('o'); &#125; else &#123; putchar('_'); &#125; &#125; puts(""); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1601 完全图的最小生成树计数]]></title>
    <url>%2F51nod-1601%2F</url>
    <content type="text"><![CDATA[有 n 个点，每个点有点权 a_i ，点 u,v 之间的边边权为 a_u \oplus a_v 。求该完全图的最小生成树的权值与方案数。 n\leq 10 ^ 5, 0\leq a_i &lt; 2 ^ {30} 分析 从边权为点xor得到，想到可以对点权建立Trie树。 每次合并两子树mst的权值，并加入两子树中节点可以xor得到的最小值作为连接这两棵子树的最小边，自下而上得到整棵Trie的mst的值。 根据Cayley公式，如果存在有 a(a &gt; 2) 个相同权值的点时，生成树的方案数为 a^ {a - 2} 。每次合并两子树时对方案数做乘法原理即可得到最终的方案数。 复杂度 O(n\log{a_i}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-01-26 22:59:31 * @LastEditTime: 2019-01-26 23:41:49 * @Source: 51nod * @Problem: 1601 完全图的最小生成树计数 * @Url: https://www.51nod.com/Challenge/Problem.html#!#problemId=1601 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;const int MOD = 1e9 + 7;int N;int Ch[MAXN &lt;&lt; 5][2], Num[MAXN &lt;&lt; 5], cnt = 1;long long sum, num = 1;void insert(int val) &#123; int x = 1; for (int i = 29; i &gt;= 0; --i) &#123; int d = (val &gt;&gt; i) &amp; 1; if (!Ch[x][d]) &#123; Ch[x][d] = ++cnt; &#125; x = Ch[x][d]; &#125; ++Num[x];&#125;long long poww(long long x, long long t) &#123; long long ans = 1; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; ans = ans * x % MOD; &#125; x = x * x % MOD; &#125; return ans;&#125;long long min, tmp;void getMin(int x, int y, int d, int v = 0) &#123; if (d &lt; 0) &#123; if (v &lt; min) &#123; min = v; tmp = (long long)Num[x] * Num[y] % MOD; &#125; else if (v == min) &#123; tmp = (tmp + (long long)Num[x] * Num[y]) % MOD; &#125; return; &#125; if (Ch[x][0] &amp;&amp; Ch[y][0]) &#123; getMin(Ch[x][0], Ch[y][0], d - 1, v); if (Ch[x][1] &amp;&amp; Ch[y][1]) &#123; getMin(Ch[x][1], Ch[y][1], d - 1, v); &#125; &#125; else if (Ch[x][1] &amp;&amp; Ch[y][1]) &#123; getMin(Ch[x][1], Ch[y][1], d - 1, v); &#125; else &#123; if (Ch[x][0]) &#123; getMin(Ch[x][0], Ch[y][1], d - 1, v + (1 &lt;&lt; d)); &#125; if (Ch[x][1]) &#123; getMin(Ch[x][1], Ch[y][0], d - 1, v + (1 &lt;&lt; d)); &#125; &#125;&#125;void cal(int x, int d) &#123; if (d &lt; 0) &#123; if (Num[x] &gt; 1) &#123; num = num * poww(Num[x], Num[x] - 2); &#125; return; &#125; if (!Ch[x][0]) &#123; cal(Ch[x][1], d - 1); &#125; else if (!Ch[x][1]) &#123; cal(Ch[x][0], d - 1); &#125; else &#123; cal(Ch[x][0], d - 1); cal(Ch[x][1], d - 1); min = 1 &lt;&lt; 30; tmp = 0; getMin(Ch[x][0], Ch[x][1], d - 1, 0); sum = sum + (1 &lt;&lt; d) + min; num = (num * tmp) % MOD; &#125;&#125;int main() &#123; scanf("%d", &amp;N); int x; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); insert(x); &#125; cal(1, 29); printf("%lld\n%lld\n", sum, num); return 0;&#125;]]></content>
      <categories>
        <category>51nod</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>Pruefer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JZOJ 5060 公路建设]]></title>
    <url>%2FJZOJ-5060%2F</url>
    <content type="text"><![CDATA[有 n 个点， m 条边， q 个询问。每次给定一个区间 [l_i,r_i] ，求这些边构成的图在保证联通块个数最小的情况下所需最小花费。 n\leq 100,m\leq 100000,q\leq 15000 分析 将题意翻译一下就是求区间最小生成树的权值。 假设已知 [l,m] 和 [m+1,r] 的最小生成树，那么 [l,r] 的mst显然是由这两棵mst中的边构成的。 具体地说，在线段树中，通过Kruskal保存子区间mst上的所有边，然后用归并排序合并两个子区间的边，并再做kruskal求出父亲节点的mst上的所有边。查询时按照同样方法合并答案。 复杂度 O(n\alpha(n)(m\log{m}+q\log{m})) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-01-26 16:40:30 * @LastEditTime: 2019-01-26 17:12:13 * @Source: GDOI2017第二轮模拟day1 * @Problem: JZOJ 5060 公路建设 * @Url: https://jzoj.net/senior/#main/show/5060 */#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("highway.in", "r", stdin); freopen("highway.out", "w", stdout);&#125;const int MAXN = 100 + 5;const int MAXM = 100000 + 5;int N, M, Q;struct Node &#123; int u, v, w; bool operator &lt; (const Node &amp;x) const &#123; return w &lt; x.w; &#125;&#125; A[MAXM], T[MAXM &lt;&lt; 2][MAXN], Tmp[MAXN &lt;&lt; 1];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Len[MAXM &lt;&lt; 2];int Anc[MAXN];int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if (x != y) &#123; Anc[y] = x; return true; &#125; return false;&#125;void pushUp(int x, int l, int r) &#123; int len = std::merge(T[l], T[l] + Len[l], T[r], T[r] + Len[r], Tmp) - Tmp; for (int i = 1; i &lt;= N; ++i) &#123; Anc[i] = i; &#125; Len[x] = 0; for (int i = 0; i &lt; len; ++i) &#123; if (merge(Tmp[i].u, Tmp[i].v)) &#123; T[x][Len[x]++] = Tmp[i]; &#125; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Len[rt] = 1; T[rt][0] = A[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt, rt &lt;&lt; 1, rt &lt;&lt; 1 | 1);&#125;void query(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; pushUp(0, rt, 0); return ; &#125; int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; query(LT, a, b); &#125; if (m &lt; b) &#123; query(RT, a, b); &#125;&#125;int main() &#123; open(); scanf("%d%d%d", &amp;N, &amp;M, &amp;Q); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;A[i].u, &amp;A[i].v, &amp;A[i].w); &#125; build(1, 1, M); int l, r; while (Q--) &#123; long long sum = 0; scanf("%d%d", &amp;l, &amp;r); Len[0] = 0; query(1, 1, M, l, r); for (int i = 0; i &lt; Len[0]; ++i) &#123; sum += T[0][i].w; &#125; printf("%lld\n", sum); &#125; return 0;&#125;]]></content>
      <categories>
        <category>JZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01Trie 学习笔记]]></title>
    <url>%2F01-Trie%2F</url>
    <content type="text"><![CDATA[原理 01Trie用于解决求异或最大值的问题，其本质就是按位贪心。 别于一般的字典树，01Trie的每个节点只有两个儿子， 0 和 1 。插入 x 时，将其转化成二进制，从最高位开始插入，根据当前二进制位的值跳到节点对应的儿子上，于此同时将经过的所有节点权值+1，表示有一个数可以按照该方式分解。 查询当前 x 与Trie树异或的最大值时，根据贪心的思想，尽可能跳到与 x 当前二进制位的值不同的儿子上，如此从根节点到叶子节点经过的所有点组合出的值就是与 x 异或可以达到最大值的数，复杂度 O(\log{x}) 。 空间复杂度 O(n\log{max(A_i)}) ，时间复杂度 O(\log{max(A_i)}) 。 合并两棵Trie树的方法与线段树合并类似，可持久化Trie树的方法与可持久化线段树类似。 例题 01Trie BZOJ 4260 Codechef REBXOR 题目大意：对于长为 N 的序列 A[1\cdots N] ，求两个不相交区间的异或和之和的最大值。 题解：前后缀和+01Trie。从前往后插入前缀异或和，得到 [1,i] 的最大值，从后往前同理做一遍得到 [i,N] 的最大值，答案为 max([1,i]+[i+1,N]) 。 Codeforces 706D Vasiliy's Multiset HDU 4825 Xor Sum HDU 5536 Chip Factory POJ 3764 The xor-longest Path 可持久化01Trie BZOJ 3261 最大异或和 题目大意：开始给定一个长为 N 的序列 A[1\cdots N] ，有 M 个操作。在 A 的末尾插入 x ；或者给定 x,l,r ，查询 max(x\oplus A[p]\oplus\cdots\oplus A[N]) ，其中 p\in[l,r] ， N 为当前序列长度 。 题解：可持久化01Trie树模板题，后缀转为前缀查询。 HDU 4757 Tree 题目大意：树上每个点有权值 A[1\cdots N] ， M 个询问。给定 (u,v,w) ，查询 u,v 路径上的点与 w 异或的最大值。 题解：可持久化01Trie+LCA。dfs时儿子继承父亲做可持久化，查询时求两点到LCA区间的异或最大值。 BZOJ 2741【FOTILE模拟赛】L 题目大意：给定长为 N 的序列 A[1\cdots N] ， M 个询问。查询 [l,r] 的最大异或和子区间，强制在线。 题解：可持久化Trie+分块。记 s[i] 为第 i 块的左端点， f(i,j) 表示 [s[i],r-1] 中的某个点为左端点，右端点为 r 的最大异或子区间。记 g(i,j) 为 [s[i],r] 中的最大异或子区间。查询时跨越的完整块直接查 g 数组，剩下的部分在可持久化Trie中查询，取最大值。 启发式合并01Trie BNDSOJ 985 2018-12-2模拟测验（二） 题目大意：有 N 个点， M 个操作。每次连接两个点，或查询联通的两个点的异或值的最大值。 题解：并查集+启发式合并01Trie。并查集维护连通性，合并两联通块时启发式合并两个Trie树，同时记录最大值。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>01字典树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树上启发式合并 学习笔记【填坑中】]]></title>
    <url>%2Fdsu%20on%20tree%2F</url>
    <content type="text"><![CDATA[传说中的"dsu on tree"，其本质就是将树轻重链剖分后，暴力维护轻儿子信息，继承重儿子信息，用于快速计算不带修改的子树查询问题。 原理 感谢NormalGod的讲解。 为什么通过这种方式维护子树信息的复杂度只有 O(n\log{n}) 呐？这要从树链剖分的性质讲起。 由于重儿子的信息被它父亲直接继承，因此一条重链上的所有点，在向上的过程中只会在链顶处计算一次贡献（因为链顶是它父亲的轻儿子，会被暴力计算贡献）。 在叶子节点到根节点上的所有点中，显然叶子节点被统计的次数最多，而到根的路径上有最多 \log{n} 条重链，即在 \log{n} 个重链链头处会被统计贡献。 因此一个叶子节点最多被统计 \log{n} 次，所有节点被统计次数之和的上限为 O(n\log{n}) ，复杂度得证。 模板 1234567891011121314151617181920212223242526272829303132// vector存边：G[MAXN]// 先轻重链剖分，Son[x]表示x的重儿子int skip;void add(int x, int fa, int val) &#123; // 根据题目要求统计 for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != skip) &#123; // 统计子树贡献，不统计那个重儿子（即skip） add(v, x, val); &#125; &#125;&#125;void dfs(int x, int fa, bool keep) &#123; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != Son[x]) &#123; // 暴力统计轻儿子 dfs(v, x, 0); &#125; &#125; if (Son[x]) &#123; dfs(Son[x], x, 1); // 继承重儿子 skip = Son[x]; &#125; add(x, fa, 1); // 计算子树贡献 // 此时获得x子树的统计结果 skip = 0; if (!keep) &#123; add(x, fa, -1); // 清除贡献 &#125;&#125; 例题 Codeforces 600 E - Lomsat gelral 根为 1 的树中，每个点有颜色。定义颜色 a 占领 x 的子树当且仅当不存在颜色 b ，使得 b 在子树中出现的次数超过 a 。令 A[x] 为所有占领 x 的子树的颜色编号之和，求所有点的 A[i] 。 n\leq 10^5 分析 用sum统计当前子树中颜色出现最多的次数mx下的颜色编号之和。如果mx被更新，清零sum，相等则累加，直接套用模板即可。注意当所有点颜色不同时，会爆int。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;int N, Col[MAXN];std::vector&lt;int&gt; G[MAXN];int Sz[MAXN], Son[MAXN];void getSon(int x, int fa) &#123; Sz[x] = 1; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa) &#123; getSon(v, x); Sz[x] += Sz[v]; if (Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;long long Ans[MAXN], sum;int Cnt[MAXN], mx;int skip;void add(int x, int fa, int val) &#123; Cnt[Col[x]] += val; if (val &gt; 0 &amp;&amp; Cnt[Col[x]] &gt;= mx) &#123; if (Cnt[Col[x]] &gt; mx) &#123; mx = Cnt[Col[x]]; sum = 0; &#125; if (Cnt[Col[x]] == mx) &#123; sum += Col[x]; &#125; &#125; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != skip) &#123; add(v, x, val); &#125; &#125;&#125;void dfs(int x, int fa, bool keep) &#123; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != Son[x]) &#123; dfs(v, x, 0); &#125; &#125; if (Son[x]) &#123; dfs(Son[x], x, 1); skip = Son[x]; &#125; add(x, fa, 1); Ans[x] = sum; skip = 0; if (!keep) &#123; add(x, fa, -1); mx = sum = 0; &#125;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;Col[i]); &#125; int u, v; for (int i = 1; i &lt; N; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); G[u].push_back(v); G[v].push_back(u); &#125; getSon(1, 0); dfs(1, 0, 1); for (int i = 1; i &lt;= N; ++i) &#123; printf("%lld ", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>树链剖分</tag>
        <tag>树上启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可持久化线段树 学习笔记]]></title>
    <url>%2Fpresident%20segment%20Tree%2F</url>
    <content type="text"><![CDATA[主席树支持静态查询区间第 k 大，可以用来维护可持久化数组。单次修改/查询的复杂度为 O(\log{n}) ，空间 O(m\log{n}) （存疑），一般开 20n 至 60n 的空间（视实际情况而定）。 原理 其实现方法为前缀和+权值线段树。 由于是权值线段树，因此需要对全局变量（初始值插入值）进行离散化。离散化后的权值线段树为了减少空间占用采取动态开点的方式存储数据。 所谓前缀和，相当于对 n 个区间 A[1,i] 分别建一棵权值线段树 T_i ，那么 A[l,r] 中在 [a,b] 范围内的数个数即 T_r 与 T_{l-1} 在 [a,b] 内个数之差 。同理查询第 k 大时也可以通过在两棵线段树上对应区间做差的方法判定查询的数的位置。 当然实际情况肯定不会真的建 n 棵线段树，因为树与树之间存在大量交集。相邻两棵树 T_{i-1},T_i 的差别只在于新加入的 A_i ，因此构造 T_i 时只需在继承 T_{i-1} 的基础之上插入 A_i 。 具体操作 初始化时先离散化得到新区间 [1,N] ，然后按序将 A_i 离散化后的值插入树中，继承 T_{i-1} 在对应节点处的子树大小并加一，即插入一条链。 查询的时候跟权值线段树的操作类似，根据 T_r 和 T_{l-1} 的当前左子树大小之差与 k 的关系来判断向左还是向右，直到叶子节点停止。 复杂度分析 离散化复杂度 O(n\log{n}) ，初始化 O(n\log{n}) ，查询 O(\log{n}) 。 静态区间第 k 大 序列 A[1\cdots n] ， m 个查询 A[l,r] 中第 k 小数。 n,m\leq 2\times 10^5,|A_i|\leq 10^9 。 题目链接 P3834 【模板】可持久化线段树 1（主席树） 分析 模板题，离散化后建主席树。复杂度 O((N+M)\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;bits/stdc++.h&gt;const int MAXN = 2e5 + 5;const int LOG = 40;int N, M, n;int A[MAXN], B[MAXN];int Rt[MAXN], cntP;int L[MAXN * LOG], R[MAXN * LOG], Sum[MAXN * LOG];int getX(int x) &#123; return std::lower_bound(B + 1, B + n + 1, x) - B;&#125;int build(int l, int r) &#123; int rt = ++cntP; int m = (l + r) &gt;&gt; 1; if (l &lt; r) &#123; L[rt] = build(l, m); R[rt] = build(m + 1, r); &#125; return rt;&#125;int update(int pre, int l, int r, int x) &#123; int rt = ++cntP; L[rt] = L[pre], R[rt] = R[pre]; Sum[rt] = Sum[pre] + 1; if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (x &lt;= m) &#123; L[rt] = update(L[pre], l, m, x); &#125; else &#123; R[rt] = update(R[pre], m + 1, r, x); &#125; &#125; return rt;&#125;int query(int u, int v, int l, int r, int k) &#123; if (l == r) &#123; return l; &#125; int x = Sum[L[v]] - Sum[L[u]]; int m = (l + r) &gt;&gt; 1; if (x &gt;= k) &#123; return query(L[u], L[v], l, m, k); &#125; else &#123; return query(R[u], R[v], m + 1, r, k - x); &#125;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); B[i] = A[i]; &#125; std::sort(B + 1, B + N + 1); n = std::unique(B + 1, B + N + 1) - B - 1; Rt[0] = build(1, n); for (int i = 1; i &lt;= N; ++i) &#123; Rt[i] = update(Rt[i - 1], 1, n, getX(A[i])); &#125; int l, r, k; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;k); printf("%d\n", B[query(Rt[l - 1], Rt[r], 1, n, k)]); &#125; return 0;&#125; 可持久化数组 维护一个数组 A[1\cdots N] ， M 次操作，查询或修改第 k 个版本的 A_i ，每次操作都会得到一个新版本（查询则继承该版本）。 N,M\leq 10^6, |A_i|\leq 10^9 。 题目链接 P3919 【模板】可持久化数组（可持久化线段树/平衡树） 分析 线段树中的叶子节点存储每个点的值，单次修改只影响一个叶子节点。因此可以通过主席树每次新建一条链连接其他所有点，并修改该叶子节点的值。查询时从该版本的根向下找即可。复杂度 O(N+M\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;const int LOG = 20;int N, M;int A[MAXN];int Rt[MAXN], cntP;int L[MAXN * LOG], R[MAXN * LOG], Val[MAXN * LOG];int build(int l, int r) &#123; int rt = ++cntP; if (l == r) &#123; scanf("%d", &amp;Val[rt]); &#125; else &#123; int m = (l + r) &gt;&gt; 1; L[rt] = build(l, m); R[rt] = build(m + 1, r); &#125; return rt;&#125;int update(int pre, int l, int r, int p, int x) &#123; int rt = ++cntP; L[rt] = L[pre], R[rt] = R[pre]; Val[rt] = Val[pre]; if (l == r) &#123; Val[rt] = x; &#125; else &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; L[rt] = update(L[pre], l, m, p, x); &#125; else &#123; R[rt] = update(R[pre], m + 1, r, p, x); &#125; &#125; return rt;&#125;int query(int rt, int l, int r, int p) &#123; if (l == r) &#123; return Val[rt]; &#125; else if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; return query(L[rt], l, m, p); &#125; else &#123; return query(R[rt], m + 1, r, p); &#125; &#125;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); Rt[0] = build(1, N); int ver, opt, p, x; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;ver, &amp;opt, &amp;p); if (opt == 1) &#123; scanf("%d", &amp;x); Rt[i] = update(Rt[ver], 1, N, p, x); &#125; else &#123; Rt[i] = Rt[ver]; printf("%d\n", query(Rt[ver], 1, N, p)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>主席树</tag>
        <tag>可持久化数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI2009」BZOJ 1558 等差数列]]></title>
    <url>%2FBZOJ-1558%2F</url>
    <content type="text"><![CDATA[长为 N 的序列 A 上 M 个操作，分为两类： 对于 i\in [l,r] ， 使 A[i] = A[i] + (i-l)\times b + a 查询 A[l,r] 最少能分成多少个等差数列表示 N,M\leq 100000 分析 操作一是对区间增加一个等差数列，因此将原数组差分，用线段树进行区间加和单点加。那么操作二就转化为查询区间能分成多少个相等的子区间。 差分后区间长度变成 N-1 ，则对 A[l,r] 增加 a+b\cdot i 的等差数列的具体操作为 A[l-1]\rightarrow A[l-1]+a ， A[l,r]\rightarrow A[l,r]+b ， A[r+1]\rightarrow A[r+1]-(a+(r-l)\cdot b) 。由于对原数组进行了差分，因此注意判定 l=1 和 r=N 时的边界问题。 需要注意的是，两个数也可以构成等差数列，所以两个相邻不同数可以合并以减少答案。 因此合并答案的时候会复杂一些，用 s[0/1][0/1] 表示左右端点取不取，注意左区间的右端点和右区间的左端点必须至少选择一个。 s[0][0] = \min(lc\rightarrow s[1][0] + rc\rightarrow s[0][1] - [lc\rightarrow right = rc\rightarrow left],lc\rightarrow s[0][0] + rc\rightarrow s[0][1],lc\rightarrow s[1][1] + rc\rightarrow s[0][0]) ，剩余三个合并方法类似。 复杂度 O(M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (__typeof(l) i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (__typeof(l) i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define irep(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); ++i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())#define debug(...) fprintf(stderr, __VA_ARGS__)#define DEBUG debug("passing %d in %s\n", __LINE__, __FUNCTION__)typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;inline int read() &#123; static char c; while (c = getchar(), !isdigit(c) &amp;&amp; c != '-'); bool f = c == '-'; int x = f ? 0 : c - '0'; for (c = getchar(); isdigit(c); c = getchar()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;const int MAXN = 100000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint N, Q, A[MAXN];struct Data &#123; ll left, right; int num[4]; Data operator + (const Data &amp;a) &#123; Data x; x.left = left; x.right = a.right; x.num[0] = num[2] + a.num[1] - (right == a.left); chkMin(x.num[0], num[0] + a.num[1]); chkMin(x.num[0], num[2] + a.num[0]); x.num[1] = num[3] + a.num[1] - (right == a.left); chkMin(x.num[1], num[3] + a.num[0]); chkMin(x.num[1], num[1] + a.num[1]); x.num[2] = num[2] + a.num[3] - (right == a.left); chkMin(x.num[2], num[0] + a.num[3]); chkMin(x.num[2], num[2] + a.num[2]); x.num[3] = num[3] + a.num[3] - (right == a.left); chkMin(x.num[3], num[3] + a.num[2]); chkMin(x.num[3], num[1] + a.num[3]); return x; &#125;&#125;;struct Node &#123; ll add; Data x;&#125; T[MAXN &lt;&lt; 2];void pushDown(int rt) &#123; ll &amp;add = T[rt].add; if (add) &#123; T[rt &lt;&lt; 1].add += add; T[rt &lt;&lt; 1 | 1].add += add; T[rt &lt;&lt; 1].x.left += add; T[rt &lt;&lt; 1].x.right += add; T[rt &lt;&lt; 1 | 1].x.left += add; T[rt &lt;&lt; 1 | 1].x.right += add; add = 0; &#125;&#125;void buildTree(int rt, int l, int r) &#123; if (l == r) &#123; T[rt].x.left = T[rt].x.right = A[l]; T[rt].x.num[0] = 0; T[rt].x.num[1] = T[rt].x.num[2] = T[rt].x.num[3] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; buildTree(LT); buildTree(RT); T[rt].x = T[rt &lt;&lt; 1].x + T[rt &lt;&lt; 1 | 1].x;&#125;void add(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].add += x; T[rt].x.left += x; T[rt].x.right += x; return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b, x); &#125; if (m &lt; b) &#123; add(RT, a, b, x); &#125; T[rt].x = T[rt &lt;&lt; 1].x + T[rt &lt;&lt; 1 | 1].x;&#125;Data cal(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].x; &#125; int m = (l + r) &gt;&gt; 1; pushDown(rt); if (b &lt;= m) &#123; return cal(LT, a, b); &#125; else if (a &gt; m) &#123; return cal(RT, a, b); &#125; else &#123; return cal(LT, a, b) + cal(RT, a, b); &#125;&#125;void open() &#123; freopen("1558.in", "r", stdin); freopen("1558.out", "w", stdout);&#125;int main() &#123; // open(); int l, r, a, b; char opt[5]; N = read(); rep(i, 1, N + 1) &#123; A[i] = read(); &#125; rep(i, 1, N) &#123; A[i] = A[i + 1] - A[i]; &#125; buildTree(1, 1, N - 1); Q = read(); while (Q--) &#123; scanf("%s", opt); l = read(), r = read(); if (opt[0] == 'A') &#123; a = read(), b = read(); if (l &gt; 1) &#123; add(1, 1, N - 1, l - 1, l - 1, a); &#125; if (l &lt; r) &#123; add(1, 1, N - 1, l, r - 1, b); &#125; if (r &lt; N) &#123; add(1, 1, N - 1, r, r, -1ll * b * (r - l) - a); &#125; &#125; else &#123; if (l == r) &#123; puts("1"); &#125; else &#123; printf("%d\n", cal(1, 1, N - 1, l, r - 1).num[3]); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CTSC 2007」BZOJ 1150 数据备份]]></title>
    <url>%2FBZOJ-1150%2F</url>
    <content type="text"><![CDATA[直线上有 N 个点，距离原点距离分别为 A_i 。有 M 条线用来连接。每条线连接两个点，且每个点只能被连接一次，线的长度为两点间的距离。求这些线长度和的最小值。 2\leq N\leq 100000, A_i \leq 1000000000 分析 很显然的是，线连接的一定是相邻的两个点，因此原本的 N 个点被差分成 N-1 条线段，记 len(i,i+1) 表示点 i 和 i+1 点之间的距离。 考虑贪心，每次取距离最小的两个点连接。但是这么做是显然错误的，例如 1 3 50 100 且 M=2 。 因为选完 (i-1,i) 之后，会导致 (i-2,i-1) 和 (i,i+1) 不能再选，这就是直接贪心错误的问题所在。 因此它需要一个可以「反悔」的机制。 如果选择完 (i-1,i) 后反悔，那么意味着它会去应该选择 (i-2,i-1) 或 (i,i+1) 。 那么取出 len(i-1,i) 后，只需加入 len(i-2,i-1)+len(i,i+1)-len(i-1,i) ，这意味着它可以将已经选择的 (i-1,i) 反悔成 (i-2,i-1) 和 (i,i+1) （反悔加上当前这次所以是一共选择 2 条线段）。 当然反悔 (i-1,i) 不代表 (i-2,i-1) 和 (i,i+1) 都要选，可能只选择其中一个。不过对于它们同样可以继续反悔从而找到更优的策略，因此这个贪心是成立的。 记录每个点（线段抽象成点看待）的前驱后继，每次选择一条线段相当于删除这个点，与此同时更新前驱后继。 可以通过堆来实现，但是需要记录的东西会多一些。所以我选择直接使用 std::set ，它可以直接删除非堆顶的元素。当然实测它也要慢一些。 需要注意一下边界取值以及溢出。 复杂度 O(M\log{N}) 。 类似的题：夹克老爷的逢三抽一 ，是对此题模型展开后的描述。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1e5 + 5;int N, M;ll A[MAXN];int Lst[MAXN], Nxt[MAXN];std::set&lt;std::pair&lt;ll, int&gt; &gt; Set;void insert(int x) &#123;Set.insert(std::make_pair(A[x], x));&#125;void erase(int x) &#123;Set.erase(std::make_pair(A[x], x));&#125;void del(int p) &#123;Nxt[Lst[p]] = Nxt[p];Lst[Nxt[p]] = Lst[p];erase(p);&#125;int main() &#123;ll res = 0;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N + 1) &#123; scanf("%lld", &amp;A[i]); if (i &gt; 1) &#123; A[i - 1] = A[i] - A[i - 1]; insert(i - 1); &#125; Lst[i] = i - 1; Nxt[i] = i + 1;&#125;A[0] = 1000000000LL + 5;rep(i, 0, M) &#123; int p = Set.begin()-&gt;second; ll l = A[Lst[p]], x = A[p], r = A[Nxt[p]]; res += x; del(Lst[p]), del(Nxt[p]); erase(p); A[p] = l + r - x; insert(p);&#125;printf("%lld\n", res);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2007 Dec」BZOJ 1691 挑剔的美食家]]></title>
    <url>%2FBZOJ-1691%2F</url>
    <content type="text"><![CDATA[N 头奶牛， M 种草料。第 i 头奶牛要求其草料价格不小于 A_i ，鲜嫩程度不小于 B_i 。要求奶牛吃的草料互不相同，求最小花费。如果无解，输出 -1 。 N,M\leq 100000 。 分析 贪心的想，每头奶牛肯定选择满足要求的最小价格的草料。 将草料和奶牛按照其鲜嫩程度从大到小排序，对每头奶牛，将所有鲜嫩程度满足要求的草料价格插入到一个 multiset中，在里面lower_bound得到满足条件的最小价格，统计答案并将它删去。如果找不到，输出 -1 。 由于草料的鲜嫩程度是不增的，因此已经插入的所有草料价格一定都满足鲜嫩程度不小于当前奶牛的要求，只需要继续插入后面满足条件的草料。 因此每个草料最多按顺序插入一次。 复杂度 O(N\log{N}+M\log{M}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Node &#123; int cost, val; bool operator &lt; (const Node &amp;x) const &#123; return val &gt; x.val; &#125;&#125; A[MAXN], B[MAXN];std::multiset&lt;int&gt; S;int main() &#123; int N, M; ll ans = 0; scanf("%d%d", &amp;N, &amp;M); rep(i, 0, N) &#123; scanf("%d%d", &amp;A[i].cost, &amp;A[i].val); &#125; rep(i, 0, M) &#123; scanf("%d%d", &amp;B[i].cost, &amp;B[i].val); &#125; std::sort(A, A + N); std::sort(B, B + M); int cur = 0; rep(i, 0, N) &#123; while(cur &lt; M &amp;&amp; B[cur].val &gt;= A[i].val) &#123; S.insert(B[cur++].cost); &#125; std::multiset&lt;int&gt;::iterator p = S.lower_bound(A[i].cost); if(p == S.end()) &#123; puts("-1"); return 0; &#125; else &#123; ans += *p; S.erase(p); &#125; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI2010」BZOJ 1826 缓存交换]]></title>
    <url>%2FBZOJ-1826%2F</url>
    <content type="text"><![CDATA[起初有 M 个空位置。有 N 次插入，若插入的数在位置上，则无需操作；否则需要用它替换掉原位置中的一个数。每次可以自由选择替换的位置，求最小替换次数。 M\leq N\leq 100000 。 分析 对于一个插入的数 x ，若当前位置未满且 x 不在任意位置中，则直接插入 x ，次数 +1 。 若 x 存在于某个位置中，则无需任何操作。 如果不存在，应该替换掉位置上 M 个数中下一次出现最晚的那个数（如果不再出现，则当其下一次出现的位置为 INF ）。 这是个贪心的策略， 形象的理解就是，该元素占了那个位置最长的没有意义的时间，（元素两次插入间隔的时间被认为是没有意义的）。 预处理出 Nxt[i] ，表示 i 位置的元素下一次出现的下标，如果没有下一次，将其置为 N+1 。 维护大根堆，每次插入 Nxt[i] 。 若 i 不在堆中，则说明需要进行了一次替换，并删除堆顶元素。 复杂度 O(N\log{N}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;int N, M;std::multiset&lt;int&gt; In;std::map&lt;int, int&gt; Lst;int A[MAXN], Nxt[MAXN];int main() &#123; int res = 0; scanf("%d%d", &amp;N, &amp;M); rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); Nxt[i] = N + 1; Nxt[Lst[A[i]]] = i; Lst[A[i]] = i; &#125; rep(i, 1, N + 1) &#123; if(In.find(i) != In.end()) &#123; In.erase(i); &#125; else &#123; ++res; if(SZ(In) == M) &#123; In.erase(--In.end()); &#125; &#125; In.insert(Nxt[i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>堆</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2010」BZOJ 2086 Blocks]]></title>
    <url>%2FBZOJ-2086%2F</url>
    <content type="text"><![CDATA[序列 A 有 N 个数，有 M 次查询。每次给定 K 并可以进行以下操作：如果 A[i] &gt; K 则可以将其减 1 并使 A[i-1] 或 A[i+1] 加 1 。经过任意多次操作后，求最长的连续子序列，其中元素值均不小于 K 。 N\leq 1000000,M\leq 50 。 分析 若 \sum\limits_{i=l}^{r}{A_i} \geq K\times (r - l + 1) ，则 A[l\cdots r] 一定可以经过若干次操作使得其中每个元素均不小于 K 。 为了方便起见，使 A[i] = A[i]-K ，则当 \sum\limits_{i=l}^{r}{A_i} \geq 0 成立时即可。 记 Sum[i] = \sum\limits_{i=1}^{i}{A_i} ，则 Sum[r]\geq Sum[l-1] 与上式等价。 问题转化为求 \max(r-l) 使得 Sum[r]\geq Sum[l-1] 成立。 而所有可能成为最大区间的左端点的前缀和一定是单调递减的，因为若 i &lt; j 且 Sum[i] \leq Sum[j] ，则选择 i 作为左端点一定强于选 j 。 同理若 i &gt; j 且 Sum[i] \geq Sum[j] ，则选择 i 作为右端点一定强于选 j ，因此 r 可以直接从右向左扫描右端点。 记当前栈顶（左端点）为 S[top] ，若 Sum[r] \geq Sum[S[top]] 则弹出栈顶，直到满足 Sum[r] &lt; Sum[S[top]] 为止。 那么之前的栈顶 S[top+1]+1 到 r ，是以 r​ 为右端点满足条件的最大区间。 答案为这些区间大小的最大值，复杂度 O(NM) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1000000 + 5;int N, M, A[MAXN];int solve(int x) &#123;static ll F[MAXN];static int Stk[MAXN];int top = 0, res = 0;rep(i, 1, N + 1) &#123; F[i] = F[i - 1] + A[i] - x; if (F[Stk[top]] &gt; F[i]) &#123; Stk[++top] = i; &#125;&#125;rof(i, N + 1, 1) &#123; if (F[i] &gt;= 0) &#123; return std::max(res, i); &#125; while (top &amp;&amp; F[i] &gt;= F[Stk[top - 1]]) &#123; --top; &#125; chkMax(res, i - Stk[top]);&#125;return res;&#125;int main() &#123;int x;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]);&#125;rep(i, 0, M) &#123; scanf("%d", &amp;x); printf("%d ", solve(x));&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2011」BZOJ 2276 Temperature]]></title>
    <url>%2FBZOJ-2276%2F</url>
    <content type="text"><![CDATA[长为 N 的序列中，每个数的取值范围为 [L_i,R_i] 。求最长不下降连续子序列的长度。 N\leq 10^6 分析 单调队列维护递减的 l ，如果当前 r 比队首的 l 小，则弹出队首直到 r 大于等于它为止。 读入数据很大，需要读入优化。 复杂度 O(N) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Mqueue &#123; std::deque&lt;int&gt; Q, M; void push(int x) &#123; while(!M.empty() &amp;&amp; M.back() &lt; x) &#123; M.pop_back(); &#125; M.push_back(x); Q.push_back(x); &#125; void pop() &#123; int x = Q.front(); Q.pop_front(); if(x == M.front()) &#123; M.pop_front(); &#125; &#125; void maintain(int x) &#123; while(!M.empty() &amp;&amp; M.front() &gt; x) &#123; pop(); &#125; &#125; size_t size() &#123; return SZ(Q); &#125;&#125;Q;int main() &#123; int res = 0; int N = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); Q.maintain(r); Q.push(l); chkMax(res, SZ(Q)); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI2010」BZOJ 1855 股票交易]]></title>
    <url>%2FBZOJ-1855%2F</url>
    <content type="text"><![CDATA[一共 T 天，每天股票的买入价为 A_i ，卖出价为 B_i ，最多允许购买 C_i 股，售出 D_i 股。要求两次交易之间至少间隔 W 天，持有的总股票数不超过 P 。假设可以无利息借钱购买股票，求最大收益。 T\leq 2000 。 分析 记 F(i,j) 表示第 i 天持有 j 股的最大收益。 首先 F(i,j) 可以直接购买获得， F(i,j) = -A_i\times j(j\leq C_i) 。 其次可以由前一天直接转移获得， F(i,j) = F(i-1,j) 。 最后可以通过 i-w-1 天的状态转移， F(i,j) = \max\limits_{max(1,j-C_i)\leq k\leq j}{F(i-w-1,k)+(k-j)\times A_i}\ F(i,j)=\max\limits_{max(1,j-C_i)\leq k\leq j}{F(i-w-1,k)+(k-j)\times B_i} 如果枚举 k ，复杂度会达到 TP^2 ，显然不行。 再观察转移方程，它可以转化成 F(i,j) = \max\limits_{max(1,j-C_i)\leq k\leq j}{(F(i-w-1,k)+k\times A_i})-j\times A_i 。 这是典型的单调队列可以优化的形式（形如 f[x] = \max(g[k])+w[x] ）。 单调队列分别维护 F(i-w-1,k)+k\times A_i 和 F(i-w-1,k)+k\times B_i 。 需要注意的是，前者 k 从 0 到 j 枚举，而后者是从 P 到 j 枚举。因为随着 j 的增大，前者当 k &lt; j - C_i 时不在枚举范围，而后者当 k &gt; j + D_i 时不在枚举范围。 如此使得 F[i][1\cdots P] 的决策分摊 O(P) 的复杂度，复杂度降至 O(TP) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 2000 + 5;int N, P, W;int F[MAXN][MAXN];int Que[MAXN];int main() &#123; int a, b, maxa, maxb; scanf("%d%d%d", &amp;N, &amp;P, &amp;W); memset(F, 0x80, sizeof F); rep(i, 1, N + 1) &#123; scanf("%d%d%d%d", &amp;a, &amp;b, &amp;maxa, &amp;maxb); rep(j, 0, maxa + 1) &#123; F[i][j] = -a * j; &#125; rep(j, 0, P + 1) &#123; chkMax(F[i][j], F[i - 1][j]); &#125; if (i - W &lt;= 1) &#123; continue; &#125; int h = 0, t = -1; rep(j, 0, P + 1) &#123; while (h &lt;= t &amp;&amp; Que[h] &lt; j - maxa) &#123; ++h; &#125; while (h &lt;= t &amp;&amp; F[i - W - 1][Que[t]] + Que[t] * a &lt;= F[i - W - 1][j] + j * a) &#123; --t; &#125; Que[++t] = j; chkMax(F[i][j], F[i - W - 1][Que[h]] + (Que[h] - j) * a); &#125; h = 0, t = -1; rof(j, P + 1, 0) &#123; while (h &lt;= t &amp;&amp; Que[h] &gt; j + maxb) &#123; ++h; &#125; while (h &lt;= t &amp;&amp; F[i - W - 1][Que[t]] + Que[t] * b &lt;= F[i - W - 1][j] + j * b) &#123; --t; &#125; Que[++t] = j; chkMax(F[i][j], F[i - W - 1][Que[h]] + (Que[h] - j) * b); &#125; &#125; int res = 0; rep(i, 0, P + 1) &#123; chkMax(res, F[N][i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2010」BZOJ 2096 PIL-Pilots]]></title>
    <url>%2FBZOJ-2096%2F</url>
    <content type="text"><![CDATA[给定一个长度为 N 的序列，求最长的最大值与最小值的差不超过 K 的子段。 N\leq 3000000,k\leq 2000000000 。 分析 记 l, r 为当前子段的首尾下标。开始尽可能让 r 向右拓展。 当最小最大值的差超过 K 时，让 l 向右移动，直到满足条件为止。 通过两个单调队列维护极值， \max {r-l+1} 为答案。 复杂度 O(N) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;int N, K;std::deque&lt;int&gt; Dup, Ddown;std::deque&lt;int&gt; Qup, Qdown;void push(int x) &#123; while(!Dup.empty() &amp;&amp; Dup.back() &lt; x) &#123; Dup.pop_back(); &#125; while(!Ddown.empty() &amp;&amp; Ddown.back() &gt; x) &#123; Ddown.pop_back(); &#125; Dup.push_back(x); Ddown.push_back(x); Qup.push_back(x); Qdown.push_back(x);&#125;void pop() &#123; int x = Qup.front(); Qup.pop_front(); if(x == Dup.front()) &#123; Dup.pop_front(); &#125; x = Qdown.front(); Qdown.pop_front(); if(x == Ddown.front()) &#123; Ddown.pop_front(); &#125;&#125;void moveRight(int x) &#123; push(x); while(!Dup.empty() &amp;&amp; Dup.front() - Ddown.front() &gt; K) &#123; pop(); &#125;&#125;int main() &#123; int x, ans = 0; scanf("%d%d", &amp;K, &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;x); moveRight(x); chkMax(ans, SZ(Qup)); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「[BJOI 2014」BZOJ 4530 大融合]]></title>
    <url>%2FBZOJ-4530%2F</url>
    <content type="text"><![CDATA[开始有 N 个点， M 个操作。每次插入一条边（保证不成环），或者查询一条边的负载值。负载值的定义为当前树上经过它的简单路径条数。 N,Q\leq 100000 分析 边的负载值等价于删去它后该边两点所在联通块大小的乘积。 现在问题在于如何计算联通块的大小。 在线做需要LCT，我不会，于是考虑将森林建好后离线做。 那么现在一条边所涉及的两个联通块大小，分别就是父亲所在的联通块大小 Sz[x] 和儿子所在的子树大小 Sz[y] ，负载值为 (Sz[x]-Sz[y])\times Sz[y] （因为父亲所在联通块一定包含儿子所在的子树）。 插入一条边的影响就是，父亲节点到「它所在并查集中深度最小的点（即当前树的根节点）」的那条链上所有节点的子树大小增加 Sz[y] 。 如何找到这个根节点，显然是并查集维护联通块，让联通块内深度最小的点作祖先。 而对一条链进行区间加法和单点查询，显然是树链剖分+线段树/树状数组。 复杂度为 O(N+Q\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, Q;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Fa[MAXN], Son[MAXN], Sz[MAXN], Depth[MAXN];int Top[MAXN], Dfn[MAXN], cntD;void dfs(int x) &#123; Depth[x] = Depth[Fa[x]] + 1; Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];&#125;void pushDown(int rt, int L) &#123; int &amp;add = Add[rt]; if(add) &#123; Add[rt &lt;&lt; 1] += add; Add[rt &lt;&lt; 1 | 1] += add; Sum[rt &lt;&lt; 1] += add * (L - (L &gt;&gt; 1)); Sum[rt &lt;&lt; 1 | 1] += add * (L &gt;&gt; 1); add = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void add(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Sum[rt] += (r - l + 1) * x; Add[rt] += x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; add(LT, a, b, x); &#125; if(m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt);&#125;int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125;&#125;int Anc[MAXN];void init(int n) &#123; rep(i, 1, n + 1) &#123; Anc[i] = i; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;void merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if(Depth[x] &gt; Depth[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; &#125;&#125;void modify(int x, int sz) &#123; int y = findAnc(x); while(x &amp;&amp; Depth[Top[x]] &gt;= Depth[y]) &#123; add(1, 1, N, Dfn[Top[x]], Dfn[x], sz); x = Fa[Top[x]]; &#125; if(x) &#123; add(1, 1, N, Dfn[y], Dfn[x], sz); &#125;&#125;int Type[MAXN], U[MAXN], V[MAXN];int main() &#123; char opt[5]; scanf("%d%d", &amp;N, &amp;Q); init(N); rep(i, 0, Q) &#123; scanf("%s%d%d", opt, &amp;U[i], &amp;V[i]); Type[i] = opt[0] == 'A'; if(Type[i]) &#123; addEdge(U[i], V[i]); &#125; &#125; rep(i, 1, N + 1) &#123; if(!Fa[i]) &#123; dfs(i); dfs2(i, i); &#125; &#125; init(N); build(1, 1, N); rep(i, 0, Q) &#123; if(Type[i]) &#123; merge(U[i], V[i]); if(Depth[U[i]] &lt; Depth[V[i]]) &#123; modify(U[i], query(1, 1, N, Dfn[V[i]])); &#125; else &#123; modify(V[i], query(1, 1, N, Dfn[U[i]])); &#125; &#125; else &#123; if(Depth[U[i]] &lt; Depth[V[i]]) &#123; std::swap(U[i], V[i]); &#125; V[i] = findAnc(V[i]); int num = query(1, 1, N, Dfn[V[i]]); int num2 = query(1, 1, N, Dfn[U[i]]); printf("%d\n", num2 * (num - num2)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>并查集</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「LNOI 2014」BZOJ 3626 LCA]]></title>
    <url>%2FBZOJ-3626%2F</url>
    <content type="text"><![CDATA[给定一棵 N 个节点的有根树，有 M 组询问。每组询问给定 l, r, z ，查询 \sum\limits_{l\leq i\leq r}{depth(lca(i, z))} 。 N,M\leq 50000 。 分析 约定： u\rightarrow v 指的是 u 到 v 路径上的所有点，默认根节点为 1 。 由于只是求 lca(u,v) 的深度，因此将 u\rightarrow 1 上的所有节点权值 +1 ，那么答案应该是 v\rightarrow 1 上节点的权值和。（因为 v\rightarrow 1 上所有有权值的点都在 lca(u,v) \rightarrow 1 上） 那么假设求 \sum{depth(lca(u_i,v))} ，同理可以分别将 u_i\rightarrow 1 上所有点权值 +1 ，最后统计 v\rightarrow 1 上的权值和。 实现起来很简单，树链剖分+线段树，复杂度 O(m\log^2{n}) ，其中 m 为组数， n 为节点数。 假如把 v 换成 z ，其实只需要将最后统计的链从 v\rightarrow 1 改成了 z\rightarrow 1 ，对前面 +1 的操作没有影响，单次只是 O(\log^2{n}) 的复杂度。 那么再看这道题的询问 \sum\limits_{l\leq i\leq r}{depth(lca(i, z))} ，可以发现与上面的式子是类似的。 由于每次都是 [l_i,r_i] 这样一个连续区间，将它差分成 [1,r_i]-[1,l_i-1] 。 那么如果节点编号按从 1\cdots n 的顺序进行 +1 的操作， +1 后计算 u_i\rightarrow 1 的权值和。 所有查询的区间差分后得到的 [1,r_i] 和 [1,l_i-1] 都能算出来，而且所有点只操作（增加）了一次，如此复杂度是可以接受的。 那么把所有查询都分别挂在节点 l_i-1 和 r_i 上，让 i 从 1 开始按顺序对 i\rightarrow 1 进行 +1 操作。 +1 之后处理所有挂在上面的询问。分别 u_i\rightarrow 1 的权值和，若 i 是左区间则减，反之则加。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 50000 + 5;const int MOD = 201314;struct Edge &#123; int v, nxt;&#125; E[MAXN];int N, M;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Fa[MAXN], Son[MAXN], Sz[MAXN];int Top[MAXN], Dfn[MAXN], cntD;void dfs(int x) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; dfs(v); Sz[x] += Sz[v]; if (Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if (Son[x]) &#123; dfs2(Son[x], top); &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2];void inc(int &amp;x, int y) &#123; (x += y) %= MOD; if (x &lt; 0) &#123; x += MOD; &#125;&#125;void pushUp(int rt) &#123; inc(Sum[rt] = 0, Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]);&#125;void pushDown(int rt, int L) &#123; int &amp;add = Add[rt]; if (add) &#123; inc(Add[rt &lt;&lt; 1], add); inc(Add[rt &lt;&lt; 1 | 1], add); inc(Sum[rt &lt;&lt; 1], add * (L - (L &gt;&gt; 1))); inc(Sum[rt &lt;&lt; 1 | 1], add * (L &gt;&gt; 1)); add = 0; &#125;&#125;void add(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inc(Sum[rt], r - l + 1); inc(Add[rt], 1); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b); &#125; if (m &lt; b) &#123; add(RT, a, b); &#125; pushUp(rt);&#125;int querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; int res = 0; if (a &lt;= m) &#123; inc(res, querySum(LT, a, b)); &#125; if (m &lt; b) &#123; inc(res, querySum(RT, a, b)); &#125; return res;&#125;void modify(int u) &#123; while (u) &#123; add(1, 1, N, Dfn[Top[u]], Dfn[u]); u = Fa[Top[u]]; &#125;&#125;int query(int u) &#123; int res = 0; while (u) &#123; inc(res, querySum(1, 1, N, Dfn[Top[u]], Dfn[u])); u = Fa[Top[u]]; &#125; return res;&#125;std::vector&lt;int&gt; L[MAXN], R[MAXN];int Ask[MAXN], Ans[MAXN];int main() &#123; int l, r; scanf("%d%d", &amp;N, &amp;M); rep(i, 2, N + 1) &#123; scanf("%d", &amp;Fa[i]); addEdge(++Fa[i], i); &#125; dfs(1); dfs2(1, 1); rep(i, 0, M) &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;Ask[i]); L[l].push_back(i); R[r + 1].push_back(i); ++Ask[i]; &#125; rep(i, 1, N + 1) &#123; modify(i); rep(j, 0, SZ(R[i])) &#123; inc(Ans[R[i][j]], query(Ask[R[i][j]])); &#125; rep(j, 0, SZ(L[i])) &#123; inc(Ans[L[i][j]], -query(Ask[L[i][j]])); &#125; &#125; rep(i, 0, M) &#123; printf("%d\n", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>差分</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2017」BZOJ 4890 城市]]></title>
    <url>%2FBZOJ-4890%2F</url>
    <content type="text"><![CDATA[在一棵无向树上修改一条边的起点终点，使得新图依然是树，并最小化新树的直径。 N\leq 5000 分析 由于最多只有 5000-1 条边，因此可以直接枚举要删除的边。 如果可以在 O(N) 的时间求出修改该边后的直径，就可以在 O(N^2) 的时间求解本题， 3 s 的时间是可以接受的。 删去一条边后，原树被拆成了两棵新树 A,B ，那么新直径的端点位置有两类情况： 两个端点在同一棵树中 一个端点在 A 一个端点在 B 对于第一类，直接 O(N) 求树的直径，链的长度分别为 d1,d2 ，但是对于第二种，其实就是分别在两棵树中找到「最长距离最小」的点，并将它们连接，那么这条链的长度为 r1+r2+w ，其中 r 为树中的距离， w 为修改边的变长。 因此答案为 \min{\max{d1,d2,r1+r2+w}} 。 求 r 只需要从任意一点遍历该树，距离某点最远距离的点要么为根节点，要么为其子树中某点，所以树形dp就能得到这个「最小的最长距离」。 还可以强力剪枝（当然上面的做法已经可以AC了）。 易得如果修改的边不在原树的直径上，是没有意义的（因为新树的中该直径依然存在），因此先得到原树的直径，再去枚举直径上的边完成前面的操作，会大大减少枚举量。实测由8876ms降至777ms。 复杂度依然是 O(N^2) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 5000 + 5;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;int Nxt[MAXN], Vis[MAXN], F[MAXN], G[MAXN];int dis, rad;int Dis[MAXN], Lst[MAXN], W[MAXN];void dfs(int x) &#123; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(!Dis[v]) &#123; Dis[v] = Dis[x] + E[i].w; Lst[v] = x; W[v] = E[i].w; dfs(v); &#125; &#125;&#125;void getD(int x) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v]) &#123; continue; &#125; getD(v); int d = F[v] + E[i].w; if (d &gt; F[x]) &#123; G[x] = F[x]; F[x] = d; Nxt[x] = v; &#125; else &#123; chkMax(G[x], d); &#125; &#125; chkMax(dis, F[x] + G[x]);&#125;void getR(int x, int r) &#123; chkMin(rad, std::max(r, F[x])); Vis[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v]) &#123; if (v == Nxt[x]) &#123; getR(v, std::max(G[x] + E[i].w, r + E[i].w)); &#125; else &#123; getR(v, std::max(F[x] + E[i].w, r + E[i].w)); &#125; &#125; &#125;&#125;void clear() &#123; dis = 0, rad = INT_MAX; memset(Vis, 0, sizeof Vis); memset(F, 0, sizeof F); memset(G, 0, sizeof G);&#125;int res = INT_MAX;void cal(int u, int v, int w) &#123; int d1, d2, r1, r2; clear(); Vis[v] = 1; dis = 0; getD(u); d1 = dis; dis = 0; getD(v); d2 = dis; dis = Vis[v] = 0; getR(u, 0); r1 = rad; rad = INT_MAX; getR(v, 0); r2 = rad; rad = INT_MAX; chkMin(res, std::max(r1 + r2 + w, std::max(d1, d2)));&#125;int main() &#123; int u, v, w, N; scanf("%d", &amp;N); rep(i, 1, N) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); addEdge(v, u, w); &#125; int d = 0, st, st2; dfs(1); rep(i, 2, N + 1) &#123; if(chkMax(d, Dis[i])) &#123; st = i; &#125; &#125; memset(Dis, 0, sizeof Dis); dfs(st); d = 0; rep(i, 2, N + 1) &#123; if(chkMax(d, Dis[i])) &#123; st2 = i; &#125; &#125; for(int i = st2; i != st; i = Lst[i]) &#123; cal(i, Lst[i], W[i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Baltic2004」BZOJ 1367 sequence]]></title>
    <url>%2FBZOJ-1367%2F</url>
    <content type="text"><![CDATA[对于序列 A_1,A_2,\cdots,A_n ，构造递增序列 B_1,B_2,\cdots,B_n ，使得 R=\sum{|A_i-B_i|} 最小。求 R 的最小值。 n\leq 10^6,A_i\leq 2\times 10^9 。 分析 这是2005年黄清河同学的集训队论文《左偏树的特点及其应用》中的例题。 那我就简化一下他的分析求解，给出基本思路和解法。 首先， A 有两种极端情况： A_1\leq A_2\leq \cdots\leq A_n ，此时 B_i = A_i 时 R 最小（也可以理解为 B_i 取 [A_i,A_i] 的中位数）； A_1 \geq A_2\geq \cdots \geq A_n ，此时 B_1,\cdots,B_n 取 [A_1,A_n] 的中位数时 R 最小； 而如果 A 不是单调的，也可以由若干个小的单调区间组成。 那么把 A 分成 M 个区间，每个区间对应一个解 W_i ， W_i 为 A 在该区间的中位数。 （最优性通过归纳法证明，详情可以自行翻阅论文） 那么当 A_1,\cdots,A_k 已经得到最优解 W_1,\cdots,W_p ，那么新插入 A_{k+1} ，先将 A_{k+1} 视作单独的一个区间，则该区间的解 W_{p+1}=A_{k+1} 。 但是要求 B 是单调递增的，因此若 W_{p+1} &lt; W_{p} ，则需要将这两个解合并，直到 W 满足单调性为止。 而新区间的最优解（即 W_p 和 W_{p+1} 合并后），应该为大区间的中位数。那如何快速得到新区间的中位数呐？ 第一种想法就是每个区间建一棵平衡树，启发式合并两棵树，并查询第 K （树大小一半）大得到新的中位数。复杂度 O(n\log{n}) 。 但是我们发现这样做复杂度较高，为 O(n^2\log{n}) ，需要更快速的方法。 考虑中位数的定义，中位数的值为 A[\lfloor\frac{n}{2}\rfloor+1] 。也就是说集合中有恰好 \lfloor\frac{n}{2}\rfloor 个数小于它。 那么构造一个大根堆，包含集合中较小的一半元素，堆顶就是中位数。 合并两个堆，如果堆中元素个数超过新区间大小的一半，就将多余的全部弹出，则新的堆顶就是新区间的中位数。 通过左偏树实现大根堆，合并的复杂度为 O(\log{n}) 。 需要注意的是，由于要求 B 是单调递增而不是不递减的，因此需要将 A_i 预处理为 A_i-i 。 如此总复杂度降至 O(n\log{n}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1e6 + 5;struct Leftist &#123; struct Node &#123; int key, sz; int lc, rc, dis; bool operator &lt; (const Node &amp;x) const &#123; return key &gt; x.key; &#125; &#125; A[MAXN]; int tot; int merge(int x, int y) &#123; if(!x || !y) &#123; return x + y; &#125; if(A[y] &lt; A[x]) &#123; std::swap(x, y); &#125; Node &amp;a = A[x]; a.rc = merge(a.rc, y); a.sz = A[a.lc].sz + A[a.rc].sz + 1; if(A[a.rc].dis &gt; A[a.lc].dis) &#123; std::swap(a.lc, a.rc); &#125; a.dis = A[a.rc].dis + 1; return x; &#125; int push(int x) &#123; A[++tot] = (Node) &#123;x, 1, 0, 0, 0&#125;; return tot; &#125; int size(int x) &#123; return A[x].sz; &#125; int top(int x) &#123; return A[x].key; &#125; int pop(int x) &#123; return merge(A[x].lc, A[x].rc); &#125;&#125; T;int A[MAXN], Rt[MAXN], L[MAXN], R[MAXN];int main() &#123; int N; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); A[i] -= i; &#125; int cnt = 0; rep(i, 1, N + 1) &#123; Rt[++cnt] = T.push(A[i]); L[cnt] = R[cnt] = i; while(cnt &gt; 1 &amp;&amp; T.top(Rt[cnt]) &lt; T.top(Rt[cnt - 1])) &#123; --cnt; Rt[cnt] = T.merge(Rt[cnt], Rt[cnt + 1]); R[cnt] = R[cnt + 1]; while(T.size(Rt[cnt]) * 2 &gt; R[cnt] - L[cnt] + 2) &#123; Rt[cnt] = T.pop(Rt[cnt]); &#125; &#125; &#125; ll ans = 0; rep(i, 1, cnt + 1) &#123; int x = T.top(Rt[i]); rep(j, L[i], R[i] + 1) &#123; ans += abs(x - A[j]); &#125; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>左偏树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1455 罗马游戏]]></title>
    <url>%2FBZOJ-1455%2F</url>
    <content type="text"><![CDATA[有 N 个集合，每个集合中包含一个元素 A_i 。有 M 个操作：将 x,y 所在的集合合并；查询并删去 x 所在集合中元素的最小值。 N\leq 1000000, M\leq 100000 分析 如果没有合并集合的操作，直接使用stl的priority_queue即可完成所有查询删除的操作。 支持合并的堆的有不少，左偏树（leftist tree）就是其中之一。 左偏树合并复杂度为 O(\log{n_1}+\log{n_2})=O(\log{n}) ，查询堆顶复杂度 O(1) ，删除堆顶复杂度 O(\log{n}) ，插入新节点复杂度 O(\log{n}) ，修改节点权值复杂度 O(n) 。 用并查集维护点所在的集合，左偏树维护查询/删除与合并。复杂度 O(M(\alpha(N)+\log{N})) 。 当然，pb_ds的priority_queue是支持合并的，默认是配对堆（pairing heap），各项操作的复杂度均不差于左偏树，修改的复杂度更低，为 O(\log{n}) 。 但是由于本题中没有涉及decrease key的操作，因此复杂度相同。 不过开N个priority_queue似乎空间占用较大，直接MLE了。 我猜N是100w的原因的其中之一就是为了卡pbds，而配对堆的空间复杂度本就高于左偏树。 因此还是乖乖写左偏树吧。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1000000 + 5;struct Union &#123; int Anc[MAXN]; void init(int n) &#123; rep(i, 1, n + 1) &#123; Anc[i] = i; &#125; &#125; int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]); &#125;&#125; S;struct Leftist &#123; struct Node &#123; int key; int lc, rc, dis; Node (): key(0), lc(0), rc(0), dis(0) &#123;&#125; bool operator &lt; (const Node &amp;x) const &#123; return key &lt; x.key; &#125; &#125; A[MAXN]; void init(int n) &#123; rep(i, 1, n + 1) &#123; scanf("%d", &amp;A[i].key); &#125; A[0].dis = -1; &#125; int merge(int x, int y) &#123; if(!x || !y) &#123; return x + y; &#125; if(A[y] &lt; A[x]) &#123; std::swap(x, y); &#125; Node &amp;a = A[x]; a.rc = merge(a.rc, y); if(A[a.rc].dis &gt; A[a.lc].dis) &#123; std::swap(a.lc, a.rc); &#125; a.dis = A[a.rc].dis + 1; return x; &#125; int get_min(int x) &#123; return A[x].key; &#125; int delete_min(int x) &#123; A[x].key = -1; return merge(A[x].lc, A[x].rc); &#125;&#125; T;int main() &#123; int N, M, x, y; char opt[10]; scanf("%d", &amp;N); T.init(N); S.init(N); scanf("%d", &amp;M); while(M--) &#123; scanf("%s", opt); if(opt[0] == 'M') &#123; scanf("%d%d", &amp;x, &amp;y); if(T.get_min(x) == -1 || T.get_min(y) == -1) &#123; continue; &#125; x = S.findAnc(x), y = S.findAnc(y); if(x != y) &#123; int bl = T.merge(x, y); S.Anc[x] = S.Anc[y] = bl; &#125; &#125; else &#123; scanf("%d", &amp;x); if(T.get_min(x) == -1) &#123; puts("0"); &#125; else &#123; x = S.findAnc(x); printf("%d\n", T.get_min(x)); int bl = T.delete_min(x); S.Anc[x] = S.Anc[bl] = bl; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>左偏树</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Baltic 2003」BZOJ 1369 Gem]]></title>
    <url>%2FBZOJ-1369%2F</url>
    <content type="text"><![CDATA[在树上给所有节点标上正整数权值，要求相连的节点权值不同，求权值和的最小值。 N\leq 10000 分析 如果确定了权值的范围，那么这就是个很简单的树形DP。 类似于SDOI2015R2D2T2，树上权值最大为 log_2{N} ，在1e4U群里问了一下原理，但是没有结果... 不过可以想象这个值一定很小，不会超过20 。实际上不超过14 。 那么 F(x,y) 表示以 x 为根的子树中当 x 的权值为 y 时的最小权值和。 则转移方程为 F(x,y) = \sum{min(F(s,i)(i\not= y))}+y （ s 为 x 的儿子）。 复杂度 O(N\log^2{N})​ 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int F[15][MAXN];void dfs(int x, int fa) &#123; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); rep(i, 1, 15) &#123; int mn = INT_MAX; rep(j, 1, 15) &#123; if(i != j) &#123; chkMin(mn, F[j][v]); &#125; &#125; F[i][x] += mn; &#125; &#125; &#125; rep(i, 1, 15) &#123; F[i][x] += i; &#125;&#125;int main() &#123; int u, v; scanf("%d", &amp;N); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(1, -1); int res = INT_MAX; rep(i, 1, 15) &#123; chkMin(res, F[i][1]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2010 Dec」BZOJ 2097 Exercise]]></title>
    <url>%2FBZOJ-2097%2F</url>
    <content type="text"><![CDATA[边权为 1 的树上删去 S 条边，求剩下森林中所有树的直径的最大值的最小值。 N\leq 100000 。 分析 求最大值的最小值，这让我们想到了贪心。 二分确定当前直径的最大值 L ，再通过贪心去删边，检查是否删去超过 S 条边。 记 f(i) 为以 x 为根的子树中经过 x 的最长链，对 f(i) 进行排序。 删去最长链，直到当前最长链和次长链 f(i)+f(i-1)\leq L 。 那么 f(x) 的递推关系式为 f(x) = \max{f(i)} ，显然 f(i) \leq L 。 复杂度 O(N\log^2{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Edge &#123;int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M;int H[MAXN], cntE;void addEdge(int u, int v) &#123;E[++cntE] = (Edge) &#123;v, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, H[v]&#125;;H[v] = cntE;&#125;int F[MAXN], A[MAXN], total;void dfs(int x, int fa, int limit) &#123;int cnt = 0;for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; dfs(v, x, limit); &#125;&#125;for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; A[++cnt] = F[v] + 1; &#125;&#125;std::sort(A, A + cnt + 1);while(cnt &amp;&amp; A[cnt] + A[cnt - 1] &gt; limit) &#123; --cnt, ++total;&#125;F[x] = A[cnt];&#125;int check(int limit) &#123;total = 0;dfs(1, -1, limit);return total &lt;= M;&#125;int main() &#123;int u, v;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v);&#125;int l = 1, r = N, ans = N;while(l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if(check(m)) &#123; ans = m; r = m - 1; &#125; else &#123; l = m + 1; &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2009」BZOJ 1304 叶子的颜色]]></title>
    <url>%2FBZOJ-1304%2F</url>
    <content type="text"><![CDATA[树上有 N 个节点，其中 1-M 是叶子节点。每个节点可以被染成黑、白，或者不染色。指定某个不是叶子节点的节点作为根，要求给若干个节点染色后使得每个叶子节点到根的路径中第一个被染色节点的颜色为 C_i 。求需要染色的节点的最少个数。 N\leq 1000 。 分析 假设根已经存在，那么这个树形DP很简单。用 F[x][0/1] 表示染完以 x 为根的子树且将 x 染成 0/1 所需要的染色的最少节点数。 则： F[x][0] = 1 +\sum{\min(F[son][0]-1,F[son][1])} F[x][1] = 1 + \sum{\min(F[son][1]-1,F[son][0])} F[x][!C_x] = +\infty (x\leq M) 但是这道题没有指定根，则继续考虑不同根对染色节点数的影响。 假设将根节点 R 修改为 R 的某个儿子 S （移动了一条边），由于 S 和 R 的颜色必定不同（否则原先就不需要染 S ) ，因此换根后答案不变。 因此根可以随意移动，也就是说随意选择一个非叶子节点为根，答案均不变。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125;int N, M, C[MAXN];int F[2][MAXN];void dfs(int x, int fa) &#123; F[0][x] = F[1][x] = 1; if(x &lt;= M) &#123; F[C[x]^1][x] = INT_MAX; &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; dfs(v, x); F[1][x] += std::min(F[1][v] - 1, F[0][v]); F[0][x] += std::min(F[0][v] - 1, F[1][v]); &#125; &#125;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); rep(i, 1, M + 1) &#123; scanf("%d", &amp;C[i]); &#125; rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(M + 1, -1); printf("%d\n", std::min(F[0][M + 1], F[1][M + 1])); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3910 火车]]></title>
    <url>%2FBZOJ-3910%2F</url>
    <content type="text"><![CDATA[N 个节点的树上，指定一条共 M 个节点的路径，每次会前往剩余节点中没有经过的最靠前的节点。求经过的总边数。 N\leq 500000 ,M\leq 400000 分析 根据 dis(u,v) = depth(u) + depth(v) - 2 * depth(lca(u,v )) ，可以在 O(\log{N}) 的时间求得两点间的距离。 现在的问题是如何快速判定某个点是否已经经过。 易得 u\rightarrow v 的路径为 u\rightarrow lca(u,v)\rightarrow v ，那么一个简单的思路就是直接更新这两条链上所有节点的状态，实现方法为树链剖分后用树状数组做区间覆盖，复杂度为 O(N+M\log^{2}{N}) ，过不了。 那么还有一个想法就是缩点，将已经经过的联通的所有点缩成一个点，可以通过并查集实现。 每次合并联通块的个数必会减一，所以最多进行 N 次合并。 复杂度 O(N\alpha(N)+M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 500000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M, R;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Depth[MAXN], Par[20][MAXN];void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Par[0][x] = fa; rep(i, 1, 20) &#123; Par[i][x] = Par[i - 1][Par[i - 1][x]]; &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); &#125; &#125;&#125;int queryLCA(int u, int v) &#123; if (Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; rof(i, 20, 0) &#123; if ((Depth[v] - Depth[u]) &gt;&gt; i &amp; 1) &#123; v = Par[i][v]; &#125; &#125; if (u == v) &#123; return u; &#125; rof(i, 20, 0) &#123; if (Par[i][u] != Par[i][v]) &#123; u = Par[i][u]; v = Par[i][v]; &#125; &#125; return Par[0][u];&#125;int Anc[MAXN], Vis[MAXN];void init() &#123; rep(i, 1, N + 1) &#123; Anc[i] = i; &#125;&#125;int findAnc(int x) &#123; return x == Anc[x] ? x : Anc[x] = findAnc(Anc[x]);&#125;void update(int u, int v) &#123; while(Depth[u] &gt; Depth[v]) &#123; Vis[u] = 1; Anc[u] = Par[0][u]; u = findAnc(Par[0][u]); &#125;&#125;int main() &#123; int u, v, w; ll ans = 0; scanf("%d%d%d", &amp;N, &amp;M, &amp;R); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; init(); dfs(R, 0); u = R; rep(i, 0, M) &#123; scanf("%d", &amp;v); if (Vis[v]) &#123; continue; &#125; int lca = queryLCA(u, v); ans += Depth[u] + Depth[v] - 2 * Depth[lca]; update(u, lca); update(v, lca); u = v; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「PA 2014」BZOJ 3712 Fiolki]]></title>
    <url>%2FBZOJ-3712%2F</url>
    <content type="text"><![CDATA[N 个瓶子里起初各有 G_i 克第 i 种物质。共 M 步操作，第 i 步会将第 A_i 瓶中物质全部倒入第 B_i 瓶中。已知共有 K 组反应，瓶中每一克 C_i 和 D_i 可以转化为两克沉淀，沉淀不再参与反应。瓶中物质若可以进行多种反应，按照反应出现的前后次序进行。求最后剩下多少沉淀。 0\leq M&lt; N\leq 200000,0\leq K\leq 500000,1\leq G_i \leq 10^9 。 分析 这种合并两个瓶子内物质的操作，可以用树形结构来表示。 将初始状态作为叶子节点，若将 a 倒入 b ，则建立一个新点 x 作为 a,b 的父亲，若再将 b 倒入 c ，则再建立新点 y 作为 x,c 的父亲，依次类推，将 a 倒入 b 转化为建立新点作为 a,b 祖先的父亲。 那么会形成一个森林，而根据瓶中物质的初始状态，易得物质 x,y 反应只会出现在节点 lca(x,y) 处。 那么剩下需要处理的就是反应顺序的问题了。 根据建图的方法，若 depth(x) &lt; depth(y) ，则 x 一定先于 y 发生，或者 x,y 中的物质交集为空；如果 depth(x)=depth(y) ，则根据给定顺序进行反应。如此就确定了所有反应发生的顺序。 用倍增求LCA，根据 depth(lca(C_i,D_i)) 排序，复杂度 O(N\log{N}+K\log{K}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = (200000 + 5) &lt;&lt; 1;const int MAXK = 500000 + 5;int N, M, K;int G[MAXN];struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Anc[MAXN];int Depth[MAXN];int Fa[20][MAXN];void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Fa[0][x] = fa; rep(i, 1, 20) &#123; Fa[i][x] = Fa[i - 1][Fa[i - 1][x]]; &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; dfs(E[i].v, x); &#125;&#125;int queryLCA(int u, int v) &#123; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; rep(i, 0, 20) &#123; if((Depth[v] - Depth[u]) &gt;&gt; i &amp; 1) &#123; v = Fa[i][v]; &#125; &#125; if(u == v) &#123; return v; &#125; rof(i, 20, 0) &#123; if(Fa[i][v] != Fa[i][u]) &#123; u = Fa[i][u]; v = Fa[i][v]; &#125; &#125; return Fa[0][u];&#125;struct Node &#123; int u, v, dep, ord; bool operator &lt; (const Node &amp;x) const &#123; return dep == x.dep ? ord &lt; x.ord : dep &gt; x.dep; &#125;&#125; P[MAXK];int main() &#123; int u, v; scanf("%d%d%d", &amp;N, &amp;M, &amp;K); rep(i, 1, N + 1) &#123; scanf("%d", &amp;G[i]); Anc[i] = i; &#125; int cntP = N + 1; rep(i, 1, M + 1) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(N + i, Anc[u]); addEdge(N + i, Anc[v]); Anc[v] = N + i; &#125; rof(i, N + M + 1, N + 1) &#123; if(!Depth[i]) &#123; dfs(i, 0); &#125; &#125; cntE = 0; rep(i, 0, K) &#123; scanf("%d%d", &amp;u, &amp;v); int lca = queryLCA(u, v); if(lca) &#123; P[cntE++] = (Node) &#123;u, v, Depth[lca], i&#125;; &#125; &#125; std::sort(P, P + cntE); ll ans = 0; rep(i, 0, cntE) &#123; ll add = std::min(G[P[i].u], G[P[i].v]); G[P[i].u] -= add; G[P[i].v] -= add; ans += add; &#125; printf("%lld\n", ans &lt;&lt; 1); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2010 Hol」BZOJ 1776 cowpol 奶牛政坛]]></title>
    <url>%2FBZOJ-1776%2F</url>
    <content type="text"><![CDATA[在 N 个节点的有根树 T 中，节点被分成 K 。求每一组组内距离最远的两个节点的距离值。 N\leq 200000,K\leq N/2 分析 可以证明集合中距离最远的点对的其中之一一定是集合中深度最大的点。 证明如下： depth(x) 表示节点 x 的深度， dis(u,v) 表示节点 u,v 的距离， lca(u,v) 表示节点 u,v 的最近公共祖先。 利用反证法。假设集合中节点 u,v 均不是深度最大的节点，且 dis(u,v) 为集合中点对距离的最大值。 设该集合中深度最大的节点为 x 。 则有 dis(u,v)=depth(u)+depth(v)-2 * depth(lca(u,v)) ， dis(x,v)=depth(x)+depth(v)-2 * depth(lca(x,v)) 。 由于 dis(u,v)&gt;dis(x,v) ，则 depth(u)-2 * depth(lca(u,v))&gt;depth(x)-2 * depth(lca(x,v)) ；又因为 depth(x)&gt;depth(u) ，则 depth(lca(u,v)) &lt; depth(lca(x,v)) 。 那么 x 的位置有两个可能， x 在 v 的子树中； x 不在 v 的子树中。 若是前者，则 dis(u,x) &gt; dis(u,v) 是毫无疑问的；若是后者，若 x 不在 u 的子树中，则一定存在 lca(u,v)=lca(x,u) ，显然 depth(lca(u,v)) &lt; depth(lca(x,v)) 不成立，若 x 在 u 的子树中，则又转化为前者。 因此若 dis(u,v) 为集合中距离最大的点对，其中之一一定是集合内深度最大的节点。 那么求距离的最大值，只需要求集合内所有节点和深度最大的节点之间的距离，取最大值即可。 利用在线算法求LCA，复杂度 O(N\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 200000 + 5;const int MAXM = 20;int N, K;std::vector&lt;int&gt; Son[MAXN], V[MAXN];int Depth[MAXN], Fir[MAXN];int Id[MAXN &lt;&lt; 1], cntI;void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Id[++cntI] = x; Fir[x] = cntI; rep(i, 0, SZ(Son[x])) &#123; dfs(Son[x][i], x); Id[++cntI] = x; &#125;&#125;int F[MAXM][MAXN &lt;&lt; 1];int Log[MAXN &lt;&lt; 1], Pow[MAXM];void buildST(int N) &#123; int k = log2(N); Pow[0] = 1; rep(i, 1, k + 1) &#123; Pow[i] = Pow[i - 1] &lt;&lt; 1; &#125; rep(i, 2, N + 1) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; rep(i, 1, N + 1) &#123; F[0][i] = Id[i]; &#125; rep(j, 0, k) &#123; rof(i, N + 1, 1) &#123; if (i + Pow[j] &lt;= N) &#123; if (Depth[F[j][i]] &lt; Depth[F[j][i + Pow[j]]]) &#123; F[j + 1][i] = F[j][i]; &#125; else &#123; F[j + 1][i] = F[j][i + Pow[j]]; &#125; &#125; &#125; &#125;&#125;int queryLCA(int l, int r) &#123; if (l &gt; r) &#123; std::swap(l, r); &#125; int k = Log[r - l + 1]; int &amp;a = F[k][l], &amp;b = F[k][r - Pow[k] + 1]; return Depth[a] &lt; Depth[b] ? a : b;&#125;int main() &#123; int a, f, R; scanf("%d%d", &amp;N, &amp;K); rep(i, 1, N + 1) &#123; scanf("%d%d", &amp;a, &amp;f); V[a].push_back(i); Son[f].push_back(i); if (f == 0) &#123; R = i; &#125; &#125; dfs(R, 0); buildST(cntI); rep(i, 1, K + 1) &#123; int max_dep = 0, id = 0; rep(j, 0, SZ(V[i])) &#123; if (chkMax(max_dep, Depth[V[i][j]])) &#123; id = V[i][j]; &#125; &#125; int max_dis = 0; rep(j, 0, SZ(V[i])) &#123; if (V[i][j] != id) &#123; int dep = Depth[queryLCA(Fir[V[i][j]], Fir[id])]; chkMax(max_dis, Depth[V[i][j]] + Depth[id] - dep * 2); &#125; &#125; printf("%d\n", max_dis); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SHOI2010」BZOJ 2521 最小生成树]]></title>
    <url>%2FBZOJ-2521%2F</url>
    <content type="text"><![CDATA[N 点 M 边的无向图 G 中，每次可以使一条边边权+1。求最少进行多少次操作可以使得第 id 条边一定出现在 G 的最小生成树中。 1\leq N\leq 500,1\leq M\leq 800 分析 首先题目中的“除了指定一条边，其他所有边边权-1”的操作本质上就是使该边边权+1，其他边不变。 根据Kruskal的流程，若某条边权为 x 的边 e(u,v) 出现在MST中，就说明加完所有边权小于等于它的边后， u,v 两点不联通。 在这道题中，边权小于等于 x 的边构成了子图 T ，为了保证 e 一定在MST上，必须使得 T 中 u,v 不联通，而可以进行的操作就是增加边权。 若增加后某边的边权超过 x ，这条边就相当于从 T 中被删去。也就是说删去一条边权为 w 的边，只需要将其增加至 x+1 ，即增加了 x+1-w 次。 既然是破坏 T 中两点的联通性，就想到割。最小割即为将破坏源汇点联通性所需要的最小代价。第 i 条边被割的代价为 x+1-w_i 。 那么把 u 做源点， v 做汇点，建图，图的边权为 x+1-w_i(w_i\leq x) ，求得的最小割的值即为答案。 注意加边的时候需要加双向边，因为原图是无向图。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 500 + 5;const int MAXM = 800 * 2 + 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int N, M, S, T;int H[MAXN], cntE;int Cur[MAXN], Lv[MAXN], Dis[MAXN], tim, ffffc;int Flow[MAXM &lt;&lt; 1];void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || maxf == 0) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof Cur); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof Flow); &#125; return F;&#125;std::vector&lt;std::pair&lt;int, pii&gt; &gt; V;int main() &#123; int u, v, w, id; scanf("%d%d%d", &amp;N, &amp;M, &amp;id); memset(H, -1, sizeof H); cntE = -1; --id; rep(i, 0, M) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); V.push_back(std::make_pair(w, std::make_pair(u, v))); &#125; S = V[id].second.first, T = V[id].second.second; rep(i, 0, M) &#123; if(V[i].first &lt;= V[id].first &amp; i != id) &#123; addEdge(V[i].second.first, V[i].second.second, V[id].first - V[i].first + 1); addEdge(V[i].second.second, V[i].second.first, V[id].first - V[i].first + 1); &#125; &#125; printf("%d\n", dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3031 理科男]]></title>
    <url>%2FBZOJ-3031%2F</url>
    <content type="text"><![CDATA[求 \frac{A}{B} 在 K 进制下的混循环位数以及循环节长度。 A,B,K\leq 10^{12} 分析 根据小学奥数的相关知识，如果一个混循环小数的混循环部分长度为 M ，循环节长度为 N ，那么转化成分数，分母为 10^M(10^N-1) 。 这是在十进制下的情况，在 K 进制下分母为 K^M(K^N-1) 。 那么 \frac{A}{B}=\frac{C}{K^M(K^N-1)} ，那么 B 可以写成TeX parse error: Double subscripts: use braces to clarify ，而 TeX parse error: Double subscripts: use braces to clarify ，一定存在某个 i 满足 p_i=M\times q_i 。 那么每次使 B = B / (B, K) ，直到 (B,K)=1 ，进行的次数为 max{\lceil p_i/q_i\rceil}=M ，即为混循环小数的位数。 那么剩下的问题就是如何求 N 。 令 a_i 为第 i-1 次除 B 的余数，则 a_1=A ；设 r_i 为第 i 位小数。 由于求 N 时的终止条件为 (B,K)=1 ，也就是说新的 A / B 在 K 进制下一定是个纯循环小数。 根据模运算的周期性，当 r_1=r_p 时， r[1,p-1] 就构成了循环节，其长度为 p 。 若 r_1=r_p 则一定存在 a_1=a_p 。由于TeX parse error: Double subscripts: use braces to clarify， 因此 TeX parse error: Double subscripts: use braces to clarify 。 而 a_1\equiv a_p\pmod{B} ，代入得 a_1\equiv a_1\times K^P\pmod{B} ，即 K^p\equiv 1\pmod{B} 。 N 转化为求 K 模 B 的阶的问题。 根据欧拉定理， K^{\varphi(B)}\equiv 1\pmod{B} ，即 \varphi(B) 一定为循环节的长度，但是不一定为循环节的最短长度。 若对 B 分解质因数得 B=\prod{a_i^{p_i}} ，则 \varphi(B)=\prod{(1-\frac{1}{a_i})} ，通过试除法或者Pollard-Rho+Miller-Rabin分解质因数可以求得。 那么最短循环节的长度一定为 \varphi(B) 的因数，Pollard-Rho+Miller-Rabin分解质因数后，依次通过快速幂检验 K^{\frac{\varphi{B}}{a}}\equiv 1\pmod{B} 是否成立，即可求得长度的最小值。 复杂度分析 通过gcd求混循环节长度的复杂度为 O(\log{B}) ，Pollard-Rho+Miller-Rabin的复杂度为 O(B^{\frac{1}{4}}) ，快速幂复杂度为 O(\log{\varphi(B)}) ，因此复杂度为 O(\log{B}+B^{\frac{1}{4}}+\log^2{\varphi(B)}) ，即 O(B^{\frac{1}{4}}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;ll mul(ll x, ll t, ll p) &#123; ll res = 0; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; res = (res + x) % p; &#125; x = (x + x) % p; &#125; return res;&#125;ll pow(ll x, ll t, ll p) &#123; ll res = 1; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; res = mul(res, x, p); &#125; x = mul(x, x, p); &#125; return res;&#125;bool Miller_Rabin(ll x) &#123; static ll Prime[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41&#125;; if (x == 2 || x == 3) &#123; return true; &#125; if (x &lt; 2 || (x % 6 != 1 &amp;&amp; x % 6 != 5)) &#123; return false; &#125; ll s = x - 1; while (!(s &amp; 1)) &#123; s &gt;&gt;= 1; &#125; rep(i, 0, 13) &#123; if (x == Prime[i]) &#123; return true; &#125; ll t = s, m = pow(Prime[i], s, x); while (t != x - 1 &amp;&amp; m != 1 &amp;&amp; m != x - 1) &#123; m = mul(m, m, x); t &lt;&lt;= 1; &#125; if (!(t &amp; 1) &amp;&amp; m != x - 1) &#123; return false; &#125; &#125; return true;&#125;ll Factor[1000];int cntP;ll gcd(ll a, ll b) &#123; while (b ^= a ^= b ^= a %= b); return a;&#125;ll Pollard_Rho(ll n, ll c) &#123; ll i = 1, k = 2; ll x = rand() % (n - 1) + 1, y = x; while (1) &#123; i++; x = (mul(x, x, n) + c) % n; ll d = gcd(((y - x) + n) % n, n) % n; if (d &gt; 1 &amp;&amp; d &lt; n) &#123; return d; &#125; if (y == x) &#123; return n; &#125; if (i == k) &#123; y = x; k &lt;&lt;= 1; &#125; &#125;&#125;void findFac(ll n, ll c) &#123; if (n == 1) &#123; return; &#125; if (Miller_Rabin(n)) &#123; Factor[cntP++] = n; return; &#125; ll p = n; while (p &gt;= n) &#123; p = Pollard_Rho(n, c--); &#125; findFac(n / p, c); findFac(p, c);&#125;ll getPhi(ll x) &#123; cntP = 0; findFac(x, 120); std::sort(Factor, Factor + cntP); cntP = std::unique(Factor, Factor + cntP) - Factor; double ans = x; rep(i, 0, cntP) &#123; ans *= 1 - (1.0 / Factor[i]); &#125; return ans;&#125;ll cal(ll A, ll B) &#123; ll x = getPhi(B), y = x; cntP = 0; findFac(x, 120); std::sort(Factor, Factor + cntP); cntP = std::unique(Factor, Factor + cntP) - Factor; rep(j, 0, cntP) &#123; ll &amp;i = Factor[j]; while (y % i == 0 &amp;&amp; pow(A, y / i, B) == 1) &#123; y /= i; &#125; &#125; return y;&#125;int main() &#123; ll A, B, K, T; scanf("%lld", &amp;T); while (T--) &#123; scanf("%lld%lld%lld", &amp;A, &amp;B, &amp;K); ll _gcd = gcd(A, B); A /= _gcd, B /= _gcd; int a = 0; while (true) &#123; ll _gcd = gcd(B, K); if (_gcd == 1) &#123; break; &#125; B /= _gcd; ++a; &#125; if (B == 1) &#123; printf("%d %d\n", a, 0); &#125; else &#123; printf("%d %lld\n", a, cal(K, B)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3033 太鼓达人]]></title>
    <url>%2FBZOJ-3033%2F</url>
    <content type="text"><![CDATA[给定字串长度 K ，需要构造一个长度为 M 的01串（环状），使得所有长度为 K 的子串互不相同。求 M 的最大值以及对应的字典序最小串。 K\leq 11 分析 将 k 位二进制都看成点，图中一共有 2^k 个不同的点。 每一个点可以删去第一位并在最后填充 0 或 1 转移到其它点，所有所有点的出度入度都是 2 。 这个有向图所有点出入度相等，因此存在欧拉回路，即这是一个欧拉图。 那么 M 即在该图中的回路长度的最大值，根据欧拉回路的性质， M=2^k 。 由于要求串的字典序最小，因此前 k 位皆为 0 ，在此基础上爆搜即可得到整个串的排序。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// Copyright (C) 2018 SNqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chNMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chNMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = (1 &lt;&lt; 11) + 5;int N, T;int Ans[MAXN];bool Vis[MAXN];bool dfs(int x, int y) &#123; if(Vis[x]) &#123; return false; &#125; if(y == T) &#123; return true; &#125; Ans[y] = x &amp; 1; Vis[x] = 1; if(dfs((x &lt;&lt; 1) &amp; (T - 1), y + 1) || dfs((x &lt;&lt; 1 | 1) &amp; (T - 1), y + 1)) &#123; return true; &#125; Vis[x] = 0; return false;&#125;int main() &#123; scanf("%d", &amp;N); T = 1 &lt;&lt; N; printf("%d ", T); dfs(0, 1); rep(i, 1, N) &#123; printf("0"); &#125; rep(i, 1, T - N + 2) &#123; printf("%d", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉回路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3032 七夕祭]]></title>
    <url>%2FBZOJ-3032%2F</url>
    <content type="text"><![CDATA[N\times M 的黑白矩阵中某些格子是黑色的。每次可以交换相邻两个格子的颜色，尽可能使得行与行/列与列之间的黑色格子数量相同，如果可行 ，输出最少交换次数。 1\leq N,&nbsp;M\leq 100000 。 分析 首先如果 T 不是 N,M 的倍数，那么肯定不能均分，如此可以判断输出 both 还是什么其它的情况。 可以发现行与列颜色个数相同的要求是相互独立的，可以通过左右交互使得列相同，上下交换使得行相同。 令 a_i 为第 i 行已有的黑色格子个数， x_i 为第 i 行和第 i+1 行交换的格子个数，那么能得到以下等式： \begin{equation} x_1=a_1+x_n-p\ x_2=a_2+x_1-p\ \cdots\ x_n=a_n+x_{n-1}-p\ \end{equation} 那么交换的总次数为 \sum{|x_i|} ，代入上式得 \sum{|x_i|}=\sum|a_i+x_{i-1}-p| 。 再将 x_i 的表达式代入 x_{i+1} 可得： \begin{equation} x_1=a_1+x_n-p\ x_2=a_2+(a_1+x_n-p)-p=a_1+a_2+x_n-2p\ \cdots\ x_n=a_1+a_2+\cdots+a_n+x_n-np \end{equation} 令 s_i = \sum\limits_{j=1}^{i}{a_j}-ip ，即 {a_i-p} 的前缀和，化简为 \sum{|x_i|}=|s_i+x_n| 。 根据绝对值不等式， x_n 为 s[1...n] 的中位数的相反数时，原式取最小值。 对于列同理。 具体即先统计每行/列的黑格子个数，前缀和后通过 std::nth_element() O(N) 实现。 复杂度 O(N) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;ll N, M, Q;int Col[MAXN], Row[MAXN];ll cal(int A[], ll n) &#123; static ll Num[MAXN]; ll num = Q / n, ans = 0; Num[0] = 0; rep(i, 1, n) &#123; Num[i] = 1ll * Num[i - 1] + A[i] - num; &#125; std::nth_element(Num + 1, Num + (n &gt;&gt; 1), Num + n); ll x = Num[n &gt;&gt; 1]; rep(i, 0, n) &#123; ans += (ll)std::abs(x - Num[i]); &#125; return ans;&#125;ll cal() &#123; ll sum = 0; if (Q % N == 0) &#123; sum += cal(Row, N); &#125; if (Q % M == 0) &#123; sum += cal(Col, M); &#125; return sum;&#125;int main() &#123; int x, y; scanf("%lld%lld%lld", &amp;N, &amp;M, &amp;Q); rep(i, 0, Q) &#123; scanf("%d%d", &amp;x, &amp;y); ++Row[x]; ++Col[y]; &#125; if (Q % N != 0 &amp;&amp; Q % M != 0) &#123; puts("impossible"); return 0; &#125; if (Q % N == 0 &amp;&amp; Q % M == 0) &#123; printf("both "); &#125; else if (Q % N == 0) &#123; printf("row "); &#125; else &#123; printf("column "); &#125; printf("%lld\n", cal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「IOI2003」Trail Maintenance]]></title>
    <url>%2FIOI2003-Trail%20Mainrenance%2F</url>
    <content type="text"><![CDATA[起初图有 N 个点，没有边。共进行 M 次操作，每次增加一条有边权的无向边，并查询图的连通情况。若图连通，求最小生成树的权值和，若不联通，输出 -1 。 N\leq 200,M\leq 6000 。 分析 如果每次求一遍最小生成树，复杂度为 O(M^2\log{N}) ，按照当时评测机的运行能力显然是不能通过的。 首先判断图的连通情况，只需要通过并查集维护集合的元素个数，如果小于 N ，直接输出 -1 。 当第一次得到连通图的时候，利用MST的一种算法计算得到权值和， 复杂度 O(M\log{N}) 。 树上再增加一条边，就一定会出现环，那么删去该环上的任意一条边就能得到一棵新的生成树。由于我们要得到的是最小生成树，所以删去环上权值最大的边即可满足要求。 也就说后面的操作即“破环”法，通过DFS实现。即通过无向图中环上两点，遍历该环上所有边，并找到权值最大的边，完成替换，复杂度为 O(M) 。 那么总复杂度为 O(M\log{N}+M^2) 。 题库链接 由于暂时没有找到国内OJ可以测这道题，听说LOJ暑假结束前要增加往年IOI试题，我对此表示期待。 俄罗斯的yandex OJ有历年的IOI原题，本题的链接为https://contest.yandex.ru/ioi/contest/558/problems/， 请注意一定要使用std::cout和std::endl，否则会出现Idleness limit exceeded的情况。 当然也可以选择自行下载官方数据并使用lemon等工具评测，IOI2003的数据链接为http://www.ioinformatics.org/locations/ioi03/contest/， 将ioi03替换成其它时间可以得到其它年IOI的数据，如ioi05。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 6000 + 5;struct Edge &#123; int u, v, w, mrk, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M;int sum, tot;int H[MAXN], cntE = -1;int Anc[MAXN], Rnk[MAXN];void init() &#123; rep(i, 1, N + 1) &#123; Anc[i] = i; Rnk[i] = 1; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if (x == y) &#123; return false; &#125; if (Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; if (Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, 0, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;v, u, w, 0, H[v]&#125;; H[v] = cntE; tot += merge(u, v);&#125;int Prim() &#123; static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq; static int Vis[MAXN], Dis[MAXN], Id[MAXN]; memset(Vis, 0, sizeof Vis); memset(Dis, 0x3f, sizeof Dis); Dis[1] = 0; Pq.push(std::make_pair(0, 1)); int cnt = 0, sum = 0; while (!Pq.empty() &amp;&amp; cnt &lt; N) &#123; pii x = Pq.top(); Pq.pop(); if (!chkMax(Vis[x.second], 1)) &#123; continue; &#125; if (E[Id[x.second]].w == x.first) &#123; E[Id[x.second]].mrk = 1; E[Id[x.second] ^ 1].mrk = 1; &#125; sum += x.first; ++cnt; for (int i = H[x.second]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (chkMin(Dis[v], E[i].w)) &#123; Id[v] = i; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125; &#125; return sum;&#125;int Vis[MAXN];int dfs(int id, int x, int v) &#123; Vis[x] = 1; if (id &gt;=0 &amp;&amp; E[id].v == v) &#123; return id; &#125; else &#123; for (int i = H[x]; ~i; i = E[i].nxt) &#123; if (E[i].mrk &amp;&amp; !Vis[E[i].v]) &#123; int res = dfs(i, E[i].v, v); if (res != -1) &#123; if (E[res].w &lt; E[i].w) &#123; return i; &#125; else &#123; return res; &#125; &#125; &#125; &#125; &#125; return -1;&#125;int cal(int u, int v, int w) &#123; if (!sum) &#123; sum = Prim(); &#125; else &#123; memset(Vis, 0, sizeof Vis); Vis[u] = 1; int id = dfs(-1, u, v); if (E[id].w &gt; w) &#123; addEdge(u, v, w); sum = sum - E[id].w + w; E[id].mrk = E[id ^ 1].mrk = 0; E[cntE].mrk = E[cntE ^ 1].mrk = 1; &#125; &#125; return sum;&#125;int main() &#123; int u, v, w; memset(H, -1, sizeof H); scanf("%d%d", &amp;N, &amp;M); init(); rep(i, 0, M) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); if (tot != N - 1) &#123; addEdge(u, v, w); &#125; if (tot != N - 1) &#123; puts("-1"); &#125; else &#123; printf("%d\n", cal(u, v, w)); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「PA 2014」BZOJ 3714 Kuglarz]]></title>
    <url>%2FBZOJ-3714%2F</url>
    <content type="text"><![CDATA[一排 N 个杯子中某些杯子里有小球。可以花费 C_{l,r} 来获取 [l,r] 中小球总数的奇偶性，求得知每个杯子小球状态的最小花费。 N\leq 2000 。 分析 首先注意到花费的数据范围是 10^9 ，因此可能会爆int，需要使用long long。 由于区间球总数的奇偶性满足区间加减法，即 [l,r] = [1,r]-[1,l-1] ，若已知 [1,l] 和 [1,l+1] 那么就能得到杯子 l 是否有球。 那么如果想知道每个杯子下面是否有球，最少需要购买 n 次，即 [1,1],[2,2],...[n,n] ，可以证明这是购买次数的下界。 那么把杯子抽象成点，购买关系抽象成边，由于奇偶性满足区间减法/加法，因此让 [l+1,r] 区间转化为边 i\rightarrow j ，边权为花费。 如此路径 i\rightarrow j\rightarrow k 即 [i+1,j],[j+1,k] ，合并即可知道 [i+1,k] 的奇偶性。也就是说在同一个联通分量的两个点 l,r ，我们可以通过它们之间的路径得到 [l+1,r] 的奇偶性。 易得图中出现环显然是不优的，那么考虑生成树（生成森林）。 由于可以购买任意 [l,r] 的奇偶性，也就是说生成树可以得到任意 [l,r] 的奇偶性，也就能得到任意一个杯子是否有球在下面。 而构造新图中同时构造了一个新点 0 （通过 [1,x] 得到 0\rightarrow x ） ，所以新图的生成树是 n 条边，符合之前的推论。 如此求得新图的最小生成树的权值和即为最小花费。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 2000 + 5;struct Edge &#123; int u, v, w; bool operator &lt; (const Edge &amp;x) const &#123; return w &lt; x.w; &#125;&#125; E[MAXN * MAXN];int N, cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w&#125;;&#125;int Anc[MAXN], Rnk[MAXN];void init() &#123; rep(i, 0, N + 1) &#123; Anc[i] = i; Rnk[i] = 1; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if(x == y) &#123; return false; &#125; if(Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;ll Kruskal() &#123; init(); std::sort(E + 1, E + cntE + 1); ll sum = 0; int cnt = -1; rep(i, 1, cntE + 1) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].w; if(++cnt == N) &#123; break; &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; rep(j, i, N + 1) &#123; scanf("%d", &amp;w); addEdge(i - 1, j, w); &#125; &#125; printf("%lld\n", Kruskal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 2654 tree]]></title>
    <url>%2FBZOJ-2654%2F</url>
    <content type="text"><![CDATA[在一张无向带权连通图中，每条边是黑色或白色。求一棵恰好有need条白色边的生成树，并使得权值和最小。 V\leq 50000,E\leq 100000 。 分析 直接求最小生成树显然不能保证一定出现need条白边，而最小生成树只跟边权有关，因此需要对这些边权做一些手脚。 记 f(x) 为所有白边边权增加 x 后，新图的最小生成树中白边的个数，易得 f(x) 随 x 增大而单调不递增。 证明如下：考虑Kruskal算法的流程，如果 x 增加，新排序的白边一定会集体向后移动，而黑边则会排在更前面的位置，因此生成树上白边的数量一定不会增加，最多维持不变。 那么假设白边边权全部增加 x 后新图的最小生成树的白边数量恰好为need条，权值和为 sum ，则实际生成树的权值和为 sum-need\times x 。 如此就可以对 x 二分，极端情况就是将权值最小的白边排在权值最大的黑边后面，因此 x 的上界是为 max{w_i} ， w_i 为原图的边权。 当出现黑边和白边边权相等的情况时，将白边排在前面，如此可以使得白边尽可能的多。 复杂度 O(E\log{E}\log{\max{w_i}}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 50000 + 5;const int MAXM = 100000 + 5;struct Edge &#123;int u, v, val, col;bool operator &lt; (const Edge &amp;x) const &#123; return val == x.val ? col &lt; x.col : val &lt; x.val;&#125;&#125; E[MAXM];int N, M, Q;int Anc[MAXN], Rnk[MAXN];void init() &#123;rep(i, 0, N) &#123; Anc[i] = i; Rnk[i] = 1;&#125;&#125;int findAnc(int x) &#123;return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123;x = findAnc(x), y = findAnc(y);if(x == y) &#123; return false;&#125;if(Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y;&#125; else &#123; Anc[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125;&#125;return true;&#125;pii Kruskal(int x) &#123;init();rep(i, 0, M) &#123; if(!E[i].col) &#123; E[i].val += x; &#125;&#125;std::sort(E, E + M);int sum = 0, cnt = 1, num = 0;rep(i, 0, M) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].val; if(!E[i].col) &#123; ++num; &#125; if(++cnt == N) &#123; break; &#125; &#125;&#125;rep(i, 0, M) &#123; if(!E[i].col) &#123; E[i].val -= x; &#125;&#125;return std::make_pair(num, sum - x * Q);&#125;int main() &#123;int u, v, w, c;int l, r = 0, ans = 0;scanf("%d%d%d", &amp;N, &amp;M, &amp;Q);rep(i, 0, M) &#123; scanf("%d%d%d%d", &amp;u, &amp;v, &amp;w, &amp;c); E[i] = (Edge) &#123;u, v, w, c&#125;; r = std::max(r, w + 1);&#125;l = -r;while(l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; pii x = Kruskal(m); if(x.first &gt;= Q) &#123; ans = x.second; l = m + 1; &#125; else &#123; r = m; &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2008 Oct」BZOJ 1601 灌水]]></title>
    <url>%2FBZOJ-1601%2F</url>
    <content type="text"><![CDATA[有 N 块农田，连通两块农田的花费为 W_{i,j} ，直接在农田上建水站费用为 A_i ，求使得所有农田被水灌溉的最小费用。 N\leq 300 。 分析 如果没有直接建水站的费用，那么使得整个图联通的最小代价即最小生成树的权值和。 但是由于可以建水站，且费用可能低于直接连边，因此可能会存在将图划分成多个连通块，每个块内建立最小生成树使得覆盖所有点的情况（即建多个水站）。 对于这种多个连通块的情况，有一种思路就是建一个虚拟点连接所有点，然后以该点为根构建最小生成树，如此便只需要求一棵MST。 那么对于这道题而言，显然这个根连接其他点的权值为在该点建水站的费用。 由于是张完全图，因此选择Prim算法求MST显然在常数上优于Kruskal算法，因为 E 是 V^2 级别的。 复杂度 O(E\log{V}) 或者 O(E\log{E}) ，即 O(n^2\log{n}) 。 参考代码 Prim 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 300 + 5;int N, R;struct Edge &#123; int v, w, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;typedef std::pair&lt;int, int&gt; pii;int Prim(int x) &#123; static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq; static int Vis[MAXN], Dis[MAXN]; memset(Vis, 0, sizeof Vis); memset(Dis, 0x3f, sizeof Dis); Dis[x] = 0; Pq.push(std::make_pair(0, x)); int cnt = -1, sum = 0; while (!Pq.empty() &amp;&amp; cnt &lt; N) &#123; pii x = Pq.top(); Pq.pop(); if (!chkMax(Vis[x.second], 1)) &#123; continue; &#125; sum += x.first; ++cnt; for (int i = H[x.second]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (chkMin(Dis[v], E[i].w)) &#123; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;w); addEdge(0, i, w); addEdge(i, 0, w); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; scanf("%d", &amp;w); if (i != j) &#123; addEdge(i, j, w); &#125; &#125; &#125; printf("%d\n", Prim(R)); return 0;&#125; Kruskal 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 300 + 5;int N, R;struct Edge &#123; int u, v, w, nxt; bool operator &lt; (const Edge &amp;x) const &#123; return w &lt; x.w; &#125;&#125; E[MAXN * MAXN];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;int Fa[MAXN], Rnk[MAXN];void init() &#123; rep(i, 0, N + 1) &#123; Fa[i] = i; Rnk[i] = 1; &#125;&#125;int findFa(int x) &#123; return x == Fa[x] ? x : Fa[x] = findFa(Fa[x]);&#125;bool merge(int x, int y) &#123; x = findFa(x), y = findFa(y); if(x == y) &#123; return false; &#125; if(Rnk[x] &lt; Rnk[y]) &#123; Fa[x] = y; &#125; else &#123; Fa[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;int Kruskal() &#123; int sum = 0, cnt = 0; init(); std::sort(E + 1, E + cntE + 1); rep(i, 1, cntE + 1) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].w; if(++cnt == N) &#123; break; &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;w); addEdge(0, i, w); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; scanf("%d", &amp;w); if (i &lt; j) &#123; addEdge(i, j, w); &#125; &#125; &#125; printf("%d\n", Kruskal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Miller–Rabin学习笔记]]></title>
    <url>%2FMiller-Rabin%2F</url>
    <content type="text"><![CDATA[对于检查一个数是否为素数，有不少方法。比如基于素数定义的朴素算法，复杂度 O(\sqrt{N}) ；比如当筛取 [1,N] 中所有素数时，可以通过欧拉筛实现 O(N) 的线性筛. 如果要检测大量的随机数是否为素数，这两个方法显然都不适用。对于这种情况，我们使用基于素数定理逆命题的Miller-Rabin素性测试。 前置定理 威尔逊定理 若 p 为素数，则 (p-1)!\equiv -1\pmod{p} ，其逆定理也成立。 费马小定理 定理的特殊形式 若 p 是素数， a 为正整数，且 a 与 p 互质，则 a^{p-1}\equiv 1 \pmod{p} 。 证明 由于 a 与 p 互质，则 a,2a,3a,\cdots,(p-1)a 都与 p 互质，且不存在 i\times a \equiv j\times a\pmod p(1\leq i &lt; j &lt; p) 。 因此 a,2a,3a,\cdots,(p-1)a 对 p 的取余构成 1,2,\cdots,p-1 的排列。 那么 a\times 2a\times 3a\times \cdots\times (p-1)a\equiv1\times 2\times 3\times \cdots\times (p-1) \pmod{p} 。 化简为 a^{p-1}\times(p-1)!\equiv (p-1)!\pmod{p} ，即 a^{p-1}\equiv 1\pmod{p} 。 定理的一般形式 若 p 是素数，则 a^p\equiv a\pmod{p} 。 证明 如果 a 能被 p 整除，则上式显然成立；如果不能整除，那么 gcd(a,p)=1 ，对于这种情况前面已经证明。 而费马小定理是欧拉定理的一个特殊形式， a^{\varphi(p)}\equiv 1\pmod{p} 。因为根据定义，当 p 是质数时， \varphi(p)=p-1 。 素性测试 Fermat素性测试 人们经过测试发现，如果一个数 b 满足费马小定理的逆命题（令 a=2 ， 2^{b-1}\equiv 1\pmod{b} )，那么 b 有很大可能是一个素数。 但是仅仅通过费马小定理的逆命题来判断素性显然是错误的，比如 2^{560}\equiv 1\pmod{561} 但是 561=11\times 51 ，这类数被称为伪素数。 后来人们把满足 a^{b-1}\equiv 1\pmod{b} 的合数 b 称为以 a 为底的伪素数。 基于此，有一种方法就是预处理区间内的所有伪素数，那么满足 2^{b-1}\equiv 1\pmod{b} 且不在伪素数表中的数就是素数。 然而使用这种方法过于麻烦，不用它错误率却不低，因此需要对原测试方法进行改进。 这种算法的问题在于无法鉴别出某些合数，由于费马小定理成立是素数的必要条件，因此不会出现将素数被判定成合数的情况。 既然它有一定概率判断正确，那么有一个很自然的想法。那便是用多组 a_i(a_i &lt; b) 去检查 b 是否满足 a_{i}^{b-1}\equiv 1\pmod{b} 。如果同时成立， b 是素数的概率应该会大幅增加，反之如果一次被判定为合数就确定其为合数。 简而言之，通过若干个小于待测数的正整数 a 做底数进行测试素性的方法被称为Fermat素性测试。 Miller-Rabin素性测试 二次探测定理优化 定理 若 p 是素数， x 为小于 p 的正整数，且 x^2\equiv 1\pmod{p} ，则 x 为 1 或 p-1 。 证明 x^2=(x+1)(x-1)+1 ，即 p 能整除 (x+1)(x-1) ，那么 x 只能为 1 或 -1 ，在模 p 意义下即 1 或 p-1 。 通过二次探测定理，我们可以加强费马小定理，以此降低素性探测的错误率。 假设 a 被判定为素数，即 2^{a-1}\equiv 1\pmod{a} ，那么根据二次探测定理， 2^{\frac{a-1}{2}}\bmod a 只能为 1 或 a-1 。 拿 561 举例子，虽然满足 2^{280}\bmod 561 = 1 ，但是再往下一步却发现 2^{140}\bmod 561=67 ，因此 561 不是素数。 将其转化一般形式，用于检测正整数 n​ 的素性。 1.将 n-1 表示为 d\times 2^{r} 的形式，其中 d 是一个奇数。 2.依次检查 2^{d\times 2^{r-i}}\bmod n 的值，如果 2^{d\times 2^{r-i}}\bmod n = 1 ，那么二次探测定理就继续适用于 2^{d\times 2^{r-i-1}} ，于是递增 i 直到某个 i 满足 2^{d\times {r-i}}\bmod n =n-1 或 r=i 结束。 换句话说，如果 n 是一个素数，那么一定存在 0\leq i\leq r 使得 2^{d\times 2^i}\bmod n = n-1 或 2^d\bmod n=1 。不满足的 n 一定是合数。 同理Fermat素性探测优化的想法，依然采取使用多个底数来降低错误率，即检测 2^{d\times 2^r},3^{d\times 2^r},\cdots 。 Miller-Rabin素性测试同样是不确定算法，我们把可以通过以 a 为底的Miller-Rabin测试的合数称作以 a 为底的强伪素数。 第一个以 2 为底的强伪素数为 2047 ，而第一个以 2 和 3 为底的强伪素数则达到了 1373653 ，可以直观感受到Miller-Rabin素性探测的正确率之高。 根据 Wikipedia的相关词条，如果检测的正整数在 int 中（ 2^{32} ，即 2.5\times 10^9 ），底数只需要前 4 个素数作为底数，即 2,3,5,7 ；如果是 long long （ 2^{64} ，即 1.85\times 10^{19} ），则需要前 13 个素数做底数，即 2,3,5,\cdots,41 。如此可以保证数据范围内的所有检测不会出错。 具体实现 算法流程 首先得到关于 n-1 的 r 和 d 。对于每一轮（不同底数）通过快速幂得到 a^{d} ，再依次检查 2^{d\times 2^i}\bmod n 的值 ，直到 i &gt; r 或者值为 1 或 n-1 。 若 i &gt; r ，则判定 n 为合数，否则继续测试下一个底数 。 注意事项 int 与溢出 即使素数测试的数据范围是 int，也不要吝啬使用 long long。两个 int 相乘会有溢出的可能，导致死循环或者判定结果出错。 浮点数与自然溢出 如果数据范围是 long long ，那么两个 long long 相乘溢出是很有可能的，但是没有更大的类型可以使用。 常规解决方法就是采取类似快速幂的方法，通过二进制分解来实现乘法取模，但是复杂度为 O(\log{N}) 。 还有一种 O(1) 的方法，那便是将 a\times b\bmod p 转化成 a\times b - (a / p\times b)\times p 。将 a 强转成 long double 进行计算。 更具体地： 1234long long mul(long long x, long long y, long long m) &#123; // x ^ y % mx %= m, y %= m;return (x * y - m * (long long)((long double)x / m * y) % m + m) % m;&#125; 然而我没有理解C++对溢出的处理方式，所以无法对这个函数做出准确的解释。 不过这种方法在[2012集训队互测]JZPKIL的多份题解中被使用，实测也得到了正确的结果。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;ll mul(ll x, ll y, ll m) &#123;x %= m, y %= m;return (x * y - m * (ll)((long double)x / m * y) % m + m) % m;&#125;ll pow(ll x, ll t, ll m) &#123;ll res = 1;for(; t; t &gt;&gt;= 1, x = mul(x, x, m)) &#123; if(t &amp; 1) &#123; res = mul(res, x, m); &#125;&#125;return res;&#125;bool miller_rabin(ll x) &#123;static ll Prime[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41&#125;;if(x == 2 || x == 3) &#123; return true;&#125;if(x &lt; 2 || (x % 6 != 1 &amp;&amp; x % 6 != 5)) &#123; return false;&#125;ll s = x - 1;while(!(s &amp; 1)) &#123; s &gt;&gt;= 1;&#125;rep(i, 0, 13) &#123; if(x == Prime[i]) &#123; return true; &#125; ll t = s, m = pow(Prime[i], s, x); while(t != x - 1 &amp;&amp; m != 1 &amp;&amp; m != x - 1) &#123; m = mul(m, m, x); t &lt;&lt;= 1; &#125; if(!(t &amp; 1) &amp;&amp; m != x - 1) &#123; return false; &#125;&#125;return true;&#125;int main() &#123;return 0;&#125; 参考资料 Miller_Rabin素数测试[Fermat小定理][二次探测定理][同余式][Wilson定理] | 学步园 Miller–Rabin primality test - Wikipedia 《信息学奥赛之数学一本通》]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Miller-Rabin</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3436 小 K 的农场]]></title>
    <url>%2FBZOJ-3436%2F</url>
    <content type="text"><![CDATA[有若干组关系，形如 A_i - A_j \leq x, \geq x, = x 。 求 A[1 \cdots N] 是否能满足所有关系。 分析 将三种形式转化成不等式的形式，即： a - b \leq c a-b \geq c a = b 要求这个不等式组是否有解。 通过查分约束，转换成图上问题。 根据三角不等式 d_u + d(u,v)\geq d_v ，转化一下即 d_u - d_v \geq d(u,v) 。 那么按照如下方法建图： a - b\leq c ，即 d(b,a) = c a-b \geq c ，即 d(a,b) = -c a=b ，即 d(a,b)=d(b,a)=0 。其中 d(u,v) 表示 u 到 v 的有向边的距离。 无解的条件即图中出现负环。 通过 SPFA算法， 如果一个点入队 n 次说明存在负环。 复杂度上界 O(nm) ，实际数据很弱。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;#define ONLINE_JUDGEnamespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iovoid open() &#123; freopen("farm.in", "r", stdin); freopen("farm.out", "w", stdout);&#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;int N, M;int Dis[MAXN], Cnt[MAXN], Inq[MAXN];bool spfa(int n) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; rep(i, 0, n) &#123; Inq[i] = true; Que.push(i); &#125; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; if (++Cnt[v] &gt; n) &#123; return true; &#125; &#125; &#125; &#125; &#125; return false;&#125;int main() &#123; //open(); int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if (opt == 1) &#123; addEdge(u, v, -io::gt&lt;int&gt;()); &#125; else if (opt == 2) &#123; addEdge(v, u, io::gt&lt;int&gt;()); &#125; else &#123; addEdge(u, v, 0); &#125; &#125; rep(i, 0, N + 1) &#123; addEdge(0, i, 0); &#125; if (spfa(N + 1)) &#123; puts("No"); &#125; else &#123; puts("Yes"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3211 花神游历各国]]></title>
    <url>%2FBZOJ-3211%2F</url>
    <content type="text"><![CDATA[维护一个序列，支持区间开方（向下取整）和区间求和。 序列长为 N ，共 M 次操作。 1\leq N.M\leq 100000&nbsp; ，序列中元素 0\leq A_i\leq 10^{12} 。 分析 区间开方并不满足区间加法，所以只能每个数暴力开方。 由于开方是向下取整，因此对于 1 和 0 而言，开方后还是自己，对区间和没有产生影响。 而对于最大值 10^{12} 而言，最多开 5 次方就会变成 1 ，也就是说开方对一个数的影响最多只有 5 次。 那么假如对于操作区间 [l,r] 而言，其中的元素非 0 即 1 ，那么这个区间就无需继续操作。 因此用线段树维护区间和，同时对无需继续操作的区间打标记。 每次区间开方的时候，如果两个子树都被打了标记，则无需继续；否则递归到单个元素进行开方，并检查是否成为 0 和 1 ，对其打标记；如果两个子树都被打上标记，那么就将标记上移到父亲节点。 复杂度 O(M\log{N}\log{\log{W}}) ，其中 W 为元素最大值。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct SegmentTree &#123;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r ll Sum[MAXN &lt;&lt; 2], Flag[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; Flag[rt] = Flag[rt &lt;&lt; 1] &amp; Flag[rt &lt;&lt; 1 | 1]; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = io::gt&lt;ll&gt;(); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void change(int rt, int l, int r, int a, int b) &#123; if(Flag[rt]) &#123; return ; &#125; if(l == r) &#123; Sum[rt] = sqrt(Sum[rt]); if(Sum[rt] == 1 || Sum[rt] == 0) &#123; Flag[rt] = 1; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b); &#125; if(m &lt; b) &#123; change(RT, a, b); &#125; pushUp(rt); &#125; ll querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; int m = (l + r) &gt;&gt; 1; ll res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res; &#125;&#125; T;int main() &#123; int N = io::gt&lt;int&gt;(); T.build(1, 1, N); int M = io::gt&lt;int&gt;(); while(M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); if(opt == 2) &#123; T.change(1, 1, N, l, r); &#125; else &#123; printf("%lld\n", T.querySum(1, 1, N, l, r)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6009 软件补丁问题]]></title>
    <url>%2FLOJ-6009%2F</url>
    <content type="text"><![CDATA[A 是一个数的集合，包含 n 种元素，存在 m 种方法转移。 A 能通过第 i 种方法转移，当且仅当 A 不包含 C_i 中的任何元素且包含 D_i 中的所有元素。 A 通过第 i 种方法转移的方法为：删去 A 中所有与 E_i 相同的元素， 增加所有 F_i 中 A 没有出现的元素。 通过第 i 种方法转移的代价为 P_i ，开始时 A 包含所有元素，求转移到没有元素的最小代价。如果无解，输出-1。 1\leq n\leq 20,1\leq m\leq 100 。 分析 考虑暴力转移，每次转移是 O(n\times m) 的，至多有 2^n 种状态，所以复杂度是 2^n\times n\times m 的，发现这么小的数据范围是可以过的。 发现合并、检查集合时比较麻烦，根据 n\leq 20 ，考虑转移状态压缩，用二进制下第 i 位表示第 i 个数是否存在。 位运算转移 检查 C_i 即按位与，看结果是否为 C_i 本身。 检查 D_i 还是按位与，看结果是否为 0 。 通过 E_i 转移，这个是最复杂度的，需要两步。首先按位与得到两方都有的元素，再与原数异或。 通过 F_i 转移，按位或即可。 原理 按位与，某一位为 1 当且仅当两数该位同为 1 。 按位或，某一位为 1 当且仅当两数中至少一个数该位为 1 。 异或，某一位为 1 当且仅当两数中一个数该位为 1 ，另一个数该位为 0 。 那么根据转移规则发现就是这三种运算而已，单独解释一下关于 E_i 的转移。 该操作的目的即某一位若两位都是 1 ，则置为 0 ，其他不变。 那么按位与得到所有同时为 1 的位，再根据 1 ^ 1 = 0 ^ 0 = 0、0 ^ 1 = 1 ^ 0 = 1，可以发现新数与原数异或即可满足要求。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast((x).size())typedef long long ll;const int MAXN = (1 &lt;&lt; 20) + 5;const int MAXM = 100 + 5;int F[MAXN];int n, m, Cost[MAXM];int A1[MAXM], A2[MAXM];int B1[MAXM], B2[MAXM];std::bitset Inq;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cin &gt;&gt; n &gt;&gt; m; std::string str1, str2; rep(i, 0, m) &#123; std::cin &gt;&gt; Cost[i] &gt;&gt; str1 &gt;&gt; str2; rep(j, 0, n) &#123; if(str1[j] == '+') &#123; A1[i] |= 1 &lt;&lt; j; &#125; else if(str1[j] == '-') &#123; A2[i] |= 1 &lt;&lt; j; &#125; if(str2[j] == '-') &#123; B1[i] |= 1 &lt;&lt; j; &#125; else if(str2[j] == '+') &#123; B2[i] |= 1 &lt;&lt; j; &#125; &#125; &#125; std::queue Que; memset(F, 0x3f, sizeof F); F[(1 &lt;&lt; n) - 1] = 0; Que.push((1 &lt;&lt; n) - 1); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; rep(i, 0, m) &#123; if((x &amp; A1[i]) == A1[i] &amp;&amp; (x &amp; A2[i]) == 0) &#123; int y = x &amp; B1[i]; y = y ^ x | B2[i]; if(F[y] &gt; Cost[i] + F[x]) &#123; F[y] = Cost[i] + F[x]; if(!Inq[y]) &#123; Inq[y] = 1; Que.push(y); &#125; &#125; &#125; &#125; &#125; if(F[0] == F[1 &lt;&lt; n]) &#123; F[0] = 0; &#125; std::cout &lt;&lt; F[0] &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6003 魔术球]]></title>
    <url>%2FLOJ-6003%2F</url>
    <content type="text"><![CDATA[将 [1, N] 分成 K 组序列，使得每组序列相邻两数的和为完全平方数，且序列递增。 已知 K ，求 N 的最大值，并给出一组方案（按顺序输出 K 个序列）。 1\leq K\leq 55 分析 假如 [1,N-1] 已经分好组了，那么 N 只能自成一组或者放到某个序列的最后。 所以显而易见的一点就是，当 N 增大时， K 是单调不递减的。 根据单调性，一个基本的思路便是二分答案。 考虑如何检查合法性。 由于每个点之只能和一个前驱后继匹配（或者没有），那么便相当于一个DAG（有向无环图）求最小路径覆盖（拆成 K' 条不相交的链，覆盖所有点）。 若 K' \leq K ，解就是合法的。 求解最小路径匹配数，考虑网络流算法。 将每个点 i 拆成 A_i, B_i 两部分，如果存在 i+j=k^2(i&lt; j) ，则连接 A_i 和 B_j 。 建立源汇点 S 和 T ， S 和所有 A_i 连边，所有 B_i 和 T 连边。 皆为有向边，流量限制为 1 。 最小路径覆盖数的值即节点数 N 和 S-T 最大流的差。 根据Dinic算法的流程，易得每次在残余网络上加边再找可行流，与之前的最大流相加即为新图的最大流。 所以如果只是在原图的基础上加边，不需要重复构图，单次增广复杂度 O(nm) 。 那么二分答案显然不如直接递增枚举了，因为它需要每次重新构图跑最大流，而后者只需要加边寻找可行流。 因此算法流程为：从 1 开始递增枚举 N ，寻找可行流，直到最小路径数超过 K ，答案即为 N - 1 。 至于输出答案，重新建图跑最大流，然后找到 B_i 相连的所有反向弧为 1 的边，纪录对应的点（即前驱）。 记录每个节点是否被输出。从后往前枚举序列的尾结点，如果没有标记，那么该点即为一个新序列的最后一个元素。 由于每个数的前驱只会有一个，所以从尾结点开始，每次跳到前驱，并同时输出，打上标记。 复杂度分析 枚举 N ，最大流跑二分图复杂度 O(N^2\times \sqrt{M}) ，如果利用了capacity scaling技巧，复杂度似乎会降（？），至少会快很多。 uoj blog 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 10000 + 5;const int MAXM = 180000 + 5;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Lv[MAXN], Cur[MAXN];int N, M, S, T, K = 5000, tim, ffffc, F;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;void dinic() &#123; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1;&#125;std::bitset&lt;MAXM&gt; Issquare, Vis;int Match[MAXM];std::vector&lt;int&gt; V;void solve() &#123; int n; scanf("%d", &amp;n); rep(i, 1, std::sqrt(MAXM)) &#123; Issquare[i * i] = 1; &#125; init(); S = 0; T = 8000; int cur = 0; do &#123; ++cur; addEdge(S, cur, 1); addEdge(cur + K, T, 1); rep(i, 1, cur) &#123; if(Issquare[i + cur]) &#123; addEdge(i, cur + K, 1); &#125; &#125; dinic(); &#125; while(cur - F &lt;= n); printf("%d\n", cur - 1); init(); rep(i, 1, cur) &#123; addEdge(S, i, 1); addEdge(i + K, T, 1); rep(j, 1, i) &#123; if(Issquare[i + j]) &#123; addEdge(j, i + K, 1); &#125; &#125; &#125; dinic(); rof(i, K + cur, K + 1) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(E[j].f) &#123; Match[E[j].v] = i - K; break; &#125; &#125; &#125; rep(i, 1, cur) &#123; if(Vis[i]) &#123; continue; &#125; V.clear(); for(int j = i; j; j = Match[j]) &#123; V.push_back(j); Vis[j] = true; &#125; rep(j, 0, SZ(V)) &#123; printf("%d ", V[j]); &#125; printf("\n"); &#125;&#125;&#125;int main() &#123; dinic::solve(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>最小路径覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6002 最小路径覆盖问题]]></title>
    <url>%2FLOJ-6002%2F</url>
    <content type="text"><![CDATA[给一个 N 个点， M 条边的DAG，求最小路径覆盖数及其方案。 1\leq N\leq 150,1\leq M\leq 6000 分析 弱化版【P2765 魔术球问题】 随便搞即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 500 + 5;const int MAXM = 6000 + 5;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM &lt;&lt; 1], Cur[MAXN], Lv[MAXN], Dis[MAXN];int N, M, S, T, K = 100, ffffc, tim;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); scanf("%d%d", &amp;N, &amp;M); S = 0, T = 500; int u, v; rep(i, 1, N + 1) &#123; addEdge(S, i); addEdge(i + K, T); &#125; rep(i, 0, M) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v + K); &#125;&#125;std::bitset&lt;MAXN&gt; Vis;int Match[MAXN];void maxFlow() &#123; init(); int ans = N - dinic(); rep(i, K + 1, K + N + 1) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(E[j].f &amp;&amp; E[j].v != T) &#123; Match[E[j].v] = i - K; break; &#125; &#125; &#125; rep(i, 1, N + 1) &#123; if(Vis[i]) &#123; continue; &#125; for(int j = i; j; j = Match[j]) &#123; printf("%d ", j); Vis[j] = true; &#125; printf("\n"); &#125; printf("%d\n", ans);&#125;&#125;int main() &#123; dinic::maxFlow(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>最小路径覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6011 运输问题]]></title>
    <url>%2FLOJ-6011%2F</url>
    <content type="text"><![CDATA[有 N 个仓库，库存为 A_i ， M 个商店，需求为 B_i ，保证 \sum{A_i} =\sum{B_i} 。 第 i 个仓库每单位运送给第 j 个商店的费用为 C_{i,j} 。 求满足商店需求所需的最小运费。 1\leq n,m\leq 100 分析 仓库商店之间，费用建成 -C_{i,j} ，限制为 INF 。 S 连接所有仓库，所有商店连接 T ，限制分别为 A_i 和 B_i ，费用为 0 。 跑 S-T 最小费用最大流 C ，答案即为 -C 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 20000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, C, F;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE; &#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int X[MAXN], Y[MAXN], Z[MAXN][MAXN];void init() &#123; int x; std::cin &gt;&gt; M &gt;&gt; N; cntE = -1; memset(H, -1, sizeof H); S = 0, T = N + M + 1; rep(i, 1, M + 1) &#123; std::cin &gt;&gt; X[i]; addEdge(S, i, X[i], 0); &#125; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; Y[i]; addEdge(i + M, T, Y[i], 0); &#125; rep(i, 1, M + 1) &#123; rep(j, 1, N + 1) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(i, j + M, INT_MAX, Z[i][j]); &#125; &#125;&#125;void init2() &#123; cntE = -1; memset(H, -1, sizeof H); S = 0, T = N + M + 1; rep(i, 1, M + 1) &#123; addEdge(S, i, X[i], 0); &#125; rep(i, 1, N + 1) &#123; addEdge(i + M, T, Y[i], 0); &#125; rep(i, 1, M + 1) &#123; rep(j, 1, N + 1) &#123; addEdge(i, j + M, INT_MAX, -Z[i][j]); &#125; &#125;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6012 分配问题]]></title>
    <url>%2FLOJ-6012%2F</url>
    <content type="text"><![CDATA[有 n 件工作要分配给 n 个人做。第 i 个人做第 j 件工作产生的效益为 c_{i,j} 。 试设计一个将 n 件工作分配给 n 个人做的分配方案，使产生的总效益最大。 每个人只能做一个工作。 1\leq n\leq 100 分析 两次建图，限制均为 1 ，费用分别为 C_{i,j} 和 -C_{i,j} ，跑最小费用最大流即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 20000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, C, F;int Lp[MAXN], Le[MAXN];int Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;int Z[MAXN][MAXN];void init() &#123; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N; S = 0, T = N * 2 + 1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); addEdge(i + N, T, 1, 0); rep(j, 1, N + 1) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(i, j + N, 1, Z[i][j]); &#125; &#125;&#125;void init2() &#123; memset(H, -1, sizeof H); cntE = -1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); addEdge(i + N, T, 1, 0); rep(j, 1, N + 1) &#123; addEdge(i, j + N, 1, -Z[i][j]); &#125; &#125;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6010 数字梯形]]></title>
    <url>%2FLOJ-6010%2F</url>
    <content type="text"><![CDATA[一个梯形，第一行有 m 个数，共 n 行，每行比上一行多一个数，每个数有一个权值 A_i 。 从第一行的 m 个数开始，每次向左下或右下移动，到第 n 层结束。 求以下三种情况的权值和最大值： m 条路径不相交 m 条路径可以在数字处相交 m 条路径可以在数字和边处相交 1\leq n,m\leq 20 分析 一道三合一，主要考察建图如何去限制流量走向。 对于不相交的情况，很显然，还是拆点 i\rightarrow(X_i,Y_i) ，然后每个点的 X_i 向下面的两个点 Y_j 连一条限制为 1 ，费用为 -A_i 。最后 S 连接第一行，最后一行连接 T ，跑费用流。 对于可以在数字处相交的情况就可以不用拆点了。直接连接 (i, j) ，限制为 1 ，费用为 -A_i 。注意最后一行连接 T 的限制为 INF ，因为可以多个数最后均到达该点。 对于没有限制的情况，将第二次建图的所有流量限制均改成 INF 即可（ S 到第一行除外）。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 3000 + 5;const int MAXM = 40000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, C, F;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE; &#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int Z[MAXN][MAXN];int getId(int x, int y) &#123; return (x - 1) * (N + M) + y;&#125;void init() &#123; int x; std::cin &gt;&gt; M &gt;&gt; N; cntE = -1; memset(H, -1, sizeof H); S = 0, T = (N + M) * N * 3; int up = (N + M) * N * 2; rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(getId(i, j), getId(i, j) + up, 1, 0); &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j) + up, T, 1, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j) + up, getId(i + 1, j), 1, -Z[i][j]); addEdge(getId(i, j) + up, getId(i + 1, j + 1), 1, -Z[i][j]); &#125; &#125; &#125;&#125;void init2() &#123; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j), T, INT_MAX, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j), getId(i + 1, j), 1, -Z[i][j]); addEdge(getId(i, j), getId(i + 1, j + 1), 1, -Z[i][j]); &#125; &#125; &#125;&#125;void init3() &#123; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j), T, INT_MAX, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j), getId(i + 1, j), INT_MAX, -Z[i][j]); addEdge(getId(i, j), getId(i + 1, j + 1), INT_MAX, -Z[i][j]); &#125; &#125; &#125;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; mcmf::init3(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6224 深海机器人问题]]></title>
    <url>%2FLOJ-6224%2F</url>
    <content type="text"><![CDATA[一个 N * M 的网格图，每条边都存在权值。 现有 A 个起点， B 个终点。 第 i 个起点可以作为 X_i 条路径的起点，第 i 个终点可以作为 Y_i 条路径的终点。保证 \sum{X_i}=\sum{Y_i} 。 每条路径只能向右或者向上移动，可以重复经过某一条边或者某个点。 求这 \sum{X_i} 条路径覆盖的所有边的最大权值和（同一条边的权值只算一次）。 1\leq N,M\leq 15 1\leq A\leq 4 1\leq B\leq 6 分析 既然是求最大价值，第一反应自然是连负边跑最小费用最大流。 边权算一次，那就流量限制置为 1 ，但是可以多次经过，那就再连一条花费为 0 ，不限流量的边。 S 向所有起点连流量限制为 A_i 的边，终点同理。 跑最小费用最大流。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 20 * 20 * 2;const int MAXM = MAXN;const int INF = 1e9 + 7;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int N, M, S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];std::bitset&lt;MAXN&gt; Inq;int getId(int x, int y) &#123; return x * (M + 1) + y;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge)&#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; int a, b, k, x, y; std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; N &gt;&gt; M; S = (N + 1) * (M + 1), T = S + 1; memset(H, -1, sizeof H); cntE = -1; rep(i, 0, N + 1) &#123; rep(j, 0, M) &#123; std::cin &gt;&gt; x; addEdge(getId(i, j), getId(i, j + 1), 1, -x); addEdge(getId(i, j), getId(i, j + 1), INF, 0); &#125; &#125; rep(i, 0, M + 1) &#123; rep(j, 0, N) &#123; std::cin &gt;&gt; x; addEdge(getId(j, i), getId(j + 1, i), 1, -x); addEdge(getId(j, i), getId(j + 1, i), INF, 0); &#125; &#125; rep(i, 0, a)&#123; std::cin &gt;&gt; k &gt;&gt; x &gt;&gt; y; addEdge(S, getId(x, y), k, 0); &#125; rep(i, 0, b) &#123; std::cin &gt;&gt; k &gt;&gt; x &gt;&gt; y; addEdge(getId(x, y), T, k, 0); &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x; Le[v] = i; if(!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int mcmf() &#123; init(); while(spfa()) &#123; int f = INF; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += f * Dis[T]; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main()&#123; std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6014 最长 k 可重区间集]]></title>
    <url>%2FLOJ-6014%2F</url>
    <content type="text"><![CDATA[直线上有 N 个开区间 (x_i,y_i) ，从中选取任意多个，满足该直线上任意一个点最多被 K 个区间覆盖，求选取区间的最大长度和。 1\leq N\leq 500 1\leq K\leq 3 分析 O(N^2) 建图方法 以区间长度作为费用，目标即让总费用最大。 每个区间只能选一次，所以要拆点。 问题在于如果保证任何一个点至多被覆盖 K 次。 显然，如果任意选择 K 个区间，那么不可能出现某个点被覆盖超过 K 次。 如果选择一个区间，再去选择一个与它不相交的区间，那么依然不会出现某个点被覆盖超过 K 次的情况。 那么如果在这个基础上再选择一个与另一个区间不相交的区间呐？是否会出现某个点被覆盖 K + 1 次的情况？ 令开始选取的区间为 A_1....A_K ，第一次增加了与 A_1 不相交的区间 B_1 ，第二次增加了与 A_2 不相交的区间 B_2 ，以 X{a,b,c}=s 表示区间集合 {a,b,c} 覆盖的点中，被覆盖次数最大次数为 s 。 根据之前的描述， X{A_1...A_K} \leq K ， X{A_1,B_1,A_2...A_k} \leq K 。 由于 A_1\cap B_1=\emptyset ，所以 X{B_1,A_2...A_k} \leq K 。 如果增加 B_2 之后覆盖了某个点 K + 1 次，那么就是 X{A_1,B_1,A_2,B_2,A_3...A_K} = K+1 。 由于 A_2\cap B_2=\emptyset ，所以等价为 X{A_1,B_1,B_2...A_k} = K+1 。 集合中共有 K+1 个数，若满足上式，即需要其中任意两个集合都有交，且所有交集的交不为 \emptyset 。 但是 A_1\cap B_1=\emptyset ，所以上式一定不成立。 也就是说增加 B_2 依然不会出现某个点被覆盖 K+1 次。 同理按照选取不相交区间的原则增加 B_3 ， B_4 ... ，都不会出现某个点被覆盖 K+1 次的情况。 所以说问题转化为从 N 个区间中任意选取 K 个，选择完某区间后可以再选择一个与它不相交的区间，求选取的所有区间总长度最大值。 转化成网络流模型： 每个区间拆点成 X_i,Y_i S 向 S' 连一条流量限制为 K ，费用为 0 的边 S' 向所有 X_i 连接流量限制为 1 ，费用为 0 的边 X_i 向 Y_i 连接流量限制为 1 ，费用为区间长度的边 Y_i 向 X_j 连接流量限制为 1 ，费用为 0 的边，其中 i\leq j 且区间 i,j 不相交 所有 Y_i 向 T 连接一条流量限制为 1 ， 费用为 0 的边。 求最大费用最大流。 费用取反跑最小费用流，其结果再取反即为答案。 O(N\times \log{N}) 建图方法 根据 O(N^2) 建图方法，我们明白了网络流模型转化的核心，即共 K 条流量，任意一个点可以流向与其不相交的区间所对应的点，跑费用流。 建图的瓶颈在于找到所有不相交的区间，需要 O(N^2) 的遍历。 比较显然的一点，就是如果按照左端点排序区间，如果 (x_i,y_i) 与 (x_j,y_j) 不相交，且 j-i 最小，那么对于区间 (x_k,y_k)(k\geq j) ，一定也不和 (x_i,y_i) 相交。 也就是说我们可以在 O(\log{N}) 的时间内找到第一个与 (x_i,y_i) 不相交的区间。 那么如果能让流量到达 (x_j,y_j) 后“自然地向后流“，就相当于可以流到所有和 (x_i,y_i) 不相交的区间。 想象整个直线是一条河，入河口流入 K 点流量。这条河可以通过无限流量且费用为 0 。每个节点在对应的坐标上，是一块河中一块小陆地。那么在所有区间的左右端点之间架一座桥，允许 1 的流量通过，费用为区间长度。 流量从 x_i\rightarrow y_i 之后，这一点流量可以选择再跨越后面任何一座没有流量经过的桥，或者一直沿着河流，直到河的尽头。 这么流依然保证了其合法性，但是建图复杂度大大降低了。 离散化所有结点，即 h(a) 为 a 的重标号， 0 和 n' 分别为第一个和最后一个点 h(x_i)\rightarrow h(y_i) ，费用为 y_i-x_i ，流量限制为 1 i\rightarrow i+1 ，费用为 0 ，流量限制为无穷 s\rightarrow 0 ，费用为 0 ，流量限制为 K n'\rightarrow T ，费用为 0 ，流量限制为 K 求 S-T 最大费用最大流，方法同理 离散化复杂度 O(N\times \log{N}) ，求 h(a) 的复杂度 O(\log{N}) ，所以建图复杂度为 O(N\times \log{N}) 。 注意事项 从来没有说过 y_i\geq x_i 参考代码 法一 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1000 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int S, T, F, C;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; static int N, K; static std::pair&lt;int, int&gt; P[MAXN]; scanf("%d%d", &amp;N, &amp;K); S = N * 2, T = N * 2 + 2; addEdge(S, S + 1, K, 0); rep(i, 0, N) &#123; scanf("%d%d", &amp;P[i].first, &amp;P[i].second); if(P[i].first &gt; P[i].second) &#123; std::swap(P[i].first, P[i].second); &#125; &#125; std::sort(P, P + N); rep(i, 0, N) &#123; addEdge(S + 1, i, 1, 0); addEdge(i + N, T, 1, 0); addEdge(i, i + N, 1, P[i].first - P[i].second); rep(j, i + 1, N) &#123; if(P[j].first &gt;= P[i].second) &#123; addEdge(i + N, j, 1, 0); &#125; &#125; &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += Dis[T] * f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125; 法二 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1000 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int S, T, F, C;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; static int N, K; static std::pair&lt;int, int&gt; P[MAXN]; scanf("%d%d", &amp;N, &amp;K); static int Hash[MAXN], total = 0; rep(i, 0, N) &#123; scanf("%d%d", &amp;P[i].first, &amp;P[i].second); if(P[i].first &gt; P[i].second) &#123; std::swap(P[i].first, P[i].second); &#125; Hash[total++] = P[i].first; Hash[total++] = P[i].second; &#125; std::sort(Hash, Hash + total); total = std::unique(Hash, Hash + total) - Hash; S = total, T = total + 1; addEdge(S, 0, K, 0); addEdge(total - 1, T, K, 0); rep(i, 1, total) &#123; addEdge(i - 1, i, INT_MAX, 0); &#125; rep(i, 0, N) &#123; int x = std::lower_bound(Hash, Hash + total, P[i].first) - Hash; int y = std::lower_bound(Hash, Hash + total, P[i].second) - Hash; addEdge(x, y, 1, P[i].first - P[i].second); &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += Dis[T] * f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6227 最长 k 可重线段集问题]]></title>
    <url>%2FLOJ-6227%2F</url>
    <content type="text"><![CDATA[有 N 条开线段，可以从中选择任意数量的开线段，使得对于任意直线 x=p ，至多有 K 条线段和它有交点。求选取的开线段的长度之和的最大值。 1\leq N\leq 500 1\leq K\leq 13 分析 和【LOJ6227 最长 k 可重线段集问题】几乎是一样的，但是有一个细节区分了这两道题（标程也没注意到）。 那就是对于某一条在直线 x=p 上的开线段，和一条左/右端点为 (p,q) 的开线段是没有交点的。 还要注意的一点，就是如果是 O(N\times\log{N}) 的建图方法，会出现自环且负环，需要特殊处理，比较麻烦，所以不如直接拆点跑网络流。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1200 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 1];int S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];bool Inq[MAXN];bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;struct Point &#123; int x, y, c; inline bool operator &lt; (const Point&amp; a) const &#123; return x == a.x ? y &lt; a.y : x &lt; a.x; &#125;&#125;;#define sqr(x) (x) * (x)void init() &#123; memset(H, -1, sizeof H); cntE = -1; int N, K; ll x0, x1, y0, y1; scanf("%d%d", &amp;N, &amp;K); static Point P[MAXN]; rep(i, 0, N) &#123;g scanf("%lld%lld%lld%lld", &amp;x0, &amp;y0, &amp;x1, &amp;y1); P[i] = (Point) &#123;std::min(x0, x1), std::max(x0, x1), std::sqrt(sqr(x0 - x1) + sqr(y0 - y1))&#125;; &#125; std::sort(P, P + N); S = N * 2, T = N * 2 + 2; addEdge(S, S + 1, K, 0); rep(i, 0, N) &#123; addEdge(S + 1, i, 1, 0); addEdge(i + N, T, 1, 0); addEdge(i, i + N, 1, -P[i].c); rep(j, i + 1, N) &#123; if(P[j].x &gt;= P[i].y &amp;&amp; !(P[i].x == P[i].y &amp;&amp; P[j].x == P[j].y &amp;&amp; P[i].x == P[j].x)) &#123; addEdge(i + N, j, 1, 0); &#125; &#125; &#125;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += f * Dis[T]; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6225 火星探险问题]]></title>
    <url>%2FLOJ-6225%2F</url>
    <content type="text"><![CDATA[Q\times P 的网格图，起点位于左上角 (1,1) ，终点位于右下角 (Q,P) 。 现在有 N 个机器人从起点出发，每次只能向右或向下移动一格，且不能碰到障碍物。 每个格子有三种可能的状态：空地、有标本、有障碍物。 第一个抵达有标本的格子的机器人会取走该格子的标本，每个格子可以同时容纳多个机器人。 如果不能抵达终点，路上收集的标本将作废。 给出每个机器人的移动方案，使得采集到最多的标本，且最多的机器人达到终点。 P,Q\leq 35 分析 显然是最大费用最大流。流量是机器人的个数，保证每个机器人都能到终点，费用是标本数。 输出方案也很简单，直接就是在回溯更新每条边流量的时候的存储路径上的点，然后再从起点到终点，比照一下相连两个点的位置关系，按照要求输出即可。 不过需要注意的一点是，很可能跑不到 N 次就已经得到最大费用最大流了，所以剩下的机器人只需要随便找一条合法的路径输出。比较偷懒的方法就是剩下的全部输出最后一次增广的路径方案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 35 * 40 * 2 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125; E[MAXM &lt;&lt; 1];int N, P, Q, S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];bool Inq[MAXN];bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;int A[MAXN][MAXN];int getId(int x, int y) &#123; return x * P + y;&#125;bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; x &lt;= Q &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= P &amp;&amp; A[x][y] != 1;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N &gt;&gt; P &gt;&gt; Q; rep(i, 1, Q + 1) &#123; rep(j, 1, P + 1) &#123; std::cin &gt;&gt; A[i][j]; &#125; &#125; int up = getId(Q, P); S = 0, T = up * 2; addEdge(S, getId(1, 1), N, 0); rep(i, 1, Q + 1) &#123; rep(j, 1, P + 1) &#123; if (A[i][j] == 2) &#123; addEdge(getId(i, j), getId(i, j) + up, 1, -1); &#125; if (A[i][j] != 1) &#123; addEdge(getId(i, j), getId(i, j) + up, INT_MAX, 0); if (check(i, j + 1)) &#123; addEdge(getId(i, j) + up, getId(i, j + 1), INT_MAX, 0); &#125; if (check(i + 1, j)) &#123; addEdge(getId(i, j) + up, getId(i + 1, j), INT_MAX, 0); &#125; &#125; &#125; &#125;&#125;void mcmf() &#123; static std::stack&lt;int&gt; Stk; static int A[MAXN], total; init(); int cnt = 1; while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); if(i &lt;= getId(Q, P)) &#123; Stk.push(i); &#125; &#125; F += f; C += Dis[T] * f; int last = Stk.top(); Stk.pop(); total = 0; while (!Stk.empty()) &#123; int x = Stk.top(); Stk.pop(); if (x == last + 1) &#123; A[total++] = 1; &#125; else &#123; A[total++] = 0; &#125; last = x; &#125; rep(j, 0, total) &#123; std::cout &lt;&lt; cnt &lt;&lt; " " &lt;&lt; A[j] &lt;&lt; std::endl; &#125; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; ++cnt; &#125; rep(i, cnt, N + 1) &#123; rep(j, 0, total) &#123; std::cout &lt;&lt; i &lt;&lt; " " &lt;&lt; A[j] &lt;&lt; std::endl; &#125; &#125;&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6008 餐巾计划]]></title>
    <url>%2FLOJ-6008%2F</url>
    <content type="text"><![CDATA[共 n 天，每天需要 R_i 块干净的纸巾。纸巾用完一次就脏了，可以选择清洗后使用或不再使用。 已知新买纸巾的价格为 p ，花 m 天快洗纸巾的价格为 f ，花 n 天慢洗纸巾的价格为 s 。 求最小花费。 n \leq 2000 ， R_i \leq 10^7 ， p,f,s \leq 10^4 。 分析 考虑网络流算法。 第一天为源点 S ，最后一天为汇点 T ，纸巾为流量，价格为费用。 通过简单贪心可以得到每天的干净纸巾刚好为所需要的数量时，总花费一定最小。 由此问题转化为求建图后跑满流的情况下的最小费用。 最小费用最大流。 考虑如何使得满足每天恰好使用 R_i 块纸巾。 将每天拆成两个点，即使用前 X_i 和使用后 Y_i 。 建图方法如下（ (c, f) 即费用为 c 、流量为 f 的边）： S 与 X_i 连接一条 (0, V_i) 的边，即第 i 天纸巾需要的数量； Y_i 与 T 连接一条 (0, V_i) 的边，即第 i 天使用的纸巾的数量； S 与 Y_i 连接一条 (p, inf) 的边，即第 i 天购买新纸巾，花费为 p ； X_i 与 X_{i+1} 连接一条 (0, inf) 的边，即第 i 天没用完的纸巾留给第 i + 1 天，没有费用； X_i 与 Y_{i+m} 连接一条 (f, inf) 的边，即第 i 天快洗后的纸巾第 i+m 天拿到干净纸巾，花费为 f ； X_i 与 Y_{i+n} 连接一条 (s, inf) 的边，即第 i 天慢洗后的纸巾第 i+n 天拿到干净纸巾，花费为 s 。 由于所有与源点 S 的所有边都与每一个 X_i 相连，由此保证了每天都有 R_i 的流量流入，即 R_i 块新纸巾。 由于所有与汇点 T 的所有边都与 Y_i 相连，由此限制了每天必须有 R_i 的流量流出（因为是跑最大流）。 可以发现所有所有与 T 相连的边 e ，边权和 \sum{e_f}=\sum{R_i} ，保证了最大流为所需纸巾数之和，即上文说道的通过贪心得到最小费用的情况。 至于购买新纸巾，快洗和慢洗就都不难理解了。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156// Copyright 2018, Skqliao// 最小费用最大流#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace mcmf &#123;const int MAXN = 4000 + 5;const int MAXM = MAXN * 3;const ll INF = LLONG_MAX;struct Edge &#123; int v, nxt; ll c, f;&#125; E[MAXM &lt;&lt; 1];int S, T;int Path[MAXN &lt;&lt; 1], Pre[MAXN &lt;&lt; 1];int H[MAXN &lt;&lt; 1], cntE;void addEdge(int u, int v, ll c, ll f) &#123; E[++cntE] = (Edge) &#123;v, H[u], c, f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], -c, 0&#125;; H[v] = cntE;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); int N = io::gt&lt;int&gt;(); S = 0, T = N &lt;&lt; 1 | 1; rep(i, 1, N + 1) &#123; ll f = io::gt&lt;ll&gt;(); addEdge(0, i, 0, f); addEdge(i + N, T, 0, f); &#125; rep(i, 1, N) &#123; addEdge(i, i + 1, 0, INF); &#125; int p = io::gt&lt;int&gt;(); int m = io::gt&lt;int&gt;(), f = io::gt&lt;int&gt;(); int n = io::gt&lt;int&gt;(), s = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; addEdge(0, i + N, p, INF); &#125; rep(i, 1, N - m + 1) &#123; addEdge(i, i + m + N, f, INF); &#125; rep(i, 1, N - n + 1) &#123; addEdge(i, i + n + N, s, INF); &#125;&#125;bool Vis[MAXN];ll Dis[MAXN];bool dijkstra() &#123; std::queue&lt;int&gt; pq; memset(Dis, 0x3f, sizeof Dis); memset(Vis, 0, sizeof Vis); Dis[S] = 0; pq.push(S); while (!pq.empty()) &#123; int x = pq.front(); pq.pop(); Vis[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Path[v] = i, Pre[v] = x; if (!Vis[v]) &#123; pq.push(v); Vis[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != Dis[T + 1];&#125;ll mcmf() &#123; ll cost = 0; init(); while (dijkstra()) &#123; ll f = LLONG_MAX; for (int i = T; i != S; i = Pre[i]) &#123; f = std::min(f, E[Path[i]].f); &#125; cost += f * Dis[T]; for (int i = T; i != S; i = Pre[i]) &#123; E[Path[i]].f -= f; E[Path[i]^1].f += f; &#125; &#125; return cost;&#125;&#125;int main() &#123; printf("%lld\n", mcmf::mcmf()); return 0;&#125; 体会与心得 选择spfa还是Dijkstra真是玄学，有时前者快得多，有时反之 问题主要在于转换模型，对本题而言核心在于拆点，从而将状态分成两部分 贪心那一步比较显然但是很重要，它使得求解的模型从有上下界的网络流变成了最大流]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6013 负载平衡]]></title>
    <url>%2FLOJ-6013%2F</url>
    <content type="text"><![CDATA[G公司有 N 个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量为 A_i 。 如何用最少搬运量可以使 N 个仓库的库存数量相同。 搬运货物时，只能在相邻的仓库之间搬运。 1\leq N\leq 100 分析 两个任务，一是要保证最后每个点的权值相同，二是在此基础上使得总转移量最低。 那么状态量显然也是二维的。 考虑费用流，用流量保证任务一能完成，用费用使得任务二的结果最小。 每个点的最后状态为 T=\frac{\sum{A_i}}{N} ，需要额外流入/转出流量 |T-A_i| 。 先考虑流量。 常规思路，拆点 i\rightarrow(X_i, Y_i) ，即开始和结束两个状态。 建立源点 S 和汇点 T ，如果 A_i &lt; T ，连接 S \rightarrow X_i ，流量限制为 T - A_i ，否则连接 Y_i\rightarrow T ，流量限制为 A_i - T 。 如此便保证了跑出最大流之后，每个点的权值最终一定为平均值（对盈余和缺少的流量强制流入流出）。 然后看费用。 每个点只能向左右两个点转移。 有两种情况。 一是，当前转移到 j 的流量只是路过，即 j 是中转站； 二是，转移的流量就是给 j 的，即 j 是目的地。 根据拆点后的状态，显然对于两种情况分别连接 X_i\rightarrow X_j 和 X_i\rightarrow Y_j 。 费用为 1 ，流量限制为 INF 。 对于为了满足任务一建的边，显然费用为 0 。 S-T 最小费用最大流之最小费用即为答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 1000 + 5;const int INF = INT_MAX / 3;namespace mcmf &#123;const int MAXN = 200 + 5;const int MAXM = 5000 + 5;struct Edge &#123; int v, f, c, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, cost, flow;int Pe[MAXN], Pv[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, f, c, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, -c, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); memset(Inq, 0, sizeof Inq); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Pe[v] = i, Pv[v] = x; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void init() &#123; static int A[MAXN]; memset(H, -1, sizeof H); cntE = -1; int total = 0; std::cin &gt;&gt; N; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; A[i]; total += A[i]; &#125; total /= N; S = 0, T = N * 2 + 1; rep(i, 1, N + 1) &#123; if(A[i] &lt; total) &#123; addEdge(S, i, total - A[i], 0); &#125; else &#123; addEdge(i + N, T, A[i] - total, 0); &#125; int lst = i - 1, nxt = i + 1; if(i != 1) &#123; addEdge(i, lst, INF, 1); addEdge(i, lst + N, INF, 1); &#125; if(i != N) &#123; addEdge(i, nxt, INF, 1); addEdge(i, nxt + N, INF, 1); &#125; &#125; addEdge(1, N, INF, 1); addEdge(1, N + N, INF, 1); addEdge(N, 1, INF, 1); addEdge(N, 1 + N, INF, 1);&#125;int mcmf() &#123; init(); while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Pv[i]) &#123; E[Pe[i]].f -= f; E[Pe[i] ^ 1].f += f; &#125; &#125; return cost;&#125;&#125;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6122 航空路线问题]]></title>
    <url>%2FLOJ-6122%2F</url>
    <content type="text"><![CDATA[有 N 个结点， M 条无向边。现想从结点 1 走到 N 再走回 1 ，且每个结点至多只能访问一次（除了结点 1 ）。 求该路径的最大长度并顺序输出途经结点，如果不存在，输出No Solution! 1\leq N\leq 100 分析 首先将问题转化一下，由于除了起点可以经过两次，其他结点均只能经过一次。那么问题可以等价于寻找两条起点为 1 ，终点为 N 的不相交路径（除了起点终点），使得两条路径的长度和最大。 构造跑最大流显然是不够的，因为最大流只会使得流量最大，而不会关心沿途结点个数。 构造图的方法很简单，依旧是拆点，然后边流量限制置为 1 ，起点终点限制置为 2 。 如果存在路径 (u, v) ，连边 (u.y, v.x) ，即访问完 u 后可以访问 v 。 然后连接 (i.x, i.y) ， (S, 1.x) ， (N.y, T) ，构图完成。 但是它和最大流是有关系的，因为存在路径条数为 2 的限制，即最大流为 2 。 对于无解情况很好判断，最大流 F &lt; 2 时，即不存在两条路径，无解。 那么问题在于如何使得途径点数最多。 考虑再引入一维，使得在满足最大流最大的情况下，该值最大。 想到费用流。由于途径的每个点，根据拆点的思想，一定会从“未访问”到“访问”，而且根据限制，每个点至多访问一次。 那么将 (i.x, i.y) 的费用置为 1 ，其他边均为 0 , 那么 S-T 跑得的费用即为经过点的个数。 最小费用最大流使用 SPFA 根据EK的思路增广即可，求最大费用也很简单，费用 c_i 置成 -c_i 即可。 关于路径输出，我们可以发现如果增广路途经 i.y(i \not= N) ，那么它一定是通过某 j.x 而来，而且这个 j 是唯一的（流量限制为 1 ）。那么从 T 开始寻找两条增广路，分别纪录前驱后继，最后一个正序，一个逆序输出即可。 注意的点： 可能会存在边 (1, N) ，那么这个时候 1-&gt;N-&gt;1 是一条合法路径，但是按照之前的方法建图最大流不一定是 2 （比如 1 到 N 只存在这条路径，最大流为 1 ）。那么对于这条边，流量置为 2 。输出路径的时候如果发现不存在两条增广路，直接输出 1\ N\ 1 即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 200 + 5;const int MAXM = 5000 + 5;struct Edge &#123; int v, f, c, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, cost, flow;int Pe[MAXN], Pv[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, f, c, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, -c, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); memset(Inq, 0, sizeof Inq); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Pe[v] = i, Pv[v] = x; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;std::map&lt;std::string, int&gt; Map;std::vector&lt;std::string&gt; Vs;void init() &#123; std::string str, str2; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N &gt;&gt; M; S = 0, T = N * 2 + 1; Vs.push_back(""); rep(i, 1, N + 1) &#123; std::cin &gt;&gt; str; Map[str] = i; if(i != 1 &amp;&amp; i != N) &#123; addEdge(i, i + N, 1, 0); &#125; else &#123; addEdge(i, i + N, 2, 0); &#125; Vs.push_back(str); &#125; rep(i, 0, M) &#123; std::cin &gt;&gt; str &gt;&gt; str2; int u = Map[str], v = Map[str2]; if(u &gt; v) &#123; std::swap(u, v); &#125; if(u == 1 &amp;&amp; v == N) &#123; addEdge(u + N, v, 2, -1); &#125; else &#123; addEdge(u + N, v, 1, -1); &#125; &#125; addEdge(S, 1, 2, 0); addEdge(N * 2, T, 2, 0);&#125;void mcmf() &#123; init(); while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Pv[i]) &#123; E[Pe[i]].f -= f; E[Pe[i] ^ 1].f += f; &#125; &#125;&#125;int Match[MAXN];std::vector&lt;int&gt; V;void print() &#123; if(flow &lt; 2) &#123; std::cout &lt;&lt; "No Solution!" &lt;&lt; std::endl; &#125; else &#123; std::cout &lt;&lt; -cost &lt;&lt; std::endl; int cnt = -1, A[2]; for(int i = H[N]; ~i; i = E[i].nxt) &#123; if(E[i].f) &#123; A[++cnt] = E[i].v - N; &#125; &#125; if(cnt == 0) &#123; std::cout &lt;&lt; Vs[1] &lt;&lt; std::endl; std::cout &lt;&lt; Vs[N] &lt;&lt; std::endl; std::cout &lt;&lt; Vs[1] &lt;&lt; std::endl; return; &#125; rof(x, N, 1) &#123; for(int i = H[x]; ~i; i = E[i].nxt) &#123; if(E[i].f &amp;&amp; E[i].v != x + N) &#123; Match[x] = E[i].v - N; break; &#125; &#125; &#125; for(int i = A[0]; i &gt; 0; i = Match[i]) &#123; V.push_back(i); &#125; std::reverse(ALL(V)); rep(i, 0, SZ(V)) &#123; std::cout &lt;&lt; Vs[V[i]] &lt;&lt; std::endl; &#125; std::cout &lt;&lt; Vs[N] &lt;&lt; std::endl; for(int i = A[1]; i &gt; 0; i = Match[i]) &#123; std::cout &lt;&lt; Vs[i] &lt;&lt; std::endl; &#125; &#125;&#125;&#125; // namespace mcmfint main() &#123; mcmf::mcmf(); mcmf::print(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6004 圆桌聚餐]]></title>
    <url>%2FLOJ-6004%2F</url>
    <content type="text"><![CDATA[有 N 个单位分别有 A_i 个代表，有 M 张餐桌，分别可容纳 B_i 个人。 不存在同一个单位的两名代表再同一张餐桌上，求是否存在分配方案可以满足该要求。 如果有，输出每个单位各个代表的餐桌编号。 1\leq m\leq150, 1\leq n\leq 270 分析 比较明显转化成最大流问题。 S,T 分别和各个单位和餐桌连边，流量限制为 A_i,B_i 。 单位和餐桌之间连接流量限制为 1 的边。 如果 S-T 最大流和 \sum{A_i} 相等，则说明存在分配方案，反之不存在。 至于具体编号，考虑第 i 个单位，如果与它相连的边流量限制剩余 0 且不是 S ，则说明存在流量增广，输出边对应点即为餐桌编号。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 500 * 2 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f;&#125; E[MAXM &lt;&lt; 1];int M, N, S, T, F, ffffc, tim, total;int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Cur[MAXN], Lv[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, H[u], f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; Que.push(S); Dis[S] = 0; Lv[S] = ++tim; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != Lv[x] &amp;&amp; E[i].f) &#123; Lv[v] = Lv[x]; Dis[v] = Dis[x] + 1; Que.push(v); &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int f = dfs(v, std::min(E[i].f, left)); if (!f) &#123; Dis[v] = -1; &#125; else &#123; left -= f; E[i].f -= f; Flow[i ^ 1] += f; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;void init() &#123; int x; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; M &gt;&gt; N; S = N + M, T = N + M + 1; rep(i, 0, M) &#123; std::cin &gt;&gt; x; total += x; addEdge(S, i, x); rep(j, 0, N) &#123; addEdge(i, j + M, 1); &#125; &#125; rep(i, 0, N) &#123; std::cin &gt;&gt; x; addEdge(M + i, T, x); &#125;&#125;void dinic() &#123; init(); while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof Flow); &#125; if(total != F) &#123; std::cout &lt;&lt; 0 &lt;&lt; std::endl; &#125; else &#123; std::cout &lt;&lt; 1 &lt;&lt; std::endl; rep(i, 0, M) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(!E[j].f &amp;&amp; E[j].v &gt;= M) &#123; std::cout &lt;&lt; E[j].v + 1 - M &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; &#125; &#125;&#125;&#125;int main() &#123; dinic::dinic(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6001 太空飞行计划]]></title>
    <url>%2FLOJ-6001%2F</url>
    <content type="text"><![CDATA[有 n 个集合，选择第 i 个集合可以获得 C_i 的收益，但是必须购买其中包含的所有元素（不同集合中出现的相同元素只需要购买一次），购买 第 j 个元素的花费为 A_j 。 求最大收益，以及选择的集合及其包含的所有元素。 1\leq n\leq 50 、 1\leq m\leq 100 。 分析 将 n 个集合看作二分图的 X 集合中的顶点，所有元素作为二分图的 Y 集合中的结点。 - S 向 X_i 连接一条边权为 C_i 的有向边 - Y_i 向 T 连接一条边权为 A_i 的有向边 - 对所有集合包含元素的点对 (X_i, Y_j) （元素 j 在集合 i 中） 连接一条边权为无限的有向边求原图的最大流 MaxFlow ，以及总收益 Total = \sum{C_i} 。那么最大收益为 MaxFlow - Total 。 那么找到选择的集合与所有元素，即找到跑满流的边所连接的顶点。 即最后一次增广经过的所有结点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 200 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int n, m, S, T, ffffc, tim;int Dis[MAXN], Lv[MAXN];int H[MAXN], cntE;int Cur[MAXN], Flow[MAXM &lt;&lt; 1];int B[MAXN], tot;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;std::string str;int cur;int gt() &#123; int x = 0, flag = false; while(cur &lt; SZ(str) &amp;&amp; !isdigit(str[cur])) &#123; ++cur; &#125; rep(i, cur, SZ(str)) &#123; if(!isdigit(str[i])) &#123; break; &#125; x = x * 10 + str[i] - '0'; flag = true; cur = i + 1; &#125; return flag ? x : -1;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); std::getline(std::cin, str); m = gt(), n = gt(); S = 0, T = n + m + 1; int x; rep(i, 1, m + 1) &#123; cur = 0; std::getline(std::cin, str); addEdge(S, i, B[i] = gt()); tot += B[i]; while(true) &#123; if((x = gt()) == -1) &#123; break; &#125; addEdge(i, m + x, INT_MAX); &#125; &#125; rep(i, 1, n + 1) &#123; std::cin &gt;&gt; x; addEdge(m + i, T, x); &#125;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for(Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if(x == T) &#123; return true; &#125; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if(x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for(int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if(!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if(!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while(true) &#123; while(bfs()) &#123; memcpy(Cur, H, sizeof H); int f = dfs(S, INT_MAX); flow += f; &#125; if(!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; rep(i, 1, m + 1) &#123; if(Lv[i] == tim) &#123; std::cout &lt;&lt; i &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; rep(i, m + 1, n + m + 1) &#123; if(Lv[i] == tim) &#123; std::cout &lt;&lt; i - m &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; return tot - flow;&#125;int maxflow() &#123; init(); return dinic();&#125;&#125;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout &lt;&lt; dinic::maxflow() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6121 孤岛营救问题]]></title>
    <url>%2FLOJ-6121%2F</url>
    <content type="text"><![CDATA[一个 N \times M 的网格图，其中相邻的格子之间可能互通，共有三种情况如下： - 已经连通 - 有一堵墙，无法逾越 - 有一扇编号为 A_i 的门，需要对应编号的钥匙打开（钥匙可以多次使用） 已知你现在位于 (1,1) ，需要抵达 (N, M) 。 有 P 种门，门和墙的总数为 K ，共 S 把钥匙。 走到相邻的格子花费 1 时间，捡起钥匙和打开门不消耗时间。 求抵达目的地的最短时间，如果无法抵达，输出 -1 。 N,M,P\leq 10 K\leq 150 S\leq 14 分析 每得到一个钥匙，图的连通性就发生了改变。放在一起处理比较麻烦，考虑单独处理。 一共有 P 种钥匙，那么共有 2^P 种不同连通性的图，分别跑最短路即可。 具体实现即每次到达一个有钥匙的格子后，如果有新钥匙，那么进入下一层跑最短路。 钥匙的状态有两进制状压，记 D_{i,j,k} 为在钥匙数 i 状态下 (1,1) 转移到 (j,k) 的最短时间，答案为 \min{D_{i,N,M} \mid i \in[0, 2^S)} 。 注意事项 同一个格子可能会有多把钥匙 注意空间 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 10 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M, P, K, S;int Dis[1 &lt;&lt; MAXN][MAXN][MAXN];int Map[MAXN][MAXN][4];std::vector&lt;int&gt;Key[MAXN][MAXN];bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= M;&#125;bool bfs() &#123; std::queue&lt;std::pair&lt;int, int&gt; &gt; Que; Que.push(std::make_pair(1, 1)); while(!Que.empty()) &#123; std::pair&lt;int, int&gt; x = Que.front(); Que.pop(); if(x.first == N &amp;&amp; x.second == M) &#123; return true; &#125; rep(i, 0, 4) &#123; int nx = x.first + Dicx[i], ny = x.second + Dicy[i]; if(check(nx, ny) &amp;&amp; Map[x.first][x.second][i] &amp;&amp; !Dis[0][nx][ny]) &#123; Dis[0][nx][ny] = 1; Que.push(std::make_pair(nx, ny)); &#125; &#125; &#125; return false;&#125;void check(int cur, int lst, int lx, int ly) &#123; std::queue&lt;std::pair&lt;int, int&gt; &gt; Que; std::bitset&lt;MAXN&gt; Bt = cur; Que.push(std::make_pair(lx, ly)); Dis[cur][lx][ly] = Dis[lst][lx][ly]; while(!Que.empty()) &#123; std::pair&lt;int, int&gt; x = Que.front(); Que.pop(); if(!Key[x.first][x.second].empty()) &#123; rep(i, 0, SZ(Key[x.first][x.second])) &#123; if(!Bt[Key[x.first][x.second][i]]) &#123; check(cur | (1 &lt;&lt; Key[x.first][x.second][i]), cur, x.first, x.second); &#125; &#125; &#125; rep(i, 0, 4) &#123; int nx = x.first + Dicx[i], ny = x.second + Dicy[i]; if(check(nx, ny) &amp;&amp; (Map[x.first][x.second][i] == -1 || Bt[Map[x.first][x.second][i]])) &#123; if(Dis[cur][nx][ny] &gt; Dis[cur][x.first][x.second] + 1) &#123; Dis[cur][nx][ny] = Dis[cur][x.first][x.second] + 1; Que.push(std::make_pair(nx, ny)); &#125; &#125; &#125; &#125;&#125;int main() &#123; int x1, y1, x2, y2, z; std::cin &gt;&gt; N &gt;&gt; M &gt;&gt; P &gt;&gt; K; memset(Map, -1, sizeof Map); rep(i, 0, K) &#123; std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; z; if(x1 == x2) &#123; Map[x1][y1][y1 &gt; y2 ? 1 : 3] = z; Map[x2][y2][y1 &gt; y2 ? 3 : 1] = z; &#125; else &#123; Map[x1][y1][x1 &gt; x2 ? 2 : 0] = z; Map[x2][y2][x1 &gt; x2 ? 0 : 2] = z; &#125; &#125; std::cin &gt;&gt; S; rep(i, 0, S) &#123; std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z; Key[x1][y1].push_back(z); &#125; if(!bfs()) &#123; std::cout &lt;&lt; -1 &lt;&lt; std::endl; &#125; else &#123; memset(Dis, 0x3f, sizeof Dis); Dis[0][1][1] = 0; check(0, 0, 1, 1); int ans = INT_MAX; rep(i, 0, 1 &lt;&lt; (P + 1)) &#123; ans = std::min(ans, Dis[i][N][M]); &#125; std::cout &lt;&lt; ans &lt;&lt; std::endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6005 最长递增子序列]]></title>
    <url>%2FLOJ-6005%2F</url>
    <content type="text"><![CDATA[有一个长度为 N 的序列 A ，求解以下询问： 最长不下降子序列的长度 K 原序列最多可以取出长度为 K 的不下降子序列的个数 （每个数只能用一次） 如果 A_1 和 A_N 可以取无数次，再求第二问 1\leq N\leq 500 分析 第一问，随便 O(N ^2) dp一下即可。 第二问，由于每个数只能用一次，那么基本思想还是拆点。将每个点拆成 B_i 和 C_i ，即结点 i 选择前和选择后的两种状态。 记 F_i 为以 A_i 为结尾的最长不下降子序列的长度。 首先，源点 S 和所有 B_i 满足 F_i = 1 的结点相连。同理，所有 C_i 满足 F_i = K 的结点和 T 相连。流量限制为 1 。 对于一个合法的子序列，相邻元素一定满足 A_i \geq A_j 且 F_i = F_j + 1(j&lt; i) 。 那么对满足这种条件的点对 (i,j) 便需要连一条 (C_j, B_i) 的边，流量限制为 1 ，意为选择 j 后可以再选择 i 作为后继。 当然， B_i 和 C_i 也有一条流量限制为 1 的边，因为选择结点 i 之后，状态便由未选择转移到了选择完。 跑 S-T 最大流即为第二问结果。 对于第三问，很显然的做法便是放开对结点 1 和结点 N 的限制。将原来流量限制为 1 的边修改为 INF 即可（或者直接加新边）。 需要注意的几点细节： 对于单调下降的序列 A ， K = 1 。因此所有结点既满足 F_i = 1 也满足 F_i = K ，判断和源汇点连边的时候是，注意是if()if()而不是if()else if() 对于第三问的修改操作，直接加边更方便。但是要注意的是， F_1 = 1 是一定成立的，但是 F_N = K 是不一定成立的。所以加边之前需要检查一下是否原图存在边。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1200 + 5;const int MAXM = MAXN * MAXN;namespace dinic &#123;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Lv[MAXN], Cur[MAXN];int N, M, S, T, tim, ffffc, F;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1;&#125;&#125;int A[MAXN], F[MAXN];int main() &#123; int n, ans = 0; scanf("%d", &amp;n); dinic::S = 0, dinic::T = n * 2 + 1; dinic::init(); rep(i, 1, n + 1) &#123; dinic::addEdge(i, i + n); scanf("%d", &amp;A[i]); F[i] = 1; rep(j, 1, i) &#123; if(A[j] &lt;= A[i]) &#123; F[i] = std::max(F[i], F[j] + 1); &#125; &#125; ans = std::max(ans, F[i]); &#125; rep(i, 1, n + 1) &#123; rep(j, 1, i) &#123; if(A[i] &gt;= A[j] &amp;&amp; F[i] == F[j] + 1) &#123; dinic::addEdge(j + n, i); &#125; &#125; &#125; rep(i, 1, n + 1) &#123; if(F[i] == 1) &#123; dinic::addEdge(dinic::S, i); &#125; if(F[i] == ans) &#123; dinic::addEdge(i + n, dinic::T); &#125; &#125; printf("%d\n", ans); printf("%d\n", dinic::dinic()); dinic::addEdge(dinic::S, 1, INT_MAX); dinic::addEdge(1, 1 + n, INT_MAX); dinic::addEdge(n, n + n, INT_MAX); if(F[n] == ans) &#123; dinic::addEdge(n + n, dinic::T, INT_MAX); &#125; printf("%d\n", dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6015 星际转移]]></title>
    <url>%2FLOJ-6015%2F</url>
    <content type="text"><![CDATA[地球和月球中间有 n 个太空站，有 m 艘太空船， k 个人要从地球前往月球。 已知每个太空站可以容纳无限多的人，每艘太空船的承载人数为 H_i ，以及它们的行驶路线（经过的每一个太空站编号）。 任意两个太空站之间的行驶时间均为 1 ，太空船周期行驶（终点站再回到初始站） 乘客可以选择在任意整数时刻下车或上车，这个操作不消耗时间。 假设所有太空船0时刻都在初始站，求所有人从地球转移到月球的最短时间。 如果不能到达，输出0。 n \leq 13 ， m \leq 20 ， k \leq 50 。 分析 首先判断是否有解。 很显然只要地球和月球之间存在路径，那么就一定有解。 用并查集维护所有点的连通关系，最后判断地球和月球是否属于同一集合即可。 然后是求最小值。 可以发现对于任意时刻 t_i ，所有太空船的位置是已知的。 那么我们将太空船的承载人数设为边的容量，乘客设为流量。 当存在流量 f \geq k 进入月球时，转移结束。 那么该如何建图？ 那么按照时间建分层图，对于时刻 t 的点 P_i ，建立新点 P_{i,t} ，根据太空船的行驶路径连接新边，继续跑最大流，直到流量达到 k 结束。 具体而言，即： 如果存在太空船 i 从 e 行驶到 v ，即存在边 e(u, v) ，那么对于新的第 t 层，连接 P_{u,t} 和 P_{v, t} ，流量限制为 H_i ，即太空船 i 的承载上限； 由于人可以在任意太空站上一直等，所以对于所有点 P_i ，连接 P_{i,t-1} 和 P_{i,t} ，流量限制为 INF ，因为太空站的承载能力是无限的； 设汇点为初始时刻的月球编号 T_0 ，那么连接 T_{t+1} 和 T_{t} ，流量限制为 INF ，如此任意时刻新增的流量可以回到 T_0 方便统计。 不能使用ISAP跑最大流，选择用Dinic。 因为Dinic是多次分层，而ISAP是一次分层，无法处理新加进来的点。 循环当前时刻 t 并直接在残余网络上加边构建分层图，累计流量直到超过 k 输出 t 并跳出。 注意不能使用capacity scaling来优化Dinic，这样增加新边后似乎是跑不出最大流的... 复杂度分析 Dinic算法求最大流的复杂度上界为 O(V^2\times E) 。 分层图新建 t 层，复杂度 O(t\times V^2 \times E) 。 E 最大为 n\times m ，最坏情况下只存在一条路径经过所有点从地球到达月球，且限制为1，此时 t 为 n\times k 。 所以复杂度的上界为 O(n^3\times m^2 \times k) ，对于如此小的 n,m,k ，跑起来毫无压力。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace uf &#123;const int MAXN = 20;int Fa[MAXN];void init(int n) &#123; rep(i, 0, n) &#123; Fa[i] = i; &#125;&#125;int find(int x) &#123; return Fa[x] == x ? x : Fa[x] = find(Fa[x]);&#125;void merge(int x, int y) &#123; x = find(x), y = find(y); if (x != y) &#123; Fa[y] = x; &#125;&#125;&#125; // namespace ufnamespace dinic &#123;const int MAXN = 1200 + 5;const int MAXM = 12000 + 5;const int MAXK = 50 + 5;const int INF = INT_MAX;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int K, n, S, T;int A[MAXN][MAXK];int H[MAXN], cntE;int Dis[MAXN];bool bfs() &#123; static std::queue&lt;int&gt; q; memset(Dis, -1, sizeof Dis); Dis[S] = 0; q.push(S); while (!q.empty()) &#123; int x = q.front(); q.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; !~Dis[v]) &#123; Dis[v] = Dis[x] + 1; q.push(v); &#125; &#125; &#125; return ~Dis[T];&#125;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -f, H[v]&#125;; H[v] = cntE;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int curf = 0; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &gt; 0) &#123; int flow = dfs(v, std::min(E[i].f, maxf - curf)); E[i].f -= flow, E[i ^ 1].f += flow; curf += flow; if (curf == maxf) &#123; return curf; &#125; &#125; &#125; return curf;&#125;int dinic() &#123; static int ans = 0; while (bfs()) &#123; ans += dfs(S, INF); &#125; return ans;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); n = io::gt&lt;int&gt;(), A[0][0] = io::gt&lt;int&gt;(), K = io::gt&lt;int&gt;(); T = n + 1; uf::init(T + 1); rep(i, 1, A[0][0] + 1) &#123; A[0][i] = io::gt&lt;int&gt;(); A[i][0] = io::gt&lt;int&gt;(); rep(j, 1, A[i][0] + 1) &#123; int x = io::gt&lt;int&gt;(); A[i][j] = ~x ? x : T; if (j &gt; 1) &#123; uf::merge(A[i][j - 1], A[i][j]); &#125; &#125; &#125; if (uf::find(S) != uf::find(T)) &#123; puts("0"); exit(0); &#125;&#125;void addGraph(int t) &#123; rep(i, 0, n + 1) &#123; addEdge(i + (t - 1) * (n + 2), i + t * (n + 2), INF); &#125; addEdge(n + 1 + t * (n + 2), n + 1 + (t - 1) * (n + 2), INF); rep(i, 1, A[0][0] + 1) &#123; int tmp = (t - 1) % A[i][0] + 1; addEdge(A[i][tmp] + (t - 1) * (n + 2) , A[i][t % A[i][0] + 1] + t * (n + 2), A[0][i]); &#125;&#125;int maxFlow() &#123; init(); for (int t = 1; ; ++t) &#123; addGraph(t); if (dinic() &gt;= K) &#123; return t; &#125; &#125;&#125;&#125; // namespace dinicint main() &#123; printf("%d\n", dinic::maxFlow()); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6223 汽车加油行驶问题]]></title>
    <url>%2FLOJ-6223%2F</url>
    <content type="text"><![CDATA[一个 N * N 的网格图，起点为 (1,1) （左上角），终点为 (N,N) （右下角）。 一辆汽车从起点出发，油量为满（ K ），每走一格油量消耗 1 ，剩余 0 的时候无法行驶。 有些点有加油站，如果走到该点，必须加满，费用为 A 。 如果该点没有加油站，可以选择增设加油站，费用为 C （不算加油的费用）。 每经过一条网格边，如果是往左或往上走，费用为 B ；如果向下或者向右走，没有花费。 求最小花费。 2\leq N\leq 100,2\leq K\leq 10 分析 如果没有油量这个限制，就是一个最短路问题。 那么把剩余油量作为表示状态的一维。用 (x, y, k) 表示坐标为 (x,y) ，剩余流量为 k 的状态。 根据条件，可以得到 ： (x,y,k)\rightarrow(x-1,y,k-1) ，费用为 B （ k\geq1, x&gt;1 ）； (x,y,k)\rightarrow(x+1,y,k-1) ，费用为 0 （ k\geq1, x&lt;N ）； (x,y,k)\rightarrow(x,y-1,k-1) ，费用为 1 （ k\geq1, y&gt;1 ）； (x,y,k)\rightarrow(x,y+1,k-1) ，费用为 0 （ k\geq1, y&lt;N ）； (x,y,k)\rightarrow(x,y,K) ，费用为 A 或 A+C （ k\geq 0 ）。 这么建图有一个可能的问题在于：增设加油站只需要花费一次 C ，下一次再加就只需要花费 A 了，但是这么建图会导致每次费用都是 A+C 。 那么存在一个结论：每个点只会走一次。 简略证明：回去的目的就是再加油；如果加完油回来，跟之前的剩余油量相同，又要多付路费；如果加完油走别的路径会更优，那么在第一次到达这个点就会直接那么走，故回去加油不会更优。 最后增加 S\rightarrow (1,1,K) (N,N,i)\rightarrow T(0\leq i\leq K) ，流量全部置为 1 。 跑最小费用最大流即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace mcmf &#123;const int MAXN = 100 * 100 * 12 + 5;const int MAXM = MAXN * 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 1];int N, S, T, F, C;int H[MAXN], cntE;int getId(int x, int y, int k) &#123; return x * N + y + k * N * N;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; S = 0, T = 1; N = io::gt&lt;int&gt;(); int K = io::gt&lt;int&gt;(), A = io::gt&lt;int&gt;(), B = io::gt&lt;int&gt;(), C = io::gt&lt;int&gt;(); addEdge(S, getId(1, 1, K), 1, 0); rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; int opt = io::gt&lt;int&gt;(); rep(k, 0, K + 1) &#123; if(k != K) &#123; addEdge(getId(i, j, k), getId(i, j, K), 1, opt ? A : A + C); &#125; rep(d, 0, 4) &#123; int nx = i + Dicx[d], ny = j + Dicy[d]; if(((!opt &amp;&amp; k != 0) || k == K) &amp;&amp; (nx &gt;= 1 &amp;&amp; ny &gt;= 1 &amp;&amp; nx &lt;= N &amp;&amp; ny &lt;= N)) &#123; addEdge(getId(i, j, k), getId(nx, ny, k - 1), 1, (d == 1 || d == 2) ? B : 0); &#125; &#125; &#125; &#125; &#125; rep(i, 0, K) &#123; addEdge(getId(N, N, i), T, 1, 0); &#125;&#125;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Dis[v] &gt; Dis[x] + E[i].c &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125;&#125;void mcmf() &#123; init(); spfa(); printf("%d\n", Dis[T]);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6226 骑士共存问题]]></title>
    <url>%2FLOJ-6226%2F</url>
    <content type="text"><![CDATA[一个位于点 S 的骑士可以攻击到所有标记为 X 的红色格子，在一个 N * N 的棋盘上，有 M 个格子不能放置骑士，坐标为 (X_i,Y_i) 。 求最多能放多少个骑士，使得他们两两之间无法相互攻击。 1\leq N\leq 200 M\leq N^2 分析 根据观察可以发现，棋盘的红色和黄色两部分是互相影响的，但是其内部相互独立。任意放置一个骑士后，只会导致某些异色的格子无法再放置。 这是两个独立的部分，由此想到二分图。互不影响，我们可以想到独立集。 合在一起就是二分图最大独立集。 求二分图最大独立集，根据 二分图最大匹配=最大流=最小顶点覆盖=总结点数-最大独立集 转化成网络流问题。 建模方法如下： S 连接二分图 X 部， 二分图 Y 部连接 T ，流量限制皆为 1 ，不能同时放置骑士的点之间连接边，不设流量限制。 N\times N - M 为总结点数，与求得的 S-T 最大流做差即为答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = (200 + 5) * (200 + 5) + 5;const int MAXM = MAXN * 10;struct Edge &#123; int v, nxt, f;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, F, tim, ffffc;int H[MAXN], cntE;int Dis[MAXN], Lv[MAXN], Cur[MAXN], Flow[MAXM];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, H[u], f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;std::bitset&lt;MAXN&gt; Bt;const int Dicx[] = &#123;2, 1, -1, -2, -2, -1, 1, 2&#125;;const int Dicy[] = &#123;-1, -2, -2, -1, 1, 2, 2, 1&#125;;int getId(int x, int y) &#123; return x * N + y;&#125;bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= N &amp;&amp; !Bt[getId(x, y)];&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; int x, y; std::cin &gt;&gt; N &gt;&gt; M; rep(i, 0, M) &#123; std::cin &gt;&gt; x &gt;&gt; y; Bt[getId(x, y)] = 1; &#125; S = getId(N, N) + 1, T = S + 1; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; if(!Bt[getId(i, j)]) &#123; if((i + j) &amp; 1) &#123; addEdge(getId(i, j), T, 1); &#125; else &#123; addEdge(S, getId(i, j), 1); rep(k, 0, 8) &#123; int nx = i + Dicx[k], ny = j + Dicy[k]; if(check(nx, ny)) &#123; addEdge(getId(i, j), getId(nx, ny), INT_MAX); &#125; &#125; &#125; &#125; &#125; &#125;&#125;void dinic() &#123; init(); while(true) &#123; while(bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if(!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; Flow[i] = 0; &#125; &#125; std::cout &lt;&lt; N * N - M - F &lt;&lt; std::endl;&#125;&#125;int main() &#123; dinic::dinic(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
        <tag>最大独立集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6007 方格取数]]></title>
    <url>%2FLOJ-6007%2F</url>
    <content type="text"><![CDATA[有一个 N\times M 的矩阵，第 i 行 第 j 列的元素值为 A_{i,j} 。 现想从中选择任意多个数，使得权值和最大，要求选择的任意两个数在原矩阵中不相邻。 输出最大的权值和即可，无需具体方案。 1\leq N,M\leq 100 分析 首先将原图进行黑白染色，显然任意一个格子被选择后，都不能选择相邻的异色格子。这是一个二分图。 将每个格子与周围的异色格子连一条边，原问题转化为求二分图的最大点权独立集，即选择的任意两点没有边相连，且要求集合中的点权和最大。 对于这种问题，解法为： - 构造源点 S ，连接 S 和 X_i ，流量限制置为 A_{X_i} - 构造汇点 T ，连接 Y_i 和 T ，流量限制置为 A_{Y_i} - 原 X_i 和 Y_j 相连的边，流量限制置为 INF 那么最大点权独立集（maximum weight vertex independent set,MaxWVIS），即为点权和与最大流的差。 简单的理解就是说边 S-X_i 和 Y_j-T ，视作选择 X_i/Y_j 的代价。那么在总收益一定的前提下（即总边权和），总代价最小即最后收益最大。 根据最大流最小割定理，最大流即为最小割。对于任意一条 S-X_i-Y_j-T 的增广路径，被割掉的边要么为 S-X_i ，要么为 Y_i-T 。 割最小，即总代价最小，即总收益最大。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 100 * 100 + 5;const int MAXM = MAXN * 10 + 5;namespace dinic &#123;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, tim, ffffc;int Flow[MAXM &lt;&lt; 1], Cur[MAXN], Lv[MAXN], Dis[MAXN];int H[MAXN], cntE;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;int init() &#123; cntE = -1; memset(H, -1, sizeof H); std::cin &gt;&gt; N &gt;&gt; M; S = 0, T = N * M + 1; int x, sum = 0; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; std::cin &gt;&gt; x; sum += x; int cur = (i - 1) * M + j; if((i + j) &amp; 1) &#123; addEdge(S, cur, x); if(j != 1) &#123; addEdge(cur, cur - 1, INT_MAX); &#125; if(j != M) &#123; addEdge(cur, cur + 1, INT_MAX); &#125; if(i != 1) &#123; addEdge(cur, cur - M, INT_MAX); &#125; if(i != N) &#123; addEdge(cur, cur + M, INT_MAX); &#125; &#125; else &#123; addEdge(cur, T, x); &#125; &#125; &#125; return sum;&#125;int maxFlow() &#123; int sum = init(); return sum - dinic();&#125;&#125;int main() &#123; std::cout &lt;&lt; dinic::maxFlow() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
        <tag>最大点权独立集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6000 搭配飞行员]]></title>
    <url>%2FLOJ-6000%2F</url>
    <content type="text"><![CDATA[有 N 个点，其中编号为 1-M 的点可以和编号为 M+1-N 的点匹配。 已知所有允许的匹配点对 (a,b) ，求最大匹配数，并输出配对方案。 如果不存在，输出No Solution! 。 1\leq M\leq N\leq 100 分析 裸的二分图最大匹配。 考虑匈牙利算法，复杂度 O(n\times m) ，复杂度有点高（虽然也能跑过）。 考虑Hopcroft-Karp算法，复杂度 O(\sqrt{n}\times m) ，但是我不会写。 考虑最大流算法。 根据陈胤伯的集训队论文《浅谈图的匹配算法及其应用》，得知利用Dinic算法进行二分图最大匹配的复杂度亦为 O(\sqrt{n}\times m) ，遂选择之。 建图方法很简单，新建源点 S 和汇点 T ， S 、 T 分别与二分图的两部分的每个点连接流量限度为 1 的边， 可以匹配的点对 (a,b) 亦连接流量限制为 1 的边。跑得 S-T 最大流即原二分图最大匹配数。 至于匹配方案，根据残余网络，输出所有剩余流量为 0 且不与 S、T 、 相连的边的点对即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;int EN = 1;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EN = EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;#endif&#125; // namespace ionamespace dinic &#123;const int MAXN = 100 + 5;const int MAXM = 10000 + 5;const int INF = INT_MAX;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int N, M, S, T, flow, ffffc, tim;int H[MAXN], cntE;int Dis[MAXN], Cur[MAXN], Lv[MAXN];int Flow[MAXM &lt;&lt; 1];bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;u = Que[qh++]; if (u == T) &#123; return true; &#125; else &#123; for (int i = H[u]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Lv[v] != tim) &#123; Dis[v] = Dis[u] + 1; Lv[v] = tim; Que[qt++] = v; &#125; &#125; &#125; &#125; return false;&#125;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init() &#123; M = io::gt&lt;int&gt;(), N = io::gt&lt;int&gt;(); S = 0, T = N + 1; cntE = -1; memset(H, -1, sizeof H); while (io::EN == 1) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); if (x &gt; y) std::swap(x, y); addEdge(x, y); &#125; rep(i, 1, M + 1) &#123; addEdge(S, i); &#125; rep(i, M + 1, N + 1) &#123; addEdge(i, T); &#125;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &amp;&amp; Lv[v] == tim) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int ans = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof(int) * (N + 1)); int res = dfs(S, INF); ans += res; &#125; if (!ffffc) &#123; break; &#125; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); ffffc = 0; &#125; return ans;&#125;void match() &#123; init(); printf("%d\n", dinic());&#125;&#125; // namespace dinicint main() &#123; dinic::match(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6006 试题库]]></title>
    <url>%2FLOJ-6006%2F</url>
    <content type="text"><![CDATA[有 n 个数， m 个属性。第 i 个数有 A_i 个属性，分别为 B_{i,j} 。 从中选择 k 个数，使得这 m 个属性中，第 i 个属性有 C_i 个数。 输出任意一组解的每个属性对应的数，如果无解输出No Solution!。 2\leq k\leq 20, k\leq n\leq 1000 分析 二分图多重匹配。 二分图的 X_i 为这 n 个数， Y_i 为这 m 个属性，建立源点 S 和汇点 T 。 建图方案： - S 和 X_i 连接一条边权为 1 的有向边 - X_i 和 Y_i 根据属性和数的关系连接边权为 1 的有向边 - Y_i 和 T 连接边权为 C_i 的有向边。 跑 S-T 最大流，方案即为残余网络为 0 的边对应的结点 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 2000 + 5;const int MAXM = 240000 + 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Cur[MAXN], Flow[MAXM &lt;&lt; 1];int Dis[MAXN], Lv[MAXN];int N, M, S, T, K, ffffc, tim;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; int x, y; std::cin &gt;&gt; K &gt;&gt; N; S = 0, T = N + K + 1; rep(i, 1, K + 1) &#123; std::cin &gt;&gt; x; M += x; addEdge(i + N, T, x); &#125; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; x; while (x--) &#123; std::cin &gt;&gt; y; addEdge(i, y + N, 1); &#125; addEdge(S, i, 1); &#125;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); int f = dfs(S, INT_MAX); flow += f; &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return flow;&#125;void maxflow() &#123; init(); int maxflow = dinic(); if (maxflow != M) &#123; std::cout &lt;&lt; "No Solution!\n"; &#125; else &#123; rep(i, 1, K + 1) &#123; std::cout &lt;&lt; i &lt;&lt; ": "; for (int j = H[i + N]; ~j; j = E[j].nxt) &#123; if (E[j].f) &#123; std::cout &lt;&lt; E[j].v &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; &#125; &#125; return ;&#125;&#125;int main() &#123; dinic::maxflow(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图多重匹配</tag>
      </tags>
  </entry>
</search>
