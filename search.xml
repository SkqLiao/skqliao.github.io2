<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[2019省选联合训练4 解题报告]]></title>
    <url>%2F2019-Multi-School-Training-Contest-4%2F</url>
    <content type="text"><![CDATA[2019 Multi-School Training Contest 4 Incorrect Password! No content to display! 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]]></content>
      <categories>
        <category>模拟赛</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>欧拉序</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2018」BZOJ 5335 智力竞赛]]></title>
    <url>%2FBZOJ-5335%2F</url>
    <content type="text"><![CDATA[用 n+1 条链覆盖一个点权有向无环图，若可以全部覆盖输出AK，否则求不能被覆盖的点的点权最小值的最大值。 n\leq 50,m\leq 500 分析 首先判断是否能全部覆盖，即求可重点DAG的最小路径覆盖，传递闭包后求二分图最大匹配。 否则二分答案，判断边权小于当前二分值 w 的子图是否能被完全覆盖。 复杂度 O(n^2\log{n}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283/* * @Author: Skqliao * @Source: TJOI 2018 * @Problem: 5335: [TJOI2018]智力竞赛 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=5335 * @Date: 2019-03-05 20:00:52 * @LastEditTime: 2019-03-06 12:29:01 */#include &lt;bits/stdc++.h&gt;const int MAXN = 500 + 5;int N, M;std::bitset&lt;MAXN&gt; G[MAXN], g[MAXN];int W[MAXN];int Match[MAXN], Vis[MAXN];int dfs(int x) &#123; if (Vis[x]) return 0; Vis[x] = 1; for (int i = 1; i &lt;= N; ++i) &#123; if (g[x][i] &amp;&amp; (!Match[i] || dfs(Match[i]))) &#123; Match[i] = x; return 1; &#125; &#125; return 0;&#125;bool check(int w) &#123; int tot = 0; for (int i = 1; i &lt;= N; ++i) tot += W[i] &lt; w; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; if (W[i] &lt; w &amp;&amp; W[j] &lt; w) g[i][j] = G[i][j]; else g[i][j] = 0; &#125; &#125; memset(Match, 0, sizeof Match); for (int i = 1; i &lt;= N; ++i) &#123; memset(Vis, 0, sizeof Vis); tot -= dfs(i); &#125; return tot &lt;= M + 1;&#125;int main() &#123; int num, x, mx = 0; scanf("%d%d", &amp;M, &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;W[i], &amp;num); mx = std::max(mx, W[i]); while (num--) &#123; scanf("%d", &amp;x); G[i][x] = 1; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; if (G[i][j]) G[i] |= G[j]; &#125; &#125; if (check(mx + 1)) &#123; puts("AK"); &#125; else &#123; int l = 0, r = mx, ans = 0; while (l &lt;= r) &#123; int m = (l + r) / 2; if (check(m)) &#123; ans = m; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; printf("%d\n", ans); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>二分图最大匹配</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CTSC 2008」BZOJ 1143 祭祀river]]></title>
    <url>%2FBZOJ-1143%2F</url>
    <content type="text"><![CDATA[求有向无环图的最长反链，反链中任意两点不联通。 N\leq 100,M\leq 1000 分析 传递闭包后做二分图最大匹配，答案为点数-最大匹配数。 复杂度 O(NM) 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* * @Author: Skqliao * @Source: CTSC 2008 * @Problem: 1143: [CTSC2008]祭祀river * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1143 * @Date: 2019-03-05 21:15:32 * @LastEditTime: 2019-03-05 21:29:55 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N, M;std::bitset&lt;MAXN&gt; B[MAXN];bool Vis[MAXN];int Match[MAXN];int dfs(int x) &#123; if (Vis[x]) return 0; Vis[x] = 1; for (int i = 1; i &lt;= N; ++i) &#123; if (B[x][i] &amp;&amp; (!Match[i] || dfs(Match[i]))) &#123; Match[i] = x; return 1; &#125; &#125; return 0;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); B[u][v] = 1; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; if (B[i][j]) B[i] |= B[j]; &#125; &#125; int ans = 0; for (int i = 1; i &lt;= N; ++i) &#123; memset(Vis, 0, sizeof Vis); ans += dfs(i); &#125; printf("%d\n", N - ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>二分图最大匹配</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2010」BZOJ 2208 连通数]]></title>
    <url>%2FBZOJ-2208%2F</url>
    <content type="text"><![CDATA[给定 n\times n 的01矩阵表示有向图的连边情况。求有多少组 (a,b) 满足 a 到 b 联通（ a,b 可以相同）。 n\leq 2000 分析 Folyd传递闭包+bitset优化的模板题。 复杂度 O(n^3/64) 或 O(nm/64) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637/* * @Author: Skqliao * @Source: JSOI 2010 * @Problem: 2208: [Jsoi2010]连通数 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2208 * @Date: 2019-03-05 20:26:54 * @LastEditTime: 2019-03-05 21:11:23 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2000 + 5;int N;char S[MAXN];std::bitset&lt;MAXN&gt; B[MAXN];int main() &#123; scanf("%d", &amp;N); for (int i = 0; i &lt; N; ++i) &#123; scanf("%s", S); for (int j = 0; j &lt; N; ++j) &#123; B[i][j] = S[j] == '1'; &#125; B[i][i] = 1; &#125; for (int i = 0; i &lt; N; ++i) &#123; for (int j = 0; j &lt; N; ++j) &#123; if (B[i][j]) B[i] |= B[j]; &#125; &#125; int ans = 0; for (int i = 0; i &lt; N; ++i) &#123; ans += B[i].count(); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2018」BZOJ 5334 数学计算]]></title>
    <url>%2FBZOJ-5334%2F</url>
    <content type="text"><![CDATA[维护 x\% mod ，初值 x=1 ，有 Q 个操作。 1 a x=x\times a 2 a x=x / A[a] ，其中 A[a] 为第 a 次操作乘的数，保证第 i 次是操作1，且每个位置最多被除一次 T 组数据。 T\leq 5,Q\leq 100000,mod\leq 10^9 分析 这是一类常见套路，根据时间分治。 具体而言，以时间为区间建线段树，维护区间乘积。 复杂度 T\times Q\log{Q} 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/* * @Author: Skqliao * @Source: BZOJ 5334 * @Problem: 5334: [Tjoi2018]数学计算 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=5334 * @Date: 2019-03-05 17:36:17 * @LastEditTime: 2019-03-05 19:10:49 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int Q, MOD;long long Mul[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid pushUp(int rt) &#123; Mul[rt] = Mul[rt &lt;&lt; 1] * Mul[rt &lt;&lt; 1 | 1] % MOD; &#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Mul[rt] = 1; return; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void update(int rt, int l, int r, int p, int x) &#123; if (l == r) &#123; Mul[rt] = x; return; &#125; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; update(LT, p, x); &#125; else &#123; update(RT, p, x); &#125; pushUp(rt);&#125;void solve() &#123; scanf("%d%d", &amp;Q, &amp;MOD); build(1, 1, Q); int opt, x; for (int i = 1; i &lt;= Q; ++i) &#123; scanf("%d%d", &amp;opt, &amp;x); if (opt == 1) &#123; update(1, 1, Q, i, x); &#125; else &#123; update(1, 1, Q, x, 1); &#125; printf("%lld\n", Mul[1]); &#125;&#125;int main() &#123; int T; scanf("%d", &amp;T); while (T--) &#123; solve(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「FJWC 2019」FZOJ 184 签到题]]></title>
    <url>%2FFZOJ-184%2F</url>
    <content type="text"><![CDATA[给定序列 A[1 \cdots N] ，有 M 次操作。每次修改 A[p]=x ，修改后询问最小的 y 满足新序列 B[i]=A[i] \oplus y 单调递增，无解输出 -1。 N,M\leq 10^6,A_i,x\leq 2^{30} 分析 记 F(x,i) 表示 x 二进制分解后第 i 位的值， S_{a,b} 为满足 [F(a,x)\not=F(b,x)] 的 x 的集合， G(a,b)=\max\{S_{a,b}\} 。那么通过第 G(a,b) 位的大小关系即可判定 a,b 的大小关系。 统计 Cnt[x][0] 为所有满足 G(A[i],A[i+1])=x ，且 F(A[i],x)&lt;F(A[i+1],x) 的个数。同理 Cnt[x][1] 为满足 F(A[i],x)&gt;F(A[i+1],x) 的个数。 那么求最小的 y 只需要从最高位向下贪心。对于当前位 i ，若存在 Cnt[i][0]&gt;0 且 Cnt[i][1]&gt;0 ，则无解，因为无论这一位是否异或，都会存在若干个 A[i]&gt;A[i+1] 。若 Cnt[i][1]&gt;0 且 Cnt[i][0]=0 ，则这一位必须异或， y 增加 2^i 。 修改 A[p]=x ，只影响 (p-1,p) 和 (p,p+1) ，那么先删去这两对原先对 Cnt 的贡献，再重新加入即可。 复杂度 O((N+M)\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283/* * @Author: Skqliao * @Source: FJWC 2019 * @Problem: #184. 「2019冬令营提高组」签到题 * @Url: http://218.5.5.242:9021/problem/184 * @Date: 2019-03-03 09:33:27 * @LastEditTime: 2019-03-03 10:03:11 */#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("sort.in", "r", stdin); freopen("sort.out", "w", stdout);&#125;char gc() &#123; static char In[1 &lt;&lt; 23], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, 1 &lt;&lt; 23, stdin); &#125; return at == en ? EOF : *at++;&#125;int gt() &#123; char c = gc(); while (!isdigit(c)) c = gc(); int x = 0; for (; isdigit(c); c = gc()) x = x * 10 + c - '0'; return x;&#125;const int MAXN = 1e6 + 5;const int LOG = 30 + 1;int N;std::bitset&lt;LOG&gt; A[MAXN];int Cnt[LOG][2];int solve() &#123; int x = 0; for (int d = 0; d &lt; LOG; d++) &#123; if (Cnt[d][1]) &#123; if (Cnt[d][0]) &#123; return -1; &#125; else &#123; x += (1 &lt;&lt; d); &#125; &#125; &#125; return x;&#125;void update(int l, int r, int x) &#123; for (int i = l + 1; i &lt;= r; i++) &#123; int d = LOG - 1; while (d &gt;= 0 &amp;&amp; A[i - 1][d] == A[i][d]) d--; if (d &gt;= 0) Cnt[d][A[i - 1][d]] += x; &#125;&#125;int main() &#123; open(); N = gt(); for (int i = 1; i &lt;= N; i++) A[i] = gt(); update(1, N, 1); printf("%d\n", solve()); int Q = gt(); while (Q--) &#123; int x = gt(), y = gt(); int l = std::max(1, x - 1), r = std::min(N, x + 1); update(l, r, -1); A[x] = y; update(l, r, 1); printf("%d\n", solve()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>FZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2007」BZOJ 1047 理想的正方形]]></title>
    <url>%2FBZOJ-1047%2F</url>
    <content type="text"><![CDATA[在 N\times M 的矩阵中，求 K\times K 的子矩阵中两最值之差的最小值。 N,M\leq 1000,K\leq 100 分析 二维ST表，用 Max(x,y,k),Min(x,y,z) 分别表示左上角为 (x,y) ，边长为 2^k 的子矩阵中的最大值与最小值。 然后枚举子矩阵左上角，求当前矩阵两最值最差，取最小值。 复杂度 O(NM\log{N}+NM) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/* * @Author: Skqliao * @Source: HAOI 2007 * @Problem: 1047: [HAOI2007]理想的正方形 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1047 * @Date: 2019-02-28 19:29:48 * @LastEditTime: 2019-02-28 19:48:10 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 5;const int LOG = 10;int N, M, K;int Mx[MAXN][MAXN][LOG], Mn[MAXN][MAXN][LOG];int Log[MAXN], Bin[LOG];int queryMax(int x, int y, int n) &#123;int k = Log[n];return std::max(std::max(Mx[x][y][k], Mx[x + n - Bin[k]][y][k]), std::max(Mx[x][y + n - Bin[k]][k], Mx[x + n - Bin[k]][y + n - Bin[k]][k]));&#125;int queryMin(int x, int y, int n) &#123;int k = Log[n];return std::min(std::min(Mn[x][y][k], Mn[x + n - Bin[k]][y][k]), std::min(Mn[x][y + n - Bin[k]][k], Mn[x + n - Bin[k]][y + n - Bin[k]][k]));&#125;int main() &#123;scanf("%d%d%d", &amp;N, &amp;M, &amp;K);for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;Mx[i][j][0]); Mn[i][j][0] = Mx[i][j][0]; &#125;&#125;for (int i = 2; i &lt;= std::max(N, M); ++i) &#123; Log[i] = Log[i &gt;&gt; 1] + 1;&#125;Bin[0] = 1;for (int i = 1; i &lt;= Log[std::max(N, M)]; ++i) &#123; Bin[i] = Bin[i - 1] &lt;&lt; 1;&#125;for (int k = 1; k &lt;= Log[std::max(N, M)]; ++k) &#123; for (int i = 1; i + Bin[k] - 1 &lt;= N; ++i) &#123; for (int j = 1; j + Bin[k] - 1 &lt;= M; ++j) &#123; Mx[i][j][k] = std::max(std::max(Mx[i][j][k - 1], Mx[i + Bin[k - 1]][j][k - 1]), std::max(Mx[i][j + Bin[k - 1]][k - 1], Mx[i + Bin[k - 1]][j + Bin[k - 1]][k - 1])); Mn[i][j][k] = std::min(std::min(Mn[i][j][k - 1], Mn[i + Bin[k - 1]][j][k - 1]), std::min(Mn[i][j + Bin[k - 1]][k - 1], Mn[i + Bin[k - 1]][j + Bin[k - 1]][k - 1])); &#125; &#125;&#125;int ans = INT_MAX;for (int i = 1; i &lt;= N - K + 1; ++i) &#123; for (int j = 1; j &lt;= M - K + 1; ++j) &#123; ans = std::min(ans, queryMax(i, j, K) - queryMin(i, j, K)); &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3437 小P的牧场]]></title>
    <url>%2FBZOJ-3437%2F</url>
    <content type="text"><![CDATA[每个点 i 要么花费 a_i 建塔，要么花费 (j-i)\cdot b_i （ j 为 i 右边第一个塔的标号）。求最小总花费。 n\leq 10^6,0 &lt; a_i,b_i\leq 10^5 分析 设 X_i=\sum\limits_{j=1}^{i-1}{B_j} , Y_i=\sum\limits_{j=1}^{i-1}{b_i\cdot i} ，则转移方程为 f_i=a_i+\min\limits_{j &lt; i}{(f_j+X_{i-1}-X_j-Y_{i-1}+Y_j)} 若决策点 j 优于决策点 k(j &lt; k) ，需满足 \frac{f_k-f_j+Y_k-Y_j}{X_k-X_j} &gt; i 。 维护决策点队列斜率单调递增，且斜率 &gt;i 。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: BZOJ * @Problem: 3437: 小P的牧场 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3437 * @Date: 2019-02-27 20:22:08 * @LastEditTime: 2019-02-27 20:27:08 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;int N;long long A[MAXN], B[MAXN];long long X[MAXN], Y[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123; return (double) (F[k] - F[j] + Y[k] - Y[j]) / (X[k] - X[j]);&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); &#125; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;B[i]); X[i] = X[i - 1] + B[i]; Y[i] = Y[i - 1] + i * B[i]; &#125; for (int i = 1; i &lt;= N; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= i) ++qh; int j = Que[qh]; F[i] = F[j] + i * (X[i - 1] - X[j]) - (Y[i - 1] - Y[j]) + A[i]; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[N]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3156 防御准备]]></title>
    <url>%2FBZOJ-3156%2F</url>
    <content type="text"><![CDATA[每个点 i 要么花费 a_i 建塔，要么花费 j-i （ j 为 i 右边第一个塔的标号）。点 n 必须建塔，求最小总花费。 n\leq 10^6,a_i\leq 10^9 分析 将点左右翻转，点 1 必须建塔，则转移方程为 f_i=a_i+\min\limits_{j &lt; i}{(f_j+(i-j)\cdot (i-j-1)/2)} 若决策点 j 优于决策点 k(j &lt; k) ，需满足 \frac{2(f_k-f_j)+k(k+1)-j(j+1)}{2(k-j)} &gt; i 。 维护决策点队列斜率单调递增，且斜率 &gt;i 。 复杂度 O(n) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940/* * @Author: Skqliao * @Source: BZOJ * @Problem: 3156: 防御准备 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3156 * @Date: 2019-02-26 21:32:07 * @LastEditTime: 2019-02-27 20:02:09 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;int N;long long A[MAXN], S[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123; return (double)(2 * (F[k] - F[j]) + (long long)k * (k + 1) - (long long)j * (j + 1)) / (2 * (k - j));&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); &#125; std::reverse(A + 1, A + N + 1); F[1] = A[1]; Que[0] = 1; long long ans = LLONG_MAX; for (int i = 2; i &lt;= N; ++i) &#123; while (qh &lt; qt &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= i) ++qh; int j = Que[qh]; F[i] = F[j] + (long long)(i - j) * (i - j - 1) / 2 + A[i]; while (qh &lt; qt &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; ans = std::min(ans, F[i] + (long long)(N - i) * (N - i + 1) / 2); &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2008 MAR」BZOJ 1597 土地购买]]></title>
    <url>%2FBZOJ-1597%2F</url>
    <content type="text"><![CDATA[有 n 个 X_i\times Y_i 的矩形，购买矩形的花费为它的面积。允许一次性购买多个矩形，其花费为 \max(X_i)\times \max(Y_i) 。求购买所有矩形的最小花费。 n\leq 50000 分析 若存在若干个矩形满足 X_1\leq X_2\leq\cdots\leq X_m 且 Y_1\cdots Y_i\leq Y_m ，则一定打包购买，花费为 X_m\times Y_m 。那么剩下的矩形一定满足 X_i\leq X_2\leq\cdots\leq X_p 且 Y_1 &gt; Y_2 &gt; \cdots&gt; Y_p 。 新序列可以通过排序（第一关键字 x ，第二关键字 y ）后用单调栈维护 y 值递减处理。 转移方程为 F_i=\min\limits_{1\leq j &lt; i}{(F_j+X_i\times Y_{j+1})} 。 决策点 j 优于决策点 k(j &lt; k) ，当且仅当 \frac{F_j-F_k}{B_{k+1}-B_{j+1}} &gt; A_i 。 维护决策点队列，满足斜率单调递增，且大于 A_i 。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* * @Author: Skqliao * @Source: USACO2008 Mar * @Problem: 1597: [Usaco2008 Mar]土地购买 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1597 * @Date: 2019-02-25 20:43:09 * @LastEditTime: 2019-02-25 22:14:02 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;struct Node &#123; int x, y; bool operator &lt; (const Node &amp;a) const &#123; return x == a.x ? a.y &gt; y : x &lt; a.x; &#125;&#125; A[MAXN], B[MAXN];int N;int Que[MAXN], qh, qt;long long F[MAXN];double slope(int j, int k) &#123; return (double) (F[j] - F[k]) / (B[k + 1].y - B[j + 1].y);&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;A[i].x, &amp;A[i].y); &#125; std::sort(A + 1, A + N + 1); int top = 0; for (int i = 1; i &lt;= N; ++i) &#123; while (top &amp;&amp; B[top].y &lt;= A[i].y) --top; B[++top] = A[i]; &#125; Que[0] = 0; for (int i = 1; i &lt;= top; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= B[i].x) ++qh; int j = Que[qh]; F[i] = F[j] + (long long)B[i].x * B[j + 1].y; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[top]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2007」BZOJ 1096 仓库建设]]></title>
    <url>%2FBZOJ-1096%2F</url>
    <content type="text"><![CDATA[从左到右有若干个点，点 1 和点 i 的距离为 D_i ，点 i 有 A_i 个货物，在点 i 建仓库的费用为 C_i 。现要在若干个点建造仓库，使得每个点的货物向右能移动到某个仓库中，每个货物运动 1 距离的花费为 1 。求建造与移动的总花费的最小值。 N\leq 1000000 分析 转移方程显然为 F_i=\min\limits_{1\leq j &lt; i}{(F_j+\sum\limits_{k=j+1}^{i}{(D_i-D_k)\cdot A_k})} +C_i 。 设 Y_i=\sum\limits_{j=1}^{i}{A_j\cdot D_j} ， S_i=\sum\limits_{j=1}^{i}{A_j} 。若点 k 优于点 j(j &lt; k) ，则满足 \frac{F_k-F_j+Y_k-Y_j}{S_k-S_j} &gt; D_i 维护斜率单调递增的决策点队列，且队首斜率大于 D_i 。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839/* * @Author: Skqliao * @Source: ZJOI 2007 * @Problem: 1096: [ZJOI2007]仓库建设 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1096 * @Date: 2019-02-25 19:14:22 * @LastEditTime: 2019-02-25 20:02:31 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;long long D[MAXN], A[MAXN], C[MAXN];long long S[MAXN], Y[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123;return (double)(F[k] - F[j] + Y[k] - Y[j]) / (S[k] - S[j]);&#125;int main() &#123;scanf("%d", &amp;N);for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld%lld%lld", &amp;D[i], &amp;A[i], &amp;C[i]); S[i] = S[i - 1] + A[i]; Y[i] = Y[i - 1] + A[i] * D[i];&#125;Que[qt] = 0;for (int i = 1; i &lt;= N; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= D[i]) ++qh; int j = Que[qh]; F[i] = F[j] + (S[i] - S[j]) * D[i] - Y[i] + Y[j] + C[i]; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i;&#125;printf("%lld\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2007」BZOJ 1095 捉迷藏]]></title>
    <url>%2FBZOJ-1095%2F</url>
    <content type="text"><![CDATA[无权树上有黑点和白点共 N 个，开始均为白点。有 M 个操作，分为两种：取反点 x 的颜色或查询树上白点对的最大距离。 N\leq 100000, M\leq 500000 分析 做的第一道动态点分治的题。。 首先考虑假如没有修改操作，那么求最远白点对只需要点分治，每次在重心合并子树中的最长和次长链，得到最大值。 有了修改，我们考虑动态点分治。 由于树的形态不变，因此各个子树的重心不变。那么我们可以将重心记录下来，形成一棵点分树，点分树上的父亲节点即为上一层重心，儿子节点为各子树重心。根据重心的性质，树高是 O(log{n}) 的。 发现修改一个点的颜色会对它上级的每一层重心造成影响。 用一个优先队列 S1[i] 维护子树中每个白点到上一层重心的距离， S2[i] 维护所有子树中距离的最大值，即所有 S1 的堆顶。再用一个堆来维护全局答案，即不同的两个 S2 堆顶之和。 那么修改一个点会导致 S1 发生变化，从而导致上层的 S2 发生变化，从而导致答案发生变化。 插入删除两点间的距离可以先用ST表预处理出欧拉序对应的深度的区间最小值，做到 O(n\log{n}) 预处理， O(1) 查询。 由于我们不知道修改的这个点是否是堆顶，因此插入 /删除前先在上层 S2 中弹出当前 S1 的堆顶，完成对 S1 的操作后，再重新向 S2 插入最大值。维护答案同理。 在堆中删除元素有一个常见的trick，即用两个堆分别维护所有和已删除的元素，一同弹出堆顶直到堆顶不同为止。 总复杂度 O((n + m)\log ^ 2{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263/* * @Author: Skqliao * @Source: ZJOI 2007 * @Problem: 1095: [ZJOI2007]Hide 捉迷藏 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1095 * @Date: 2019-02-24 10:24:53 * @LastEditTime: 2019-02-24 15:46:29 */#include &lt;bits/stdc++.h&gt;char In[1 &lt;&lt; 24], *at = In, *en = In;char gc() &#123; if (at == en) &#123; en = (at = In) + fread(In, 1, 1 &lt;&lt; 24, stdin); &#125; return at == en ? EOF : *at++;&#125;int ga() &#123; char c = gc(); while (!isalpha(c)) c = gc(); return c;&#125;int gt() &#123; int x = 0; char c = gc(); while (!isdigit(c)) c = gc(); while (isdigit(c)) &#123; x = x * 10 + c - '0'; c = gc(); &#125; return x;&#125;const int MAXN = 100000 + 5;const int LOG = 18;struct Prioirty_Queue &#123; std::priority_queue&lt;int&gt; In, Out; void insert(int x) &#123; In.push(x); &#125; void erase(int x) &#123; Out.push(x); &#125; void update() &#123; while (!Out.empty() &amp;&amp; In.top() == Out.top()) &#123; In.pop(); Out.pop(); &#125; &#125; void pop() &#123; update(); In.pop(); &#125; int top() &#123; update(); return In.top(); &#125; int secondtop() &#123; int x = top(); pop(); int y = top(); insert(x); return y; &#125; int size() &#123; return In.size() - Out.size(); &#125;&#125; S1[MAXN], S2[MAXN], ans;void Insert(Prioirty_Queue &amp;s) &#123; if (s.size() &gt;= 2) &#123; ans.insert(s.top() + s.secondtop()); &#125;&#125;void Erase(Prioirty_Queue &amp;s) &#123; if (s.size() &gt;= 2) &#123; ans.erase(s.top() + s.secondtop()); &#125;&#125;int N, M;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Sz[MAXN], MxSz[MAXN];bool Vis[MAXN];int rt, sigma;int Depth[MAXN];void getRoot(int x, int fa) &#123; MxSz[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; getRoot(v, x); MxSz[x] = std::max(MxSz[x], Sz[v]); &#125; &#125; MxSz[x] = std::max(MxSz[x], sigma - Sz[x]); if (MxSz[x] &lt; MxSz[rt]) rt = x;&#125;int Fa[MAXN];void cal(int x, int fa, int dep, Prioirty_Queue &amp;s) &#123; s.insert(dep); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; cal(v, x, dep + 1, s); &#125; &#125;&#125;int getSize(int x, int fa) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; Sz[x] += getSize(v, x); &#125; &#125; return Sz[x];&#125;int Dep[MAXN &lt;&lt; 1][LOG], cntD, Pos[MAXN];int build(int x) &#123; rt = 0; sigma = getSize(x, 0); getRoot(x, 0); int p = rt; Vis[p] = 1; S2[p].insert(0); for (int i = H[p]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (!Vis[v]) &#123; Prioirty_Queue tmp; cal(v, 0, 1, tmp); int p2 = build(v); Fa[p2] = p; S1[p2] = tmp; S2[p].insert(S1[p2].top()); &#125; &#125; Insert(S2[p]); return p;&#125;void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Dep[Pos[x] = ++cntD][0] = Depth[x]; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); Dep[++cntD][0] = Depth[x]; &#125; &#125;&#125;int Log[MAXN &lt;&lt; 1], Bin[LOG];int queryLcaDepth(int x, int y) &#123; x = Pos[x], y = Pos[y]; if (x &gt; y) std::swap(x, y); int d = Log[y - x + 1]; return std::min(Dep[x][d], Dep[y - Bin[d] + 1][d]);&#125;int queryDis(int x, int y) &#123; return Depth[x] + Depth[y] - 2 * queryLcaDepth(x, y); &#125;void turnOn(int x) &#123; Erase(S2[x]); S2[x].insert(0); Insert(S2[x]); for (int i = x; Fa[i]; i = Fa[i]) &#123; Erase(S2[Fa[i]]); if (S1[i].size()) &#123; S2[Fa[i]].erase(S1[i].top()); &#125; S1[i].insert(queryDis(Fa[i], x)); if (S1[i].size()) &#123; S2[Fa[i]].insert(S1[i].top()); &#125; Insert(S2[Fa[i]]); &#125;&#125;void turnOff(int x) &#123; Erase(S2[x]); S2[x].erase(0); Insert(S2[x]); for (int i = x; Fa[i]; i = Fa[i]) &#123; Erase(S2[Fa[i]]); if (S1[i].size()) &#123; S2[Fa[i]].erase(S1[i].top()); &#125; S1[i].erase(queryDis(Fa[i], x)); if (S1[i].size()) &#123; S2[Fa[i]].insert(S1[i].top()); &#125; Insert(S2[Fa[i]]); &#125;&#125;bool Status[MAXN];int main() &#123; N = gt(); for (int i = 1; i &lt; N; ++i) &#123; addEdge(gt(), gt()); &#125; MxSz[0] = N; build(1); dfs(1, 0); Log[0] = -1; for (int i = 1; i &lt;= cntD; ++i) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; Bin[0] = 1; for (int i = 1; i &lt;= Log[cntD]; ++i) &#123; Bin[i] = Bin[i - 1] &lt;&lt; 1; &#125; for (int j = 1; j &lt;= Log[cntD]; ++j) &#123; for (int i = 1; i + Bin[j - 1] - 1 &lt;= cntD; ++i) &#123; Dep[i][j] = std::min(Dep[i][j - 1], Dep[i + Bin[j - 1]][j - 1]); &#125; &#125; std::fill(Status + 1, Status + N + 1, 1); int cnt = N; M = gt(); for (int i = 1; i &lt;= M; ++i) &#123; if (ga() == 'G') &#123; if (cnt &lt; 2) &#123; printf("%d\n", cnt - 1); &#125; else &#123; printf("%d\n", ans.top()); &#125; &#125; else &#123; int u = gt(); if (Status[u]) &#123; --cnt; turnOff(u); &#125; else &#123; ++cnt; turnOn(u); &#125; Status[u] ^= 1; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉序</tag>
        <tag>ST表</tag>
        <tag>动态点分治</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「APIO 2010」BZOJ 1911 特别行动队]]></title>
    <url>%2FBZOJ-1911%2F</url>
    <content type="text"><![CDATA[将序列 A[1 \cdots n] 划分成若干个不相交区间，区间 [l,r] 的权值为 a\cdot x^2+b\cdot x+c ，其中 x=\sum\limits_{i=l}^{r}{A[i]} 。求最大权值和。 n\leq 1000000,-5\leq a\leq -1, |b|,|c|\leq 10000000,A[i]\leq 100 分析 令 S_i=\sum\limits_{j=1}^{i}{A_i} ， F_i 表示将前 i 个数划分成若干区间的最大权值和。 则 F_i=\min\limits_{1\leq j &lt; i}{(F_j+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c)} 。 考虑 i 从两个决策点 j,k 转移，若 j 更优，则需要满足： F_j-F_k+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c-(a\cdot (S_i-S_k)^2+b\cdot (S_i-S_k) + c) &gt; 0 移项整理可得 \frac{F_j-F_k+a(S_j^2-S_k^2)}{S_j-S_k} &lt; 2aS_i+b 。 维护单调队列，每次取队首更新当前答案，维护队列中斜率单调递减，且不超过 2aS_i+b 。 复杂度 O(n) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * @Author: Skqliao * @Source: APIO 2010 * @Problem: 1911: [Apio2010]特别行动队 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1911 * @Date: 2019-02-23 17:04:48 * @LastEditTime: 2019-02-24 10:03:05 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;long long a, b, c;long long S[MAXN], F[MAXN];template &lt;class T&gt;T sqr(T x) &#123; return x * x;&#125;double slop(int x, int y) &#123; return (double)(F[x] - F[y] + a * (S[x] + S[y]) * (S[x] - S[y])) / (S[x] - S[y]);&#125;int Que[MAXN], qh, qt;int main() &#123; long long x; scanf("%d%lld%lld%lld", &amp;N, &amp;a, &amp;b, &amp;c); Que[qt] = 0; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;x); S[i] = S[i - 1] + x; while (qt &gt; qh &amp;&amp; slop(Que[qh], Que[qh + 1]) &gt;= 2 * a * S[i] + b) ++qh; int j = Que[qh]; F[i] = F[j] + a * sqr(S[i] - S[j]) + b * (S[i] - S[j]) + c; while (qt &gt; qh &amp;&amp; slop(Que[qt], i) &gt;= slop(Que[qt - 1], Que[qt])) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[N]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CEOI 2004」JZOJ 1131 锯木场选址]]></title>
    <url>%2FJZOJ-1131%2F</url>
    <content type="text"><![CDATA[数轴从左到右有 n + 1 点，每个点有 A_i 个人，相邻两点距离为 B_i 。一个人移动 1 的花费为 1 。第 n + 1 个点为集合点，现可以在前 n 个点中再选择两个点作为集合点，如此一共有三个集合点。所有人必须向右移动到某一个集合点中，求所有人移动花费总和的最小值。 n\leq 20000 分析 记 D(i) 为点 1 和点 i 间的距离， G(i,j) 为将点 [i,j] 的人移动到 j 的花费，则 G(x,y)=\sum\limits_{x\leq i\leq y}{(D(y)-D(i))\cdot A(i)} 。 若当前选择点 i 为第二个集合点，点 j(1\leq j &lt; i) 为第一个集合点，则总花费为 \min\limits_{1\leq i &lt; j}(G(1,j)+G(j+1,i)+G(i+1,n+1)) 。 设 X(i)=\sum\limits_{j=1}^{i}{A(j)\cdot D(j)} ， Y(i)=\sum\limits_{j=1}^{i}{A(j)} ，则 G(x,y)=D(y)(Y(y)-Y(x-1))-X(y)+X(x-1) 。 若从点 j 转移比从点 k(1\leq j &lt; k &lt; i) 转移更优，则需要满足： G(1,j)+G(j+1,i)+G(i+1,n+1) &lt; G(1,k)+G(k+1,i)+G(i+1,n+1) ，移项整理可得 \frac{D(j)Y(j)-D(k)Y(k)}{Y(j)-Y(k)} &gt; D(i) 。 D(i) 单调递增，左式与 i 无关，称之为 j,k 点间的斜率。因此可以斜率优化DP。 维护单调队列，求当前点 i 时，队内元素 q_1 &lt; q_2 &lt; \cdots q_m 满足相邻两点 q_i,q_j 的斜率大于 D(i) ，且斜率单调递增。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: CEOI 2004 * @Problem: 1131. 【CEOI2004】锯木场选址Two(踢我) * @Url: https://jzoj.net/senior/#main/show/1131 * @Date: 2019-02-23 11:47:58 * @LastEditTime: 2019-02-23 16:36:42 */#include &lt;bits/stdc++.h&gt;const int MAXN = 20000 + 5;int N;long long A[MAXN], B[MAXN], D[MAXN], X[MAXN], Y[MAXN];int Que[MAXN], qh, qt;long long cost(int l, int r) &#123; return D[r] * (Y[r] - Y[l - 1]) - (X[r] - X[l - 1]); &#125;double cal(int x, int y) &#123; return (double)(D[x] * Y[x] - D[y] * Y[y]) / (Y[x] - Y[y]); &#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld%lld", &amp;A[i], &amp;B[i]); &#125; for (int i = 1; i &lt;= N + 1; ++i) &#123; Y[i] = Y[i - 1] + A[i]; D[i] = D[i - 1] + B[i - 1]; X[i] = X[i - 1] + D[i] * A[i]; &#125; Que[qt++] = 0; long long ans = LLONG_MAX; for (int i = 1; i &lt;= N; ++i) &#123; while (qt - qh &gt; 1 &amp;&amp; cal(Que[qh], Que[qh + 1]) &lt;= D[i]) ++qh; ans = std::min(ans, cost(1, Que[qh]) + cost(Que[qh] + 1, i) + cost(i + 1, N + 1)); while (qt - qh &gt; 1 &amp;&amp; cal(Que[qt - 2], Que[qt - 1]) &gt;= cal(Que[qt - 1], i)) --qt; Que[qt++] = i; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>JZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2008」BZOJ 1010 玩具装箱toy]]></title>
    <url>%2FBZOJ-1010%2F</url>
    <content type="text"><![CDATA[用若干个区间覆盖 n 个数 A[1 \cdots n] ，区间 [l,r] 的花费为 (\sum\limits_{i=l}^{r}{A[i]}+r-l-L)^2 。求总花费的最小值。 n\leq 50000,A_i,L &gt; 0 分析 记 F[i] 为覆盖前 i 个数的最小花费， S[i]=\sum\limits_{j=1}^{i}{A[j]} 。即可得到一个simple的DP转移方程， F[i]=\min\limits_{1\leq j &lt; i}(F[j]+(S[i]-S[j]+i-j-1-L)^2) 。 但是复杂度太高，为 O(n^2) ，需要优化。 考虑两个决策点 j,k(j &lt; k) ，什么时候 j 会更优。 即满足 F[j]+(S[i]-S[j]+i-j-1-L)^2-F[k]+(S[i]-S[k]+i-k-1-L)^2 &gt; 0 。 设 S'[i]=S[i]+i-1 ，整理可得： F[j]-F[k]-2(S'[i]-L-1)(S'[j]-S'[k])+S'^2[j]-S'^2[k]&gt;0 。 移项得 \frac{F[i]-F[k]+(S'[j]+S'[k]+2L+2)(S'[j]-S'[k])}{2(s'[j]-s'[k])}&gt;S'[i] 。 发现左式与 i 无关，且 S'[i] 单调不减。这是一个斜率优化的题。 设左式为 j,k 间的斜率，维护单调队列，满足相邻两点间的斜率单调递增，且大于 S'[i] 。每次取队首决策点更新当前 F[i] ，并将 i 插入队尾。 复杂度 O(n)) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: HNOI 2008 * @Problem: 1010: [HNOI2008]玩具装箱toy * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1010 * @Date: 2019-02-23 09:47:42 * @LastEditTime: 2019-02-23 11:03:34 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;int N, L;long long A[MAXN], F[MAXN], S[MAXN];int Que[MAXN], qh, qt;double cal(int j, int k) &#123;return (F[j] - F[k] + (S[j] + S[k] + 2 * L + 2) * (S[j] - S[k])) / 2 / (S[j] - S[k]);&#125;int main() &#123;scanf("%d%d", &amp;N, &amp;L);for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]);&#125;Que[qt++] = 0;S[0] = -1;for (int i = 1; i &lt;= N; ++i) &#123; S[i] = S[i - 1] + A[i] + 1; while (qt - qh &gt; 1 &amp;&amp; cal(Que[qh], Que[qh + 1]) &lt;= S[i]) &#123; ++qh; &#125; F[i] = F[Que[qh]] + (S[i] - S[Que[qh]] - L - 1) * (S[i] - S[Que[qh]] - L - 1); while (qt - qh &gt; 1 &amp;&amp; cal(Que[qt - 2], Que[qt - 1]) &gt;= cal(Que[qt - 1], i)) &#123; --qt; &#125; Que[qt++] = i;&#125;printf("%lld\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2007 Mar」BZOJ 1639 Monthly Expense 月度开支]]></title>
    <url>%2FBZOJ-1639%2F</url>
    <content type="text"><![CDATA[将 A[1 \cdots N] 划分成 M 个区间，使得各区间和的最大值最小。 N,M\leq 100000 分析 二分答案。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* * @Author: Skqliao * @Source: USACO2007 Mar * @Problem: 1639: [Usaco2007 Mar]Monthly Expense 月度开支 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1639 * @Date: 2019-02-22 17:05:58 * @LastEditTime: 2019-02-22 17:19:34 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int N, M;int A[MAXN];bool check(long long x) &#123; int left = M; long long sum = 0; for (int i = 1; i &lt;= N; ++i) &#123; if (sum + A[i] &gt; x) &#123; sum = 0; --left; &#125; sum += A[i]; &#125; return left &gt; 0;&#125;int main() &#123; long long mx = 0, sum = 0; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); sum += A[i]; mx = std::max(mx, (long long)A[i]); &#125; long long l = mx, r = sum; long long ans = 0; while (l &lt;= r) &#123; long long m = (l + r) / 2; if (check(m)) &#123; r = m - 1; ans = m; &#125; else l = m + 1; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2010」BZOJ 1816 扑克牌]]></title>
    <url>%2FBZOJ-1816%2F</url>
    <content type="text"><![CDATA[有 N 种牌，各有 A_i 张。还有一类特殊的牌，有 M 张。每副牌由 N 张不同的牌组成，求最多能凑出多少副牌。 N\leq 50,M,A_i\leq 5000000000 分析 答案显然具有单调性，因此可以二分答案将求最值问题转为判定可行性问题。 假设当前判定是否能凑出 x 副牌。对于 A_i\geq x 的牌，显然每副牌中都能放一张；对于 A_i &lt; x 的牌，需要用特殊的牌补。若特殊的牌不够或者在一副牌中出现两次，则判定失败。 也就是说这些牌需要至少凑够前 N-1 个位置，用特殊的牌补最后一张，即需要满足 \sum{min(x,A_i)} &lt; min(M,x) 。 复杂度 O(M\log{\sum{A_i}}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * @Author: Skqliao * @Source: CQOI 2010 * @Problem: 1816: [Cqoi2010]扑克牌 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1816 * @Date: 2019-02-22 16:23:14 * @LastEditTime: 2019-02-22 16:55:38 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50 + 5;int N;long long M, A[MAXN];bool check(long long x) &#123; long long tot = 0; for (int i = 1; i &lt;= N; ++i) &#123; tot += std::min(x, A[i]); &#125; return N * x - tot &lt;= std::min(x, M);&#125;int main() &#123; scanf("%d%lld", &amp;N, &amp;M); long long sum = M; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); sum += A[i]; &#125; long long l = 0, r = sum / N; long long ans = 0; while (l &lt;= r) &#123; long long m = (l + r) / 2; if (check(m)) &#123; ans = m; l = m + 1; &#125; else r = m - 1; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2005 Dec」BZOJ 1671 Knights of Ni 骑士]]></title>
    <url>%2FBZOJ-1671%2F</url>
    <content type="text"><![CDATA[在 N\times M 的网格图中，初始位于 (x,y) 。每个点有属性 1-4 ，若属性为 1 则不可经过。要求先走到一个属性为 4 的格子，再走到一个属性为 3 的格子，要求在走到 4 之前不能经过 3 。求最少步数。 N,M\leq 1000 分析 做两次BFS，第一次初始为 (x,y) ，求出到每个 4 的最小步数，再以这些点为起点求出总步数。 复杂度 O(NM) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/* * @Author: Skqliao * @Source: USACO2005 Dec * @Problem: 1671: [Usaco2005 Dec]Knights of Ni 骑士 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1671 * @Date: 2019-02-22 15:35:46 * @LastEditTime: 2019-02-22 16:14:24 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int A[MAXN][MAXN];int Step[MAXN][MAXN];std::queue&lt;std::pair&lt;int, int&gt; &gt; Que;int bfs(int sx, int sy) &#123; memset(Step, 0x3f, sizeof Step); Step[sx][sy] = 0; Que.push(std::make_pair(sx, sy)); while (!Que.empty()) &#123; std::pair&lt;int, int&gt; a = Que.front(); Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.first + Dicx[i]; int y = a.second + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) continue; if (A[x][y] != 1 &amp;&amp; A[x][y] != 3) &#123; if (Step[x][y] &gt; Step[a.first][a.second] + 1) &#123; Step[x][y] = Step[a.first][a.second] + 1; Que.push(std::make_pair(x, y)); &#125; &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 4) &#123; Que.push(std::make_pair(i, j)); &#125; else &#123; Step[i][j] = 0x3f3f3f3f; &#125; &#125; &#125; while (!Que.empty()) &#123; std::pair&lt;int, int&gt; a = Que.front(); Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.first + Dicx[i]; int y = a.second + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) continue; if (A[x][y] != 1) &#123; if (Step[x][y] &gt; Step[a.first][a.second] + 1) &#123; Step[x][y] = Step[a.first][a.second] + 1; Que.push(std::make_pair(x, y)); &#125; &#125; &#125; &#125; int ans = INT_MAX; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 3) ans = std::min(ans, Step[i][j]); &#125; &#125; return ans;&#125;int main() &#123; int sx = 0, sy = 0; scanf("%d%d", &amp;M, &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); if (A[i][j] == 2) &#123; sx = i, sy = j; &#125; &#125; &#125; printf("%d\n", bfs(sx, sy)); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2013」BZOJ 3170 松鼠聚会]]></title>
    <url>%2FBZOJ-3170%2F</url>
    <content type="text"><![CDATA[坐标系中有 n 个点 (x_i,y_i) ，选择一点 (x_j,y_j) ，使得所有点到该点的切比雪夫距离之和最小。 n\leq 10^5 分析 dis(i,j)=max(|x_i-x_j|,|y_i-y_j|) 。 设 X_i=x_i-y_i,Y_i=x_i+y_i ，则 dis(i,j)=\frac{|X_i-X_j|+|Y_i-Y_j|}{2} ，因此 x,y 两部分可以分别计算。 分别按 x,y 排序，做前缀和，则 \sum\limits_{i=1}^{n}|{X_i-X_j}|=(j-1)\cdot X_j-sumx_{j-1}+sum_n-sum_j-(n-j)\cdot X_j 。即可 O(n) 计算出最小距离。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/* * @Author: Skqliao * @Source: TJOI 2013 * @Problem: 3170: [Tjoi2013]松鼠聚会 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3170 * @Date: 2019-02-22 14:13:36 * @LastEditTime: 2019-02-22 15:06:32 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;struct Node &#123; int id; long long x, y;&#125; A[MAXN];int N;bool cmp1(const Node&amp; x, const Node&amp; y) &#123; return x.x &lt; y.x;&#125;bool cmp2(const Node&amp; x, const Node&amp; y) &#123; return x.y &lt; y.y;&#125;long long Sum[MAXN];long long X[MAXN], Y[MAXN];int main() &#123; int x, y; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;x, &amp;y); A[i] = (Node) &#123;i, x - y, x + y&#125;; &#125; std::sort(A + 1, A + N + 1, cmp1); for (int i = 1; i &lt;= N; ++i) &#123; Sum[i] = Sum[i - 1] + A[i].x; &#125; for (int i = 1; i &lt;= N; ++i) &#123; X[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].x; X[A[i].id] += (i - 1) * A[i].x - Sum[i - 1]; &#125; std::sort(A + 1, A + N + 1, cmp2); for (int i = 1; i &lt;= N; ++i) &#123; Sum[i] = Sum[i - 1] + A[i].y; &#125; for (int i = 1; i &lt;= N; ++i) &#123; Y[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].y; Y[A[i].id] += (i - 1) * A[i].y - Sum[i - 1]; &#125; long long ans = LLONG_MAX; for (int i = 1; i &lt;= N; ++i) &#123; ans = std::min(ans, X[i] + Y[i]); &#125; printf("%lld\n", ans / 2); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2006」BZOJ 1862 GameZ游戏排名系统]]></title>
    <url>%2FBZOJ-1862%2F</url>
    <content type="text"><![CDATA[有 n 个操作： 更新name的得分为score（删除以前的得分） 查询name的排名（得分相同按照时间先后排名） 查询得分第 [k,k+10] 名的人的名字（如果没有 k+10 个人就输出到最后一名为止） n\leq 250000 分析 很明显的平衡树的板子，只是处理起来麻烦一些。 按照得分为第一关键字，时间为第二关键字维护平衡树，用一个map映射名字对应的得分。 平衡树需支持插入，删除，查询第 k 大，查询名次，查询前驱的操作。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173/* * @Author: Skqliao * @Source: ZJOJ 2006 * @Problem: 1862: [Zjoi2006]GameZ游戏排名系统 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1862 * @Date: 2019-02-21 16:26:15 * @LastEditTime: 2019-02-22 13:59:09 */#include &lt;bits/stdc++.h&gt;#include &lt;bits/extc++.h&gt;const int MAXN = 250000 + 5;int N;std::string s;struct Treap &#123; std::string name; int key, key2, fix; int sz; Treap* ch[2]; int cmp(int x, int y) &#123; if (key == x) &#123; return y == key2 ? -1 : y &lt; key2; &#125; return x &gt; key; &#125; void pushUp() &#123; sz = 1; if (ch[0]) sz += ch[0]-&gt;sz; if (ch[1]) sz += ch[1]-&gt;sz; &#125;&#125; *R(NULL), Pool[MAXN];int cntP;Treap* newTreap(int x, int t) &#123; Pool[++cntP] = (Treap) &#123;s, x, t, rand(), 1, NULL, NULL&#125;; return Pool + cntP;&#125;void rotate(Treap*&amp; t, int d) &#123; Treap* k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap*&amp; t, int x, int y) &#123; if (!t) &#123; t = newTreap(x, y); return; &#125; int d = t-&gt;cmp(x, y); ++t-&gt;sz; insert(t-&gt;ch[d], x, y); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125;&#125;void erase(Treap*&amp; t, int x, int y) &#123; if (!t) return; --t-&gt;sz; int d = t-&gt;cmp(x, y); if (d == -1) &#123; if (!t-&gt;ch[0]) &#123; t = t-&gt;ch[1]; &#125; else if (!t-&gt;ch[1]) &#123; t = t-&gt;ch[0]; &#125; else &#123; int e = t-&gt;ch[0]-&gt;fix &gt; t-&gt;ch[1]-&gt;fix; rotate(t, e); erase(t-&gt;ch[e], x, y); &#125; &#125; else &#123; erase(t-&gt;ch[d], x, y); &#125; if (t) &#123; t-&gt;pushUp(); &#125;&#125;int queryRank(Treap*&amp; t, int x, int y) &#123; int num = t-&gt;ch[1] ? t-&gt;ch[1]-&gt;sz : 0; int d = t-&gt;cmp(x, y); if (d == -1) &#123; return num + 1; &#125; else if (d == 0) &#123; return num + 1 + queryRank(t-&gt;ch[0], x, y); &#125; else &#123; return queryRank(t-&gt;ch[1], x, y); &#125;&#125;std::pair&lt;int, int&gt; queryKth(Treap*&amp; t, int x) &#123; int num = t-&gt;ch[1] ? t-&gt;ch[1]-&gt;sz : 0; if (x == num + 1) &#123; return std::make_pair(t-&gt;key, t-&gt;key2); &#125; else if (x &lt;= num) &#123; return queryKth(t-&gt;ch[1], x); &#125; else &#123; return queryKth(t-&gt;ch[0], x - num - 1); &#125;&#125;int mn, mn2;void queryPre(Treap*&amp; t, int x, int y) &#123; if (!t) return; int d = t-&gt;cmp(x, y); if (d != 0) &#123; if (t-&gt;key &gt; mn) &#123; mn = t-&gt;key; mn2 = t-&gt;key2; s = t-&gt;name; &#125; else if (t-&gt;key == mn &amp;&amp; t-&gt;key2 &lt; mn2) &#123; mn2 = t-&gt;key2; s = t-&gt;name; &#125; queryPre(t-&gt;ch[1], x, y); &#125; else &#123; queryPre(t-&gt;ch[0], x, y); &#125;&#125;__gnu_pbds::gp_hash_table&lt;std::string, int&gt; Map, Map2;int main() &#123; int x; //srand((unsigned long long)new char); std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cin &gt;&gt; N; s = "skqliao"; insert(R, -INT_MAX, INT_MAX); for (int i = 1; i &lt;= N; ++i) &#123; std::cin &gt;&gt; s; if (s[0] == '+') &#123; s = s.substr(1); std::cin &gt;&gt; x; if (Map.find(s) != Map.end()) &#123; erase(R, Map[s], Map2[s]); &#125; Map[s] = x; Map2[s] = i; insert(R, x, i); &#125; else if (s[0] == '?') &#123; if (isdigit(s[1])) &#123; int x = 0; for (size_t i = 1; i &lt; s.size(); ++i) &#123; x = x * 10 + s[i] - '0'; &#125; std::pair&lt;int, int&gt; a = queryKth(R, x); x = a.first; int y = a.second; for (int i = 0; i &lt; 10; ++i) &#123; mn = -INT_MAX; mn2 = INT_MAX; queryPre(R, x, y); if (mn == -INT_MAX) break; std::cout &lt;&lt; s &lt;&lt; " "; x = mn, y = mn2 + 1; &#125; std::cout &lt;&lt; "\n"; &#125; else &#123; std::cout &lt;&lt; queryRank(R, Map[s.substr(1)], Map2[s.substr(1)]) &lt;&lt; "\n"; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2008」BZOJ 1040 骑士]]></title>
    <url>%2FBZOJ-1040%2F</url>
    <content type="text"><![CDATA[每个点有权值 W_i ，选择点 i 后不能选择点 A_i 。选择任意多个点，使得权值和最大。 N\leq 1000000 分析 根据题意，不能同时选择点 i 和 A_i 。 该图有 N 个点 N 条边，因此是个基环树森林。 对于每棵基环树，断掉环上任意一条边 (u,v) 。以 u,v 分别为根跑树形DP，父亲儿子不能被同时选择，且根节点不能被选。则这棵基环树的贡献为两次DP的较大值。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778/* * @Author: Skqliao * @Source: BZOJ 2008 * @Problem: 1040: [ZJOI2008]骑士 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1040 * @Date: 2019-02-21 15:39:58 * @LastEditTime: 2019-02-21 16:12:59 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;int W[MAXN];struct Edge &#123;int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE = -1;void addEdge(int u, int v) &#123;E[++cntE] = (Edge) &#123;v, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, H[v]&#125;;H[v] = cntE;&#125;int Vis[MAXN], cnt;int fir, sec, cut;void dfs(int x, int fa) &#123;Vis[x] = cnt;for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; if (!Vis[v]) &#123; dfs(v, x); &#125; else &#123; fir = x; sec = v; cut = i; &#125; &#125;&#125;&#125;long long F[MAXN][2];long long dp(int x, int fa) &#123;F[x][1] = W[x];F[x][0] = 0;for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (i == cut || i == (cut ^ 1) || v == fa) continue; dp(v, x); F[x][0] += std::max(F[v][0], F[v][1]); F[x][1] += F[v][0];&#125;return F[x][0];&#125;int main() &#123;memset(H, -1, sizeof H);scanf("%d", &amp;N);int x;for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;W[i], &amp;x); addEdge(x, i);&#125;long long ans = 0;for (int i = 1; i &lt;= N; ++i) &#123; if (Vis[i]) continue; ++cnt; dfs(i, 0); ans += std::max(dp(fir, 0), dp(sec, 0));&#125;printf("%lld\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>基环树</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2008」BZOJ 1054 移动玩具]]></title>
    <url>%2FBZOJ-1054%2F</url>
    <content type="text"><![CDATA[给定两个 4\times 4 的01矩阵，每次可以交换一对相邻的 0,1 ，求前一个矩阵转移到后一个矩阵的最少步数。 分析 BFS+Hash。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/* * @Author: Skqliao * @Source: HAOI 2008 * @Problem: 1054: [HAOI2008]移动玩具 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1054 * @Date: 2019-02-18 22:53:30 * @LastEditTime: 2019-02-21 15:15:00 */#include &lt;bits/stdc++.h&gt;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;struct Node &#123;std::string code;int step;&#125;;std::string s, t, x;std::multiset&lt;std::string&gt; Vis;std::queue&lt;Node&gt; Que;int bfs() &#123;Que.push((Node) &#123;s, 0&#125;);while (!Que.empty()) &#123; Node a = Que.front(); Que.pop(); for (int p = 0; p &lt; 16; ++p) &#123; if (a.code[p] == '0') continue; int i = p / 4, j = p % 4; for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k], y = j + Dicy[k]; if (x &lt; 0 || y &lt; 0 || x &gt; 3 || y &gt; 3) continue; if (a.code[x * 4 + y] == '1') continue; std::string b = a.code; b[p] = '0'; b[x * 4 + y] = '1'; if (Vis.count(b)) continue; Vis.insert(b); if (t == b) return a.step + 1; Que.push((Node) &#123;b, a.step + 1&#125;); &#125; &#125;&#125;&#125;int main() &#123;for (int i = 0; i &lt; 4; ++i) &#123; std::cin &gt;&gt; x; s += x;&#125;for (int i = 0; i &lt; 4; ++i) &#123; std::cin &gt;&gt; x; t += x;&#125;if (s == t) std::cout &lt;&lt; 0;else std::cout &lt;&lt; bfs();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「FJOI 2007」BZOJ 1002 轮状病毒]]></title>
    <url>%2FBZOJ-1002%2F</url>
    <content type="text"><![CDATA[求 N 轮状病毒的不同状态数。 N\leq 100 分析 发现中间的点度数为 N ，其他点度数为 3 ，用矩阵树定理解即可。 也可以暴力打表找规律，记 f(i) 为 i 轮状病毒的状态数，递推式为 f(i)=3\cdot f(i-1)-f(i-2)+2 。 python打表或者写高精度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687/* * @Author: Skqliao * @Date: 2019-02-16 20:21:57 * @LastEditTime: 2019-02-16 21:10:05 * @Source: FJOI 2007 * @Problem: 1002: [FJOI2007]轮状病毒 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1002 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N;struct Int &#123;static const int MAXN = 10000 + 5;int len, S[MAXN];Int operator=(int x) &#123; memset(S, 0, sizeof S); len = 0; while (x) &#123; S[len++] = x % 10; x /= 10; &#125; return *this;&#125;Int operator+(const Int &amp;x) &#123; Int c; c.len = std::max(len, x.len); memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i] += S[i] + x.S[i]; c.S[i + 1] += c.S[i] / 10; c.S[i] %= 10; &#125; if (c.S[c.len]) ++c.len; return c;&#125;Int operator-(const Int &amp;x) &#123; Int c; c.len = len; memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i] = S[i] - x.S[i]; while (c.S[i] &lt; 0) &#123; c.S[i] += 10; S[i + 1]--; &#125; &#125; while (!c.S[c.len - 1]) --c.len; return c;&#125;Int operator*(const Int &amp;x) &#123; Int c; c.len = len + x.len - 1; memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; len; ++i) &#123; for (int j = 0; j &lt; x.len; ++j) &#123; c.S[i + j] += S[i] * x.S[j]; &#125; &#125; for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i + 1] += c.S[i] / 10; c.S[i] %= 10; &#125; if (c.S[c.len]) ++c.len; return c;&#125;void print() &#123; for (int i = len - 1; i &gt;= 0; --i) &#123; printf("%d", S[i]); &#125;&#125;&#125; F[MAXN], x, y;int main() &#123;scanf("%d", &amp;N);x = 2;y = 3;F[1] = 1;F[2] = 5;for (int i = 3; i &lt;= N; ++i) &#123; F[i] = y * F[i - 1] - F[i - 2] + x;&#125;F[N].print();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>矩阵树定理</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2006」BZOJ 1003 物流运输]]></title>
    <url>%2FBZOJ-1003%2F</url>
    <content type="text"><![CDATA[一共有 n 天，每天要在无向图 G 中从 1 走到 m 。有 k 个限制条件，即不能在第 [l,r] 天中经过点 i 。每天的花费为路径总长度，每次更换线路（相比于前一天）会额外增加 k 的花费，求最小花费。 n\leq 100,m\leq 20 分析 点数极少，因此我们可以通过 n^2 次最短路，预处理出来第 [l,r] 天的每天的最小花费 C[l][r] （保证该花费对应的路径在第 [l,r] 天都是合法的）。 然后DP， F[i] 表示前 i 天最小的总花费。枚举上一次更换的时间 j ，则 F[i]=\min\{F[j-1]+(j-i+1)\cdot C[j][i]+K\cdot[j\not = 1]\}(1\leq j\leq i) 。 复杂度 O(n^2m\log{m}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586/* * @Author: Skqliao * @Date: 2019-02-16 18:54:21 * @LastEditTime: 2019-02-16 20:02:16 * @Source: ZJOI 2006 * @Problem: 1003: [ZJOI2006]物流运输 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1003 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N, M, K, P, D;int W[MAXN][MAXN];struct Edge &#123;int v, w, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, w, H[v]&#125;;H[v] = cntE;&#125;typedef std::pair&lt;int, int&gt; pii;int dijkstra(int l, int r) &#123;static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq;static int Dis[MAXN];static bool Vis[MAXN];memset(Vis, 0, sizeof Vis);memset(Dis, 0x3f, sizeof Dis);Dis[1] = 0;Pq.push(std::make_pair(0, 1));for (int i = l; i &lt;= r; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (W[i][j]) Vis[j] = 1; &#125;&#125;while (!Pq.empty()) &#123; while (!Pq.empty() &amp;&amp; Pq.top().first &gt; Dis[Pq.top().second]) Pq.pop(); if (Pq.empty()) break; int x = Pq.top().second; Pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v] || Dis[v] &lt; Dis[x] + E[i].w) continue; Dis[v] = Dis[x] + E[i].w; Pq.push(std::make_pair(Dis[v], v)); &#125;&#125;return Dis[M];&#125;int F[MAXN], G[MAXN][MAXN];int main() &#123;int u, v, w;scanf("%d%d%d%d", &amp;N, &amp;M, &amp;K, &amp;P);for (int i = 1; i &lt;= P; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w);&#125;scanf("%d", &amp;D);for (int i = 1; i &lt;= D; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); for (int j = v; j &lt;= w; ++j) W[j][u] = 1;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = i; j &lt;= N; ++j) &#123; G[i][j] = dijkstra(i, j); &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; F[i] = INT_MAX; if (G[1][i] != 0x3f3f3f3f) F[i] = i * G[1][i]; for (int j = 2; j &lt;= i; ++j) &#123; if (G[j][i] != 0x3f3f3f3f) F[i] = std::min(F[i], F[j - 1] + G[j][i] * (i - j + 1) + K); &#125;&#125;printf("%d\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ICPC-Beijing 2006」BZOJ 1001 狼抓兔子]]></title>
    <url>%2FBZOJ-1001%2F</url>
    <content type="text"><![CDATA[在网格图中，任意点 (x,y) 都有 (x,y)\rightarrow (x+1,y) / (x,y)\rightarrow (x,y+1) / (x,y)\rightarrow (x+1,y+1) 这三种边。起点 S 位于 (1,1) ，终点 T 位于 (n,m) 。求 S-T 最小割。 n,m\leq 1000 分析 如果根据最大流最小割定理，通过求 S-T 最大流得到最小割的话，是行不通的，因为该图有最多 1000^2 个点。 但是本题特殊的一点在于这是一个平面图，可以将其转化为对偶图，通过求对偶图上的最短路得到原图的最小割。 平面图转对偶图的流程如下： 用一条不与其他任何边相交的新边连接 S,T ，构成一个新面 将平面图的每个面对应为对偶图的点，第一步构造的新面和无边界的面作为新图的起点 s 和终点 t 如果原图中边 e 同时属于两个面 s1,s2 ，则在新图中 s1 和 s2 之间连一条权值与 e 相同的无向边 删去 s,t 之间的边 则 s-t 最短路对应 S-T 最大流。 复杂度 O(nm\lg{nm}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596/* * @Author: Skqliao * @Date: 2019-02-13 12:36:43 * @LastEditTime: 2019-02-13 18:20:57 * @Source: BJOI 2006 * @Problem: 1001: [BeiJing2006]狼抓兔子 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1001 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2 * 1000 * 1000 + 5;const int MAXM = MAXN * 3;struct Edge &#123;int v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, w, H[v]&#125;;H[v] = cntE;&#125;int N, M;int S, T;typedef std::pair&lt;int, int&gt; pii;int Dis[MAXN];int dijkstra() &#123;static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq;memset(Dis, 0x3f, sizeof Dis);Dis[S] = 0;Pq.push(std::make_pair(Dis[S], S));while (!Pq.empty()) &#123; while (!Pq.empty() &amp;&amp; Dis[Pq.top().second] &lt; Pq.top().first) Pq.pop(); if (Pq.empty()) break; int x = Pq.top().second; Pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125;&#125;return Dis[T];&#125;int main() &#123;int x;scanf("%d%d", &amp;N, &amp;M);if (N == 1 || M == 1) &#123; int ans = INT_MAX; while (~scanf("%d", &amp;x)) ans = std::min(ans, x); printf("%d\n", ans);&#125; else &#123; N--, M--; S = 0, T = N * M * 2 + 1; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d", &amp;x); addEdge(i, T, x); &#125; for (int i = 2; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 3) * M + j, (2 * i - 2) * M + j, x); &#125; &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d", &amp;x); addEdge((2 * N - 1) * M + i, S, x); &#125; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); addEdge((2 * i - 1) * M + 1, S, x); for (int j = 1; j &lt;= M - 1; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 2) * M + j, (2 * i - 2) * M + j + M + 1, x); &#125; scanf("%d", &amp;x); addEdge((2 * i - 1) * M, T, x); &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 2) * M + j, (2 * i - 2) * M + j + M, x); &#125; &#125; printf("%d\n", dijkstra());&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>对偶图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1312 Neerc2006 Hard Life]]></title>
    <url>%2FBZOJ-1312%2F</url>
    <content type="text"><![CDATA[无向图 G 有 n 个点 m 条边，对于任意子图 G'\in G ，定义它的权值为 |E|/|V| ，其中 |E|,|V| 分别为子图的边数和点数。求在最大化子图权值的条件下，子图点数的最大值。 n\leq 100,m\leq 1000 分析 如果将 |E|,|V| 拓展为边权和与点权和，那么最大化子图 |E|/|V| 即求最大密度子图。而本题只是边权点权皆为 1 的特殊情况。 对于这类问题，可采用分数规划+最小割来解决。 首先二分 k=|E|/|V| ，则 |E| = k\cdot |V| 。如果两个点被选择，则可以获得这条边的权值，由此问题可以转化为求最大权闭合子图。 将每条边 (u_i,v_i) 抽象为新点 A_i ，连接 (S,A_i) ，容量为 1 。 A_i 向 u_i,v_i 连接容量为无穷的边。原点向 T 连边，容量为二分的 k 值。 二分 k 直到求得最大权闭合子图权值 &lt; 0 为止。 既然要求在最大化权值情况下的点个数的最大值，那么再跑一遍最小割（ k 取允许的最大值），与 S 联通的原点即为子图的点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130/* * @Author: Skqliao * @Date: 2019-02-12 18:50:43 * @LastEditTime: 2019-02-12 22:17:09 * @Source: BZOJ * @Problem: Neerc2006 Hard Life * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1312 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2100 + 5;const int MAXM = MAXN * 5;const double eps = 8e-6;struct Edge &#123; int v; double f, cap; int nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Cur[MAXN], Dis[MAXN];int S, T;void addEdge(int u, int v, double f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); if (x == T) return true; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f &gt; eps) &#123; Dis[v] = Dis[x] + 1; Que.push(v); &#125; &#125; &#125; return false;&#125;double dfs(int x, double maxf) &#123; if (x == T) return maxf; double left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &gt; eps) &#123; double flow = dfs(v, std::min(left, E[i].f)); if (flow &gt; eps) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (left &lt; eps) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;double dinic() &#123; double flow = 0; while (bfs()) &#123; flow += dfs(S, INT_MAX); &#125; return flow;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;int N, M;bool check(double x) &#123; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = H[i]; ~j; j = E[j].nxt) &#123; if (E[j].v == T) &#123; E[j].f = E[j].cap = x; &#125; &#125; &#125; return M - dinic() &gt; eps;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); if (M == 0) &#123; puts("1"); return 0; &#125; init(N + M); for (int i = 1; i &lt;= N; ++i) &#123; addEdge(i, T, 0); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(S, i + N, 1); addEdge(i + N, u, INT_MAX); addEdge(i + N, v, INT_MAX); &#125; double l = 0, r = M; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; l = m; &#125; else r = m; &#125; check(l - eps); int ans = 0; for (int i = 1; i &lt;= N; ++i) &#123; if (Dis[i] != -1) ++ans; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最大密度子图</tag>
        <tag>分数规划</tag>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「NOI 2006」BZOJ 1497 最大获利]]></title>
    <url>%2FBZOJ-1497%2F</url>
    <content type="text"><![CDATA[有 N 个点，选择点 i 花费 A_i 的代价。有 M 个关系，如果点 x_i,y_i 均被选择，则可以获得收益 B_i 。求收益-代价的最大值。 N\leq 5000,M\leq 50000 分析 这类问题也是常见的二元关系类题目，称之为最大权闭合子图。 将每个点的花费作为该点的点权（负数），将两点间的边抽象成一个点，点权为收益，新点向这两个点连有向边。 那么如果选择收益对应的点，就必须也选择其所有后继。最终求选择的子图点权和的最大值，这正是求最大权闭合子图。 根据相关建图方法，该问题可以转化为求最小割。 S 向所有正点权的点连边，容量为该点点权。所有负权点向 T 连边，容量为点权的绝对值。原图的所有边保留，容量为无穷大。则原图的最大权闭合子图的权值和为原图中所有正点权权值之和-新图最小割。 简易证明如下： 考虑一条有向边 x\rightarrow y ，如果 x 被选择则 y 必须被选择。即若 y 不选且 x 选，需要付出无穷的代价。清楚这一点后，根据网络流之二元关系的建图套路便能得到新图。 按照常理说这么多点和边的图跑网络流是很慢的，1s的时间跑不出来。但是对于这道题而言，图只有四层，即 S /正权点/负权点/ T ，所以每次增广时的深度很小，也就跑的很快。（纯粹口胡） 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-02-12 18:09:52 * @LastEditTime: 2019-02-12 18:23:18 * @Source: NOI 2006 * @Problem: 1497: [NOI2006]最大获利 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1497 */#include &lt;bits/stdc++.h&gt;const int MAXN = 55000 + 5;const int MAXM = MAXN * 3;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int S, T;int Cur[MAXN], Dis[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memset(Dis, -1, sizeof Dis); memcpy(Cur, H, sizeof H); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) &#123; flow += dfs(S, INT_MAX); &#125; return flow;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;int N, M;int ans;int main() &#123; int x, y, z; scanf("%d%d", &amp;N, &amp;M); init(N + M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); addEdge(i, T, x); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); addEdge(S, i + N, z); addEdge(i + N, x, INT_MAX); addEdge(i + N, y, INT_MAX); ans += z; &#125; printf("%d\n", ans - dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割</tag>
        <tag>最大权闭合子图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「湖南省队训练 2013」BZOJ 3894 文理分科]]></title>
    <url>%2FBZOJ-3894%2F</url>
    <content type="text"><![CDATA[在 n\times m 的矩阵中，每个格子可以选择 0 或 1 ，分别获得收益 A_{i,j} 与 B_{i,j} 。如果一个格子和与它四相邻的格子选择相同，则额外获得收益 C_{i,j} 与 D_{i,j} （都选 0 或都选 1 ）。求总收益的最大值。 n,m\leq 100,A_{i,j},B_{i,j},C_{i,j},D_{i,j}\leq 500 分析 还是二元关系的题目，相比于happiness要复杂一些。 照旧将最大值转化为所有收益-最小割。 建图方法如下： 对于每个点 x ，割去 (S,x) 表示不选文科，割去 (x,T) 表示不选理科，容量为 A_x 和 B_x 。 新建点 a_x,b_x ，表示 x 以及四相邻的点均选择 0 或 1 。连接 (S,a_x) 和 (b_x,T) ，容量分别为 C_x 和 D_x 。 但是可能会出现不合法的情况，即相邻点选择理科，但是又割去 (b_x,T) 。因此让 a_x 向这五个点（ x 与相邻的四个点）连接一条容量为无穷的边。这就使在这种情况下 (b_x,T) 无法被割去（因为割会经过一条容量为无穷的边，这样的割显然不是最小割）。 同理，让这五个点向 b_x 连接一条容量为无穷的边。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143/* * @Author: Skqliao * @Date: 2019-02-11 22:29:59 * @LastEditTime: 2019-02-11 22:56:26 * @Source: 2013湖南省队集训 * @Problem: 3894: 文理分科 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3894 */#include &lt;bits/stdc++.h&gt;namespace mxf &#123;const int MAXN = 3 * 100 * 100 + 10;const int MAXM = MAXN * 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int S, T;int Cur[MAXN], Dis[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow;&#125;&#125; // namespace mxfusing mxf::addEdge;using mxf::S;using mxf::T;const int MAXN = 100 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int ans;int Id[MAXN][MAXN];bool judge(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= M; &#125;int main() &#123; int x; scanf("%d%d", &amp;N, &amp;M); mxf::init(N * M * 3); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; Id[i][j] = (i - 1) * M + j; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(S, Id[i][j], x); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(Id[i][j], T, x); &#125; &#125; int cur = N * M; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(S, ++cur, x); addEdge(cur, Id[i][j], INT_MAX); for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k]; int y = j + Dicy[k]; if (judge(x, y)) addEdge(cur, Id[x][y], INT_MAX); &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(++cur, T, x); addEdge(Id[i][j], cur, INT_MAX); for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k]; int y = j + Dicy[k]; if (judge(x, y)) addEdge(Id[x][y], cur, INT_MAX); &#125; &#125; &#125; printf("%d\n", ans - mxf::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二元关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 413E Maze 2D]]></title>
    <url>%2Fcodeforces-413E%2F</url>
    <content type="text"><![CDATA[给你一个 2\times N 的矩阵，你可以上下左右移动，其中'.'可以走，'X'不能走。 M 个询问，问任意两点间距离。 1\leq N,M\leq 2\times 10^5 分析 对于所有 2\times 2 的子矩阵，维护左上到右上、右下，左下到右上、右下所需要的步数。 建立线段树，发现两个中间重叠的子矩阵可以合并信息，得到最左边一列到最右边一列所需的最小步数。 每次将结果（一个子矩阵）对应那两个查询格子的相对位置，步数超出 2\times N 意味着无解。 复杂度 O(M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 2e5 + 5;const int INF = 0x3f3f3f3f;char S[2][MAXN];int N, Q;struct Segment &#123; int A[2][2];&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rSegment merge(Segment x, Segment y) &#123; Segment tmp; tmp.A[0][0] = std::min(INF, std::min(x.A[0][0] + y.A[0][0], x.A[0][1] + y.A[1][0])); tmp.A[1][0] = std::min(INF, std::min(x.A[1][1] + y.A[1][0], x.A[1][0] + y.A[0][0])); tmp.A[0][1] = std::min(INF, std::min(x.A[0][0] + y.A[0][1], x.A[0][1] + y.A[1][1])); tmp.A[1][1] = std::min(INF, std::min(x.A[1][0] + y.A[0][1], x.A[1][1] + y.A[1][1])); return tmp;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Segment &amp;x = T[rt]; memset(x.A, 0x3f, sizeof x.A); if (S[0][l] == '.' &amp;&amp; S[1][l] == 'X') &#123; x.A[0][0] = 1; &#125; else if (S[0][l] == 'X' &amp;&amp; S[1][l] == '.') &#123; x.A[1][1] = 1; &#125; else if (S[0][l] == '.' &amp;&amp; S[1][l] == '.') &#123; x.A[0][0] = x.A[1][1] = 1; x.A[0][1] = x.A[1][0] = 2; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;Segment querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; int m = (l + r) &gt;&gt; 1; if (b &lt;= m) &#123; return querySum(LT, a, b); &#125; else if (m &lt; a) &#123; return querySum(RT, a, b); &#125; else &#123; return merge(querySum(LT, a, b), querySum(RT, a, b)); &#125;&#125;int query(int x, int y) &#123; int a = x, b = y, fa = 0, fb = 0; if (x &gt; N) &#123; fa = 1; a = x - N; &#125; if (y &gt; N) &#123; fb = 1; b = y - N; &#125; if(a &gt; b) &#123; std::swap(a, b); std::swap(fa, fb); &#125; return querySum(1, 1, N, a, b).A[fa][fb] - 1;&#125;int main() &#123; int x, y; scanf("%d%d%s%s", &amp;N, &amp;Q, S[0] + 1, S[1] + 1); build(1, 1, N); while (Q--) &#123; scanf("%d%d", &amp;x, &amp;y); int res = query(x, y); printf("%d\n", res &lt;= 2 * N ? res : -1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 145E Lucky Queries]]></title>
    <url>%2Fcodeforces-145E%2F</url>
    <content type="text"><![CDATA[长度为 N 的 01 序列 A 有 M 次操作，每次将 A[l,r] 中的每个数异或 1 ，或查询 A 的最长不下降子序列的长度。 1 \leq N\leq 10^6, 1\leq M\leq 3\times 10^5 分析 由于序列中只有 0 和 1 ，因此最长不下降子序列只有两种情况：都是 0 或 1 ，或者前面都是 0 后面都是 1 。 用线段树维护区间中完全由 0 与 1 组成，以及最长不上升与不下降子序列的长度， 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).sizo())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0;&#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0;&#125;const int MAXN = 1e6 + 5;int N, M;char Str[MAXN];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rstruct Node &#123; int zero, one, up, down, mrk; Node () &#123; zero = one = up = down = mrk = 0; &#125; Node (int a, int b, int c, int d) : zero(a), one(b), up(c), down(d), mrk(0) &#123;&#125; Node operator + (const Node &amp;x) &#123; Node y; y.zero = zero + x.zero; y.one = one + x.one; y.up = std::max(up + x.one, zero + x.up); y.down = std::max(down + x.zero, one + x.down); y.mrk = 0; return y; &#125; void swap() &#123; mrk ^= 1; std::swap(zero, one); std::swap(up, down); &#125;&#125; T[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; T[rt] = T[rt &lt;&lt; 1] + T[rt &lt;&lt; 1 | 1];&#125;void pushDown(int rt) &#123; if (T[rt].mrk) &#123; T[rt &lt;&lt; 1].swap(); T[rt &lt;&lt; 1 | 1].swap(); T[rt].mrk = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; if (Str[l] == '4') &#123; T[rt] = (Node) &#123; 1, 0, 1, 1 &#125;; &#125; else &#123; T[rt] = (Node) &#123; 0, 1, 1, 1 &#125;; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void change(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].swap(); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; change(LT, a, b); &#125; if (m &lt; b) &#123; change(RT, a, b); &#125; pushUp(rt);&#125;Node queryMax(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &gt; m) &#123; return queryMax(RT, a, b); &#125; else if (b &lt;= m) &#123; return queryMax(LT, a, b); &#125; else &#123; return queryMax(LT, a, b) + queryMax(RT, a, b); &#125;&#125;int main() &#123; int N, M, l, r; scanf("%d%d%s", &amp;N, &amp;M, Str + 1); build(1, 1, N); while (M--) &#123; scanf("%s", Str); if (Str[0] == 'c') &#123; Node res = queryMax(1, 1, N, 1, N); printf("%d\n", res.up); &#125; else &#123; scanf("%d%d", &amp;l, &amp;r); change(1, 1, N, l, r); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 280D k-Maximum Subsequence Sum]]></title>
    <url>%2Fcodeforces-280D%2F</url>
    <content type="text"><![CDATA[序列 A[1...N] 中进行 M 次操作，分为两种： 将 A[p] 修改为 x 查询 A[l,r] 中不相交至多 K 个不相交子段的和的最大值。 N,M\leq 10^5, K\leq 20 分析 对于第二个询问，有个很熟悉的网络流模型，最小费用最大流。 但是对于每个询问都重新建图跑网络流显然是会超时的，需要优化。 网络流的流程就是每次增广最大的费用，然后将这些边取反变成反向边，继续增广，直到费用为负或者没有流量为止。 那么考虑手动模拟它，即每次找到区间中和最大的字段，统计贡献后将其取反，继续直到最大和为负数，或者完成 k 次为止。 这种区间打标记，区间求最值的操作，让人联想到线段树。 用线段树维护区间中子段的最大/最小和（因为取反后两者就交换了），以及左右最大子段（用来合并）的值和对应子段的左右端点，以及取反标记。 查询时记录所有被取反的区间，结束时再将其恢复。 复杂度 O(M\times K\times log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define All(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;struct Line &#123; int l, r, s; Line(int l = 0, int r = 0, int s = 0): l(l), r(r), s(s) &#123;&#125; Line operator + (const Line &amp;x) &#123; return (Line) &#123;l, x.r, s + x.s&#125;; &#125; bool operator &lt; (const Line &amp;x) const &#123; return s &lt; x.s; &#125;&#125;;struct Node &#123; Line lMax, lMin, rMax, rMin, vMax, vMin, v; int rev; Node (int l = 0, int r = 0, int s = 0) &#123; lMax = lMin = rMax = rMin = vMax = vMin = v = Line(l, r, s); rev = 0; &#125; void pushUp(Node ls, Node rs) &#123; if (ls.lMax.l == 0) &#123; *this = rs; return; &#125; lMax = std::max(ls.lMax, ls.v + rs.lMax); lMin = std::min(ls.lMin, ls.v + rs.lMin); rMax = std::max(ls.rMax + rs.v, rs.rMax); rMin = std::min(ls.rMin + rs.v, rs.rMin); vMax = std::max(ls.rMax, rs.lMax); vMax = std::max(vMax, std::max(ls.vMax, rs.vMax)); vMax = std::max(vMax, ls.rMax + rs.lMax); vMax = std::max(vMax, std::max(lMax, rMax)); vMin = std::min(ls.rMin, rs.lMin); vMin = std::min(vMin, std::min(ls.vMin, rs.vMin)); vMin = std::min(vMin, ls.rMin + rs.lMin); vMin = std::min(vMin, std::min(lMin, rMin)); v = ls.v + rs.v; &#125;&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid rev(Node&amp; x) &#123; x.rev ^= 1; std::swap(x.lMin, x.lMax); std::swap(x.rMin, x.rMax); std::swap(x.vMin, x.vMax); x.lMin.s *= -1, x.lMax.s *= -1; x.rMin.s *= -1, x.rMax.s *= -1; x.vMin.s *= -1, x.vMax.s *= -1; x.v.s *= -1;&#125;void pushDown(int rt) &#123; if(T[rt].rev) &#123; rev(T[rt &lt;&lt; 1]); rev(T[rt &lt;&lt; 1 | 1]); T[rt].rev = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; T[rt] = Node(l, r, io::gt&lt;int&gt;()); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void modify(int rt, int l, int r, int p, int x) &#123; if(l == r) &#123; T[rt] = Node(l, r, x); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; modify(LT, p, x); &#125; else &#123; modify(RT, p, x); &#125; T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void reverse(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; rev(T[rt]); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; reverse(LT, a, b); &#125; if(m &lt; b) &#123; reverse(RT, a, b); &#125; T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;Node queryMax(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; Node res; if(a &lt;= m) &#123; res.pushUp(res, queryMax(LT, a, b)); &#125; if(m &lt; b) &#123; res.pushUp(res, queryMax(RT, a, b)); &#125; return res;&#125;int main() &#123; int N = io::gt&lt;int&gt;(); build(1, 1, N); int M = io::gt&lt;int&gt;(); std::vector&lt;Line&gt; V; while(M--) &#123; int opt = io::gt&lt;int&gt;(); if(opt == 0) &#123; int p = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); modify(1, 1, N, p, x); &#125; else &#123; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); int sum = 0; V.clear(); rep(i, 0, k) &#123; Line x = queryMax(1, 1, N, l, r).vMax; if(x.s &lt; 0) &#123; break; &#125; sum += x.s; V.push_back(x); reverse(1, 1, N, x.l, x.r); &#125; io::pt(sum); rep(i, 0, SZ(V)) &#123; reverse(1, 1, N, V[i].l, V[i].r); &#125; &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2008」BZOJ 1036 树的统计]]></title>
    <url>%2FBZOJ-1036%2F</url>
    <content type="text"><![CDATA[一棵有 N 个节点的树，每个节点有初始权值 W_i 。共有 M 次操作，分别为： 查询节点 (u,v) 间所有节点的权值和 查询节点 (u,v) 间所有节点的最大权值 修改 W_u 为 x 1\leq N\leq30000,0\leq M\leq 200000 ，中途操作中保证每个节点的权值 w 在 -30000 到 30000 之间。 分析 又是一道树链剖分模板题... 树剖后，线段树维护区间最大值和区间和。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;#define ONLINE_JUDGEnamespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if(cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace iostruct Graph &#123;static const int MAXN = 30000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, R;int H[MAXN], cntE;int Depth[MAXN], Fa[MAXN], Son[MAXN], Sz[MAXN];int Dfn[MAXN], Top[MAXN], cntD;int W[MAXN], Wp[MAXN];void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Max[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; Max[rt] = std::max(Max[rt &lt;&lt; 1], Max[rt &lt;&lt; 1 | 1]);&#125;void build(int rt, int l, int r) &#123; if(l == r) &#123; Max[rt] = Sum[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void modify(int rt, int l, int r, int p, int x) &#123; if(l == r) &#123; Sum[rt] = Max[rt] = x; return ; &#125; int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; modify(LT, p, x); &#125; else &#123; modify(RT, p, x); &#125; pushUp(rt);&#125;int querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; int m = (l + r) &gt;&gt; 1; int res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res;&#125;int queryMax(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Max[rt]; &#125; int m = (l + r) &gt;&gt; 1; int res = -INT_MAX; if(a &lt;= m) &#123; res = std::max(res, queryMax(LT, a, b)); &#125; if(m &lt; b) &#123; res = std::max(res, queryMax(RT, a, b)); &#125; return res;&#125;void change(int u, int x) &#123; modify(1, 1, N, Dfn[u], x);&#125;int queryPathS(int u, int v) &#123; int res = 0; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[tv], Dfn[v]); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[u], Dfn[v]); return res;&#125;int queryPathM(int u, int v) &#123; int res = -INT_MAX; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res = std::max(res, queryMax(1, 1, N, Dfn[tv], Dfn[v])); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res = std::max(res, queryMax(1, 1, N, Dfn[u], Dfn[v])); return res;&#125;void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N);&#125;&#125; G;int main() &#123;G.N = io::gt&lt;int&gt;();G.R = 1;rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;());&#125;rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;();&#125;G.prepare();int M = io::gt&lt;int&gt;();rep(i, 0, M) &#123; char ch = io::gc(); while(!isalpha(ch)) &#123; ch = io::gc(); &#125; if(ch == 'Q') &#123; ch = io::gc(); int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if(ch == 'S') &#123; io::pt(G.queryPathS(u, v)); &#125; else &#123; io::pt(G.queryPathM(u, v)); &#125; &#125; else &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.change(u, x); &#125;&#125;io::flush();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SHOI 2009」BZOJ 2028 会场预约]]></title>
    <url>%2FBZOJ-2028%2F</url>
    <content type="text"><![CDATA[初始集合为空，有两种操作： 插入一个区间，并删去集合中与它相交的区间，输出删除的区间个数 查询集合中区间个数 N\leq 200000,1\leq Start End\leq 100000 分析 首先根据题意，可以得到集合中任意时刻不存在相交的区间。 假设集合中区间是有序的，那么插入一个区间 [L,R ] 后所需要删除的区间一定是连续的。 两个区间 [l,r] 和 [L,R] ( l\leq L )如果相交，会有两种情况： l \leq L\leq R\leq r L\leq l\leq r\leq R 总结一下，如果满足 l\leq R 且 L\leq r ，那么这两个区间就是相交的。 那么找到第一个满足 L\leq r 的区间 [l,r] 后，如果再满足 l\leq R ，就删除 [l,r] ，重复该步骤直到集合为空或者 R &lt; l 。 集合有序，二分寻找 [l,r] ，删除节点，统计集合大小，STL库提供std::set 可以轻松实现上述功能。 值得注意的是，std::lower_bound(s.begin(),s.end(),x) 和 s.lower_bound(x) 的效率是不同的。由于std::set 的元素存储是随机的，因此直接二分寻找必须考虑寻找元素的复杂度，而它的提供的内置函数可以避免这个问题。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Node &#123; int l, r; bool operator &lt; (const Node &amp;a) const &#123; return r &lt; a.r; &#125;&#125;;std::set&lt;Node&gt; Set;int main() &#123; int N = io::gt&lt;int&gt;(); while (N--) &#123; char opt = io::gc(); while (!isalpha(opt)) &#123; opt = io::gc(); &#125; if (opt == 'A') &#123; int ans = 0; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); std::set&lt;Node&gt;::iterator p = Set.lower_bound((Node) &#123;0, l&#125;); while (p != Set.end() &amp;&amp; r &gt;= p-&gt;l) &#123; Set.erase(p++); ++ans; &#125; Set.insert((Node) &#123;l, r&#125;); io::pt(ans); &#125; else &#123; io::pt(SZ(Set)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2011」BZOJ 2243 染色]]></title>
    <url>%2FBZOJ-2243%2F</url>
    <content type="text"><![CDATA[给定一棵有 N 个节点的树，每个节点有一个颜色。 现有 M 个操作，分为两类： 将节点对 (u,v) 之间路径上的所有节点的颜色染成 x 查询节点对 (u,v) 之间颜色段的个数（相邻且相同颜色的节点对属于同一个颜色段） N,M\leq 10^5,x\leq 10^9 分析 思路很简单，树剖之后用线段树维护区间颜色段的个数。 线段树总共需要维护区间的颜色段个数，最左边颜色和最右边颜色，当然还有lazy标签。 如果区间 [l,m] 的最右边的颜色和区间 [m+1,r+1] 最左边的颜色相同，则 [l,r] 区间中颜色段个数为两者的和减一。 查询的时候有一个细节。 (u,v) 之间颜色段的个数即若干条链上颜色段的个数之和，但是要注意链顶和它的父亲颜色是否相同。 这两个节点也是相邻的，但是在链的查询中不会被涉及到。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 4;struct Graph &#123; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int Depth[MAXN], Son[MAXN], Fa[MAXN], Sz[MAXN]; int Dfn[MAXN], cntD, Top[MAXN]; int W[MAXN], Wp[MAXN]; int H[MAXN], cntE; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125; &#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r int Num[MAXN &lt;&lt; 2], Mark[MAXN &lt;&lt; 2], Left[MAXN &lt;&lt; 2], Right[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Num[rt] = Num[rt &lt;&lt; 1] + Num[rt &lt;&lt; 1 | 1] - (Right[rt &lt;&lt; 1] == Left[rt &lt;&lt; 1 | 1]); Left[rt] = Left[rt &lt;&lt; 1]; Right[rt] = Right[rt &lt;&lt; 1 | 1]; &#125; void pushDown(int rt, int L) &#123; int &amp;mrk = Mark[rt]; if(!mrk) &#123; return ; &#125; Mark[rt &lt;&lt; 1] = Mark[rt &lt;&lt; 1 | 1] = mrk; Num[rt &lt;&lt; 1] = Num[rt &lt;&lt; 1 | 1] = 1; Left[rt &lt;&lt; 1] = Left[rt &lt;&lt; 1 | 1] = mrk; Right[rt &lt;&lt; 1] = Right[rt &lt;&lt; 1 | 1] = mrk; mrk = 0; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Num[rt] = 1; Left[rt] = Right[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void change(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Num[rt] = 1; Left[rt] = Right[rt] = x; Mark[rt] = x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b, x); &#125; if(m &lt; b) &#123; change(RT, a, b, x); &#125; pushUp(rt); &#125; int queryNum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Num[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; int res = 0, times = 0; if(a &lt;= m) &#123; res += queryNum(LT, a, b); ++times; &#125; if(m &lt; b) &#123; res += queryNum(RT, a, b); ++times; &#125; if(times == 2 &amp;&amp; Right[rt &lt;&lt; 1] == Left[rt &lt;&lt; 1 | 1]) &#123; --res; &#125; return res; &#125; int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Left[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125; &#125; void changePath(int u, int v, int x) &#123; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; change(1, 1, N, Dfn[tv], Dfn[v], x); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; change(1, 1, N, Dfn[u], Dfn[v], x); &#125; int queryPath(int u, int v) &#123; int res = 0, tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += queryNum(1, 1, N, Dfn[tv], Dfn[v]); if(query(1, 1, N, Dfn[tv]) == query(1, 1, N, Dfn[Fa[tv]])) &#123; --res; &#125; v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += queryNum(1, 1, N, Dfn[u], Dfn[v]); return res; &#125; void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); G.R = 1; int M = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;(); &#125; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); while(M--) &#123; char c = io::gc(); while(!isalpha(c)) &#123; c = io::gc(); &#125; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if(c == 'C') &#123; G.changePath(u, v, io::gt&lt;int&gt;()); &#125; else &#123; io::pt(G.queryPath(u, v)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2009」BZOJ 1878 HH的项链]]></title>
    <url>%2FBZOJ-1878%2F</url>
    <content type="text"><![CDATA[在序列 A[1 \cdots N] 中，有 M 个询问，查询 [L_i,R_i] 中不同的数的个数。 N\leq 500000,M\leq 200000 。 分析 原题的数据 N\leq 50000 ，莫队可以直接 O(N\sqrt{N+M}) 水过。但是数据加强后 N 增大到了原来10倍，带根号的复杂度不再满足要求，考虑一个log的方法。 这道题本质就是查询区间 [l,r] 中不同的数的数目，重点在于处理相同的数。可以显然发现这是不符合区间减法的，因此单纯统计区间中数的出现次数是不行的。 如果同一时间只维护记录所有相同的数中的一个数，那么能保证不会重复统计；如果再保证查询的时候如果这个数存在于区间中，就一定能被查询到，那么就不会保证算少。 如果满足这两条，那么就使得原本查询区间中不同数的个数变成了查询区间中数的个数。 假如查询的区间都是 [1,R_i] ，那么只需要统计同一个数中位置最靠左的那个数是否在 [1, R_i] 中；如果是 [L_i,R_i] ，同理统计的数就变成了出现位置尽可能接近 L_i 且大于它的那个数是否在 [L_i,R_i] 中。 那么维护方法就很显然了，记录每个数 A[i] 的下一个相同的数的位置 Nxt[i] ，即满足 A[i] = A[Nxt[i]] 。 随着区间的右移，删去 A[i] 并插入 A[Nxt[i]] ，再统计 [L_i,R_i] 中数的个数。 这样的话查询的区间一定是要求有序的，因此需要离线操作，将所有区间按照左端点排序。 复杂度 O(M\log{M}+M\log{N}) 。 P.S 参考代码中是按照右端点排序的，操作同理，记录最靠右的数以及它靠前的相同的数的位置即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 500000 + 5;const int MAXM = 1000000 + 5;int N, M, A[MAXN];int Lst[MAXM], Pre[MAXN];int C[MAXN];int lowbit(int x) &#123; return x &amp; -x;&#125;void add(int p, int x) &#123; for(; p &lt; MAXM; p += lowbit(p)) &#123; C[p] += x; &#125;&#125;int query(int p) &#123; int res = 0; for(; p &gt; 0; p -= lowbit(p)) &#123; res += C[p]; &#125; return res;&#125;struct Query &#123; int l, r, id; bool operator &lt; (const Query &amp;x) const &#123; return r &gt; x.r; &#125;&#125; Q[MAXN];int Ans[MAXN];int main() &#123; N = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); if(Lst[A[i]] != 0) &#123; add(Lst[A[i]], -1); Pre[i] = Lst[A[i]]; &#125; Lst[A[i]] = i; add(i, 1); &#125; int M = io::gt&lt;int&gt;(); rep(i, 0, M) &#123; Q[i].l = io::gt&lt;int&gt;(); Q[i].r = io::gt&lt;int&gt;(); Q[i].id = i; &#125; std::sort(Q, Q + M); int pre = N; rep(i, 0, M) &#123; while(pre &gt; Q[i].r) &#123; add(pre, -1); if(Pre[pre]) &#123; add(Pre[pre], 1); &#125; pre--; &#125; Ans[Q[i].id] = query(Q[i].r) - query(Q[i].l - 1); pre = Q[i].r; &#125; rep(i, 0, M) &#123; io::pt(Ans[i]); &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2012」BZOJ 2753 滑雪与时间胶囊]]></title>
    <url>%2FBZOJ-2753%2F</url>
    <content type="text"><![CDATA[有 N 个点，每个点存在权值 H_i 。有 M 条边 (u, v, w) ，如果 H_u &lt; H_v ，那么这条边就是 u\rightarrow v ，反之是 v \rightarrow u 的。如果 H_u = H_v ，那么这是一条无向边。 求以 1 为根节点的生成树的最大节点个数，以及在节点数最大的情况下的最小权值和。 1\leq N\leq 10^5,1\leq M\leq 10^ 6,1\leq H_i\leq 10^9 分析 最小树形图 如果不看数据范围，这是一个裸的最小树形图（无向边拆成两条有向边）。 先用bfs跑一遍可以得到节点 1 可以到达的所有点，即第一问。复杂度 O(N) 。 然后重新构图，使用朱刘算法在新图上求最小树形图的权值和。复杂度 O(N\times M) 。 这个上界很松，而且发现时间瓶颈很大程度在读入 3e6 的数据上。 随机数据应该是远远跑不满的，而且也没有听说专门卡它的构造数据方法。 最后提交发现该代码在BZOJ和luogu的评测机上均能通过。 BZOJ上此题时限50s，实测39.3s，并不算卡过去的。 最小生成树 实际上刚看到这个数据范围，给我的第一感觉是：“就算上界很松也肯定跑不过啊……”。 但是求有向图的最小树形图，朱刘算法已经是很高效的了。 虽然存在 R.E.Tarjan 在1986年提出的 O(E+V\log{V}) 的改进算法，但是国内基本没有相关资料。 看来出题人考不存在的（没见过=不存在）改进算法的几率不大。 相比于最小树形图，求无向图的最小生成树就有很好写，而且复杂度更低的算法。 例如 Prim's algorithm （复杂度 O(V\times \log{V} ）和 Kruskal's algorithm （复杂度 O(E\times \log{E}) ）。 再思考为什么有向图求最小树形图的时候不能用它们，是因为最后可能会出现边指向根节点的情况，这样就不是一棵生成树了。 对于这道题而言，发现反向边只会在 H_u=H_v 的时候出现。 假如可以处理掉它，那么模型就从最小树形图转化成最小生成树，复杂度也就足够优秀了。 根据这道题节点间的特殊性质，对于一棵生成树的任意节点所有可能的父亲节点，权值一定都大于等于它。 那么对于有向边 (u, v, w) ，优先处理 H_v 大的边， H_v 相同时优先选择 w 小的边，就能保证不会出现反向边。 如果生成树 T1 中某节点 y 通过边 (x,y,w) 合并到另一个生成树 T2 的节点 x 上，那么就会出现反向边（即边 (y,x,w) ）。 但是这是不会发生的，因为如果出现两棵生成树，那么图就不存在生成树了（ 已经经过了所有以 T2 根节点为终点的边，既然没有与 T1 合并，就说明无法合并了。而这是与第一问得到的都联通情况相违背） 因此通过 Kruskal's algorithm 求最小生成树是正确的，求得权值和即为第二问答案。 参考代码 最小树形图 - Chu-Liu/Edmonds' algorithm 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1e5 + 5;const int MAXM = 1e6 + 5;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace iostruct Graph &#123; struct Edge &#123; int u, v, w; &#125;; int N; std::vector&lt;Edge&gt; E; void init(int n) &#123; N = n; E.clear(); &#125; void addEdge(int u, int v, int w) &#123; E.push_back((Edge) &#123;u, v, w&#125;); &#125; ll MST_Directed(int rt) &#123; static int Pre[MAXN], Cir[MAXN], Id[MAXN]; static ll Inw[MAXN]; ll ans = 0; while(true) &#123; memset(Inw, 127 / 3, sizeof(ll) * N); memset(Pre, -1, sizeof(int) * N); memset(Cir, -1, sizeof(int) * N); memset(Id, -1, sizeof(int) * N); ll INF = Inw[0]; rep(i, 0, SZ(E)) &#123; if(Inw[E[i].v] &gt; E[i].w &amp;&amp; E[i].v != E[i].u) &#123; Inw[E[i].v] = E[i].w; Pre[E[i].v] = E[i].u; &#125; &#125; Pre[rt] = rt, Inw[rt] = 0; rep(i, 0, N) &#123; if(Inw[i] == INF) &#123; return -1; &#125; ans += Inw[i]; &#125; int circle = 0; rep(i, 0, N) &#123; if(Cir[i] != -1) &#123; continue; &#125; int t = i; while(Cir[t] == -1) &#123; Cir[t] = i; t = Pre[t]; &#125; if(t != rt &amp;&amp; Cir[t] == i) &#123; Id[t] = circle++; for(int j = Pre[t]; j != t; j = Pre[j]) &#123; Id[j] = circle - 1; &#125; &#125; &#125; if(!circle) &#123; return ans; &#125; rep(i, 0, N) &#123; if(Id[i] == -1) &#123; Id[i] = circle++; &#125; &#125; rep(i, 0, SZ(E)) &#123; E[i].w -= Inw[E[i].v]; E[i].u = Id[E[i].u]; E[i].v = Id[E[i].v]; &#125; N = circle; rt = Id[rt]; &#125; &#125;&#125;G;int H[MAXN], Id[MAXN];struct Graph2 &#123; struct Edge &#123; int v, nxt; &#125;E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; void init(int n) &#123; memset(H, -1, sizeof(int) * n); cntE = -1; &#125; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; &#125; int bfs(int x) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; static std::bitset&lt;MAXN&gt; Vis; int n = 1; Id[x] = n++; Vis[x] = 1; Que.push(x); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); for(int i = H[x]; ~i; i = E[i].nxt) &#123; if(!Vis[E[i].v]) &#123; Que.push(E[i].v); Vis[E[i].v] = 1; Id[E[i].v] = n++; &#125; &#125; &#125; return n; &#125;&#125;G2;int U[MAXM], V[MAXM], W[MAXM];int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; H[i] = io::gt&lt;int&gt;(); &#125; G2.init(N + 1); rep(i, 0, M) &#123; U[i] = io::gt&lt;int&gt;(); V[i] = io::gt&lt;int&gt;(); W[i] = io::gt&lt;int&gt;(); if(H[U[i]] &gt;= H[V[i]]) &#123; G2.addEdge(U[i], V[i]); &#125; if(H[U[i]] &lt;= H[V[i]]) &#123; G2.addEdge(V[i], U[i]); &#125; &#125; int n = G2.bfs(1); rep(i, 0, M) &#123; if(Id[U[i]] &amp;&amp; Id[V[i]]) &#123; if(H[U[i]] &gt;= H[V[i]]) &#123; G.addEdge(Id[U[i]], Id[V[i]], W[i]); &#125; if(H[V[i]] &gt;= H[U[i]]) &#123; G.addEdge(Id[V[i]], Id[U[i]], W[i]); &#125; &#125; &#125; G.addEdge(0, Id[1], 0); G.N = n; ll ans = G.MST_Directed(0); printf("%d %lld\n", n - 1, ans); return 0;&#125; 最小生成树 - Kruskal's algorithm 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;const int MAXM = 1e6 + 5;int H[MAXN];struct Graph &#123; struct Edge &#123; int u, v, w, nxt, can; bool operator &lt; (const Edge &amp;x) const &#123; return ::H[v] != ::H[x.v] ? ::H[v] &gt; ::H[x.v] : w &lt; x.w; &#125; &#125;E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; int Fa[MAXN], Rank[MAXN]; void init(int n) &#123; memset(H, -1, sizeof(int) * n); cntE = -1; rep(i, 0, n) &#123; Fa[i] = i; Rank[i] = 1; &#125; &#125; void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u], 0&#125;; H[u] = cntE; &#125; int bfs(int x) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; static std::bitset&lt;MAXN&gt; Vis; int n = 1; Vis[x] = 1; Que.push(x); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); for(int i = H[x]; ~i; i = E[i].nxt) &#123; E[i].can = 1; if(!Vis[E[i].v]) &#123; Que.push(E[i].v); Vis[E[i].v] = 1; n++; &#125; &#125; &#125; return n; &#125; int findFa(int x) &#123; return x == Fa[x] ? x : Fa[x] = findFa(Fa[x]); &#125; bool merge(int u, int v) &#123; u = findFa(u), v = findFa(v); if(u == v) &#123; return false; &#125; if(Rank[u] &lt; Rank[v]) &#123; Fa[u] = v; &#125; else &#123; Fa[v] = u; if(Rank[u] == Rank[v]) &#123; Rank[u]++; &#125; &#125; return true; &#125; ll kruskal(int n) &#123; ll ans = 0; int k = 1; static std::vector&lt;Edge&gt; V; rep(i, 0, cntE + 1) &#123; if(E[i].can) &#123; V.push_back(E[i]); &#125; &#125; std::sort(ALL(V)); rep(i, 0, SZ(V)) &#123; if(k == n) &#123; return ans; &#125; if(merge(V[i].u, V[i].v)) &#123; ans += V[i].w; ++k; &#125; &#125; &#125;&#125;G;int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; H[i] = io::gt&lt;int&gt;(); &#125; G.init(N + 1); rep(i, 0, M) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(), w = io::gt&lt;int&gt;(); if(H[u] &gt;= H[v]) &#123; G.addEdge(u, v, w); &#125; if(H[u] &lt;= H[v]) &#123; G.addEdge(v, u, w); &#125; &#125; int n = G.bfs(1); ll sum = G.kruskal(n); printf("%d %lld\n", n, sum); return 0;&#125; 参考资料 【最小树形图】——bzoj2753——朱刘算法达不到复杂度要求时的，改模板kruskal算法]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2010」BZOJ 1858 序列操作]]></title>
    <url>%2FBZOJ-1858%2F</url>
    <content type="text"><![CDATA[在一个01序列中，有五种变换操作和询问操作： 0 a b 把 [a, b] 区间内的所有数全变成 0 1 a b 把 [a, b] 区间内的所有数全变成 1 2 a b 把 [a,b] 区间内的所有数全部取反，也就是说把所有的 0 变成 1 ，把所有的 1 变成 0 3 a b 询问 [a, b] 区间内总共有多少个 1 4 a b 询问 [a, b] 区间内最多有多少个连续的 1 1\leq n, m\leq 100000 分析 这种区间操作、区间查询，且满足区间加法的题，再看一下 1e5 的数据范围，很显然是用线段树来维护。 维护区间中 1 的数目（即区间和），左右连续 0,1 的长度，最长的连续的 0,1 的长度，当然还有取反和重置 0/1 的标记。 那么合并的时候，连续的 0,1 有两种合并方式：继承左右，或者左右合并（即左区间的右+右区间的左，这两段拼起来是连续的）。 区间取反，即交换所有关于 0,1 的信息；区间重置，根据区间长度直接更新信息。 复杂度 O(m\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rstruct Segment &#123; int l, r; int sum, rev, trn; int ln[2], rn[2], mx[2];&#125; T[MAXN &lt;&lt; 2];int max3(int a, int b, int c) &#123; return std::max(a, std::max(b, c));&#125;Segment merge(Segment x, Segment y) &#123; Segment a; a.trn = -1, a.rev = 0; a.l = x.l, a.r = y.r; a.sum = x.sum + y.sum; rep(i, 0, 2) &#123; a.ln[i] = x.ln[i], a.rn[i] = y.rn[i]; a.mx[i] = max3(x.mx[i], y.mx[i], x.rn[i] + y.ln[i]); if (!x.mx[i ^ 1]) &#123; a.ln[i] = x.mx[i] + y.ln[i]; &#125; if (!y.mx[i ^ 1]) &#123; a.rn[i] = y.mx[i] + x.rn[i]; &#125; &#125; return a;&#125;void turn(Segment &amp;x, int d) &#123; x.rev = 0; x.ln[d] = x.rn[d] = x.mx[d] = x.r - x.l + 1; x.ln[d ^ 1] = x.rn[d ^ 1] = x.mx[d ^ 1] = 0; if (d == 1) &#123; x.sum = x.r - x.l + 1; &#125; else &#123; x.sum = 0; &#125;&#125;void rever(Segment &amp;x) &#123; x.sum = x.r - x.l + 1 - x.sum; std::swap(x.mx[0], x.mx[1]); std::swap(x.ln[0], x.ln[1]); std::swap(x.rn[0], x.rn[1]);&#125;void pushDown(int rt) &#123; Segment &amp;x = T[rt], &amp;ls = T[rt &lt;&lt; 1], &amp;rs = T[rt &lt;&lt; 1 | 1]; if (x.trn != -1) &#123; ls.trn = rs.trn = x.trn; turn(ls, x.trn); turn(rs, x.trn); x.trn = -1; &#125; if (x.rev) &#123; ls.rev ^= 1; rs.rev ^= 1; rever(ls); rever(rs); x.rev = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Segment &amp;x = T[rt]; x.rev = 0, x.trn = -1; x.l = x.r = l; x.sum = io::gt&lt;int&gt;(); x.ln[x.sum] = x.rn[x.sum] = x.mx[x.sum] = 1; x.ln[x.sum ^ 1] = x.rn[x.sum ^ 1] = x.mx[x.sum ^ 1] = 0; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void change(int rt, int a, int b, int x) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].trn = x; turn(T[rt], x); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; change(rt &lt;&lt; 1, a, b, x); &#125; if (m &lt; b) &#123; change(rt &lt;&lt; 1 | 1, a, b, x); &#125; T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void reverse(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].rev ^= 1; rever(T[rt]); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; reverse(rt &lt;&lt; 1, a, b); &#125; if (m &lt; b) &#123; reverse(rt &lt;&lt; 1 | 1, a, b); &#125; T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;int querySum(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].sum; &#125; pushDown(rt); int res = 0; int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; res += querySum(rt &lt;&lt; 1, a, b); &#125; if (m &lt; b) &#123; res += querySum(rt &lt;&lt; 1 | 1, a, b); &#125; return res;&#125;Segment queryMax(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (b &lt;= m) &#123; return queryMax(rt &lt;&lt; 1, a, b); &#125; else if (m &lt; a) &#123; return queryMax(rt &lt;&lt; 1 | 1, a, b); &#125; else &#123; return merge(queryMax(rt &lt;&lt; 1, a, b), queryMax(rt &lt;&lt; 1 | 1, a, b)); &#125;&#125;int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); build(1, 1, N); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); ++l, ++r; if (opt == 0 || opt == 1) &#123; change(1, l, r, opt); &#125; else if (opt == 2) &#123; reverse(1, l, r); &#125; else if (opt == 3) &#123; io::pt(querySum(1, l, r)); &#125; else if (opt == 4) &#123; io::pt(queryMax(1, l, r).mx[1]); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2007」BZOJ 1067 降雨量]]></title>
    <url>%2FBZOJ-1067%2F</url>
    <content type="text"><![CDATA[已知 N 个年份 Y_i 的降雨量 R_i 。 现有 M 个询问。给定年份 X,Y ，判断“X年是自Y年以来降雨量最多的”的正确性。 该语句正确的当且仅当 R_X\leq R_Y 且对于所有 Y&lt;Z&lt;X ，满足 R_Z&lt;R_X 。 如果判断语句正确，输出true；如果可能正确，输出maybe；如果一定错误输出false。 1\leq N\leq 50000, 1\leq M\leq 10000,&nbsp;-10^9\leq Y_i\leq&nbsp;10^9&nbsp;, 1\leq R_i\leq&nbsp;10^9 分析 比较细节的题，听取WA声一片后改起来很烦... 思路其实很简单，就是找到 X,Y 年对应的降水量和 (X,Y) 年间降水量的最大值进行一番比较。 下面分析各种情况对应的结果是什么。 如果 [X,Y] 中所有年份的降水量信息已知。那么当 R_Y\leq R_X 且 MAX(X+1,Y-1) &lt; R_Y 时，该语句是true，反之则是false。（其中 MAX(L,R) 为 [L,R] 年间已知降水量的最大值） 如果 X,Y 降水量已知。那么当 R_Y\leq R_X 且 MAX(X+1,Y-1) &lt; R_Y 时，该语句是maybe，反之则是false。 如果 X,Y 已知其一 Z 年的降水量。那么当 MAX(X+1,Y-1) &lt; R_Z 时，该语句是maybe，反之则是false。 如果 X,Y 的降水量皆未知，则该语句是maybe。 由于没有修改操作，因此用Sparse Table来查询区间最大值。 至于如何判断 X,Y 是否降水量已知，可以直接在 Y[1...N] 中二分寻找，复杂度 O(\log{N}) ； 判断是否 [X,Y] 中所有年份降水量已知，直接检查 Y-X=P_Y-P_X 。（其中 P_i 为 i 在 Y[1...N] 中的下标） 需要特别注意的一点，便是当 P_Y=P_X+1 时， TeX parse error: Undefined control sequence \empty 。查询该区间时应该直接返回一个极小值或者单独判断。不然只有稳稳50分.... 复杂度 O((N+M)\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 50000 + 5;int A[MAXN], B[MAXN];int F[MAXN][20], Log[MAXN], Pow[20];void buildST(int n) &#123;rep(i, 1, n + 1) &#123; F[i][0] = B[i];&#125;rep(i, 2, n + 1) &#123; Log[i] = Log[i &gt;&gt; 1] + 1;&#125;int k = log2(n);Pow[0] = 1;rep(i, 1, k + 1) &#123; Pow[i] = Pow[i - 1] &lt;&lt; 1;&#125;rep(j, 1, k + 1) &#123; rof(i, n + 1, 1) &#123; if (i + Pow[j - 1] &lt;= n) &#123; F[i][j] = std::max(F[i][j - 1], F[i + Pow[j - 1]][j - 1]); &#125; &#125;&#125;return ;&#125;int queryMax(int l, int r) &#123;if(l &gt; r) &#123; return -1;&#125;int k = Log[r - l + 1];return std::max(F[l][k], F[r - Pow[k] + 1][k]);&#125;int main() &#123;int N = io::gt&lt;int&gt;();rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); B[i] = io::gt&lt;int&gt;();&#125;buildST(N);int M = io::gt&lt;int&gt;();while (M--) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); int p1 = std::lower_bound(A + 1, A + N + 1, x) - A; int p2 = std::lower_bound(A + 1, A + N + 1, y) - A; if (A[p1] == x &amp;&amp; A[p2] == y &amp;&amp; p2 - p1 == y - x) &#123; int mx = queryMax(p1 + 1, p2 - 1); if (B[p2] &lt;= B[p1] &amp;&amp; B[p2] &gt; mx) &#123; puts("true"); &#125; else &#123; puts("false"); &#125; &#125; else &#123; if (A[p1] != x &amp;&amp; A[p2] != y) &#123; puts("maybe"); &#125; else if (A[p1] == x &amp;&amp; A[p2] != y) &#123; int mx = queryMax(p1 + 1, p2 - 1); if (mx &lt; B[p1]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; else if (A[p1] != x &amp;&amp; A[p2] == y) &#123; int mx = queryMax(p1, p2 - 1); if (mx &lt; B[p2]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; else &#123; int mx = queryMax(p1 + 1, p2 - 1); if (mx &lt; B[p2] &amp;&amp; B[p2] &lt;= B[p1]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; &#125;&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2008」BZOJ 1012 最大数]]></title>
    <url>%2FBZOJ-1012%2F</url>
    <content type="text"><![CDATA[维护一个数列，具有 M 个以下两种操作： 查询并输出当前数列中末尾L个数中的最大的数 将 n 加上最近一次查询操作的答案，对 D 取模后，插入到数列的末尾 M \leq 200000 分析 对 [1...M] 建线段树，记录当前序列末尾的下标。 那么问题就变成了线段树区间查询最大值，单点修改（开始默认每个元素都是 0 ）。 值得注意的一点是，对 D​ 取模并不意味着一定要变成正数。例如 D=5​ ，上次结果为 1​ ， n=-10​ ，那么实际插入的数就是 -4​ ，而不是 1​ ，这一点题目并没有明确。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 200000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint N = 1, M, P;int Max[MAXN &lt;&lt; 2];void pushUp(int rt) &#123;Max[rt] = std::max(Max[rt &lt;&lt; 1], Max[rt &lt;&lt; 1 | 1]);&#125;void modify(int rt, int l, int r, int p, int x) &#123;if (l == r) &#123; Max[rt] = x; return ;&#125;int m = (l + r) &gt;&gt; 1;if (p &lt;= m) &#123; modify(LT, p, x);&#125; else &#123; modify(RT, p, x);&#125;pushUp(rt);&#125;int queryMax(int rt, int l, int r, int a, int b) &#123;if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return Max[rt];&#125;int m = (l + r) &gt;&gt; 1;int res = 0;if (a &lt;= m) &#123; res = std::max(res, queryMax(LT, a, b));&#125;if (m &lt; b) &#123; res = std::max(res, queryMax(RT, a, b));&#125;return res;&#125;int main() &#123;int res = 0;M = io::gt&lt;int&gt;(), P = io::gt&lt;int&gt;();while (M--) &#123; char opt = io::gc(); while (!isalpha(opt)) &#123; opt = io::gc(); &#125; int x = io::gt&lt;int&gt;(); if (opt == 'Q') &#123; io::pt(res = queryMax(1, 1, MAXN, N - x, N - 1)); &#125; else &#123; modify(1, 1, MAXN, N++, (x + res) % P); &#125;&#125;io::flush();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JLOI 2014」BZOJ 3631 松鼠的新家]]></title>
    <url>%2FBZOJ-3631%2F</url>
    <content type="text"><![CDATA[一棵树有 N 个节点，需要按照 A[1...N] 的顺序依次访问，每次走最短路径。 求每个节点各经过多少次。 2\leq N\leq 300000 分析 树上差分 从 u 到 v 的路径即 u\rightarrow lca(u,v)\rightarrow v 。 由于只需要输出一次，考虑树上差分。 O(1) 修改， O(N) 查询的复杂度在这里正合适。 用Tarjan或者其他lca算法得到 lca(A[i],A[i+1]) ，然后对两段路径进行差分。 最后将除了根节点的每个节点经过次数-1，因为它们在差分的过程中既被当成前一条路径终点，又被当作后一条路径的起点，重复计算两次。 复杂度 O(N) 。 树状数组 树链剖分+区间修改/单点查询树状数组。 复杂度 O(N\log^2{N}) 。 参考代码 树上差分 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; void pt(T x, char c = '\n') &#123; static int S[20], *vp; vp = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++vp = x % 10, x /= 10; &#125; while (x); while (vp != S) &#123; *cur++ = *vp-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; fflush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 300000 + 5;int Faa[MAXN], Lca[MAXN];int H[MAXN], cnt;int N, R;int Fa[MAXN], Add[MAXN];struct Edge &#123; int v, nxt;&#125; Q[MAXN &lt;&lt; 1], E[MAXN &lt;&lt; 1];int H2[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; return ;&#125;void addQuery(int u, int v) &#123; Q[cnt] = (Edge) &#123;v, H2[u]&#125;; H2[u] = cnt++; Q[cnt] = (Edge) &#123;u, H2[v]&#125;; H2[v] = cnt++; return ;&#125;int findFa(int x) &#123; return Faa[x] == x ? x : Faa[x] = findFa(Faa[x]);&#125;void dfs(int x) &#123; Faa[x] = x; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; dfs(v); Faa[v] = x; &#125; &#125; for (int i = H2[x]; ~i; i = Q[i].nxt) &#123; int &amp;v = Q[i].v; if (Fa[v]) &#123; Lca[i &gt;&gt; 1] = findFa(v); &#125; &#125;&#125;void dfs2(int x) &#123; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; dfs2(v); Add[x] += Add[v]; &#125; &#125;&#125;int A[MAXN];int main() &#123; N = io::gt&lt;int&gt;(); memset(H2, -1, sizeof H2); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); &#125; R = A[1]; rep(i, 2, N + 1) &#123; addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); addQuery(A[i - 1], A[i]); &#125; dfs(R); rep(i, 2, N + 1) &#123; ++Add[A[i - 1]]; ++Add[A[i]]; --Add[Lca[i - 2]]; --Add[Fa[Lca[i - 2]]]; &#125; dfs2(R); ++Add[R]; rep(i, 1, N + 1) &#123; io::pt(Add[i] - 1); &#125; io::fflush(); return 0;&#125; 树状数组 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; fflush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 300000 + 5;int A[MAXN];struct Graph &#123; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int H[MAXN], cntE; int Depth[MAXN], Sz[MAXN], Son[MAXN], Fa[MAXN]; int Dfn[MAXN], cntD, Top[MAXN]; int C[MAXN]; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Sz[x] = 1, Son[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if (Sz[Son[x]] &lt; Sz[v]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if (Son[x]) &#123; dfs2(Son[x], top); &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125; &#125; int lowbit(int x) &#123; return x &amp; -x; &#125; void update(int A[], int p, int x) &#123; for (; p &lt;= N; p += lowbit(p)) &#123; A[p] += x; &#125; &#125; void add(int l, int r, int x) &#123; update(C, l, x); update(C, r + 1, -x); &#125; int sum(int A[], int p) &#123; int res = 0; for (; p &gt; 0; p -= lowbit(p)) &#123; res += A[p]; &#125; return res; &#125; int query(int x) &#123; return sum(C, x); &#125; void prepare() &#123; dfs(R); dfs2(R, R); &#125; void addPath(int u, int v, int x = 1) &#123; int tu = Top[u], tv = Top[v]; while (tu != tv) &#123; if (Depth[tu] &gt; Depth[tv]) &#123; std::swap(u, v); std::swap(tu, tv); &#125; add(Dfn[tv], Dfn[v], x); v = Fa[tv]; tv = Top[v]; &#125; if (Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; add(Dfn[u], Dfn[v], x); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; A[i] = io::gt&lt;int&gt;(); &#125; G.R = A[1]; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); rep(i, 2, G.N + 1) &#123; G.addPath(A[i], A[i - 1]); &#125; G.add(G.Dfn[A[1]], G.Dfn[A[1]], 1); rep(i, 1, G.N + 1) &#123; io::pt(G.query(G.Dfn[i]) - 1); &#125; io::fflush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>轻重链剖分</tag>
        <tag>树状数组</tag>
        <tag>树上差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2012」BZOJ 2733 永无乡]]></title>
    <url>%2FBZOJ-2733%2F</url>
    <content type="text"><![CDATA[N 个点分别有权值 W_i ，其中有 M 条无向边使其分成若干个联通分量。 现有 Q 次操作，分为两类： 查询点 x 所在的联通分量中，权值第 k 小的节点编号 合并点 x,y 所在的联通分量 M\leq N\leq 100000,Q\leq 300000 分析 动态查询第 k 大，考虑用Treap，Splay等数据结构来维护。 那么如何合并两棵平衡树？通过启发式合并。 说是启发式合并，不过就是暴力合并，把两棵树中较小的一棵的所有节点拆下来插入到较大的那棵中，复杂度 O(N\log{N}) 。 总复杂度分析，每个点至多被合并 N 次，但是复杂度显然不是 O(N^2\log{N}) ，其实不大会算... 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Treap &#123; int key, fix, belong, sz; Treap *ch[2]; Treap() &#123; key = INT_MAX, fix = rand(); belong = -1, sz = 1; ch[0] = ch[1] = NULL; &#125; Treap(int x, int y)&#123; key = x, fix = rand(); belong = y, sz = 1; ch[0] = ch[1] = NULL; &#125; int cmp(int x) &#123; return key &lt;= x; &#125; void pushUp() &#123; sz = 1; if(ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if(ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125;&#125; T[MAXN &lt;&lt; 2];int Belong[MAXN];int cntT;std::vector&lt;Treap*&gt; R;Treap* newTreap(std::pair&lt;int, int&gt; x) &#123; T[++cntT] = Treap(x.first, x.second); return &amp;T[cntT];&#125;void rotate(Treap* &amp;t, int d) &#123; Treap *k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap* &amp;t, std::pair&lt;int, int&gt; x) &#123; if(!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x.first); ++t-&gt;sz; insert(t-&gt;ch[d], x); if(t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125;&#125;int queryKth(Treap* &amp;t, int k) &#123; int num = t-&gt;ch[0] ? t-&gt;ch[0]-&gt;sz : 0; if (k == num + 1) &#123; return t-&gt;belong; &#125; else if(k &lt;= num) &#123; return queryKth(t-&gt;ch[0], k); &#125; else &#123; return queryKth(t-&gt;ch[1], k - num - 1); &#125;&#125;void merge(Treap* &amp;t, Treap* &amp;k, int rt) &#123; if(t-&gt;ch[0]) &#123; merge(t-&gt;ch[0], k, rt); &#125; if(t-&gt;ch[1]) &#123; merge(t-&gt;ch[1], k, rt); &#125; if(t-&gt;belong != -1) &#123; Belong[t-&gt;belong] = rt; insert(k, std::make_pair(t-&gt;key, t-&gt;belong)); &#125;&#125;void mergeTree(int x, int y) &#123; int bx = Belong[x], by = Belong[y]; if(bx != by) &#123; if(R[bx]-&gt;sz &gt; R[by]-&gt;sz) &#123; merge(R[by], R[bx], bx); &#125; else &#123; merge(R[bx], R[by], by); &#125; &#125;&#125;int query(int x, int k) &#123; if(R[Belong[x]]-&gt;sz &lt;= k) &#123; return -1; &#125; return queryKth(R[Belong[x]], k);&#125;int A[MAXN];int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); R.push_back(new Treap); insert(R.back(), std::make_pair(A[i], i)); Belong[i] = SZ(R) - 1; &#125; while(M--) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); mergeTree(x, y); &#125; int Q = io::gt&lt;int&gt;(); while(Q--) &#123; char opt = io::gc(); while(!isalpha(opt)) &#123; opt = io::gc(); &#125; if(opt == 'Q') &#123; int x = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); io::pt(query(x, k)); &#125; else &#123; mergeTree(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2004」BZOJ 1208 宠物收养所]]></title>
    <url>%2FBZOJ-1208%2F</url>
    <content type="text"><![CDATA[有两个正整数集合 A,B ，起初都是它们都是空集。 现按顺序插入 N 个数 A[1...N] ，每个数属于 A 或 B 。 如果插入的数 x 属于集合 A ，当集合 B 不为空时，删去 B 中 与 x 差绝对值最小的数 y 。如果存在 b = x+a,c=x-a ，则优先删去 c 。该操作的代价为两数差的绝对值。当集合 B 为空时，将 x 直接插入集合 A 中，没有代价。 如果插入的数属于集合 B ，操作同理。 求插入完 N 个数后的代价，答案对 1000000 取模。 N\leq 80000,0&lt; A_i&lt; 2^{31} 分析 根据题意可得，在任何时候集合 A,B 至少有一个为空，因此只需要维护一个集合。 通过Treap等数据结构维护当前有数的集合。每次插入 x 后，查询集合中 x 的前驱后继，取较小值删去，并计算代价。 由于可能存在没有前驱后继的情况，初始化时插入一个极大值和一个极小值可以避免各种讨论，当树的 size=2 时认为其为空即可。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 80000 + 5;struct TreapTree &#123;struct Treap &#123; int key, fix; int cnt, sz; Treap *ch[2]; int cmp(int x) &#123; return key == x ? -1 : key &lt; x; &#125; void pushUp() &#123; sz = cnt; if (ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if (ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125;&#125; Pool[MAXN], *R;int cntP;Treap* newTreap(int x) &#123; Pool[++cntP] = (Treap) &#123;x, rand(), 1, 1, NULL, NULL&#125;; return &amp;Pool[cntP];&#125;void rotate(Treap* &amp;t, int d) &#123; Treap* k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap* &amp;t, int x) &#123; if (!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x); ++t-&gt;sz; if (d == -1) &#123; ++t-&gt;cnt; &#125; else &#123; insert(t-&gt;ch[d], x); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125; &#125;&#125;void erase(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; int d = t-&gt;cmp(x); if (d == -1) &#123; if (t-&gt;cnt &gt; 1) &#123; --t-&gt;cnt; --t-&gt;sz; &#125; else if (!t-&gt;ch[0]) &#123; t = t-&gt;ch[1]; &#125; else if (!t-&gt;ch[1]) &#123; t = t-&gt;ch[0]; &#125; else &#123; int e = t-&gt;ch[0]-&gt;fix &gt; t-&gt;ch[1]-&gt;fix; rotate(t, e); erase(t-&gt;ch[e], x); &#125; &#125; else &#123; erase(t-&gt;ch[d], x); &#125; if (t) &#123; t-&gt;pushUp(); &#125;&#125;int res;void queryPre(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &lt;= x) &#123; res = t-&gt;key; queryPre(t-&gt;ch[1], x); &#125; else &#123; queryPre(t-&gt;ch[0], x); &#125;&#125;void querySub(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &gt;= x) &#123; res = t-&gt;key; querySub(t-&gt;ch[0], x); &#125; else &#123; querySub(t-&gt;ch[1], x); &#125;&#125;&#125; T;int main() &#123;int N = io::gt&lt;int&gt;();int type;ll res = 0;T.insert(T.R, -INT_MAX);T.insert(T.R, INT_MAX);while (N--) &#123; int opt = io::gt&lt;int&gt;(); int x = io::gt&lt;int&gt;(); if (T.R-&gt;sz == 2 || type == opt) &#123; T.insert(T.R, x); type = opt; &#125; else &#123; T.queryPre(T.R, x); int pre = T.res; T.querySub(T.R, x); int sub = T.res; if (pre == -INT_MAX) &#123; res += sub - x; T.erase(T.R, sub); &#125; else if (sub == INT_MAX) &#123; res += x - pre; T.erase(T.R, pre); &#125; else &#123; if (x - pre &lt;= sub - x) &#123; res += x - pre; T.erase(T.R, pre); &#125; else &#123; res += sub - x; T.erase(T.R, sub); &#125; &#125; &#125;&#125;printf("%lld\n", res % 1000000);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2004」BZOJ 1212 L语言]]></title>
    <url>%2FBZOJ-1212%2F</url>
    <content type="text"><![CDATA[有 N 个字符串作为字典，一个字符串能被该字典理解当且仅当它可以被拆成若干个字串，每个字串都是字典中的单词。 现每次查询某个字符串 S_i 能被该字典理解的最长前缀大小，查询 M 次。 1\leq N,M\leq 20 ，单词长度不超过 10 ， S_i 的长度不超过 1M 。 分析 看到多个字符串做字典查询，想到Trie树。 Trie树能够进行字符串的最长前缀匹配，很明显与这道题关系密切。 记 F_i = 1 当 S[0...i] 能被若干个单词拼接而成，如果 S[i+1...k] 也能被若干个单词拼接，那么 F_k=1 。 因此在进行匹配过程中，如果中间恰好为某个单词的结束，那么置对应位置的 F 值为 1 。 进行以 S[i] 为首的字符串匹配的条件为 F_{i-1}=1 （ S[0] 除外）。 那么答案满足即为满足 F_i=1 的最大值。 复杂度不好分析，为 O(\sum{len}) 级别。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1000 + 5;const int MAXM = 1024 * 1024 + 5;struct Node &#123;static const int MAX_SIZE = 26;bool flag;int Nxt[MAX_SIZE];&#125;Pool[MAXN];int cntP = -1, root;int newNode() &#123;Node &amp;x = Pool[++cntP];x.flag = 0;memset(x.Nxt, -1, sizeof x.Nxt);return cntP;&#125;void insert(int rt, char *S) &#123;while(*S) &#123; int id = *S++ - 'a'; if(!~Pool[rt].Nxt[id]) &#123; Pool[rt].Nxt[id] = newNode(); &#125; rt = Pool[rt].Nxt[id];&#125;Pool[rt].flag = true;&#125;void match(int rt, char *S, int st, int F[]) &#123;char *s = S + st;while(*s) &#123; int id = *s++ - 'a'; if(!~Pool[rt].Nxt[id]) &#123; return ; &#125; rt = Pool[rt].Nxt[id]; if(Pool[rt].flag) &#123; F[s - S] = 1; &#125;&#125;&#125;int solve(char *S) &#123;static int F[MAXM];memset(F, 0, sizeof F);match(root, S, 0, F);F[0] = 1;rep(i, 1, strlen(S)) &#123; if(F[i]) &#123; match(root, S, i, F); &#125;&#125;rof(i, strlen(S) + 1, 0) &#123; if(F[i]) &#123; return i; &#125;&#125;&#125;int main() &#123;int n, m;root = newNode();char Str[MAXM];scanf("%d%d", &amp;n, &amp;m);rep(i, 0, n) &#123; scanf("%s", Str); insert(root, Str);&#125;rep(i, 0, m) &#123; scanf("%s", Str); printf("%d\n", solve(Str));&#125;return 0;&#125;]]></content>
      <tags>
        <tag>字典树</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2002」BZOJ 1588 营业额统计]]></title>
    <url>%2FBZOJ-1588%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A ，最小化 total = A_1+\sum\limits_{i=2}^{N}{|A_i-A_j|}(j &lt; i) 。 N\leq 32767, A_i\leq 1000000 分析 用一棵可以查询前驱后继的Treap/Splay等数据结构维护。 每次查询 A_i 的前驱后继，取与 A_i 的差较小的值计入 total ，然后将 A_i 插入。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 32767 + 5;const int INF = 1e9;struct TreapTree &#123; struct Treap &#123; int key, fix; int cnt, sz; Treap *ch[2]; void pushUp() &#123; sz = cnt; if (ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if (ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125; int cmp(int x) &#123; return key == x ? -1 : key &lt; x; &#125; &#125; Pool[MAXN], *R; int cntP; Treap* newTreap(int x) &#123; Pool[++cntP] = (Treap) &#123;x, rand(), 1, 1, NULL, NULL&#125;; return &amp;Pool[cntP]; &#125; void rotate(Treap* &amp;t, int d) &#123; Treap *k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k; &#125; void insert(Treap* &amp;t, int x) &#123; if (!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x); ++t-&gt;sz; if (d == -1) &#123; ++t-&gt;cnt; &#125; else &#123; insert(t-&gt;ch[d], x); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125; &#125; &#125; int res; void queryPre(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &lt;= x) &#123; res = t-&gt;key; queryPre(t-&gt;ch[1], x); &#125; else &#123; queryPre(t-&gt;ch[0], x); &#125; &#125; void querySub(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &gt;= x) &#123; res = t-&gt;key; querySub(t-&gt;ch[0], x); &#125; else &#123; querySub(t-&gt;ch[1], x); &#125; &#125;&#125; T;int main() &#123; int N = io::gt&lt;int&gt;(); int res = io::gt&lt;int&gt;(); T.insert(T.R, res); rep(i, 2, N + 1) &#123; int x = io::gt&lt;int&gt;(); T.res = -1; T.queryPre(T.R, x); int pre = T.res != -1 ? T.res : -INF; T.res = -1; T.querySub(T.R, x); int sub = T.res != -1 ? T.res : INF; res += std::min(x - pre, sub - x); T.insert(T.R, x); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2002」BZOJ 1224 彩票]]></title>
    <url>%2FBZOJ-1224%2F</url>
    <content type="text"><![CDATA[从 [1,M] 中选取 N 个不同整数 A_i ，使得 \sum{\frac{1}{A_i}} = \frac{p}{q} 。求有多少种不同选法。 1\leq p,q\leq 100 ， 1\leq N\leq10 ， 1\leq M\leq 50 ，结果不超过 10^5 。 分析 看到这个数据范围， N\leq 10 ，比较显然是一个搜索+剪枝。 那么如何剪枝？ 最简单的便是如果当前没选完且 sum\geq \frac{p}{q} ，那么就立即返回。 还有两个比较显然的优化。 假设顺序搜索，当前值为 x ，当前和为 sum ，剩余选取 n 个数。 那么如果可能得到 \frac{p}{q} ，至少要满足 sum + \frac{1}{x} * n \geq \frac{p}{q} 且 sum + \frac{1}{M} * n\leq \frac{p}{q} 。 即当前值加上选取剩余数的最小值 min 一定小于结果，加上最大值 max 一定大于结果，否则不可能存在 min\leq a\leq max 使得 sum + a = \frac{p}{q} 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const double eps = 1e-10;int N, M, X, Y;int ans;double goal;void dfs(int x, int total, double sum) &#123; if(goal - sum - 1.0 / x * (N - total) &gt; eps) &#123; return ; &#125; if(sum + 1.0 / M * (N - total) - goal &gt; eps) &#123; return ; &#125; if(total == N) &#123; if(fabs(sum - goal) &lt;= eps) &#123; ++ans; &#125; return ; &#125; if(x &lt;= M) &#123; dfs(x + 1, total + 1, sum + 1.0 / x); dfs(x + 1, total, sum); &#125;&#125;int main() &#123; scanf("%d%d%d%d", &amp;N, &amp;M, &amp;X, &amp;Y); goal = 1.0 * X / Y; dfs(1, 0, 0); printf("%d\n", ans); return 0;&#125;`]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI/HEOI2016」BZOJ 4551 树]]></title>
    <url>%2FBZOJ-4551%2F</url>
    <content type="text"><![CDATA[在有根树 T 中，有两种操作：给某点 x 打标记、查询离某点 x 最近被打标记的祖先，数据范围 10^6 。 1\leq N, Q\leq 100000 分析 跟【dfs序+线段树】[USACO10FEB]「luogu P2982 Slowing down」 思路相同，反着考虑标记一个点对其他点的影响。 显然标记一个点后会影响以它为根的整棵子树。 那么用线段树维护每个点DFS序后，离它最近的被打标记的祖先。 比较原值和新值的大小关系进行更新操作，易得标号大的点更深（在同一棵子树中）。 复杂度 O(Q\log{N}) 。 P.S 不得不说的是，此题数据水到感人，直接暴力树上走路比线段树快的多。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Dfn[MAXN], Nfd[MAXN], Sz[MAXN], cntD;void dfs(int x) &#123; Dfn[x] = ++cntD; Nfd[cntD] = x; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; dfs(v); Sz[x] += Sz[v]; &#125;&#125;int Max[MAXN &lt;&lt; 2], Mrk[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid pushUp(int rt) &#123; if(Max[rt &lt;&lt; 1] == Max[rt &lt;&lt; 1 | 1]) &#123; Max[rt] = Max[rt &lt;&lt; 1]; &#125; else &#123; Max[rt] = -1; &#125;&#125;void pushDown(int rt) &#123; int &amp;mrk = Mrk[rt]; if(mrk) &#123; Mrk[rt &lt;&lt; 1] = std::max(Mrk[rt &lt;&lt; 1], mrk); Mrk[rt &lt;&lt; 1 | 1] = std::max(Mrk[rt &lt;&lt; 1 | 1], mrk); Max[rt &lt;&lt; 1] = std::max(Max[rt &lt;&lt; 1], Max[rt]); Max[rt &lt;&lt; 1 | 1] = std::max(Max[rt &lt;&lt; 1 | 1], Max[rt]); mrk = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Max[rt] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void change(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; if(Max[rt] &lt;= x) &#123; Max[rt] = x; Mrk[rt] = std::max(x, Max[rt]); &#125; return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b, x); &#125; if(m &lt; b) &#123; change(RT, a, b, x); &#125; pushUp(rt);&#125;int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Max[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125;&#125;int main() &#123; int N = io::gt&lt;int&gt;(), Q = io::gt&lt;int&gt;(); rep(i, 1, N) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); addEdge(u, v); &#125; dfs(1); build(1, 1, N); while(Q--) &#123; char opt = io::gc(); while(!isalpha(opt)) &#123; opt = io::gc(); &#125; int x = io::gt&lt;int&gt;(); if(opt == 'C') &#123; change(1, 1, N, Dfn[x], Dfn[x] + Sz[x] - 1, Dfn[x]); &#125; else &#123; io::pt(Nfd[query(1, 1, N, Dfn[x])]); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2015」BZOJ 4034 树上操作]]></title>
    <url>%2FBZOJ-4034%2F</url>
    <content type="text"><![CDATA[在一棵有 N 个节点的树上，每个点有初始权值 W_i 。现有 M 个操作，分别为： ADD(u,x) 节点 u 权值增加 v ADD2(u,x)节点 u 的子树的所有节点权值增加 v QUERY(u) 查询节点 u 到根节点( 1 )的权值和 N,M\leq 100000 ，且所有输入数据的绝对值都不会超过 10^6 。 分析 树链剖分+线段树模板。 注意需要long long，否则只有30分。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Graph &#123; static const int MAXN = 100000 + 5; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int H[MAXN], cntE; int Depth[MAXN], Fa[MAXN], Son[MAXN], Sz[MAXN]; int Dfn[MAXN], Top[MAXN], cntD; int W[MAXN], Wp[MAXN]; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125; &#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r ll Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; &#125; void pushDown(int rt, int L) &#123; ll &amp;add = Add[rt]; if(!add) &#123; return ; &#125; Sum[rt &lt;&lt; 1] += add * (L - (L &gt;&gt; 1)); Sum[rt &lt;&lt; 1 | 1] += add * (L &gt;&gt; 1); Add[rt &lt;&lt; 1] += add; Add[rt &lt;&lt; 1 | 1] += add; add = 0; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void add(int rt, int l, int r, int a, int b, ll x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Sum[rt] += x * (r - l + 1); Add[rt] += x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; add(LT, a, b, x); &#125; if(m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt); &#125; ll querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; ll res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res; &#125; void addNode(int u, int x) &#123; add(1, 1, N, Dfn[u], Dfn[u], x); &#125; void addTree(int rt, int x) &#123; add(1, 1, N, Dfn[rt], Dfn[rt] + Sz[rt] - 1, x); &#125; ll queryPath(int v) &#123; ll res = 0; int u = R, tu = Top[R], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[tv], Dfn[v]); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[u], Dfn[v]); return res; &#125; void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); G.R = 1; int M = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;(); &#125; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); rep(i, 0, M) &#123; int opt = io::gt&lt;int&gt;(); if(opt == 1) &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.addNode(u, x); &#125; else if(opt == 2) &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.addTree(u, x); &#125; else &#123; io::pt(G.queryPath(io::gt&lt;int&gt;())); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2015」BZOJ 4033 树上染色]]></title>
    <url>%2FBZOJ-4033%2F</url>
    <content type="text"><![CDATA[有一棵点数为 N 的树，树边有边权。给你一个在 0 ~ N 之内的正整数 K ，你要在这棵树中选择 K 个点，将其染成黑色，并将其他的 N-K 个点染成白色 。将所有点染色后，你会获得黑点两两之间的距离加上白点两两之间的距离的和的受益。问受益最大值是多少。 0\leq K\leq N\leq 2000 分析 感觉就是一道联赛难度的树形DP，思路很simple。 枚举当前节点的某个儿子作为根的子树中染成黑色的节点数目，如此该子树内、外各自的黑白节点个数就已知了，可以计算当前这条边（当前节点和该儿子相连的边）对答案的贡献，进行类似01背包的操作。 计算复杂度的话，复杂度上界为 \sum\limits_{x=1}^{N}{\sum\limits_{u,v\in Son[x]}{Sz[u]\times Sz[v]}} 。 Sz[u]\times Sz[v] 可以将其视作从以 x 为根的子树中任意选择两个点，使得它们的LCA是 x 的方案数。由于每个节点对只有一个最近公共祖先，因此它就是在树上选取节点对的方案数，即 N^2 。 复杂度 O(N^2) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 2000 + 5;struct Edge &#123; int v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int N, K;int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, w, H[v]&#125;; H[v] = cntE;&#125;ll F[MAXN][MAXN];int Sz[MAXN];void dfs(int x, int fa) &#123; Sz[x] = 1; memset(F[x], -1, sizeof F[x]); F[x][0] = F[x][1] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v == fa) &#123; continue; &#125; dfs(v, x); Sz[x] += Sz[v]; &#125; for (int e = H[x]; e; e = E[e].nxt) &#123; int &amp;v = E[e].v, &amp;w = E[e].w; if (v == fa) &#123; continue; &#125; rof(i, std::min(Sz[x], K) + 1, 0) &#123; rep(j, 0, std::min(Sz[v], i) + 1) &#123; if (F[x][i - j] != -1) &#123; ll val = 1ll * w * (j * (K - j) + (Sz[v] - j) * (N - Sz[v] - K + j)); F[x][i] = std::max(F[x][i], F[x][i - j] + F[v][j] + val); &#125; &#125; &#125; &#125;&#125;int main() &#123; int u, v, w; scanf("%d%d", &amp;N, &amp;K); rep(i, 1, N) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; dfs(1, 0); printf("%lld\n", F[1][K]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2007」BZOJ1053 反素数]]></title>
    <url>%2FBZOJ-1053%2F</url>
    <content type="text"><![CDATA[求 [1,N]​ 中最大的反素数。 记 g(x) 为 x 的约束个数，反素数即满足 y \in [1,x-1], g(x) &gt; g(y) 。 1\leq N\leq 2000000000 分析 根据约数个数定理。设 x = \prod{A_{i}^{P_i}} ，则 x 的约数个数为 \prod{(P_i+1)} 。 假设 A_i 单调递增，那么 P_i 一定单调递减。 反证法：若 x 分解后，存在 A_i &lt; A_j, P_i \leq P_j ，那么互换 P_i, P_j 一定更优。 根据 N 的数据范围，发现前 11 个素数的乘积就已经超过 2e9 ，因此最多枚举 10 个素数 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;int Pri[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59&#125;;ll ans, N;int res;void dfs(int x, ll cur, int num, int last) &#123;if(cur * Pri[x] &gt; N) &#123; if(num &gt; res || num == res &amp;&amp; ans &gt; cur) &#123; res = num; ans = cur; &#125; return ;&#125;ll mul = Pri[x];rep(i, 1, last + 1) &#123; if(cur * mul &gt; N) &#123; break; &#125; dfs(x + 1, cur * mul, num * (i + 1), i); mul *= Pri[x];&#125;&#125;int main() &#123;scanf("%lld", &amp;N);dfs(0, 1, 1, 64);printf("%lld\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>约数个数定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2018」BZOJ 5301 异或序列]]></title>
    <url>%2FBZOJ-5301%2F</url>
    <content type="text"><![CDATA[在序列 A[1...N] 中查询 M 次，每次查询 A[L_i,R_i] 中异或和为 K 的子序列的个数。 1\leq N,M\leq 10^5,0\leq K, A_i\leq 105,1\leq L_i\leq R_i\leq N 分析 记 A[l...r] = A[l]\bigoplus A[l+1]\bigoplus...A[r] ，若 A[1...L-1] = x，A[1....R] = y ， 那么 A[L...R] = x\bigoplus y 。 也就是说如果满足 x\bigoplus y=k ，那么 A[L,R] 就是一个合法子序列。 考虑增加一个数 A[x] 产生的影响。 记 Cnt[x] 为满足 A[1...r] = x 的 r 的个数，那么区间个数会因此增加 Cnt[x\bigoplus K] 个，增加的区间分别为 A[\min(x,r)+1,\max(x,r)] 。 删除一个数同理，都是 O(1) 的。 想到莫队算法。 复杂度 O(M\log{M} + N\sqrt{N+M}) 。 P.S 注意细节， [l,r] 是通过 [1,r]\bigoplus[1,l-1] 异或得到的，而不是 [1,l] ；想清楚增加/删除一个数时，是先改统计数，还是先改答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;int Pos[MAXN];struct Query &#123; int l, r, id; bool operator &lt; (const Query &amp;x) const &#123; return Pos[l] == Pos[x.l] ? Pos[x.l] &amp; 1 ? r &gt; x.r : r &lt; x.r : Pos[l] &lt; Pos[x.l]; &#125;&#125; Q[MAXN];int N, M, K;int A[MAXN], Num[MAXN &lt;&lt; 1];int l = 1, r;ll Ans[MAXN], ans;void del(int x) &#123; --Num[A[x]]; ans -= Num[A[x] ^ K];&#125;void add(int x) &#123; ans += Num[A[x] ^ K]; Num[A[x]]++;&#125;int main() &#123; N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(), K = io::gt&lt;int&gt;(); int sz = sqrt(N); rep(i, 1, N + 1) &#123; Pos[i] = i / sz; A[i] = io::gt&lt;int&gt;(); A[i] ^= A[i - 1]; &#125; rep(i, 1, M + 1) &#123; Q[i].l = io::gt&lt;int&gt;(), Q[i].r = io::gt&lt;int&gt;(); Q[i].id = i; &#125; std::sort(Q + 1, Q + M + 1); Num[0] = 1; rep(i, 1, M + 1) &#123; while (l &lt; Q[i].l) &#123; del(l++ - 1); &#125; while (l &gt; Q[i].l) &#123; add(--l - 1); &#125; while (r &lt; Q[i].r) &#123; add(++r); &#125; while (r &gt; Q[i].r) &#123; del(r--); &#125; Ans[Q[i].id] = ans; &#125; rep(i, 1, M + 1) &#123; io::pt(Ans[i]); &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BJOI 2018」BZOJ 5293 求和]]></title>
    <url>%2FBZOJ-5293%2F</url>
    <content type="text"><![CDATA[在一棵有 n 个节点，根节点为 1 的树上进行 m 次询问。 每次查询 (u,v) 之间的简单路径的“ k 次深度和”。 k 次深度和即 \sum_{i\in(u,v)}Depth(i)^k ， Depth(1)=0 。 询问的结果对 998244353 取模。 1\leq n,m\leq 300000,1\leq k\leq 50 分析 首先注意到没有修改操作，只有查询。 其次注意到 k 很小， k 次方可以预处理。 最后注意到每次查询就是一个 k 次的两段连续区间的求和。 记 lca 为 (u,v) 的最近公共祖先。 那么查询的结果即为 \sum_{i=Depth(lca)}^{Depth(u)}i^k+\sum_{i=Depth(lca)+1}^{Depth(v)}i^k 预处理 F_{i,j} = \sum_{u=0}^{j}u^i 则查询的结果为 F_{k,Depth(v)}-F_{k,Depth(lca)}+F_{k,Depth(u)}-F_{k,Depth(lca)}+Depth(lca)^k 对于 m 组 (u,v) 求LCA，树剖、倍增、Tarjan都可以。 如果选择树剖、倍增，复杂度 O(n\times k+m\times \log{n}) ； 如果选择Tarjan，复杂度 O(n\times k+m) 。 实测Tarjan常数较大，运行时间相对更长（可能是写渣了）。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEinline char gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst static int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-'); register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125;const int MAXN = 300000 + 5;const int MOD = 998244353;std::vector&lt;int&gt; G[MAXN];int maxDep;int Fa[MAXN], Sz[MAXN], Depth[MAXN];int Son[MAXN], Top[MAXN];void dfs1(int x) &#123; Sz[x] = 1; if(x == 1) &#123; Depth[x] = 0; &#125; else &#123; Depth[x] = Depth[Fa[x]] + 1; &#125; maxDep = std::max(maxDep, Depth[x]); rep(i, 0, SZ(G[x])) &#123; int &amp;v = G[x][i]; if(Fa[x] != v) &#123; Fa[v] = x; dfs1(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]] || !Son[x]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int fa) &#123; Top[x] = fa; if(Son[x]) &#123; dfs2(Son[x], fa); &#125; rep(i, 0, SZ(G[x])) &#123; int &amp;v = G[x][i]; if(v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;int query(int u, int v) &#123; while(Top[u] ^ Top[v]) &#123; if(Depth[Top[u]] &gt; Depth[Top[v]]) &#123; u = Fa[Top[u]]; &#125; else &#123; v = Fa[Top[v]]; &#125; &#125; return Depth[u] &lt; Depth[v] ? u : v;&#125;std::vector&lt;int&gt; Sum[MAXN];ll poww(ll x, ll t) &#123; ll ans = 1; for(; t; t &gt;&gt;= 1, x = x * x % MOD) &#123; if(t &amp; 1) &#123; ans = ans * x % MOD; &#125; &#125; return ans;&#125;void pre() &#123; rep(i, 1, 51) &#123; Sum[i].push_back(0); rep(j, 1, maxDep + 1) &#123; ll cur = (poww(j, i) + Sum[i].back()) % MOD; Sum[i].push_back(cur); &#125; &#125;&#125;int main() &#123; rep(i, 1, io::gt&lt;int&gt;()) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); G[u].push_back(v); G[v].push_back(u); &#125; dfs1(1); dfs2(1, 1); pre(); rep(i, 0, io::gt&lt;int&gt;()) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); int lca = query(u, v); int &amp;depx = Depth[u], &amp;depy = Depth[v]; int &amp;depl = Depth[lca]; int ans = ((Sum[k][depy] - Sum[k][depl] + Sum[k][depx] - Sum[k][depl] + poww(depl, k)) % MOD + MOD) % MOD; io::pt(ans); &#125; io::fflush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「AHOI 2009」BZOJ 1798 维护序列]]></title>
    <url>%2FBZOJ-1798%2F</url>
    <content type="text"><![CDATA[维护序列 A[1...N] ，共 M 次操作，分为三种： A[l,r] 所有数加 x A[l,r] 所有数乘 x A[l,r] 求和 答案对 P 取模。 N,M\leq 100000,1\leq P\leq 1000000000 分析 线段树模板，注意lazy标签先处理乘法。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Segment &#123; int sum, add, mul;&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rll P;template&lt;class T, class G&gt; void inc(T &amp;x, G y) &#123; (x += y) %= P;&#125;template&lt;class T, class G&gt; void inu(T &amp;x, G y) &#123; (x *= y) %= P;&#125;void pushUp(int rt) &#123; inc(T[rt].sum = 0, T[rt &lt;&lt; 1].sum + T[rt &lt;&lt; 1 | 1].sum);&#125;void pushDown(int rt, int L) &#123; Segment &amp;ls = T[rt &lt;&lt; 1], &amp;rs = T[rt &lt;&lt; 1 | 1]; int &amp;add = T[rt].add, &amp;mul = T[rt].mul; if (mul != 1) &#123; inu(ls.sum, mul); inu(rs.sum, mul); inu(ls.add, mul); inu(rs.add, mul); inu(ls.mul, mul); inu(rs.mul, mul); mul = 1; &#125; if (add != 0) &#123; inc(ls.sum, add * (L - (L &gt;&gt; 1))); inc(rs.sum, add * (L &gt;&gt; 1)); inc(ls.add, add); inc(rs.add, add); add = 0; &#125;&#125;void build(int rt, int l, int r) &#123; T[rt].add = 0, T[rt].mul = 1; if (l == r) &#123; inc(T[rt].sum = 0, io::gt&lt;ll&gt;()); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void mul(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inu(T[rt].sum, x); inu(T[rt].add, x); inu(T[rt].mul, x); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; mul(LT, a, b, x); &#125; if (m &lt; b) &#123; mul(RT, a, b, x); &#125; pushUp(rt);&#125;void add(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inc(T[rt].sum, x * (r - l + 1)); inc(T[rt].add, x); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b, x); &#125; if (m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt);&#125;ll querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].sum; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; ll res = 0; if (a &lt;= m) &#123; inc(res, querySum(LT, a, b)); &#125; if (m &lt; b) &#123; inc(res, querySum(RT, a, b)); &#125; return res;&#125;int main() &#123; int N = io::gt&lt;int&gt;(); P = io::gt&lt;ll&gt;(); build(1, 1, N); int M = io::gt&lt;int&gt;(); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); if (opt == 1) &#123; mul(1, 1, N, l, r, io::gt&lt;ll&gt;() % P); &#125; else if (opt == 2) &#123; add(1, 1, N, l, r, io::gt&lt;ll&gt;() % P); &#125; else &#123; io::pt(querySum(1, 1, N, l, r)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BJWC 2018」BZOJ 5148 kakuro]]></title>
    <url>%2FBZOJ-5148%2F</url>
    <content type="text"><![CDATA[kakuro是一个神奇的数独游戏，大致规则如下： N\times M​ 的网格图中，由一些格子为空格需要填数，一些格子填线索，一些格子什么都不填 线索有两个方向，分别为右和下，线索的值表示该方向连续空格所填数之和 对于任意一个空格，其左边与上边的一定存在一个格子为线 游戏规则： 空格中填入正整数。 被斜线分开的方格中，右上角的数字等于其右侧邻接之连续方格中数字之和，左下角的数字等于其下方邻接之连续方格中数字之和。 Apia 给了Rimbaud 一个Kakuro 谜题。心不灵手不巧的Rimbaud 根本不会做Kakuro，所以只在空格里面填上了一些随机的数字，称这个为一个局面，即包含了谜题一开始给出的线索和后面填入的数字。 现在Rimbaud 希望能修改这个局面使得她的答案是一个合法解。这个局面中有些数字(包括一开始的给出线索和后面填入的数字) 是可以修改的。每个数字都有个特定的代价，将这个数字加 1 或者减 1 都得付出这个数字对应的代价。注意对于一组合法解，必须满足游戏规则，也就是空格中填的数字必须是正整数并且满足和的条件，但是不要求不重复。 Rimbaud 希望用最少的代价让这个局面变得合法，如果不可能那么输出-1 。 3 \leq n,m \leq 30 ，保证初始局面中的每个数字不超过 10^6 ，保证每个数字的代价不超过 10^6 。 分析 致谢 感谢AloNE的讲解。 正题 一个思路就是先做出一个合法解，然后再去修改权值以减少总花费。 那么最简单的合法解，就是每个空格都填 1 ，线索填对应格子的个数。 如此保证了每个空格都是正整数，这是一个最小解。 记当前花费为 Ans 。 记某个格子现在的值为 A(x,y) ，原来的值为 O(x,y) ，修改 1 的价格为 C(x,y) 。 那么每个空格和线索只能往大修改，那么有两种情况。 A(x,y) \leq O(x,y) ，那么当 A(x,y) 最初变大直到 O(x,y) 时，相当于对最开始的修改进行反悔，也就是说花费 -C(x,y) ；当然对于超出 O(x,y) 的部分继续花费 C(x,y) 。 A(x,y) \geq O(x,y) ，那么修改继续增加花费 C(x,y) 。 转化成网络流问题，将这些关系抽象成如下的边： 发现对于修改一个空格会对其左边和上边的两个线索产生影响，约束方法很简单，就是流量从其上面的线索流入，从其左边的线索流出，那么保证所有增加的流量都是合法的；也就是说空格本质就是一条连接横向和竖向线索的边； 根据上面的建模方法， S 连接所有竖向线索，费用为 C(x,y) ，流量不限； 所有横向线索连接 T ，费用为 C(x,y) ，流量不限； 对于所有空格，如果 A(x,y) \leq O(x,y) ，连接费用为 -C(x,y) 流量为 O(x,y) - A(x,y) ，意为对最初的修改进行反悔；（对应的两个线索之间连边） 对于所有空格，连接费用为 C(x,y) ，流量不限的边，因为每个格子都可以无限增大。 跑最小费用可行流，当前费用 Cost \geq 0 时结束。 得到最小费用 C ，那么最终结果 Ans + C 。 那么如何判断无解的情况？ 无解也就是说修改了不能修改的边。 那么将不能修改的边的费用置为 INF ，跑完最小费用可行流之后检查残余与网络是否存在费用为 INF 的反向边流量不为 0 或者费用为 -INF 的边流量不为 0 。 如果出现这种情况，说明了必须修改不能修改的格子权值以满足流量平衡，输出 -1 即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 30 + 5;const int INF = 1e9 + 7;namespace mcf &#123;const int MAXN = ::MAXN * ::MAXN * 4;const int MAXM = MAXN;struct Edge &#123; int v, c, f, nxt;&#125; E[MAXM &lt;&lt; 1];int S, T;ll C, F, Dis[MAXN];int H[MAXN], cntE;int Lp[MAXN], Le[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::bitset&lt;MAXN&gt; Inq; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] &lt; 0;&#125;void mcf() &#123; while (spfa()) &#123; int f = INF; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; C = F = 0;&#125;bool check() &#123; for (int i = 0; i &lt;= cntE; i += 2) &#123; if (E[i].c == INF &amp;&amp; E[i ^ 1].f &gt; 0) &#123; return false; &#125; if (E[i].c == -INF &amp;&amp; E[i].f &gt; 0) &#123; return false; &#125; &#125; return true;&#125;&#125;int N, M;int Type[MAXN][MAXN];int Column[MAXN][MAXN], Line[MAXN][MAXN], Ori[MAXN][MAXN];int ChangeC[MAXN][MAXN], ChangeL[MAXN][MAXN], ChangeO[MAXN][MAXN];int IdC[MAXN][MAXN], IdL[MAXN][MAXN];int Left[MAXN][MAXN], Up[MAXN][MAXN];int AfterC[MAXN][MAXN], AfterL[MAXN][MAXN], AfterO[MAXN][MAXN];int main() &#123; mcf::init(); int cnt = 0; N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; Type[i][j] = io::gt&lt;int&gt;(); &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; Column[i][j] = io::gt&lt;int&gt;(); IdC[i][j] = ++cnt; &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; Line[i][j] = io::gt&lt;int&gt;(); IdL[i][j] = ++cnt; &#125; if (Type[i][j] == 4) &#123; Ori[i][j] = io::gt&lt;int&gt;(); &#125; &#125; &#125; mcf::S = 0, mcf::T = cnt + 1; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; ChangeC[i][j] = io::gt&lt;int&gt;(); if (ChangeC[i][j] == -1) &#123; ChangeC[i][j] = INF; &#125; &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; ChangeL[i][j] = io::gt&lt;int&gt;(); if (ChangeL[i][j] == -1) &#123; ChangeL[i][j] = INF; &#125; &#125; if (Type[i][j] == 4) &#123; ChangeO[i][j] = io::gt&lt;int&gt;(); if (ChangeO[i][j] == -1) &#123; ChangeO[i][j] = INF; &#125; &#125; &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; int k = i + 1; while (k &lt;= N &amp;&amp; Type[k][j] == 4) &#123; Up[k++][j] = IdC[i][j]; &#125; AfterC[i][j] = k - i - 1; mcf::C += 1ll * ChangeC[i][j] * std::abs(AfterC[i][j] - Column[i][j]); &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; int k = j + 1; while (k &lt;= M &amp;&amp; Type[i][k] == 4) &#123; Left[i][k++] = IdL[i][j]; &#125; AfterL[i][j] = k - j - 1; mcf::C += 1ll * ChangeL[i][j] * std::abs(AfterL[i][j] - Line[i][j]); &#125; if (Type[i][j] == 4) &#123; AfterO[i][j] = 1; mcf::C += 1ll * ChangeO[i][j] * std::abs(AfterO[i][j] - Ori[i][j]); &#125; &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; if (AfterC[i][j] &lt; Column[i][j]) &#123; mcf::addEdge(mcf::S, IdC[i][j], Column[i][j] - AfterC[i][j], -ChangeC[i][j]); &#125; mcf::addEdge(mcf::S, IdC[i][j], INF, ChangeC[i][j]); &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; if (AfterL[i][j] &lt; Line[i][j]) &#123; mcf::addEdge(IdL[i][j], mcf::T, Line[i][j] - AfterL[i][j], -ChangeL[i][j]); &#125; mcf::addEdge(IdL[i][j], mcf::T, INF, ChangeL[i][j]); &#125; if (Type[i][j] == 4) &#123; if (AfterO[i][j] &lt; Ori[i][j]) &#123; mcf::addEdge(Up[i][j], Left[i][j], Ori[i][j] - AfterO[i][j], -ChangeO[i][j]); &#125; mcf::addEdge(Up[i][j], Left[i][j], INF, ChangeO[i][j]); &#125; &#125; &#125; mcf::mcf(); if (!mcf::check()) &#123; printf("-1\n"); &#125; else &#123; printf("%lld\n", mcf::C); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」BZOJ 2465 小球]]></title>
    <url>%2FBZOJ-2465%2F</url>
    <content type="text"><![CDATA[n 个球放进 m 个瓶子里，每个球有分数 A_i ，每个瓶子有容积 B_i ，且瓶中球的分数都不能超过 C_i ，求可放入球的最大数量以及在该条件下的最大分数和。 1\leq n\leq 200,0\leq m\leq 200,1 \leq p\leq 10^6, 0\leq c\leq 200, 1\leq q\leq 10^6 分析 费用流 第一看看就是个很裸的费用流，用最大流来保证取的球最多，最小费用来保证总分数最大（分数取反作费用）。 用 (u,v,f,c) 表示一条由 u 到 v 流量限制为 f 费用为 c 的边，那么本题建图方法如下： (S, i, 1, 0) ,i \in[1, n] (i,T,B_i,0),i\in[n+1,n+m] (i,j,1,-A_i),A_i\leq C_j 复杂度 O(NMF) ， F 为最大流的值。 贪心 其实此题更明显的做法应该是贪心。 将球按照分数排序，由于它们空间相同（都是 1 ），因此将分数大的球放到分数限制大的瓶子里一定会放置最多的球。 复杂度 O(M\log{M}+N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt; #define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("ball.in", "r", stdin); freopen("ball.out", "w", stdout);&#125; const int MAXN = 400 + 5;const int INF = INT_MAX;int A[MAXN], B[MAXN], C[MAXN]; struct Edge &#123; int v, c, f, nxt;&#125; E[MAXN * MAXN];int N, M, S, T;int cost, flow;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq; void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125; bool spfa() &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125; void buildGraph() &#123; S = N + M + 1, T = N + M + 2; memset(H, -1, sizeof H); cntE = -1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); &#125; rep(i, 1, M + 1) &#123; addEdge(i + N, T, B[i], 0); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (::A[i] &lt;= ::C[j]) &#123; addEdge(i, N + j, INF, -::A[i]); &#125; &#125; &#125;&#125; void mcmf() &#123; buildGraph(); cost = flow = 0; while (spfa()) &#123; int f = INF; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125;&#125; int main() &#123; //open(); while (true) &#123; scanf("%d%d", &amp;N, &amp;M); if (N + M == 0) &#123; break; &#125; rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); &#125; rep(i, 1, M + 1) &#123; scanf("%d%d", &amp;B[i], &amp;C[i]); &#125; mcmf(); printf("%d %d\n", flow, -cost); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」BZOJ 2466 树]]></title>
    <url>%2FBZOJ-2466%2F</url>
    <content type="text"><![CDATA[树 T 上的每个节点都一盏熄灭的灯，已知按下某个节点的开关会改变它与它相连的所有节点的灯的状态，求将所有灯变亮的最少操作次数。 1\leq n\leq 100 分析 发现每个操作都是独立的，也就是说至多每个开关按一次。 再根据按开关会改变所有与它相连的灯的状态，想到一定是自叶子到根进行操作，那么就树形DP。 DP中注意当前节点无论亮与否，它的子树一定是全亮的（因为操作是一直往根上走的）。 对于一个节点有四种状态：按开关且亮、按开关且灭、不按开关且亮、不按开关且灭。 可以发现第二种没有意义（不按都亮了那还按它干什么）。 考虑剩余三种的状态如何从儿子转移。 其中“按开关且亮”的状态最简单，因为按了它之后要保证它的子树的灯全是亮的，因此从“它的所有儿子都灭且没按”的状态转移而来。 “不按开关且灭”的状态从“当前亮+当前儿子按且亮”或“当前灭+当前儿子不按且亮”转移。 “不按开关且亮”的状态从“当前亮+当前儿子不按且亮”或“当前灭+当前儿子按且亮”转移。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("tree.in", "r", stdin); freopen("tree.out", "w", stdout);&#125;const int MAXN = 100 + 5;const int INF = 0x03ffffff;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int F[MAXN][2][2];void dfs(int x, int fa) &#123; int a = 0, b = INF, c = 0; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; int aa = a, bb = b; dfs(v, x); a = std::min(aa + F[v][0][1], bb + F[v][1][1]); b = std::min(aa + F[v][1][1], bb + F[v][0][1]); c += F[v][0][0]; &#125; &#125; F[x][0][0] = a; F[x][0][1] = b; F[x][1][1] = c + 1;&#125;int main() &#123; //open(); int u, v; while (true) &#123; scanf("%d", &amp;N); if (N == 0) &#123; break; &#125; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(1, 0); printf("%d\n", std::min(F[1][0][1], F[1][1][1])); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」 BZOJ 2464 小明的游戏]]></title>
    <url>%2FBZOJ-2464%2F</url>
    <content type="text"><![CDATA[在一个 N\times M 的01网格图中，每次可以向相邻的格子移动，移动到同一类型的格子的花费为 0 ，否则为 1 ，求起点到终点的最小花费。 1\leq n, m\leq 500 分析 由于边权非 0 即 1 ，因此SPFA的复杂度上限就是点数，即 N^2 。 复杂度 O(T\times N^2) ，其中 T 为数据组数。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("game.in", "r", stdin); freopen("game.out", "w", stdout);&#125;const int MAXN = 500 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;char Str[MAXN][MAXN];int sx, sy, ex, ey;bool check(int x, int y) &#123; return x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; N &amp;&amp; y &lt; M;&#125;int spfa() &#123; static int Dis[MAXN][MAXN]; static bool Inq[MAXN][MAXN]; std::queue&lt;int, std::deque&lt;int&gt; &gt; Qx, Qy; memset(Inq, 0, sizeof Inq); memset(Dis, 0x3f, sizeof Dis); Qx.push(sx); Qy.push(sy); Dis[sx][sy] = 0; while (!Qx.empty()) &#123; int x = Qx.front(), y = Qy.front(); Qx.pop(), Qy.pop(); Inq[x][y] = 0; rep(i, 0, 4) &#123; int nx = x + Dicx[i];; int ny = y + Dicy[i]; if (!check(nx, ny)) &#123; continue ; &#125; int dis = Dis[x][y] + (Str[x][y] != Str[nx][ny]); if (Dis[nx][ny] &gt; dis) &#123; Dis[nx][ny] = dis; if (!Inq[nx][ny]) &#123; Inq[nx][ny] = 1; Qx.push(nx); Qy.push(ny); &#125; &#125; &#125; &#125; return Dis[ex][ey];&#125;int main() &#123; //open(); while (true) &#123; scanf("%d%d", &amp;N, &amp;M); if (N + M == 0) &#123; break; &#125; rep(i, 0, N) &#123; scanf("%s", Str[i]); &#125; scanf("%d%d%d%d", &amp;sx, &amp;sy, &amp;ex, &amp;ey); printf("%d\n", spfa()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HEOI 2013」BZOJ 3166 Alo]]></title>
    <url>%2FBZOJ-3166%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A[1 \cdots N] ，定义 F[i,j] 为 A[i \cdots j] 的次大值与区间内另一个数异或的最大值。求 A 所有子区间的 F 最大值。 1\leq N\leq 50000, A_i\leq 10^9 分析 将问题反过来看，其实就是找到每一个数对应的区间，使得它在区间中是次大值，且区间长度最大。 记 L[i],R[i] 为 A[i] 左右第一个比它大的数， LL[i],RR[i] 为 A[i] 左右第二个大的数，那么区间为 [LL[i]+1,R[i]-1] 和 [L[i]+1,RR[i]-1] 。 可以通过在ST表上二分的方法求出 LL[i],RR[i] ，复杂度 O(N\log{N}) 。 最后用可持久化Trie求每个区间与 A[i] 的最大异或值，答案为这些值取max，这一步操作的复杂度为 O(N\log{max(A_i)}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;const int MAXM = 40;struct Trie &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], cntT;int insert(int pre, int x) &#123; int rt = ++cntT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++cntT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int N, A[MAXN];int L[MAXN], R[MAXN];int Stk[MAXN], top;int LL[MAXN], RR[MAXN];int bSearch(int x) &#123; int l = 1, r = top; int ans = 0; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (A[Stk[m]] &gt; A[x]) &#123; ans = Stk[m]; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; return ans;&#125;int F[MAXN][MAXM];void buildST(int n) &#123; for (int i = 1; i &lt;= n; ++i) &#123; F[i][0] = A[i]; &#125; int k = log2(n); for (int j = 1; j &lt;= k; ++j) &#123; for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= n; ++i) &#123; if (F[i][j - 1] &gt; F[i + (1 &lt;&lt; (j - 1))][j - 1]) &#123; F[i][j] = F[i][j - 1]; &#125; else &#123; F[i][j] = F[i + (1 &lt;&lt; (j - 1))][j - 1]; &#125; &#125; &#125;&#125;int queryMax(int l, int r) &#123; int k = log2(r - l + 1); return std::max(F[l][k], F[r - (1 &lt;&lt; k) + 1][k]);&#125;int getL(int i) &#123; int p = L[i], x = A[i]; int l = 1, r = p - 1, ans = 1; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (queryMax(m, p - 1) &gt; x) &#123; ans = m; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; return ans;&#125;int getR(int i) &#123; int p = R[i], x = A[i]; int l = p + 1, r = N + 1, ans = N + 1; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (queryMax(p + 1, m) &gt; x) &#123; ans = m; r = m - 1; &#125; else &#123; l = m + 1; &#125; &#125; return ans;&#125;int main() &#123; scanf("%d", &amp;N); Rt[1] = insert(Rt[0], 0); ++N; for (int i = 2; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); Rt[i] = insert(Rt[i - 1], A[i]); &#125; A[1] = A[N + 1] = INT_MAX; Stk[top = 1] = 1; for (int i = 2; i &lt;= N; ++i) &#123; while (A[Stk[top]] &lt;= A[i]) &#123; --top; &#125; L[i] = Stk[top]; Stk[++top] = i; &#125; Stk[top = 1] = N + 1; for (int i = N; i &gt;= 2; --i) &#123; while (A[Stk[top]] &lt;= A[i]) &#123; --top; &#125; R[i] = Stk[top]; Stk[++top] = i; &#125; buildST(N + 1); for (int i = 2; i &lt;= N; ++i) &#123; LL[i] = getL(i); RR[i] = getR(i); &#125; int ans = 0; for (int i = 2; i &lt;= N; ++i) &#123; if (L[i] == 1 &amp;&amp; R[i] == N + 1) &#123; continue; &#125; ans = std::max(ans, query(Rt[LL[i]], Rt[R[i] - 1], A[i])); ans = std::max(ans, query(Rt[L[i]], Rt[RR[i] - 1], A[i])); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2018 OPEN」BZOJ 5281 Talent Show]]></title>
    <url>%2FBZOJ-5281%2F</url>
    <content type="text"><![CDATA[N 个点各有权值 W_i 和 T_i ，在其中选择任意多个点，在满足 \sum{W_i} \geq A 的条件下求 \sum{T_i}/\sum{W_i} 的最大值。 1\leq N\leq 250,1\leq W\leq 1000,1\leq W_i\leq 10^6,1\leq T_i\leq 10^3 分析 套路二分答案 x ，然后背包求在 \sum{W_i}\geq A 的情况下判定 \sum{T_i-W_i\times x}\geq 0 是否成立。 由于答案是 \times 1000 取整，为了避免浮点数运算，可以直接将 T_i 放大 1000 倍。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;const int MAXN = 250 + 5;const int MAXM = 1000 + 5;int N, M;int A[MAXN], B[MAXN];long long F[MAXM];bool check(int a) &#123; memset(F, 0xc2, sizeof F); long long tmp = F[0]; F[0] = 0; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = M; j &gt;= 0; --j) &#123; if (F[j] != tmp) &#123; int v = std::min(M, j + A[i]); F[v] = std::max(F[v], F[j] - (long long)A[i] * a + B[i]); &#125; &#125; &#125; return F[M] &gt;= 0;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;A[i], &amp;B[i]); B[i] *= 1000; &#125; int l = 0, r = 2e8, ans = 0; while (l &lt;= r) &#123; int m = (l + r) / 2; if (check(m)) &#123; ans = m; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2016」BZOJ 4753 最佳团体]]></title>
    <url>%2FBZOJ-4753%2F</url>
    <content type="text"><![CDATA[每个点有一个父亲，它能被选择当且仅当它父亲被选择，0号节点默认被选择。每个点有收益 X[i] ，代价 Y[i] 。选择恰好 K 个点（不算0号），使得其对应的 \sum{X[i]}/\sum{Y[i]} 最大。 N\leq 2500 分析 通过分数规划，二分答案来避免除法。 选择关系是一棵树，被选择的点处于一个联通分量。树形背包，转移时父亲被强制选择。 复杂度 O(NK\log{X[i]}) 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;const int MAXN = 2500 + 5;const double eps = 1e-4;int N, K;int A[MAXN], B[MAXN], P[MAXN];std::vector&lt;int&gt; G[MAXN];double F[MAXN][MAXN], Tmp[MAXN];int Sz[MAXN];void dfs(int x, double m) &#123; F[x][0] = 0; F[x][1] = B[x] - A[x] * m; Sz[x] = 1; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; dfs(v, m); memset(Tmp, 0xc2, sizeof Tmp); Tmp[0] = 0; for (int j = 1; j &lt;= Sz[x]; ++j) &#123; for (int k = 0; k &lt;= Sz[v] &amp;&amp; j + k &lt;= K; ++k) &#123; Tmp[j + k] = std::max(Tmp[j + k], F[x][j] + F[v][k]); &#125; &#125; Sz[x] += Sz[v]; memcpy(F[x], Tmp, sizeof Tmp); &#125;&#125;bool check(double m) &#123; memset(F, 0xc2, sizeof F); dfs(0, m); return F[0][K] &gt;= 0;&#125;int main() &#123; scanf("%d%d", &amp;K, &amp;N); ++K; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d%d", &amp;A[i], &amp;B[i], &amp;P[i]); G[P[i]].push_back(i); &#125; double l = 0, r = 1e4, ans; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; l = ans = m; &#125; else &#123; r = m; &#125; &#125; printf("%.3lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
        <tag>分数规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2014」BZOJ 3597 方伯伯运椰子]]></title>
    <url>%2FBZOJ-3597%2F</url>
    <content type="text"><![CDATA[在有向无环图 G 中，每条边的流量与容量相等。现可以修改每条边的容量，使得新的边依然满足流量与容量相等，且总流量不变。已知扩展/缩小每条边容量的单位花费，以及流量通过该边的单位花费。记原总花费 X ，现在总花费 Y （包括修改容量和流量的花费），修改了 K 条边的容量，则收益为 w=(X-Y)/K ，求 w 的最大值。 N\leq 5000 分析 这道题的核心在于理解“总流量不变且每条边跑满”，可以用网络流的模型理解。 所谓扩容即增广，花费为扩容费用+流量费用；压缩即退流，花费为压缩费用-流量费用。 假设 a\geq(X-Y)/K ，则 Y-X+a\cdot K\geq 0 。 而 Y-X 就是增广和退流的费用之和， K 可以分摊到每条边上，即让每条边的权值增加 K 。 a 显然是可以二分的，那么若新图出现负环，则说明 a 的值不够大，直到得到解为止。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;const int MAXN = 5000 + 5;const double INF = 1e9;const double eps = 1e-4;int N, M;struct Edge &#123; int v; double w; int nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;double Dis[MAXN];bool Vis[MAXN];bool dfs_spfa(int x, double xx) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; double dis = Dis[x] + E[i].w + xx; if (Dis[v] &gt; dis) &#123; Dis[v] = dis; if (Vis[v] || dfs_spfa(v, xx)) &#123; return true; &#125; &#125; &#125; return Vis[x] = 0;&#125;bool check(double a) &#123; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = INF; &#125; Dis[N - 1] = 0; memset(Vis, 0, sizeof Vis); for (int i = 1; i &lt;= N; ++i) &#123; if (dfs_spfa(i, a)) &#123; return true; &#125; &#125; return false;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); N += 2; int a, b, c, d, u, v; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d%d%d%d", &amp;u, &amp;v, &amp;a, &amp;b, &amp;c, &amp;d); if (u == N - 1) &#123; continue; &#125; if (c) &#123; addEdge(v, u, a - d); &#125; addEdge(u, v, b + d); &#125; double l = 0, r = INF, ans; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; ans = l = m; &#125; else &#123; r = m; &#125; &#125; printf("%.2lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2009」BZOJ 1486 最小圈]]></title>
    <url>%2FBZOJ-1486%2F</url>
    <content type="text"><![CDATA[在有向图 G 中，定义环 a 的权值 w_a=\sum{W[i]}/num ，其中 W[i] 为 a 上边的权值， num 为 a 上的节点数。求图中 w 的最小值。 n\leq 1000,m\leq 5000,|W[i]|\leq 5000 分析 设 w_a=x ，则 \sum{W[i]}/num \geq x ，即 \sum{W[i]}\geq num\cdot x 。 由于环上点数和边数相同，因此可以改写为 \sum(W[i]-x)\geq 0 。 x 显然可以二分，于是就变成了判断图中是否存在负环的问题，用SPFA可解。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;const int MAXN = 3000 + 5;const int MAXM = 10000 + 5;const double INF = 1e7;const double eps = 1e-9;int N, M;struct Edge &#123; int v; double w; int nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;double Dis[MAXN];bool Vis[MAXN], flag;bool dfs_spfa(int x, double xx) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; double dis = Dis[x] + E[i].w - xx; if (Dis[v] &gt; dis) &#123; Dis[v] = dis; if (Vis[v] || dfs_spfa(v, xx)) &#123; return true; &#125; &#125; &#125; return Vis[x] = 0;&#125;bool check(double a) &#123; flag = 0; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = INF; &#125; memset(Vis, 0, sizeof Vis); for (int i = 1; i &lt;= N; ++i) &#123; if (dfs_spfa(i, a)) &#123; return true; &#125; &#125; return false;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); int u, v; double w; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%lf", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; double l = -INF, r = INF, ans = 0; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; r = m; ans = m; &#125; else &#123; l = m; &#125; &#125; printf("%.8lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2017」BZOJ 4819 新生舞会]]></title>
    <url>%2FBZOJ-4819%2F</url>
    <content type="text"><![CDATA[双方各有 N 个人进行两两配对， i 和 j 配对会获得 x=A[i][j] 的收益和 y=B[i][j] 的代价。最小化 \sum{x}/\sum{y} 。 N\leq 100,x,y\leq 10^4 分析 若 \sum{x}/\sum{y}\geq a ，则 \sum{x}-a\cdot\sum{y} \geq 0 ，再转化变成 \sum{x-a\cdot y}\geq 0 。 a 显然是可以二分的，然后建图跑最小费用最大流，边权为 a\cdot B[i][j]-A[i][j] ，判定合法即总费用是否小于0。 有更快的Dinkelbach算法，考虑用迭代的方式求 a 。初始化 a=0 ，得到一组合法解后，更新 a 为当前情况下的 \sum{x}/\sum{y} ，直到求得答案。此方法实测比二分快了10倍。 费用流的过程本质就是一个二分图最大权匹配，因此跑KM也是可行的，复杂度上界 O(\log{(10^6\cdot x)}\cdot n^3) ，实则远远跑不满。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include &lt;bits/stdc++.h&gt;const int MAXN = 200 + 5;const int MAXM = MAXN * MAXN;const double eps = 1e-7;const double INF = 1e7;int N, A[MAXN][MAXN], B[MAXN][MAXN];struct Edge &#123; int v; double w; int f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w, int f) &#123; E[++cntE] = (Edge) &#123;v, w, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -w, 0, H[v]&#125;; H[v] = cntE;&#125;int S, T;void buildGraph(double x) &#123; memset(H, 0, sizeof H); cntE = 1; S = 0; T = N * 2 + 1; for (int i = 1; i &lt;= N; ++i) &#123; addEdge(S, i, 0, 1); addEdge(i + N, T, 0, 1); for (int j = 1; j &lt;= N; ++j) &#123; addEdge(i, j + N, x * B[i][j] - A[i][j], 1); &#125; &#125;&#125;int Pe[MAXN], Pv[MAXN];double Dis[MAXN];bool Vis[MAXN];struct cmp &#123; inline bool operator () (const int &amp;x, const int &amp;y) const &#123; return Dis[x] &gt; Dis[y]; &#125;&#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, cmp&gt; pq;int spfa(int s, int t) &#123; for (int i = s; i &lt;= t; ++i) &#123; Dis[i] = INF; &#125; memset(Vis, 0, sizeof Vis); Dis[s] = 0, pq.push(s); while (!pq.empty()) &#123; int x = pq.top(); Vis[x] = 0, pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Pe[v] = i, Pv[v] = x; if (!Vis[v]) &#123; Vis[v] = 1; pq.push(v); &#125; &#125; &#125; &#125; return Dis[t] &lt; INF;&#125;double cost;int flow;double ai, bi;void mcmf(int s, int t) &#123; cost = flow = 0; while (spfa(s, t)) &#123; int f = INF; for (int i = t; i != s; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[t]; flow += f; for (int i = t; i != s; i = Pv[i]) &#123; E[Pe[i]].f -= f, E[Pe[i] ^ 1].f += f; &#125; &#125; ai = bi = 0; for (int x = 1; x &lt;= N; ++x) &#123; for (int i = H[x]; i; i = E[i].nxt) &#123; if (E[i].f == 0 &amp;&amp; E[i].v &gt; N) &#123; ai += A[x][E[i].v - N]; bi += B[x][E[i].v - N]; break; &#125; &#125; &#125;&#125;bool check(double lim) &#123; buildGraph(lim); mcmf(S, T); return flow == N &amp;&amp; cost &lt; -eps;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; scanf("%d", &amp;A[i][j]); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; scanf("%d", &amp;B[i][j]); &#125; &#125; double ans = 0; while (check(ans)) &#123; ans = ai / bi; &#125; printf("%.6lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 2741【FOTILE模拟赛】L]]></title>
    <url>%2FBZOJ-2741%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A[1 \cdots N] ， M 个询问。查询 [l,r] 的最大异或和子区间，强制在线。 N\leq 12000,M\leq 6000 分析 可持久化Trie+分块。 记 s[i] 为第 i 块的左端点， f(i,j) 表示 [s[i],r-1] 中的某个点为左端点，右端点为 r 的最大异或子区间。 记 g(i,j) 为 [s[i],r] 中的最大异或子区间，则 g(i,j)=max(g(i,j-1),f(i,j)) 。 查询时跨越的完整块直接查 g 数组，剩下的部分在可持久化Trie中查询，取最大值。 复杂度 O(n\sqrt{n}\log{max(A_i)}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;bits/stdc++.h&gt;const int MAXN = 12000 + 5;const int MAXM = 40;const int MAXK = 130;int N, M, A[MAXN];struct Trie &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], nT = 1;int insert(int pre, int x) &#123; int rt = ++nT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++nT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int len, n, Belong[MAXN], G[MAXK][MAXN];int queryLR(int l, int r) &#123; int ans = 0, t = r; for (int i = 1; i &lt;= n; ++i) &#123; if ((i - 1) * len + 1 &gt;= l &amp;&amp; (i - 1) * len + 1 &lt;= r) &#123; ans = G[i][r]; t = (i - 1) * len + 1; break; &#125; &#125; for (int i = l; i &lt;= t; ++i) &#123; ans = std::max(ans, query(Rt[l - 1], Rt[r], A[i])); &#125; return ans;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); len = sqrt(N), n = N / len + (N % len &gt; 0); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); A[i] ^= A[i - 1]; Rt[i] = insert(Rt[i - 1], A[i]); &#125; for (int i = 1; i &lt;= n; ++i) &#123; for (int j = (i - 1) * len + 1; j &lt;= N; ++j) &#123; G[i][j] = std::max(G[i][j - 1], query(Rt[(i - 1) * len], Rt[j - 1], A[j])); if (i == 1) &#123; G[i][j] = std::max(G[i][j], A[j]); &#125; &#125; &#125; int ans = 0, l, r; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;l, &amp;r); ans %= N; l = (l + ans) % N + 1; r = (r + ans) % N + 1; if (l &gt; r) &#123; std::swap(l, r); &#125; printf("%d\n", ans = queryLR(l - 1, r)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3261 最大异或和]]></title>
    <url>%2FBZOJ-3261%2F</url>
    <content type="text"><![CDATA[开始给定一个长为 N 的序列 A[1\cdots N] ，有 M 个操作。在 A 的末尾插入 x ；或者给定 x,l,r ，查询 max(x\oplus A[p]\oplus\cdots\oplus A[N]) ，其中 p\in[l,r] ， N 为当前序列长度。 N\leq 300000,A[i]\leq 10^7 分析 维护前缀异或和，令 S[i]=A[1]\oplus\dots\oplus A[i] ，问题转化为查询 S[N]\oplus S[p-1]\oplus x 的最大值，其中 S[N] 和 x 都是已知的。 由于是区间问题，可以用可持久化Trie树维护。对于每个新插入的数在01Trie树新建一条链，并将链上所有点的状态+1。通过权值相减来判断区间内是否存在该点，剩下的就是常规01Tire树求异或最大值的操作。 需要注意的一个细节，由于存在插入操作，因此序列中的元素个数最大可能为 N+M ，需要开两倍空间。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;const int MAXN = 600000 + 5;const int MAXM = 50;struct Node &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], cntT;int N, M;int insert(int pre, int x) &#123; int rt = ++cntT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++cntT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); int cur = 0, x, l, r; char opt[10]; ++N; Rt[1] = insert(Rt[0], 0); for (int i = 2; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); cur ^= x; Rt[i] = insert(Rt[i - 1], cur); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%s", opt); if (opt[0] == 'A') &#123; scanf("%d", &amp;x); cur ^= x; ++N; Rt[N] = insert(Rt[N - 1], cur); &#125; else &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;x); printf("%d\n", query(Rt[l - 1], Rt[r], x ^ cur)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 4260 Codechef REBXOR]]></title>
    <url>%2FBZOJ-4260%2F</url>
    <content type="text"><![CDATA[对于长为 N 的序列 A[1\cdots N] ，求两个不相交区间的异或和之和的最大值。 2\leq N\leq 4\times 10^5,A[i]\leq 10^9 分析 根据异或的性质， 令 S[i]=A[1]\oplus A[2]\cdots \oplus A[i] ，则 A[l]\oplus\cdots \oplus A[r]=S[r]\oplus S[l-1] 。 令 L[i] 为 A[1\cdots i] 中的最大区间异或和， R[i] 为 A[i\cdots N] 中的最大区间异或和，如此 L[i],R[i+1] 一定不相交，答案为 max(L[i]+R[i+1]) 。 从前往后在01字典树中查询当前前缀异或和 cur 能异或得到的最大值，并将 cur 插入，则 L[i]=\max(L[i-1],query(cur)) 。 再从后往前插入后缀异或和，则 R[i]=\max(R[i+1],query(cur)) 。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;bits/stdc++.h&gt;const int MAXN = 4e5 + 5;const int MAXM = 40;struct Node &#123; int sz, num; int ch[2];&#125; T[MAXN * MAXM];int cntT;int N, A[MAXN];int L[MAXN], R[MAXN];void insert(int rt, int x) &#123; for (int i = 32; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (!T[rt].ch[c]) &#123; T[rt].ch[c] = ++cntT; T[cntT].ch[0] = T[cntT].ch[1] = 0; T[cntT].sz = 0; &#125; ++T[rt].sz; rt = T[rt].ch[c]; &#125; T[rt].num = x;&#125;int query(int rt, int x) &#123; for (int i = 32; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (!T[rt].ch[c ^ 1]) &#123; rt = T[rt].ch[c]; &#125; else &#123; rt = T[rt].ch[c ^ 1]; &#125; &#125; return x ^ T[rt].num;&#125;void init() &#123; cntT = 1; T[1].ch[0] = T[1].ch[1] = 0; T[1].sz = T[1].num = 0;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); &#125; int lst = 0; insert(1, 0); for (int i = 1; i &lt;= N; ++i) &#123; lst ^= A[i]; L[i] = std::max(L[i - 1], query(1, lst)); insert(1, lst); &#125; init(); lst = 0; insert(1, 0); for (int i = N; i &gt;= 1; --i) &#123; lst ^= A[i]; R[i] = std::max(R[i + 1], query(1, lst)); insert(1, lst); &#125; int ans = 0; for (int i = 1; i &lt; N; ++i) &#123; ans = std::max(ans, L[i] + R[i + 1]); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>字典树</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2011」BZOJ 2330 糖果]]></title>
    <url>%2FBZOJ-2330%2F</url>
    <content type="text"><![CDATA[有 N 个数 TeX parse error: Undefined control sequence \[，要求满足 M 个条件。条件形如： A[i] \leq A[j] ， A[i] &lt; A[j] ， A[i] = A[j] 。如果可以满足所有条件，求 \sum{A_i} 的最小值，否则输出 -1。 N,M\leq 100000 分析 将条件依次转化为 A[j] - A[i] \geq 0 ， A[j] - A[i]\geq 1 ， A[j]-A[i]\geq 0 \&amp; A[i]-A[j]\geq 0 。 根据 u - v\geq w 建有向边 (v, u, w) 的方式建图，求最长路。 如果单纯通过spfa进队 N 次来判断无解可能会导致超时，发现无解本质为出现正环。因此可以采用Tarjan求联通分量，判断各分量内是否存在非零边的方法做到 O(N+M) 判断无解。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int N, K;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;std::queue&lt;int&gt; Que;long long Dis[MAXN];bool Inq[MAXN];long long spfa() &#123; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = 1; Que.push(i); &#125; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &lt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; long long res = 0; for (int i = 1; i &lt;= N; ++i) &#123; res += Dis[i]; &#125; return res;&#125;int Dfn[MAXN], Low[MAXN], cntD;int Stk[MAXN], top;int Belong[MAXN], cntB;void dfs(int x) &#123; Dfn[x] = Low[x] = ++cntD; Stk[++top] = x; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (!Dfn[v]) &#123; dfs(v); Low[x] = std::min(Low[x], Low[v]); &#125; else if (!Belong[v]) &#123; Low[x] = std::min(Low[x], Dfn[v]); &#125; &#125; if (Dfn[x] == Low[x]) &#123; Belong[x] = ++cntB; do &#123; Belong[Stk[top]] = cntB; &#125; while (Stk[top--] != x); &#125;&#125;int main() &#123; int opt, x, y; scanf("%d%d", &amp;N, &amp;K); for (int i = 1; i &lt;= K; ++i) &#123; scanf("%d%d%d", &amp;opt, &amp;x, &amp;y); if (opt == 1) &#123; addEdge(x, y, 0); addEdge(y, x, 0); &#125; else if (opt == 2) &#123; addEdge(x, y, 1); &#125; else if (opt == 3) &#123; addEdge(y, x, 0); &#125; else if (opt == 4) &#123; addEdge(y, x, 1); &#125; else if (opt == 5) &#123; addEdge(x, y, 0); &#125; if (opt % 2 == 0 &amp;&amp; x == y) &#123; puts("-1"); return 0; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; if (!Dfn[i]) &#123; dfs(i); &#125; &#125; bool flag = 0; for (int i = 1; i &lt;= cntE; ++i) &#123; if (E[i].w &amp;&amp; Belong[E[i].u] == Belong[E[i].v]) &#123; flag = 1; break; &#125; &#125; if (flag) &#123; puts("-1"); &#125; else &#123; printf("%lld\n", spfa()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2005」BZOJ 1202 狡猾的商人]]></title>
    <url>%2FBZOJ-1202%2F</url>
    <content type="text"><![CDATA[给定 M 组关于 l, r, x 的等式，意为 \sum\limits_{i=l}^{r}{A_i}=x ，判断是否可以构造出 A[1\cdots N] 满足这些等式。 N\leq 100,M\leq 1000 分析 将等式写成前缀和的形式，用 Sum[i] 表示 \sum\limits_{j=1}^{i}{A_j} ，等式化为 Sum[r] - Sum[l-1] = x 。 可以将等式变形成两个不等式， Sum[r] - Sum[l-1] \geq x 和 Sum[l - 1] - Sum[r] \geq -x 。 那么原问题就转化为差分约束系统求解模型。连接边 (l - 1, r, x) 和 (r, l - 1, -x) ，SPFA判断是否存在负环，复杂度 O(NM) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;const int MAXM = 1000 + 5;int N, M;struct Edge &#123;int v, w, nxt;&#125; E[MAXM * 3];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;&#125;std::queue&lt;int&gt; Que;int Dis[MAXN], Cnt[MAXN], Inq[MAXN];bool Vis[MAXN];int n;bool spfa() &#123;while (!Que.empty()) &#123; Que.pop();&#125;memset(Dis, 0x3f, sizeof Dis);memset(Inq, 0, sizeof Inq);memset(Cnt, 0, sizeof Cnt);Que.push(N + 1);Dis[N + 1] = 0;while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Cnt[v] = Cnt[x] + 1; if (Cnt[v] &gt; n) &#123; return false; &#125; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125;&#125;return true;&#125;void init() &#123;cntE = 0;memset(H, 0, sizeof H);n = 0;memset(Vis, 0, sizeof Vis);&#125;int main() &#123;int T, u, v, w;scanf("%d", &amp;T);while (T--) &#123; scanf("%d%d", &amp;N, &amp;M); init(); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); if (!Vis[u - 1]) &#123; Vis[u - 1] = 1; ++n; &#125; if (!Vis[v]) &#123; Vis[v] = 1; ++n; &#125; addEdge(u - 1, v, -w); addEdge(v, u - 1, w); &#125; for (int i = 1; i &lt;= N; ++i) &#123; addEdge(N + 1, i, 0); &#125; if (spfa()) &#123; puts("true"); &#125; else &#123; puts("false"); &#125;&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「2010 集训队测验」BZOJ 2127 文理分科]]></title>
    <url>%2FBZOJ-2127%2F</url>
    <content type="text"><![CDATA[在 n\times m 的矩阵中，每个格子可以选择 0/1 ，分别获得收益 A_{i,j},B_{i,j} 。如果上下两个格子选择相同，则额外获得收益 C_{i,j} 与 D_{i,j} （都选 0 或都选 1 ），如果左右两个格子选择相同，则额外获得收益 E_{i,j} 与 F_{i,j} 。求总收益的最大值。 n,m\leq 100,A,B,C,D,E,F_{i,j}\leq 5000 分析 这是集训队论文《浅谈一类最小割问题》中的例题，也是网络流建模之二元关系的一道典型题目。 根据相关建图模型，对于每个点 x ，分别与 S,T 连边，割去 (S,x) 表示选择文科，割去 (x,T) 表示选择理科。 由于只能求最小割，因此可以先累计所有收益再减去最小割得到最大值。 由于每个点与相邻的点之间的选择会影响结果，因此 x 与相邻的点连边。 对于任意两个相邻点 x,y ，子图有边 (S,x),(S,y),(x,y),(y,x),(x,T),(y,T) 。 割去 (S,x),(S,y) 表示都选文，割去 (x,T),(y,T) 表示都选理，割去 (S,x),(x,y),(y,T) 表示 x 选文， y 选理，剩下一种情况同理第三种。 假设 x,y 选文的收益分别为 a_x,a_y ，选理的收益为 b_x,b_y ，都选文/理的收益为 c,d ，则边权应满足： (S,x)+(S,y)=b_x+b_y+d\ (x,T)+(y,T)=a_x+a_y+c\ (S,x)+(x,y)+(y,T)=a_y+b_x+c+d\ (S,y)+(y,x)+(x,T)=a_x+b_y+c+d\ 得到一组解： (x,y)=(y,x)=\frac{c+d}{2}\ (S,x)=a_x+\frac{c}{2}\ (S,y)=a_y+\frac{c}{2}\ (x,T)=b_x+\frac{d}{2}\ (y,T)=b_y+\frac{d}{2}\ 由此建图求最大流即可。 Tips：将两点间所有边的边权整合成一条边会大大提高运行速度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155/* * @Author: Skqliao * @Date: 2019-02-10 20:45:11 * @LastEditTime: 2019-02-10 21:37:48 * @Source: 2010 集训队测试题 * @Problem: 2127: happiness * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2127 */#include &lt;bits/stdc++.h&gt;namespace mxf &#123;const int MAXN = 100 * 100 + 5;const int MAXM = MAXN * 4;struct Edge &#123;int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int S, T;int H[MAXN], cntE;void addEdge(int u, int v, int f, bool directed = 1) &#123;E[++cntE] = (Edge)&#123;v, f, H[u]&#125;;H[u] = cntE;if (directed) f = 0;E[++cntE] = (Edge)&#123;u, f, H[v]&#125;;H[v] = cntE;&#125;int Dis[MAXN], Cur[MAXN];bool bfs() &#123;static std::queue&lt;int&gt; Que;while (!Que.empty()) Que.pop();memset(Dis, -1, sizeof Dis);memcpy(Cur, H, sizeof H);Dis[S] = 0;Que.push(S);while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125;&#125;return false;&#125;int dfs(int x, int maxf) &#123;if (x == T) return maxf;int left = maxf;for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125;&#125;return maxf - left;&#125;int dinic() &#123;int flow = 0;while (bfs()) &#123; flow += dfs(S, INT_MAX);&#125;return flow;&#125;void init(int tot) &#123;cntE = -1;memset(H, -1, sizeof H);S = tot + 1, T = tot + 2;&#125;&#125; // namespace mxfusing mxf::addEdge;using mxf::S;using mxf::T;const int MAXN = 100 + 5;int N, M;int Id[MAXN][MAXN];int A[MAXN][MAXN], B[MAXN][MAXN], C[MAXN][MAXN], D[MAXN][MAXN], E[MAXN][MAXN], F[MAXN][MAXN];int ans;int main() &#123;scanf("%d%d", &amp;N, &amp;M);mxf::init(N * M);for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; Id[i][j] = (i - 1) * M + j; &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); ans += A[i][j]; A[i][j] *= 2; &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;B[i][j]); ans += B[i][j]; B[i][j] *= 2; &#125;&#125;for (int i = 1; i &lt; N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;C[i][j]); ans += C[i][j]; A[i][j] += C[i][j]; A[i + 1][j] += C[i][j]; &#125;&#125;for (int i = 1; i &lt; N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;D[i][j]); ans += D[i][j]; B[i][j] += D[i][j]; B[i + 1][j] += D[i][j]; addEdge(Id[i][j], Id[i + 1][j], C[i][j] + D[i][j], 0); &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt; M; ++j) &#123; scanf("%d", &amp;E[i][j]); ans += E[i][j]; A[i][j] += E[i][j]; A[i][j + 1] += E[i][j]; &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt; M; ++j) &#123; scanf("%d", &amp;F[i][j]); ans += F[i][j]; B[i][j] += F[i][j]; B[i][j + 1] += F[i][j]; addEdge(Id[i][j], Id[i][j + 1], E[i][j] + F[i][j], 0); &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; addEdge(S, Id[i][j], A[i][j]); addEdge(Id[i][j], T, B[i][j]); &#125;&#125;printf("%d\n", ans - mxf::dinic() / 2);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二元关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[斯坦纳树学习笔记（Steiner Tree）]]></title>
    <url>%2FSteiner-Tree%2F</url>
    <content type="text"><![CDATA[总论 斯坦纳树可以理解为一棵使得指定点集合联通的树，而最小斯坦纳树在联通的基础上要求边权和最小。（是不是有点类似于最小生成树？） 通常通过状压DP+最短路松弛的方式来解决此类问题。 过程 具体过程不妨从一个简单问题出发。 无向图 G 上有 n 个点，选择若干个点使得它们包含点集合 S=\{a_1,a_2,\cdots,a_m\} ，且 S 联通。选择点 i 的代价为 A_i ，求最小代价。 设 F[i][S] 表示集合 S 的点被选择且当前选择节点 i 的最小花费，则 F[i][S] 有两种方式转移，一是枚举子集合并，二是集合内部松弛。 第一种： F[i][S]=\min\{F[i][T]+F[i][S-T]-A[i]\} ，其中 T 是 S 的一个子集。 可以通过 for (int x = S; x; x = (x - 1) &amp; S) 的方式枚举 S 的所有子集 x ，复杂度 O(3^m) 。 由于外层还要枚举当前集合状态 S 和当前点 i ，因此总复杂度为 n\cdot 6^m 。 第二种： F[i][S]=\min\{F[j][S]+A[i]\} ，其中点 i,j 联通。 在状压DP后，可以将所有更新过的点push进队列跑SPFA或其他最短路算法完成松弛。 总复杂度 O(n\cdot 6^m+2^m\cdot f) ， f 为最短路复杂度。 用途 最小斯坦树可以得到给定点集合所有子集的最小花费，可能会作为预处理使用。 例题 【最小斯坦纳树】[WC 2008] BZOJ 2595 游览计划 【最小斯坦纳树+状压DP】[JLOI 2015] BZOJ 4006 管道连接]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最小割树学习笔记（Gomory-Hu Tree）]]></title>
    <url>%2FGomory-Hu-Tree%2F</url>
    <content type="text"><![CDATA[总论 在无向图中，最小割树等价于所有点对间的最小割。 对于任意点对 (s,t) ，它们之间的最小割为最小割树上 (s,t) 路径间的最小边权值。 过程 可以通过求 n-1 次最大流构建出具有 n 个点的无向图 G 的最小割树。 具体步骤如下： 任意选择两点 s,t 求两点间最大流 f 得到最小割隔开的两个集合 最小割树上连接 (s,t) ，边权为 f 将图恢复成最初形态（还原边权） 递归到这两个新集合中，重复操作1，直到集合中只有 1 个点为止 由于每次集合总数增加 1 ，因此一共做 n-1 次以上流程。 Q &amp; A Q1：如何求最小割隔开的两个集合？ A1：由于最小割上的边一定将流量限制流满了，因此从 s 开始，通过未流满流量限制的边遍历到的且在当前集合中的点为与 s 联通的点集合，剩下的点与 t 联通的点集合。 Q2：用什么算法求最大流啊？会被卡吗？ A2：根据相关法律法规，ISAP和Dinic受到保护，应该不会被卡，EK死就死了。当然你愿意写HLPP也不拦着。 用途 可以得到任意点对间的最小割，通常用于预处理。 例题 luogu P4897 【模板】最小割树（Gomory-Hu Tree） 【最小割树】[CQOI 2016] BZOJ 4519 不同的最小割 【最小割树】[ZJOI 2011] BZOJ 2229 最小割]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2011」BZOJ 2229 最小割]]></title>
    <url>%2FBZOJ-2229%2F</url>
    <content type="text"><![CDATA[T 组数据， Q 个询问。在无向图 G 中，求有多少个点对 (s,t) 使得它们之间的最小割不超过 x 。 T\leq 10,n\leq 150,m\leq 3000,q\leq 30 分析 建完最小割树后，问题转化为求树上有多少个点对路径上的边权最小值不超过 x 。 枚举点对再用倍增判断，复杂度 O(n^2\log{n}) 。 也存在线性做法，对于边权不超过 x 的边，统计路径通过该边新增的点对数量，复杂度 O(n) 。 然而由于复杂度瓶颈在建立最小割树上，因此两种方法实际效率相仿。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189/* * @Author: Skqliao * @Date: 2019-02-02 22:57:06 * @LastEditTime: 2019-02-03 11:53:06 * @Source: ZJOI 2011 * @Problem: 2229: [Zjoi2011]最小割 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2229 */#include &lt;bits/stdc++.h&gt;const int MAXN = 150 + 5;const int MAXM = 3000 + 5;namespace GH_Tree &#123;struct Edge &#123; int v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge)&#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, w, H[v]&#125;; H[v] = cntE;&#125;int Fa[MAXN], Sz[MAXN];int dfs(int x) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; Sz[x] += dfs(v); &#125; &#125; return Sz[x];&#125;int ans;int dfs(int x, int sz, int mx) &#123; int tot = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; if (E[i].w &lt;= mx) &#123; tot += Sz[v]; ans += Sz[v] * (sz - Sz[v]); sz -= Sz[v]; dfs(v, Sz[v], mx); &#125; else &#123; int tmp = dfs(v, sz, mx); sz -= tmp; tot += tmp; &#125; &#125; &#125; return tot;&#125;void init() &#123; cntE = 0; memset(H, 0, sizeof H);&#125;int query(int x) &#123; ans = 0; dfs(1, Sz[1], x); return ans;&#125;namespace Init &#123; struct Edge &#123; int v, f, cap, nxt; &#125; E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; int Idx[MAXN], Tmp[MAXN]; int S, T; int Dis[MAXN], Cur[MAXN]; int Col[MAXN]; void init(int n) &#123; cntE = -1; memset(H, -1, sizeof H); for (int i = 1; i &lt;= n; ++i) &#123; Idx[i] = i; &#125; &#125; void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, f, f, H[v]&#125;; H[v] = cntE; &#125; bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false; &#125; int dfs(int x, int maxf) &#123; if (x == T || !maxf) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left; &#125; int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow; &#125; void dfs(int x) &#123; Col[x] = 1; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; !Col[v]) dfs(v); &#125; &#125; void build(int l, int r) &#123; if (l == r) return; S = Idx[l], T = Idx[r]; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; int f = dinic(); GH_Tree::addEdge(S, T, f); memset(Col, 0, sizeof Col); dfs(S); int L = l, R = r; for (int i = l; i &lt;= r; ++i) &#123; if (Col[Idx[i]]) Tmp[L++] = Idx[i]; else Tmp[R--] = Idx[i]; &#125; memcpy(Idx, Tmp, sizeof Tmp); build(l, R); build(L, r); &#125; void solve(int n, int m) &#123; init(n); int u, v, f; for (int i = 1; i &lt;= m; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;f); addEdge(u, v, f); &#125; build(1, n); &#125;&#125; // namespace Init&#125; // namespace GH_Treeint T, N, M, Q;int main() &#123; int x; scanf("%d", &amp;T); while (T--) &#123; scanf("%d%d", &amp;N, &amp;M); GH_Tree::init(); GH_Tree::Init::solve(N, M); GH_Tree::dfs(1); scanf("%d", &amp;Q); while (Q--) &#123; scanf("%d", &amp;x); printf("%d\n", GH_Tree::query(x)); &#125; puts(""); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2016」BZOJ 4519 不同的最小割]]></title>
    <url>%2FBZOJ-4519%2F</url>
    <content type="text"><![CDATA[题目大意 在无向图 G 中，对于任意点对 (i,j) 有最小割 cut(i,j) ，求有多少个数值不同的最小割。 N\leq 850,M\leq 8500 分析 最小割树模板题，求出最小割树后将所有边unique得到答案。 复杂度 O(n\times f) ， f 为最大流复杂度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128/* * @Author: Skqliao * @Date: 2019-02-02 22:26:52 * @LastEditTime: 2019-02-02 22:54:36 * @Source: CQOI 2016 * @Problem: 4519: [Cqoi2016]不同的最小割 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=4519 */#include &lt;bits/stdc++.h&gt;const int MAXN = 850 + 5;const int MAXM = 8500 + 5;namespace GH_Tree &#123;struct Edge &#123; int v, f, cap, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Idx[MAXN], Tmp[MAXN];int S, T;int Dis[MAXN], Cur[MAXN];int Col[MAXN];void init(int n) &#123; cntE = -1; memset(H, -1, sizeof H); for (int i = 1; i &lt;= n; ++i) &#123; Idx[i] = i; &#125;&#125;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, f, f, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow;&#125;void dfs(int x) &#123; Col[x] = 1; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; !Col[v]) dfs(v); &#125;&#125;std::vector&lt;int&gt; V;void build(int l, int r) &#123; if (l == r) return; S = Idx[l], T = Idx[r]; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; int f = dinic(); V.push_back(f); memset(Col, 0, sizeof Col); dfs(S); int L = l, R = r; for (int i = l; i &lt;= r; ++i) &#123; if (Col[Idx[i]]) Tmp[L++] = Idx[i]; else Tmp[R--] = Idx[i]; &#125; memcpy(Idx, Tmp, sizeof Tmp); build(l, R); build(L, r);&#125;int solve(int n, int m) &#123; init(n); int u, v, f; for (int i = 1; i &lt;= m; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;f); addEdge(u, v, f); &#125; build(1, n); std::sort(V.begin(), V.end()); V.erase(std::unique(V.begin(), V.end()), V.end()); return V.size();&#125;&#125; // namespace GH_Treeint N, M;int main() &#123; scanf("%d%d", &amp;N, &amp;M); printf("%d\n", GH_Tree::solve(N, M)); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JLOI 2015」BZOJ 4006 管道连接]]></title>
    <url>%2FBZOJ-4006%2F</url>
    <content type="text"><![CDATA[无向图中有 n 个 m 条边，边有权值 W_i ，有 p 个点有编号 A_i 。现要求选择一些边，使得（有编号且）编号相同的点联通，求最小权值和。 n\leq 1000,m\leq 3000,p\leq 10 分析 如果要求所有有编号的点联通，那么这就是一个最小斯坦纳树的模板题。 现在只要求编号相同的点联通，我们可以分别考虑每个编号的点联通的费用，然后组合出最终的答案。 因此依然先求这 p 个点的最小斯坦纳树。然后再用状压DP合并费用，注意合并时（ s=a+b ）， a,b 必须分别完整包含若干个编号的节点，否则不合题意。 复杂度 O(3^p\cdot n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113/* * @Author: Skqliao * @Date: 2019-01-27 13:24:25 * @LastEditTime: 2019-01-27 14:52:32 * @Source: JLOI 2015 * @Problem: 4006: [JLOI2015]管道连接 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=4006 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 2;const int MAXM = 30000 + 5;const int MAXS = 1 &lt;&lt; 12;const int INF = 0x3f3f3f3f;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, P;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;v, u, w, H[v]&#125;; H[v] = cntE;&#125;int F[MAXN][MAXS];std::queue&lt;int&gt; Que;bool Vis[MAXN];void spfa(int s) &#123; while (!Que.empty()) &#123; int x = Que.front(); Vis[x] = 0; Que.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (F[x][s] + E[i].w &lt; F[v][s]) &#123; F[v][s] = F[x][s] + E[i].w; if (!Vis[v]) &#123; Que.push(v); Vis[v] = 1; &#125; &#125; &#125; &#125;&#125;int Dp[MAXS];int St[MAXN];std::vector&lt;int&gt; V[MAXN];bool check(int s) &#123; for (int i = 1; i &lt;= 10; ++i) &#123; if (!St[i]) &#123; continue; &#125; if ((St[i] &amp; s) != 0 &amp;&amp; (St[i] &amp; s) != St[i]) &#123; return false; &#125; &#125; return true;&#125;int main() &#123; scanf("%d%d%d", &amp;N, &amp;M, &amp;P); int u, v, w; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; memset(F, 0x3f, sizeof F); int p = 0; for (int i = 1; i &lt;= P; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); V[u].push_back(p); F[v][1 &lt;&lt; p++] = 0; &#125; for (int i = 1; i &lt;= 10; ++i) &#123; for (size_t j = 0; j &lt; V[i].size(); ++j) &#123; St[i] |= 1 &lt;&lt; V[i][j]; &#125; &#125; int S = (1 &lt;&lt; p) - 1; memset(Dp, 0x3f, sizeof Dp); for (int s = 0; s &lt;= S; ++s) &#123; for (int i = 1; i &lt;= N; ++i) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; F[i][s] = std::min(F[i][s], F[i][x] + F[i][s - x]); &#125; if (F[i][s] &lt; INF) &#123; Que.push(i); &#125; &#125; spfa(s); for (int i = 1; i &lt;= N; ++i) &#123; Dp[s] = std::min(Dp[s], F[i][s]); &#125; &#125; for (int s = 0; s &lt;= S; ++s) &#123; if (check(s)) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; if (check(x)) &#123; Dp[s] = std::min(Dp[s], Dp[x] + Dp[s - x]); &#125; &#125; &#125; &#125; printf("%d\n", Dp[S]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「WC 2008」BZOJ 2595 游览计划]]></title>
    <url>%2FBZOJ-2595%2F</url>
    <content type="text"><![CDATA[在 n\times m 的网格图上有 k 个景点，图上选择任意一个点有费用 a_{i,j} 。求选择若干个点使得这 k​ 个景点联通，最小化花费并输出方案。 n,m,k\leq 10 分析 这是一道最小斯坦纳树（minimum Steiner tree）的模板题。 其实看到这么小的数据范围也不难想到状压DP。用 F[i][j][S] 表示当前选择点 (i,j) ，图的联通状态为 S 的最小花费。 转移方程有两个，一是状态间转移： F[i][j][S] = \min\limits_{T\in S}\{F[i][j][T]+F[i][j][S-T]-A[i][j]\} ；二是在同一个状态内松弛： F[i][j][S] = \min\{F[i'][j'][S]+A[i][j]\} ，其中 (i',j') 与 (i,j) 联通且属于 S 。 前者可以通过枚举子集的方法转移，复杂度 O(6^k\cdot n\cdot m) ，后者用spfa或其他最短路算法松弛，复杂度 O(2^k\cdot f) ， f 为最短路复杂度。总复杂度 O(6^k\cdot nm+2^k\cdot f) 。 在转移/松弛时记录前一个点的状态，最后从终点一遍dfs得到所有被选择的点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115 /* * @Author: Skqliao * @Date: 2019-01-27 10:29:05 * @LastEditTime: 2019-01-27 12:39:07 * @Source: WC2008 * @Problem: 2595: [Wc2008]游览计划 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2595 */#include &lt;bits/stdc++.h&gt;const int MAXN = 10 + 2;const int MAXS = 1 &lt;&lt; MAXN;const int INF = 0x3f3f3f3f;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int A[MAXN][MAXN];int F[MAXN][MAXN][MAXS];struct Node &#123; int x, y, s;&#125; Pre[MAXN][MAXN][MAXS];std::queue&lt;Node&gt; Que;bool Vis[MAXN][MAXN];void spfa(int s) &#123; while (!Que.empty()) &#123; Node a = Que.front(); Vis[a.x][a.y] = 0; Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.x + Dicx[i]; int y = a.y + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) &#123; continue; &#125; if (F[a.x][a.y][s] + A[x][y] &lt; F[x][y][s]) &#123; F[x][y][s] = F[a.x][a.y][s] + A[x][y]; Pre[x][y][s] = (Node)&#123;a.x, a.y, s&#125;; if (!Vis[x][y]) &#123; Que.push((Node) &#123;x, y, 0&#125;); Vis[x][y] = 1; &#125; &#125; &#125; &#125;&#125;void dfs(int x, int y, int s) &#123; Vis[x][y] = 1; Node &amp;a = Pre[x][y][s]; if (a.x == 0 &amp;&amp; a.y == 0) &#123; return ; &#125; dfs(a.x, a.y, a.s); if (x == a.x &amp;&amp; y == a.y) &#123; dfs(a.x, a.y, s - a.s); &#125;&#125;int main() &#123; int cnt = 0; scanf("%d%d", &amp;N, &amp;M); memset(F, 0x3f, sizeof F); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); if (!A[i][j]) &#123; F[i][j][1 &lt;&lt; cnt++] = 0; &#125; &#125; &#125; int S = (1 &lt;&lt; cnt) - 1; for (int s = 0; s &lt;= S; ++s) &#123; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; if (F[i][j][x] + F[i][j][s - x] - A[i][j] &lt; F[i][j][s]) &#123; F[i][j][s] = F[i][j][x] + F[i][j][s - x] - A[i][j]; Pre[i][j][s] = (Node) &#123;i, j, x&#125;; &#125; &#125; if (F[i][j][s] &lt; INF) &#123; Que.push((Node) &#123;i, j, 0&#125;); Vis[i][j] = 1; &#125; &#125; &#125; spfa(s); &#125; bool flag = 0; for (int i = 1; i &lt;= N &amp;&amp; !flag; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 0) &#123; printf("%d\n", F[i][j][S]); dfs(i, j, S); flag = 1; break; &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (!A[i][j]) &#123; putchar('x'); &#125; else if (Vis[i][j]) &#123; putchar('o'); &#125; else &#123; putchar('_'); &#125; &#125; puts(""); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1601 完全图的最小生成树计数]]></title>
    <url>%2F51nod-1601%2F</url>
    <content type="text"><![CDATA[有 n 个点，每个点有点权 a_i ，点 u,v 之间的边边权为 a_u \oplus a_v 。求该完全图的最小生成树的权值与方案数。 n\leq 10 ^ 5, 0\leq a_i &lt; 2 ^ {30} 分析 从边权为点xor得到，想到可以对点权建立Trie树。 每次合并两子树mst的权值，并加入两子树中节点可以xor得到的最小值作为连接这两棵子树的最小边，自下而上得到整棵Trie的mst的值。 根据Cayley公式，如果存在有 a(a &gt; 2) 个相同权值的点时，生成树的方案数为 a^ {a - 2} 。每次合并两子树时对方案数做乘法原理即可得到最终的方案数。 复杂度 O(n\log{a_i}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-01-26 22:59:31 * @LastEditTime: 2019-01-26 23:41:49 * @Source: 51nod * @Problem: 1601 完全图的最小生成树计数 * @Url: https://www.51nod.com/Challenge/Problem.html#!#problemId=1601 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;const int MOD = 1e9 + 7;int N;int Ch[MAXN &lt;&lt; 5][2], Num[MAXN &lt;&lt; 5], cnt = 1;long long sum, num = 1;void insert(int val) &#123; int x = 1; for (int i = 29; i &gt;= 0; --i) &#123; int d = (val &gt;&gt; i) &amp; 1; if (!Ch[x][d]) &#123; Ch[x][d] = ++cnt; &#125; x = Ch[x][d]; &#125; ++Num[x];&#125;long long poww(long long x, long long t) &#123; long long ans = 1; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; ans = ans * x % MOD; &#125; x = x * x % MOD; &#125; return ans;&#125;long long min, tmp;void getMin(int x, int y, int d, int v = 0) &#123; if (d &lt; 0) &#123; if (v &lt; min) &#123; min = v; tmp = (long long)Num[x] * Num[y] % MOD; &#125; else if (v == min) &#123; tmp = (tmp + (long long)Num[x] * Num[y]) % MOD; &#125; return; &#125; if (Ch[x][0] &amp;&amp; Ch[y][0]) &#123; getMin(Ch[x][0], Ch[y][0], d - 1, v); if (Ch[x][1] &amp;&amp; Ch[y][1]) &#123; getMin(Ch[x][1], Ch[y][1], d - 1, v); &#125; &#125; else if (Ch[x][1] &amp;&amp; Ch[y][1]) &#123; getMin(Ch[x][1], Ch[y][1], d - 1, v); &#125; else &#123; if (Ch[x][0]) &#123; getMin(Ch[x][0], Ch[y][1], d - 1, v + (1 &lt;&lt; d)); &#125; if (Ch[x][1]) &#123; getMin(Ch[x][1], Ch[y][0], d - 1, v + (1 &lt;&lt; d)); &#125; &#125;&#125;void cal(int x, int d) &#123; if (d &lt; 0) &#123; if (Num[x] &gt; 1) &#123; num = num * poww(Num[x], Num[x] - 2); &#125; return; &#125; if (!Ch[x][0]) &#123; cal(Ch[x][1], d - 1); &#125; else if (!Ch[x][1]) &#123; cal(Ch[x][0], d - 1); &#125; else &#123; cal(Ch[x][0], d - 1); cal(Ch[x][1], d - 1); min = 1 &lt;&lt; 30; tmp = 0; getMin(Ch[x][0], Ch[x][1], d - 1, 0); sum = sum + (1 &lt;&lt; d) + min; num = (num * tmp) % MOD; &#125;&#125;int main() &#123; scanf("%d", &amp;N); int x; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); insert(x); &#125; cal(1, 29); printf("%lld\n%lld\n", sum, num); return 0;&#125;]]></content>
      <categories>
        <category>51nod</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>Pruefer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JZOJ 5060 公路建设]]></title>
    <url>%2FJZOJ-5060%2F</url>
    <content type="text"><![CDATA[有 n 个点， m 条边， q 个询问。每次给定一个区间 [l_i,r_i] ，求这些边构成的图在保证联通块个数最小的情况下所需最小花费。 n\leq 100,m\leq 100000,q\leq 15000 分析 将题意翻译一下就是求区间最小生成树的权值。 假设已知 [l,m] 和 [m+1,r] 的最小生成树，那么 [l,r] 的mst显然是由这两棵mst中的边构成的。 具体地说，在线段树中，通过Kruskal保存子区间mst上的所有边，然后用归并排序合并两个子区间的边，并再做kruskal求出父亲节点的mst上的所有边。查询时按照同样方法合并答案。 复杂度 O(n\alpha(n)(m\log{m}+q\log{m})) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-01-26 16:40:30 * @LastEditTime: 2019-01-26 17:12:13 * @Source: GDOI2017第二轮模拟day1 * @Problem: JZOJ 5060 公路建设 * @Url: https://jzoj.net/senior/#main/show/5060 */#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("highway.in", "r", stdin); freopen("highway.out", "w", stdout);&#125;const int MAXN = 100 + 5;const int MAXM = 100000 + 5;int N, M, Q;struct Node &#123; int u, v, w; bool operator &lt; (const Node &amp;x) const &#123; return w &lt; x.w; &#125;&#125; A[MAXM], T[MAXM &lt;&lt; 2][MAXN], Tmp[MAXN &lt;&lt; 1];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Len[MAXM &lt;&lt; 2];int Anc[MAXN];int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if (x != y) &#123; Anc[y] = x; return true; &#125; return false;&#125;void pushUp(int x, int l, int r) &#123; int len = std::merge(T[l], T[l] + Len[l], T[r], T[r] + Len[r], Tmp) - Tmp; for (int i = 1; i &lt;= N; ++i) &#123; Anc[i] = i; &#125; Len[x] = 0; for (int i = 0; i &lt; len; ++i) &#123; if (merge(Tmp[i].u, Tmp[i].v)) &#123; T[x][Len[x]++] = Tmp[i]; &#125; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Len[rt] = 1; T[rt][0] = A[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt, rt &lt;&lt; 1, rt &lt;&lt; 1 | 1);&#125;void query(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; pushUp(0, rt, 0); return ; &#125; int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; query(LT, a, b); &#125; if (m &lt; b) &#123; query(RT, a, b); &#125;&#125;int main() &#123; open(); scanf("%d%d%d", &amp;N, &amp;M, &amp;Q); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;A[i].u, &amp;A[i].v, &amp;A[i].w); &#125; build(1, 1, M); int l, r; while (Q--) &#123; long long sum = 0; scanf("%d%d", &amp;l, &amp;r); Len[0] = 0; query(1, 1, M, l, r); for (int i = 0; i &lt; Len[0]; ++i) &#123; sum += T[0][i].w; &#125; printf("%lld\n", sum); &#125; return 0;&#125;]]></content>
      <categories>
        <category>JZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01Trie 学习笔记]]></title>
    <url>%2F01-Trie%2F</url>
    <content type="text"><![CDATA[原理 01Trie用于解决求异或最大值的问题，其本质就是按位贪心。 别于一般的字典树，01Trie的每个节点只有两个儿子， 0 和 1 。插入 x 时，将其转化成二进制，从最高位开始插入，根据当前二进制位的值跳到节点对应的儿子上，于此同时将经过的所有节点权值+1，表示有一个数可以按照该方式分解。 查询当前 x 与Trie树异或的最大值时，根据贪心的思想，尽可能跳到与 x 当前二进制位的值不同的儿子上，如此从根节点到叶子节点经过的所有点组合出的值就是与 x 异或可以达到最大值的数，复杂度 O(\log{x}) 。 空间复杂度 O(n\log{max(A_i)}) ，时间复杂度 O(\log{max(A_i)}) 。 合并两棵Trie树的方法与线段树合并类似，可持久化Trie树的方法与可持久化线段树类似。 例题 01Trie BZOJ 4260 Codechef REBXOR 题目大意：对于长为 N 的序列 A[1\cdots N] ，求两个不相交区间的异或和之和的最大值。 题解：前后缀和+01Trie。从前往后插入前缀异或和，得到 [1,i] 的最大值，从后往前同理做一遍得到 [i,N] 的最大值，答案为 max([1,i]+[i+1,N]) 。 Codeforces 706D Vasiliy's Multiset HDU 4825 Xor Sum HDU 5536 Chip Factory POJ 3764 The xor-longest Path 可持久化01Trie BZOJ 3261 最大异或和 题目大意：开始给定一个长为 N 的序列 A[1\cdots N] ，有 M 个操作。在 A 的末尾插入 x ；或者给定 x,l,r ，查询 max(x\oplus A[p]\oplus\cdots\oplus A[N]) ，其中 p\in[l,r] ， N 为当前序列长度 。 题解：可持久化01Trie树模板题，后缀转为前缀查询。 HDU 4757 Tree 题目大意：树上每个点有权值 A[1\cdots N] ， M 个询问。给定 (u,v,w) ，查询 u,v 路径上的点与 w 异或的最大值。 题解：可持久化01Trie+LCA。dfs时儿子继承父亲做可持久化，查询时求两点到LCA区间的异或最大值。 BZOJ 2741【FOTILE模拟赛】L 题目大意：给定长为 N 的序列 A[1\cdots N] ， M 个询问。查询 [l,r] 的最大异或和子区间，强制在线。 题解：可持久化Trie+分块。记 s[i] 为第 i 块的左端点， f(i,j) 表示 [s[i],r-1] 中的某个点为左端点，右端点为 r 的最大异或子区间。记 g(i,j) 为 [s[i],r] 中的最大异或子区间。查询时跨越的完整块直接查 g 数组，剩下的部分在可持久化Trie中查询，取最大值。 启发式合并01Trie BNDSOJ 985 2018-12-2模拟测验（二） 题目大意：有 N 个点， M 个操作。每次连接两个点，或查询联通的两个点的异或值的最大值。 题解：并查集+启发式合并01Trie。并查集维护连通性，合并两联通块时启发式合并两个Trie树，同时记录最大值。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>01字典树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树上启发式合并 学习笔记【填坑中】]]></title>
    <url>%2Fdsu%20on%20tree%2F</url>
    <content type="text"><![CDATA[传说中的"dsu on tree"，其本质就是将树轻重链剖分后，暴力维护轻儿子信息，继承重儿子信息，用于快速计算不带修改的子树查询问题。 原理 感谢NormalGod的讲解。 为什么通过这种方式维护子树信息的复杂度只有 O(n\log{n}) 呐？这要从树链剖分的性质讲起。 由于重儿子的信息被它父亲直接继承，因此一条重链上的所有点，在向上的过程中只会在链顶处计算一次贡献（因为链顶是它父亲的轻儿子，会被暴力计算贡献）。 在叶子节点到根节点上的所有点中，显然叶子节点被统计的次数最多，而到根的路径上有最多 \log{n} 条重链，即在 \log{n} 个重链链头处会被统计贡献。 因此一个叶子节点最多被统计 \log{n} 次，所有节点被统计次数之和的上限为 O(n\log{n}) ，复杂度得证。 模板 1234567891011121314151617181920212223242526272829303132// vector存边：G[MAXN]// 先轻重链剖分，Son[x]表示x的重儿子int skip;void add(int x, int fa, int val) &#123; // 根据题目要求统计 for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != skip) &#123; // 统计子树贡献，不统计那个重儿子（即skip） add(v, x, val); &#125; &#125;&#125;void dfs(int x, int fa, bool keep) &#123; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != Son[x]) &#123; // 暴力统计轻儿子 dfs(v, x, 0); &#125; &#125; if (Son[x]) &#123; dfs(Son[x], x, 1); // 继承重儿子 skip = Son[x]; &#125; add(x, fa, 1); // 计算子树贡献 // 此时获得x子树的统计结果 skip = 0; if (!keep) &#123; add(x, fa, -1); // 清除贡献 &#125;&#125; 例题 Codeforces 600 E - Lomsat gelral 根为 1 的树中，每个点有颜色。定义颜色 a 占领 x 的子树当且仅当不存在颜色 b ，使得 b 在子树中出现的次数超过 a 。令 A[x] 为所有占领 x 的子树的颜色编号之和，求所有点的 A[i] 。 n\leq 10^5 分析 用sum统计当前子树中颜色出现最多的次数mx下的颜色编号之和。如果mx被更新，清零sum，相等则累加，直接套用模板即可。注意当所有点颜色不同时，会爆int。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;int N, Col[MAXN];std::vector&lt;int&gt; G[MAXN];int Sz[MAXN], Son[MAXN];void getSon(int x, int fa) &#123; Sz[x] = 1; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa) &#123; getSon(v, x); Sz[x] += Sz[v]; if (Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;long long Ans[MAXN], sum;int Cnt[MAXN], mx;int skip;void add(int x, int fa, int val) &#123; Cnt[Col[x]] += val; if (val &gt; 0 &amp;&amp; Cnt[Col[x]] &gt;= mx) &#123; if (Cnt[Col[x]] &gt; mx) &#123; mx = Cnt[Col[x]]; sum = 0; &#125; if (Cnt[Col[x]] == mx) &#123; sum += Col[x]; &#125; &#125; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != skip) &#123; add(v, x, val); &#125; &#125;&#125;void dfs(int x, int fa, bool keep) &#123; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != Son[x]) &#123; dfs(v, x, 0); &#125; &#125; if (Son[x]) &#123; dfs(Son[x], x, 1); skip = Son[x]; &#125; add(x, fa, 1); Ans[x] = sum; skip = 0; if (!keep) &#123; add(x, fa, -1); mx = sum = 0; &#125;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;Col[i]); &#125; int u, v; for (int i = 1; i &lt; N; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); G[u].push_back(v); G[v].push_back(u); &#125; getSon(1, 0); dfs(1, 0, 1); for (int i = 1; i &lt;= N; ++i) &#123; printf("%lld ", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>树链剖分</tag>
        <tag>树上启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可持久化线段树 学习笔记]]></title>
    <url>%2Fpresident%20segment%20Tree%2F</url>
    <content type="text"><![CDATA[主席树支持静态查询区间第 k 大，可以用来维护可持久化数组。单次修改/查询的复杂度为 O(\log{n}) ，空间 O(m\log{n}) （存疑），一般开 20n 至 60n 的空间（视实际情况而定）。 原理 其实现方法为前缀和+权值线段树。 由于是权值线段树，因此需要对全局变量（初始值插入值）进行离散化。离散化后的权值线段树为了减少空间占用采取动态开点的方式存储数据。 所谓前缀和，相当于对 n 个区间 A[1,i] 分别建一棵权值线段树 T_i ，那么 A[l,r] 中在 [a,b] 范围内的数个数即 T_r 与 T_{l-1} 在 [a,b] 内个数之差 。同理查询第 k 大时也可以通过在两棵线段树上对应区间做差的方法判定查询的数的位置。 当然实际情况肯定不会真的建 n 棵线段树，因为树与树之间存在大量交集。相邻两棵树 T_{i-1},T_i 的差别只在于新加入的 A_i ，因此构造 T_i 时只需在继承 T_{i-1} 的基础之上插入 A_i 。 具体操作 初始化时先离散化得到新区间 [1,N] ，然后按序将 A_i 离散化后的值插入树中，继承 T_{i-1} 在对应节点处的子树大小并加一，即插入一条链。 查询的时候跟权值线段树的操作类似，根据 T_r 和 T_{l-1} 的当前左子树大小之差与 k 的关系来判断向左还是向右，直到叶子节点停止。 复杂度分析 离散化复杂度 O(n\log{n}) ，初始化 O(n\log{n}) ，查询 O(\log{n}) 。 静态区间第 k 大 序列 A[1\cdots n] ， m 个查询 A[l,r] 中第 k 小数。 n,m\leq 2\times 10^5,|A_i|\leq 10^9 。 题目链接 P3834 【模板】可持久化线段树 1（主席树） 分析 模板题，离散化后建主席树。复杂度 O((N+M)\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;bits/stdc++.h&gt;const int MAXN = 2e5 + 5;const int LOG = 40;int N, M, n;int A[MAXN], B[MAXN];int Rt[MAXN], cntP;int L[MAXN * LOG], R[MAXN * LOG], Sum[MAXN * LOG];int getX(int x) &#123; return std::lower_bound(B + 1, B + n + 1, x) - B;&#125;int build(int l, int r) &#123; int rt = ++cntP; int m = (l + r) &gt;&gt; 1; if (l &lt; r) &#123; L[rt] = build(l, m); R[rt] = build(m + 1, r); &#125; return rt;&#125;int update(int pre, int l, int r, int x) &#123; int rt = ++cntP; L[rt] = L[pre], R[rt] = R[pre]; Sum[rt] = Sum[pre] + 1; if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (x &lt;= m) &#123; L[rt] = update(L[pre], l, m, x); &#125; else &#123; R[rt] = update(R[pre], m + 1, r, x); &#125; &#125; return rt;&#125;int query(int u, int v, int l, int r, int k) &#123; if (l == r) &#123; return l; &#125; int x = Sum[L[v]] - Sum[L[u]]; int m = (l + r) &gt;&gt; 1; if (x &gt;= k) &#123; return query(L[u], L[v], l, m, k); &#125; else &#123; return query(R[u], R[v], m + 1, r, k - x); &#125;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); B[i] = A[i]; &#125; std::sort(B + 1, B + N + 1); n = std::unique(B + 1, B + N + 1) - B - 1; Rt[0] = build(1, n); for (int i = 1; i &lt;= N; ++i) &#123; Rt[i] = update(Rt[i - 1], 1, n, getX(A[i])); &#125; int l, r, k; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;k); printf("%d\n", B[query(Rt[l - 1], Rt[r], 1, n, k)]); &#125; return 0;&#125; 可持久化数组 维护一个数组 A[1\cdots N] ， M 次操作，查询或修改第 k 个版本的 A_i ，每次操作都会得到一个新版本（查询则继承该版本）。 N,M\leq 10^6, |A_i|\leq 10^9 。 题目链接 P3919 【模板】可持久化数组（可持久化线段树/平衡树） 分析 线段树中的叶子节点存储每个点的值，单次修改只影响一个叶子节点。因此可以通过主席树每次新建一条链连接其他所有点，并修改该叶子节点的值。查询时从该版本的根向下找即可。复杂度 O(N+M\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;const int LOG = 20;int N, M;int A[MAXN];int Rt[MAXN], cntP;int L[MAXN * LOG], R[MAXN * LOG], Val[MAXN * LOG];int build(int l, int r) &#123; int rt = ++cntP; if (l == r) &#123; scanf("%d", &amp;Val[rt]); &#125; else &#123; int m = (l + r) &gt;&gt; 1; L[rt] = build(l, m); R[rt] = build(m + 1, r); &#125; return rt;&#125;int update(int pre, int l, int r, int p, int x) &#123; int rt = ++cntP; L[rt] = L[pre], R[rt] = R[pre]; Val[rt] = Val[pre]; if (l == r) &#123; Val[rt] = x; &#125; else &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; L[rt] = update(L[pre], l, m, p, x); &#125; else &#123; R[rt] = update(R[pre], m + 1, r, p, x); &#125; &#125; return rt;&#125;int query(int rt, int l, int r, int p) &#123; if (l == r) &#123; return Val[rt]; &#125; else if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; return query(L[rt], l, m, p); &#125; else &#123; return query(R[rt], m + 1, r, p); &#125; &#125;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); Rt[0] = build(1, N); int ver, opt, p, x; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;ver, &amp;opt, &amp;p); if (opt == 1) &#123; scanf("%d", &amp;x); Rt[i] = update(Rt[ver], 1, N, p, x); &#125; else &#123; Rt[i] = Rt[ver]; printf("%d\n", query(Rt[ver], 1, N, p)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>主席树</tag>
        <tag>可持久化数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI2009」BZOJ 1558 等差数列]]></title>
    <url>%2FBZOJ-1558%2F</url>
    <content type="text"><![CDATA[长为 N 的序列 A 上 M 个操作，分为两类： 对于 i\in [l,r] ， 使 A[i] = A[i] + (i-l)\times b + a 查询 A[l,r] 最少能分成多少个等差数列表示 N,M\leq 100000 分析 操作一是对区间增加一个等差数列，因此将原数组差分，用线段树进行区间加和单点加。那么操作二就转化为查询区间能分成多少个相等的子区间。 差分后区间长度变成 N-1 ，则对 A[l,r] 增加 a+b\cdot i 的等差数列的具体操作为 A[l-1]\rightarrow A[l-1]+a ， A[l,r]\rightarrow A[l,r]+b ， A[r+1]\rightarrow A[r+1]-(a+(r-l)\cdot b) 。由于对原数组进行了差分，因此注意判定 l=1 和 r=N 时的边界问题。 需要注意的是，两个数也可以构成等差数列，所以两个相邻不同数可以合并以减少答案。 因此合并答案的时候会复杂一些，用 s[0/1][0/1] 表示左右端点取不取，注意左区间的右端点和右区间的左端点必须至少选择一个。 s[0][0] = \min(lc\rightarrow s[1][0] + rc\rightarrow s[0][1] - [lc\rightarrow right = rc\rightarrow left],lc\rightarrow s[0][0] + rc\rightarrow s[0][1],lc\rightarrow s[1][1] + rc\rightarrow s[0][0]) ，剩余三个合并方法类似。 复杂度 O(M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (__typeof(l) i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (__typeof(l) i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define irep(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); ++i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())#define debug(...) fprintf(stderr, __VA_ARGS__)#define DEBUG debug("passing %d in %s\n", __LINE__, __FUNCTION__)typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;inline int read() &#123; static char c; while (c = getchar(), !isdigit(c) &amp;&amp; c != '-'); bool f = c == '-'; int x = f ? 0 : c - '0'; for (c = getchar(); isdigit(c); c = getchar()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;const int MAXN = 100000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint N, Q, A[MAXN];struct Data &#123; ll left, right; int num[4]; Data operator + (const Data &amp;a) &#123; Data x; x.left = left; x.right = a.right; x.num[0] = num[2] + a.num[1] - (right == a.left); chkMin(x.num[0], num[0] + a.num[1]); chkMin(x.num[0], num[2] + a.num[0]); x.num[1] = num[3] + a.num[1] - (right == a.left); chkMin(x.num[1], num[3] + a.num[0]); chkMin(x.num[1], num[1] + a.num[1]); x.num[2] = num[2] + a.num[3] - (right == a.left); chkMin(x.num[2], num[0] + a.num[3]); chkMin(x.num[2], num[2] + a.num[2]); x.num[3] = num[3] + a.num[3] - (right == a.left); chkMin(x.num[3], num[3] + a.num[2]); chkMin(x.num[3], num[1] + a.num[3]); return x; &#125;&#125;;struct Node &#123; ll add; Data x;&#125; T[MAXN &lt;&lt; 2];void pushDown(int rt) &#123; ll &amp;add = T[rt].add; if (add) &#123; T[rt &lt;&lt; 1].add += add; T[rt &lt;&lt; 1 | 1].add += add; T[rt &lt;&lt; 1].x.left += add; T[rt &lt;&lt; 1].x.right += add; T[rt &lt;&lt; 1 | 1].x.left += add; T[rt &lt;&lt; 1 | 1].x.right += add; add = 0; &#125;&#125;void buildTree(int rt, int l, int r) &#123; if (l == r) &#123; T[rt].x.left = T[rt].x.right = A[l]; T[rt].x.num[0] = 0; T[rt].x.num[1] = T[rt].x.num[2] = T[rt].x.num[3] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; buildTree(LT); buildTree(RT); T[rt].x = T[rt &lt;&lt; 1].x + T[rt &lt;&lt; 1 | 1].x;&#125;void add(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].add += x; T[rt].x.left += x; T[rt].x.right += x; return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b, x); &#125; if (m &lt; b) &#123; add(RT, a, b, x); &#125; T[rt].x = T[rt &lt;&lt; 1].x + T[rt &lt;&lt; 1 | 1].x;&#125;Data cal(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].x; &#125; int m = (l + r) &gt;&gt; 1; pushDown(rt); if (b &lt;= m) &#123; return cal(LT, a, b); &#125; else if (a &gt; m) &#123; return cal(RT, a, b); &#125; else &#123; return cal(LT, a, b) + cal(RT, a, b); &#125;&#125;void open() &#123; freopen("1558.in", "r", stdin); freopen("1558.out", "w", stdout);&#125;int main() &#123; // open(); int l, r, a, b; char opt[5]; N = read(); rep(i, 1, N + 1) &#123; A[i] = read(); &#125; rep(i, 1, N) &#123; A[i] = A[i + 1] - A[i]; &#125; buildTree(1, 1, N - 1); Q = read(); while (Q--) &#123; scanf("%s", opt); l = read(), r = read(); if (opt[0] == 'A') &#123; a = read(), b = read(); if (l &gt; 1) &#123; add(1, 1, N - 1, l - 1, l - 1, a); &#125; if (l &lt; r) &#123; add(1, 1, N - 1, l, r - 1, b); &#125; if (r &lt; N) &#123; add(1, 1, N - 1, r, r, -1ll * b * (r - l) - a); &#125; &#125; else &#123; if (l == r) &#123; puts("1"); &#125; else &#123; printf("%d\n", cal(1, 1, N - 1, l, r - 1).num[3]); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CTSC 2007」BZOJ 1150 数据备份]]></title>
    <url>%2FBZOJ-1150%2F</url>
    <content type="text"><![CDATA[直线上有 N 个点，距离原点距离分别为 A_i 。有 M 条线用来连接。每条线连接两个点，且每个点只能被连接一次，线的长度为两点间的距离。求这些线长度和的最小值。 2\leq N\leq 100000, A_i \leq 1000000000 分析 很显然的是，线连接的一定是相邻的两个点，因此原本的 N 个点被差分成 N-1 条线段，记 len(i,i+1) 表示点 i 和 i+1 点之间的距离。 考虑贪心，每次取距离最小的两个点连接。但是这么做是显然错误的，例如 1 3 50 100 且 M=2 。 因为选完 (i-1,i) 之后，会导致 (i-2,i-1) 和 (i,i+1) 不能再选，这就是直接贪心错误的问题所在。 因此它需要一个可以「反悔」的机制。 如果选择完 (i-1,i) 后反悔，那么意味着它会去应该选择 (i-2,i-1) 或 (i,i+1) 。 那么取出 len(i-1,i) 后，只需加入 len(i-2,i-1)+len(i,i+1)-len(i-1,i) ，这意味着它可以将已经选择的 (i-1,i) 反悔成 (i-2,i-1) 和 (i,i+1) （反悔加上当前这次所以是一共选择 2 条线段）。 当然反悔 (i-1,i) 不代表 (i-2,i-1) 和 (i,i+1) 都要选，可能只选择其中一个。不过对于它们同样可以继续反悔从而找到更优的策略，因此这个贪心是成立的。 记录每个点（线段抽象成点看待）的前驱后继，每次选择一条线段相当于删除这个点，与此同时更新前驱后继。 可以通过堆来实现，但是需要记录的东西会多一些。所以我选择直接使用 std::set ，它可以直接删除非堆顶的元素。当然实测它也要慢一些。 需要注意一下边界取值以及溢出。 复杂度 O(M\log{N}) 。 类似的题：夹克老爷的逢三抽一 ，是对此题模型展开后的描述。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1e5 + 5;int N, M;ll A[MAXN];int Lst[MAXN], Nxt[MAXN];std::set&lt;std::pair&lt;ll, int&gt; &gt; Set;void insert(int x) &#123;Set.insert(std::make_pair(A[x], x));&#125;void erase(int x) &#123;Set.erase(std::make_pair(A[x], x));&#125;void del(int p) &#123;Nxt[Lst[p]] = Nxt[p];Lst[Nxt[p]] = Lst[p];erase(p);&#125;int main() &#123;ll res = 0;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N + 1) &#123; scanf("%lld", &amp;A[i]); if (i &gt; 1) &#123; A[i - 1] = A[i] - A[i - 1]; insert(i - 1); &#125; Lst[i] = i - 1; Nxt[i] = i + 1;&#125;A[0] = 1000000000LL + 5;rep(i, 0, M) &#123; int p = Set.begin()-&gt;second; ll l = A[Lst[p]], x = A[p], r = A[Nxt[p]]; res += x; del(Lst[p]), del(Nxt[p]); erase(p); A[p] = l + r - x; insert(p);&#125;printf("%lld\n", res);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2007 Dec」BZOJ 1691 挑剔的美食家]]></title>
    <url>%2FBZOJ-1691%2F</url>
    <content type="text"><![CDATA[N 头奶牛， M 种草料。第 i 头奶牛要求其草料价格不小于 A_i ，鲜嫩程度不小于 B_i 。要求奶牛吃的草料互不相同，求最小花费。如果无解，输出 -1 。 N,M\leq 100000 。 分析 贪心的想，每头奶牛肯定选择满足要求的最小价格的草料。 将草料和奶牛按照其鲜嫩程度从大到小排序，对每头奶牛，将所有鲜嫩程度满足要求的草料价格插入到一个 multiset中，在里面lower_bound得到满足条件的最小价格，统计答案并将它删去。如果找不到，输出 -1 。 由于草料的鲜嫩程度是不增的，因此已经插入的所有草料价格一定都满足鲜嫩程度不小于当前奶牛的要求，只需要继续插入后面满足条件的草料。 因此每个草料最多按顺序插入一次。 复杂度 O(N\log{N}+M\log{M}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Node &#123; int cost, val; bool operator &lt; (const Node &amp;x) const &#123; return val &gt; x.val; &#125;&#125; A[MAXN], B[MAXN];std::multiset&lt;int&gt; S;int main() &#123; int N, M; ll ans = 0; scanf("%d%d", &amp;N, &amp;M); rep(i, 0, N) &#123; scanf("%d%d", &amp;A[i].cost, &amp;A[i].val); &#125; rep(i, 0, M) &#123; scanf("%d%d", &amp;B[i].cost, &amp;B[i].val); &#125; std::sort(A, A + N); std::sort(B, B + M); int cur = 0; rep(i, 0, N) &#123; while(cur &lt; M &amp;&amp; B[cur].val &gt;= A[i].val) &#123; S.insert(B[cur++].cost); &#125; std::multiset&lt;int&gt;::iterator p = S.lower_bound(A[i].cost); if(p == S.end()) &#123; puts("-1"); return 0; &#125; else &#123; ans += *p; S.erase(p); &#125; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI2010」BZOJ 1826 缓存交换]]></title>
    <url>%2FBZOJ-1826%2F</url>
    <content type="text"><![CDATA[起初有 M 个空位置。有 N 次插入，若插入的数在位置上，则无需操作；否则需要用它替换掉原位置中的一个数。每次可以自由选择替换的位置，求最小替换次数。 M\leq N\leq 100000 。 分析 对于一个插入的数 x ，若当前位置未满且 x 不在任意位置中，则直接插入 x ，次数 +1 。 若 x 存在于某个位置中，则无需任何操作。 如果不存在，应该替换掉位置上 M 个数中下一次出现最晚的那个数（如果不再出现，则当其下一次出现的位置为 INF ）。 这是个贪心的策略， 形象的理解就是，该元素占了那个位置最长的没有意义的时间，（元素两次插入间隔的时间被认为是没有意义的）。 预处理出 Nxt[i] ，表示 i 位置的元素下一次出现的下标，如果没有下一次，将其置为 N+1 。 维护大根堆，每次插入 Nxt[i] 。 若 i 不在堆中，则说明需要进行了一次替换，并删除堆顶元素。 复杂度 O(N\log{N}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;int N, M;std::multiset&lt;int&gt; In;std::map&lt;int, int&gt; Lst;int A[MAXN], Nxt[MAXN];int main() &#123; int res = 0; scanf("%d%d", &amp;N, &amp;M); rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); Nxt[i] = N + 1; Nxt[Lst[A[i]]] = i; Lst[A[i]] = i; &#125; rep(i, 1, N + 1) &#123; if(In.find(i) != In.end()) &#123; In.erase(i); &#125; else &#123; ++res; if(SZ(In) == M) &#123; In.erase(--In.end()); &#125; &#125; In.insert(Nxt[i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>堆</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2010」BZOJ 2086 Blocks]]></title>
    <url>%2FBZOJ-2086%2F</url>
    <content type="text"><![CDATA[序列 A 有 N 个数，有 M 次查询。每次给定 K 并可以进行以下操作：如果 A[i] &gt; K 则可以将其减 1 并使 A[i-1] 或 A[i+1] 加 1 。经过任意多次操作后，求最长的连续子序列，其中元素值均不小于 K 。 N\leq 1000000,M\leq 50 。 分析 若 \sum\limits_{i=l}^{r}{A_i} \geq K\times (r - l + 1) ，则 A[l\cdots r] 一定可以经过若干次操作使得其中每个元素均不小于 K 。 为了方便起见，使 A[i] = A[i]-K ，则当 \sum\limits_{i=l}^{r}{A_i} \geq 0 成立时即可。 记 Sum[i] = \sum\limits_{i=1}^{i}{A_i} ，则 Sum[r]\geq Sum[l-1] 与上式等价。 问题转化为求 \max(r-l) 使得 Sum[r]\geq Sum[l-1] 成立。 而所有可能成为最大区间的左端点的前缀和一定是单调递减的，因为若 i &lt; j 且 Sum[i] \leq Sum[j] ，则选择 i 作为左端点一定强于选 j 。 同理若 i &gt; j 且 Sum[i] \geq Sum[j] ，则选择 i 作为右端点一定强于选 j ，因此 r 可以直接从右向左扫描右端点。 记当前栈顶（左端点）为 S[top] ，若 Sum[r] \geq Sum[S[top]] 则弹出栈顶，直到满足 Sum[r] &lt; Sum[S[top]] 为止。 那么之前的栈顶 S[top+1]+1 到 r ，是以 r​ 为右端点满足条件的最大区间。 答案为这些区间大小的最大值，复杂度 O(NM) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1000000 + 5;int N, M, A[MAXN];int solve(int x) &#123;static ll F[MAXN];static int Stk[MAXN];int top = 0, res = 0;rep(i, 1, N + 1) &#123; F[i] = F[i - 1] + A[i] - x; if (F[Stk[top]] &gt; F[i]) &#123; Stk[++top] = i; &#125;&#125;rof(i, N + 1, 1) &#123; if (F[i] &gt;= 0) &#123; return std::max(res, i); &#125; while (top &amp;&amp; F[i] &gt;= F[Stk[top - 1]]) &#123; --top; &#125; chkMax(res, i - Stk[top]);&#125;return res;&#125;int main() &#123;int x;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]);&#125;rep(i, 0, M) &#123; scanf("%d", &amp;x); printf("%d ", solve(x));&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2011」BZOJ 2276 Temperature]]></title>
    <url>%2FBZOJ-2276%2F</url>
    <content type="text"><![CDATA[长为 N 的序列中，每个数的取值范围为 [L_i,R_i] 。求最长不下降连续子序列的长度。 N\leq 10^6 分析 单调队列维护递减的 l ，如果当前 r 比队首的 l 小，则弹出队首直到 r 大于等于它为止。 读入数据很大，需要读入优化。 复杂度 O(N) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Mqueue &#123; std::deque&lt;int&gt; Q, M; void push(int x) &#123; while(!M.empty() &amp;&amp; M.back() &lt; x) &#123; M.pop_back(); &#125; M.push_back(x); Q.push_back(x); &#125; void pop() &#123; int x = Q.front(); Q.pop_front(); if(x == M.front()) &#123; M.pop_front(); &#125; &#125; void maintain(int x) &#123; while(!M.empty() &amp;&amp; M.front() &gt; x) &#123; pop(); &#125; &#125; size_t size() &#123; return SZ(Q); &#125;&#125;Q;int main() &#123; int res = 0; int N = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); Q.maintain(r); Q.push(l); chkMax(res, SZ(Q)); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI2010」BZOJ 1855 股票交易]]></title>
    <url>%2FBZOJ-1855%2F</url>
    <content type="text"><![CDATA[一共 T 天，每天股票的买入价为 A_i ，卖出价为 B_i ，最多允许购买 C_i 股，售出 D_i 股。要求两次交易之间至少间隔 W 天，持有的总股票数不超过 P 。假设可以无利息借钱购买股票，求最大收益。 T\leq 2000 。 分析 记 F(i,j) 表示第 i 天持有 j 股的最大收益。 首先 F(i,j) 可以直接购买获得， F(i,j) = -A_i\times j(j\leq C_i) 。 其次可以由前一天直接转移获得， F(i,j) = F(i-1,j) 。 最后可以通过 i-w-1 天的状态转移， F(i,j) = \max\limits_{max(1,j-C_i)\leq k\leq j}{F(i-w-1,k)+(k-j)\times A_i}\ F(i,j)=\max\limits_{max(1,j-C_i)\leq k\leq j}{F(i-w-1,k)+(k-j)\times B_i} 如果枚举 k ，复杂度会达到 TP^2 ，显然不行。 再观察转移方程，它可以转化成 F(i,j) = \max\limits_{max(1,j-C_i)\leq k\leq j}{(F(i-w-1,k)+k\times A_i})-j\times A_i 。 这是典型的单调队列可以优化的形式（形如 f[x] = \max(g[k])+w[x] ）。 单调队列分别维护 F(i-w-1,k)+k\times A_i 和 F(i-w-1,k)+k\times B_i 。 需要注意的是，前者 k 从 0 到 j 枚举，而后者是从 P 到 j 枚举。因为随着 j 的增大，前者当 k &lt; j - C_i 时不在枚举范围，而后者当 k &gt; j + D_i 时不在枚举范围。 如此使得 F[i][1\cdots P] 的决策分摊 O(P) 的复杂度，复杂度降至 O(TP) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 2000 + 5;int N, P, W;int F[MAXN][MAXN];int Que[MAXN];int main() &#123; int a, b, maxa, maxb; scanf("%d%d%d", &amp;N, &amp;P, &amp;W); memset(F, 0x80, sizeof F); rep(i, 1, N + 1) &#123; scanf("%d%d%d%d", &amp;a, &amp;b, &amp;maxa, &amp;maxb); rep(j, 0, maxa + 1) &#123; F[i][j] = -a * j; &#125; rep(j, 0, P + 1) &#123; chkMax(F[i][j], F[i - 1][j]); &#125; if (i - W &lt;= 1) &#123; continue; &#125; int h = 0, t = -1; rep(j, 0, P + 1) &#123; while (h &lt;= t &amp;&amp; Que[h] &lt; j - maxa) &#123; ++h; &#125; while (h &lt;= t &amp;&amp; F[i - W - 1][Que[t]] + Que[t] * a &lt;= F[i - W - 1][j] + j * a) &#123; --t; &#125; Que[++t] = j; chkMax(F[i][j], F[i - W - 1][Que[h]] + (Que[h] - j) * a); &#125; h = 0, t = -1; rof(j, P + 1, 0) &#123; while (h &lt;= t &amp;&amp; Que[h] &gt; j + maxb) &#123; ++h; &#125; while (h &lt;= t &amp;&amp; F[i - W - 1][Que[t]] + Que[t] * b &lt;= F[i - W - 1][j] + j * b) &#123; --t; &#125; Que[++t] = j; chkMax(F[i][j], F[i - W - 1][Que[h]] + (Que[h] - j) * b); &#125; &#125; int res = 0; rep(i, 0, P + 1) &#123; chkMax(res, F[N][i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2010」BZOJ 2096 PIL-Pilots]]></title>
    <url>%2FBZOJ-2096%2F</url>
    <content type="text"><![CDATA[给定一个长度为 N 的序列，求最长的最大值与最小值的差不超过 K 的子段。 N\leq 3000000,k\leq 2000000000 。 分析 记 l, r 为当前子段的首尾下标。开始尽可能让 r 向右拓展。 当最小最大值的差超过 K 时，让 l 向右移动，直到满足条件为止。 通过两个单调队列维护极值， \max {r-l+1} 为答案。 复杂度 O(N) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;int N, K;std::deque&lt;int&gt; Dup, Ddown;std::deque&lt;int&gt; Qup, Qdown;void push(int x) &#123; while(!Dup.empty() &amp;&amp; Dup.back() &lt; x) &#123; Dup.pop_back(); &#125; while(!Ddown.empty() &amp;&amp; Ddown.back() &gt; x) &#123; Ddown.pop_back(); &#125; Dup.push_back(x); Ddown.push_back(x); Qup.push_back(x); Qdown.push_back(x);&#125;void pop() &#123; int x = Qup.front(); Qup.pop_front(); if(x == Dup.front()) &#123; Dup.pop_front(); &#125; x = Qdown.front(); Qdown.pop_front(); if(x == Ddown.front()) &#123; Ddown.pop_front(); &#125;&#125;void moveRight(int x) &#123; push(x); while(!Dup.empty() &amp;&amp; Dup.front() - Ddown.front() &gt; K) &#123; pop(); &#125;&#125;int main() &#123; int x, ans = 0; scanf("%d%d", &amp;K, &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;x); moveRight(x); chkMax(ans, SZ(Qup)); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「[BJOI 2014」BZOJ 4530 大融合]]></title>
    <url>%2FBZOJ-4530%2F</url>
    <content type="text"><![CDATA[开始有 N 个点， M 个操作。每次插入一条边（保证不成环），或者查询一条边的负载值。负载值的定义为当前树上经过它的简单路径条数。 N,Q\leq 100000 分析 边的负载值等价于删去它后该边两点所在联通块大小的乘积。 现在问题在于如何计算联通块的大小。 在线做需要LCT，我不会，于是考虑将森林建好后离线做。 那么现在一条边所涉及的两个联通块大小，分别就是父亲所在的联通块大小 Sz[x] 和儿子所在的子树大小 Sz[y] ，负载值为 (Sz[x]-Sz[y])\times Sz[y] （因为父亲所在联通块一定包含儿子所在的子树）。 插入一条边的影响就是，父亲节点到「它所在并查集中深度最小的点（即当前树的根节点）」的那条链上所有节点的子树大小增加 Sz[y] 。 如何找到这个根节点，显然是并查集维护联通块，让联通块内深度最小的点作祖先。 而对一条链进行区间加法和单点查询，显然是树链剖分+线段树/树状数组。 复杂度为 O(N+Q\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, Q;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Fa[MAXN], Son[MAXN], Sz[MAXN], Depth[MAXN];int Top[MAXN], Dfn[MAXN], cntD;void dfs(int x) &#123; Depth[x] = Depth[Fa[x]] + 1; Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];&#125;void pushDown(int rt, int L) &#123; int &amp;add = Add[rt]; if(add) &#123; Add[rt &lt;&lt; 1] += add; Add[rt &lt;&lt; 1 | 1] += add; Sum[rt &lt;&lt; 1] += add * (L - (L &gt;&gt; 1)); Sum[rt &lt;&lt; 1 | 1] += add * (L &gt;&gt; 1); add = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void add(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Sum[rt] += (r - l + 1) * x; Add[rt] += x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; add(LT, a, b, x); &#125; if(m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt);&#125;int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125;&#125;int Anc[MAXN];void init(int n) &#123; rep(i, 1, n + 1) &#123; Anc[i] = i; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;void merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if(Depth[x] &gt; Depth[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; &#125;&#125;void modify(int x, int sz) &#123; int y = findAnc(x); while(x &amp;&amp; Depth[Top[x]] &gt;= Depth[y]) &#123; add(1, 1, N, Dfn[Top[x]], Dfn[x], sz); x = Fa[Top[x]]; &#125; if(x) &#123; add(1, 1, N, Dfn[y], Dfn[x], sz); &#125;&#125;int Type[MAXN], U[MAXN], V[MAXN];int main() &#123; char opt[5]; scanf("%d%d", &amp;N, &amp;Q); init(N); rep(i, 0, Q) &#123; scanf("%s%d%d", opt, &amp;U[i], &amp;V[i]); Type[i] = opt[0] == 'A'; if(Type[i]) &#123; addEdge(U[i], V[i]); &#125; &#125; rep(i, 1, N + 1) &#123; if(!Fa[i]) &#123; dfs(i); dfs2(i, i); &#125; &#125; init(N); build(1, 1, N); rep(i, 0, Q) &#123; if(Type[i]) &#123; merge(U[i], V[i]); if(Depth[U[i]] &lt; Depth[V[i]]) &#123; modify(U[i], query(1, 1, N, Dfn[V[i]])); &#125; else &#123; modify(V[i], query(1, 1, N, Dfn[U[i]])); &#125; &#125; else &#123; if(Depth[U[i]] &lt; Depth[V[i]]) &#123; std::swap(U[i], V[i]); &#125; V[i] = findAnc(V[i]); int num = query(1, 1, N, Dfn[V[i]]); int num2 = query(1, 1, N, Dfn[U[i]]); printf("%d\n", num2 * (num - num2)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>并查集</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「LNOI 2014」BZOJ 3626 LCA]]></title>
    <url>%2FBZOJ-3626%2F</url>
    <content type="text"><![CDATA[给定一棵 N 个节点的有根树，有 M 组询问。每组询问给定 l, r, z ，查询 \sum\limits_{l\leq i\leq r}{depth(lca(i, z))} 。 N,M\leq 50000 。 分析 约定： u\rightarrow v 指的是 u 到 v 路径上的所有点，默认根节点为 1 。 由于只是求 lca(u,v) 的深度，因此将 u\rightarrow 1 上的所有节点权值 +1 ，那么答案应该是 v\rightarrow 1 上节点的权值和。（因为 v\rightarrow 1 上所有有权值的点都在 lca(u,v) \rightarrow 1 上） 那么假设求 \sum{depth(lca(u_i,v))} ，同理可以分别将 u_i\rightarrow 1 上所有点权值 +1 ，最后统计 v\rightarrow 1 上的权值和。 实现起来很简单，树链剖分+线段树，复杂度 O(m\log^2{n}) ，其中 m 为组数， n 为节点数。 假如把 v 换成 z ，其实只需要将最后统计的链从 v\rightarrow 1 改成了 z\rightarrow 1 ，对前面 +1 的操作没有影响，单次只是 O(\log^2{n}) 的复杂度。 那么再看这道题的询问 \sum\limits_{l\leq i\leq r}{depth(lca(i, z))} ，可以发现与上面的式子是类似的。 由于每次都是 [l_i,r_i] 这样一个连续区间，将它差分成 [1,r_i]-[1,l_i-1] 。 那么如果节点编号按从 1\cdots n 的顺序进行 +1 的操作， +1 后计算 u_i\rightarrow 1 的权值和。 所有查询的区间差分后得到的 [1,r_i] 和 [1,l_i-1] 都能算出来，而且所有点只操作（增加）了一次，如此复杂度是可以接受的。 那么把所有查询都分别挂在节点 l_i-1 和 r_i 上，让 i 从 1 开始按顺序对 i\rightarrow 1 进行 +1 操作。 +1 之后处理所有挂在上面的询问。分别 u_i\rightarrow 1 的权值和，若 i 是左区间则减，反之则加。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 50000 + 5;const int MOD = 201314;struct Edge &#123; int v, nxt;&#125; E[MAXN];int N, M;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Fa[MAXN], Son[MAXN], Sz[MAXN];int Top[MAXN], Dfn[MAXN], cntD;void dfs(int x) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; dfs(v); Sz[x] += Sz[v]; if (Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if (Son[x]) &#123; dfs2(Son[x], top); &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2];void inc(int &amp;x, int y) &#123; (x += y) %= MOD; if (x &lt; 0) &#123; x += MOD; &#125;&#125;void pushUp(int rt) &#123; inc(Sum[rt] = 0, Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]);&#125;void pushDown(int rt, int L) &#123; int &amp;add = Add[rt]; if (add) &#123; inc(Add[rt &lt;&lt; 1], add); inc(Add[rt &lt;&lt; 1 | 1], add); inc(Sum[rt &lt;&lt; 1], add * (L - (L &gt;&gt; 1))); inc(Sum[rt &lt;&lt; 1 | 1], add * (L &gt;&gt; 1)); add = 0; &#125;&#125;void add(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inc(Sum[rt], r - l + 1); inc(Add[rt], 1); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b); &#125; if (m &lt; b) &#123; add(RT, a, b); &#125; pushUp(rt);&#125;int querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; int res = 0; if (a &lt;= m) &#123; inc(res, querySum(LT, a, b)); &#125; if (m &lt; b) &#123; inc(res, querySum(RT, a, b)); &#125; return res;&#125;void modify(int u) &#123; while (u) &#123; add(1, 1, N, Dfn[Top[u]], Dfn[u]); u = Fa[Top[u]]; &#125;&#125;int query(int u) &#123; int res = 0; while (u) &#123; inc(res, querySum(1, 1, N, Dfn[Top[u]], Dfn[u])); u = Fa[Top[u]]; &#125; return res;&#125;std::vector&lt;int&gt; L[MAXN], R[MAXN];int Ask[MAXN], Ans[MAXN];int main() &#123; int l, r; scanf("%d%d", &amp;N, &amp;M); rep(i, 2, N + 1) &#123; scanf("%d", &amp;Fa[i]); addEdge(++Fa[i], i); &#125; dfs(1); dfs2(1, 1); rep(i, 0, M) &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;Ask[i]); L[l].push_back(i); R[r + 1].push_back(i); ++Ask[i]; &#125; rep(i, 1, N + 1) &#123; modify(i); rep(j, 0, SZ(R[i])) &#123; inc(Ans[R[i][j]], query(Ask[R[i][j]])); &#125; rep(j, 0, SZ(L[i])) &#123; inc(Ans[L[i][j]], -query(Ask[L[i][j]])); &#125; &#125; rep(i, 0, M) &#123; printf("%d\n", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>差分</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2017」BZOJ 4890 城市]]></title>
    <url>%2FBZOJ-4890%2F</url>
    <content type="text"><![CDATA[在一棵无向树上修改一条边的起点终点，使得新图依然是树，并最小化新树的直径。 N\leq 5000 分析 由于最多只有 5000-1 条边，因此可以直接枚举要删除的边。 如果可以在 O(N) 的时间求出修改该边后的直径，就可以在 O(N^2) 的时间求解本题， 3 s 的时间是可以接受的。 删去一条边后，原树被拆成了两棵新树 A,B ，那么新直径的端点位置有两类情况： 两个端点在同一棵树中 一个端点在 A 一个端点在 B 对于第一类，直接 O(N) 求树的直径，链的长度分别为 d1,d2 ，但是对于第二种，其实就是分别在两棵树中找到「最长距离最小」的点，并将它们连接，那么这条链的长度为 r1+r2+w ，其中 r 为树中的距离， w 为修改边的变长。 因此答案为 \min{\max{d1,d2,r1+r2+w}} 。 求 r 只需要从任意一点遍历该树，距离某点最远距离的点要么为根节点，要么为其子树中某点，所以树形dp就能得到这个「最小的最长距离」。 还可以强力剪枝（当然上面的做法已经可以AC了）。 易得如果修改的边不在原树的直径上，是没有意义的（因为新树的中该直径依然存在），因此先得到原树的直径，再去枚举直径上的边完成前面的操作，会大大减少枚举量。实测由8876ms降至777ms。 复杂度依然是 O(N^2) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 5000 + 5;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;int Nxt[MAXN], Vis[MAXN], F[MAXN], G[MAXN];int dis, rad;int Dis[MAXN], Lst[MAXN], W[MAXN];void dfs(int x) &#123; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(!Dis[v]) &#123; Dis[v] = Dis[x] + E[i].w; Lst[v] = x; W[v] = E[i].w; dfs(v); &#125; &#125;&#125;void getD(int x) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v]) &#123; continue; &#125; getD(v); int d = F[v] + E[i].w; if (d &gt; F[x]) &#123; G[x] = F[x]; F[x] = d; Nxt[x] = v; &#125; else &#123; chkMax(G[x], d); &#125; &#125; chkMax(dis, F[x] + G[x]);&#125;void getR(int x, int r) &#123; chkMin(rad, std::max(r, F[x])); Vis[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v]) &#123; if (v == Nxt[x]) &#123; getR(v, std::max(G[x] + E[i].w, r + E[i].w)); &#125; else &#123; getR(v, std::max(F[x] + E[i].w, r + E[i].w)); &#125; &#125; &#125;&#125;void clear() &#123; dis = 0, rad = INT_MAX; memset(Vis, 0, sizeof Vis); memset(F, 0, sizeof F); memset(G, 0, sizeof G);&#125;int res = INT_MAX;void cal(int u, int v, int w) &#123; int d1, d2, r1, r2; clear(); Vis[v] = 1; dis = 0; getD(u); d1 = dis; dis = 0; getD(v); d2 = dis; dis = Vis[v] = 0; getR(u, 0); r1 = rad; rad = INT_MAX; getR(v, 0); r2 = rad; rad = INT_MAX; chkMin(res, std::max(r1 + r2 + w, std::max(d1, d2)));&#125;int main() &#123; int u, v, w, N; scanf("%d", &amp;N); rep(i, 1, N) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); addEdge(v, u, w); &#125; int d = 0, st, st2; dfs(1); rep(i, 2, N + 1) &#123; if(chkMax(d, Dis[i])) &#123; st = i; &#125; &#125; memset(Dis, 0, sizeof Dis); dfs(st); d = 0; rep(i, 2, N + 1) &#123; if(chkMax(d, Dis[i])) &#123; st2 = i; &#125; &#125; for(int i = st2; i != st; i = Lst[i]) &#123; cal(i, Lst[i], W[i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Baltic2004」BZOJ 1367 sequence]]></title>
    <url>%2FBZOJ-1367%2F</url>
    <content type="text"><![CDATA[对于序列 A_1,A_2,\cdots,A_n ，构造递增序列 B_1,B_2,\cdots,B_n ，使得 R=\sum{|A_i-B_i|} 最小。求 R 的最小值。 n\leq 10^6,A_i\leq 2\times 10^9 。 分析 这是2005年黄清河同学的集训队论文《左偏树的特点及其应用》中的例题。 那我就简化一下他的分析求解，给出基本思路和解法。 首先， A 有两种极端情况： A_1\leq A_2\leq \cdots\leq A_n ，此时 B_i = A_i 时 R 最小（也可以理解为 B_i 取 [A_i,A_i] 的中位数）； A_1 \geq A_2\geq \cdots \geq A_n ，此时 B_1,\cdots,B_n 取 [A_1,A_n] 的中位数时 R 最小； 而如果 A 不是单调的，也可以由若干个小的单调区间组成。 那么把 A 分成 M 个区间，每个区间对应一个解 W_i ， W_i 为 A 在该区间的中位数。 （最优性通过归纳法证明，详情可以自行翻阅论文） 那么当 A_1,\cdots,A_k 已经得到最优解 W_1,\cdots,W_p ，那么新插入 A_{k+1} ，先将 A_{k+1} 视作单独的一个区间，则该区间的解 W_{p+1}=A_{k+1} 。 但是要求 B 是单调递增的，因此若 W_{p+1} &lt; W_{p} ，则需要将这两个解合并，直到 W 满足单调性为止。 而新区间的最优解（即 W_p 和 W_{p+1} 合并后），应该为大区间的中位数。那如何快速得到新区间的中位数呐？ 第一种想法就是每个区间建一棵平衡树，启发式合并两棵树，并查询第 K （树大小一半）大得到新的中位数。复杂度 O(n\log{n}) 。 但是我们发现这样做复杂度较高，为 O(n^2\log{n}) ，需要更快速的方法。 考虑中位数的定义，中位数的值为 A[\lfloor\frac{n}{2}\rfloor+1] 。也就是说集合中有恰好 \lfloor\frac{n}{2}\rfloor 个数小于它。 那么构造一个大根堆，包含集合中较小的一半元素，堆顶就是中位数。 合并两个堆，如果堆中元素个数超过新区间大小的一半，就将多余的全部弹出，则新的堆顶就是新区间的中位数。 通过左偏树实现大根堆，合并的复杂度为 O(\log{n}) 。 需要注意的是，由于要求 B 是单调递增而不是不递减的，因此需要将 A_i 预处理为 A_i-i 。 如此总复杂度降至 O(n\log{n}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1e6 + 5;struct Leftist &#123; struct Node &#123; int key, sz; int lc, rc, dis; bool operator &lt; (const Node &amp;x) const &#123; return key &gt; x.key; &#125; &#125; A[MAXN]; int tot; int merge(int x, int y) &#123; if(!x || !y) &#123; return x + y; &#125; if(A[y] &lt; A[x]) &#123; std::swap(x, y); &#125; Node &amp;a = A[x]; a.rc = merge(a.rc, y); a.sz = A[a.lc].sz + A[a.rc].sz + 1; if(A[a.rc].dis &gt; A[a.lc].dis) &#123; std::swap(a.lc, a.rc); &#125; a.dis = A[a.rc].dis + 1; return x; &#125; int push(int x) &#123; A[++tot] = (Node) &#123;x, 1, 0, 0, 0&#125;; return tot; &#125; int size(int x) &#123; return A[x].sz; &#125; int top(int x) &#123; return A[x].key; &#125; int pop(int x) &#123; return merge(A[x].lc, A[x].rc); &#125;&#125; T;int A[MAXN], Rt[MAXN], L[MAXN], R[MAXN];int main() &#123; int N; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); A[i] -= i; &#125; int cnt = 0; rep(i, 1, N + 1) &#123; Rt[++cnt] = T.push(A[i]); L[cnt] = R[cnt] = i; while(cnt &gt; 1 &amp;&amp; T.top(Rt[cnt]) &lt; T.top(Rt[cnt - 1])) &#123; --cnt; Rt[cnt] = T.merge(Rt[cnt], Rt[cnt + 1]); R[cnt] = R[cnt + 1]; while(T.size(Rt[cnt]) * 2 &gt; R[cnt] - L[cnt] + 2) &#123; Rt[cnt] = T.pop(Rt[cnt]); &#125; &#125; &#125; ll ans = 0; rep(i, 1, cnt + 1) &#123; int x = T.top(Rt[i]); rep(j, L[i], R[i] + 1) &#123; ans += abs(x - A[j]); &#125; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>左偏树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1455 罗马游戏]]></title>
    <url>%2FBZOJ-1455%2F</url>
    <content type="text"><![CDATA[有 N 个集合，每个集合中包含一个元素 A_i 。有 M 个操作：将 x,y 所在的集合合并；查询并删去 x 所在集合中元素的最小值。 N\leq 1000000, M\leq 100000 分析 如果没有合并集合的操作，直接使用stl的priority_queue即可完成所有查询删除的操作。 支持合并的堆的有不少，左偏树（leftist tree）就是其中之一。 左偏树合并复杂度为 O(\log{n_1}+\log{n_2})=O(\log{n}) ，查询堆顶复杂度 O(1) ，删除堆顶复杂度 O(\log{n}) ，插入新节点复杂度 O(\log{n}) ，修改节点权值复杂度 O(n) 。 用并查集维护点所在的集合，左偏树维护查询/删除与合并。复杂度 O(M(\alpha(N)+\log{N})) 。 当然，pb_ds的priority_queue是支持合并的，默认是配对堆（pairing heap），各项操作的复杂度均不差于左偏树，修改的复杂度更低，为 O(\log{n}) 。 但是由于本题中没有涉及decrease key的操作，因此复杂度相同。 不过开N个priority_queue似乎空间占用较大，直接MLE了。 我猜N是100w的原因的其中之一就是为了卡pbds，而配对堆的空间复杂度本就高于左偏树。 因此还是乖乖写左偏树吧。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1000000 + 5;struct Union &#123; int Anc[MAXN]; void init(int n) &#123; rep(i, 1, n + 1) &#123; Anc[i] = i; &#125; &#125; int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]); &#125;&#125; S;struct Leftist &#123; struct Node &#123; int key; int lc, rc, dis; Node (): key(0), lc(0), rc(0), dis(0) &#123;&#125; bool operator &lt; (const Node &amp;x) const &#123; return key &lt; x.key; &#125; &#125; A[MAXN]; void init(int n) &#123; rep(i, 1, n + 1) &#123; scanf("%d", &amp;A[i].key); &#125; A[0].dis = -1; &#125; int merge(int x, int y) &#123; if(!x || !y) &#123; return x + y; &#125; if(A[y] &lt; A[x]) &#123; std::swap(x, y); &#125; Node &amp;a = A[x]; a.rc = merge(a.rc, y); if(A[a.rc].dis &gt; A[a.lc].dis) &#123; std::swap(a.lc, a.rc); &#125; a.dis = A[a.rc].dis + 1; return x; &#125; int get_min(int x) &#123; return A[x].key; &#125; int delete_min(int x) &#123; A[x].key = -1; return merge(A[x].lc, A[x].rc); &#125;&#125; T;int main() &#123; int N, M, x, y; char opt[10]; scanf("%d", &amp;N); T.init(N); S.init(N); scanf("%d", &amp;M); while(M--) &#123; scanf("%s", opt); if(opt[0] == 'M') &#123; scanf("%d%d", &amp;x, &amp;y); if(T.get_min(x) == -1 || T.get_min(y) == -1) &#123; continue; &#125; x = S.findAnc(x), y = S.findAnc(y); if(x != y) &#123; int bl = T.merge(x, y); S.Anc[x] = S.Anc[y] = bl; &#125; &#125; else &#123; scanf("%d", &amp;x); if(T.get_min(x) == -1) &#123; puts("0"); &#125; else &#123; x = S.findAnc(x); printf("%d\n", T.get_min(x)); int bl = T.delete_min(x); S.Anc[x] = S.Anc[bl] = bl; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>左偏树</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Baltic 2003」BZOJ 1369 Gem]]></title>
    <url>%2FBZOJ-1369%2F</url>
    <content type="text"><![CDATA[在树上给所有节点标上正整数权值，要求相连的节点权值不同，求权值和的最小值。 N\leq 10000 分析 如果确定了权值的范围，那么这就是个很简单的树形DP。 类似于SDOI2015R2D2T2，树上权值最大为 log_2{N} ，在1e4U群里问了一下原理，但是没有结果... 不过可以想象这个值一定很小，不会超过20 。实际上不超过14 。 那么 F(x,y) 表示以 x 为根的子树中当 x 的权值为 y 时的最小权值和。 则转移方程为 F(x,y) = \sum{min(F(s,i)(i\not= y))}+y （ s 为 x 的儿子）。 复杂度 O(N\log^2{N})​ 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int F[15][MAXN];void dfs(int x, int fa) &#123; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); rep(i, 1, 15) &#123; int mn = INT_MAX; rep(j, 1, 15) &#123; if(i != j) &#123; chkMin(mn, F[j][v]); &#125; &#125; F[i][x] += mn; &#125; &#125; &#125; rep(i, 1, 15) &#123; F[i][x] += i; &#125;&#125;int main() &#123; int u, v; scanf("%d", &amp;N); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(1, -1); int res = INT_MAX; rep(i, 1, 15) &#123; chkMin(res, F[i][1]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2010 Dec」BZOJ 2097 Exercise]]></title>
    <url>%2FBZOJ-2097%2F</url>
    <content type="text"><![CDATA[边权为 1 的树上删去 S 条边，求剩下森林中所有树的直径的最大值的最小值。 N\leq 100000 。 分析 求最大值的最小值，这让我们想到了贪心。 二分确定当前直径的最大值 L ，再通过贪心去删边，检查是否删去超过 S 条边。 记 f(i) 为以 x 为根的子树中经过 x 的最长链，对 f(i) 进行排序。 删去最长链，直到当前最长链和次长链 f(i)+f(i-1)\leq L 。 那么 f(x) 的递推关系式为 f(x) = \max{f(i)} ，显然 f(i) \leq L 。 复杂度 O(N\log^2{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Edge &#123;int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M;int H[MAXN], cntE;void addEdge(int u, int v) &#123;E[++cntE] = (Edge) &#123;v, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, H[v]&#125;;H[v] = cntE;&#125;int F[MAXN], A[MAXN], total;void dfs(int x, int fa, int limit) &#123;int cnt = 0;for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; dfs(v, x, limit); &#125;&#125;for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; A[++cnt] = F[v] + 1; &#125;&#125;std::sort(A, A + cnt + 1);while(cnt &amp;&amp; A[cnt] + A[cnt - 1] &gt; limit) &#123; --cnt, ++total;&#125;F[x] = A[cnt];&#125;int check(int limit) &#123;total = 0;dfs(1, -1, limit);return total &lt;= M;&#125;int main() &#123;int u, v;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v);&#125;int l = 1, r = N, ans = N;while(l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if(check(m)) &#123; ans = m; r = m - 1; &#125; else &#123; l = m + 1; &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2009」BZOJ 1304 叶子的颜色]]></title>
    <url>%2FBZOJ-1304%2F</url>
    <content type="text"><![CDATA[树上有 N 个节点，其中 1-M 是叶子节点。每个节点可以被染成黑、白，或者不染色。指定某个不是叶子节点的节点作为根，要求给若干个节点染色后使得每个叶子节点到根的路径中第一个被染色节点的颜色为 C_i 。求需要染色的节点的最少个数。 N\leq 1000 。 分析 假设根已经存在，那么这个树形DP很简单。用 F[x][0/1] 表示染完以 x 为根的子树且将 x 染成 0/1 所需要的染色的最少节点数。 则： F[x][0] = 1 +\sum{\min(F[son][0]-1,F[son][1])} F[x][1] = 1 + \sum{\min(F[son][1]-1,F[son][0])} F[x][!C_x] = +\infty (x\leq M) 但是这道题没有指定根，则继续考虑不同根对染色节点数的影响。 假设将根节点 R 修改为 R 的某个儿子 S （移动了一条边），由于 S 和 R 的颜色必定不同（否则原先就不需要染 S ) ，因此换根后答案不变。 因此根可以随意移动，也就是说随意选择一个非叶子节点为根，答案均不变。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125;int N, M, C[MAXN];int F[2][MAXN];void dfs(int x, int fa) &#123; F[0][x] = F[1][x] = 1; if(x &lt;= M) &#123; F[C[x]^1][x] = INT_MAX; &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; dfs(v, x); F[1][x] += std::min(F[1][v] - 1, F[0][v]); F[0][x] += std::min(F[0][v] - 1, F[1][v]); &#125; &#125;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); rep(i, 1, M + 1) &#123; scanf("%d", &amp;C[i]); &#125; rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(M + 1, -1); printf("%d\n", std::min(F[0][M + 1], F[1][M + 1])); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3910 火车]]></title>
    <url>%2FBZOJ-3910%2F</url>
    <content type="text"><![CDATA[N 个节点的树上，指定一条共 M 个节点的路径，每次会前往剩余节点中没有经过的最靠前的节点。求经过的总边数。 N\leq 500000 ,M\leq 400000 分析 根据 dis(u,v) = depth(u) + depth(v) - 2 * depth(lca(u,v )) ，可以在 O(\log{N}) 的时间求得两点间的距离。 现在的问题是如何快速判定某个点是否已经经过。 易得 u\rightarrow v 的路径为 u\rightarrow lca(u,v)\rightarrow v ，那么一个简单的思路就是直接更新这两条链上所有节点的状态，实现方法为树链剖分后用树状数组做区间覆盖，复杂度为 O(N+M\log^{2}{N}) ，过不了。 那么还有一个想法就是缩点，将已经经过的联通的所有点缩成一个点，可以通过并查集实现。 每次合并联通块的个数必会减一，所以最多进行 N 次合并。 复杂度 O(N\alpha(N)+M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 500000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M, R;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Depth[MAXN], Par[20][MAXN];void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Par[0][x] = fa; rep(i, 1, 20) &#123; Par[i][x] = Par[i - 1][Par[i - 1][x]]; &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); &#125; &#125;&#125;int queryLCA(int u, int v) &#123; if (Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; rof(i, 20, 0) &#123; if ((Depth[v] - Depth[u]) &gt;&gt; i &amp; 1) &#123; v = Par[i][v]; &#125; &#125; if (u == v) &#123; return u; &#125; rof(i, 20, 0) &#123; if (Par[i][u] != Par[i][v]) &#123; u = Par[i][u]; v = Par[i][v]; &#125; &#125; return Par[0][u];&#125;int Anc[MAXN], Vis[MAXN];void init() &#123; rep(i, 1, N + 1) &#123; Anc[i] = i; &#125;&#125;int findAnc(int x) &#123; return x == Anc[x] ? x : Anc[x] = findAnc(Anc[x]);&#125;void update(int u, int v) &#123; while(Depth[u] &gt; Depth[v]) &#123; Vis[u] = 1; Anc[u] = Par[0][u]; u = findAnc(Par[0][u]); &#125;&#125;int main() &#123; int u, v, w; ll ans = 0; scanf("%d%d%d", &amp;N, &amp;M, &amp;R); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; init(); dfs(R, 0); u = R; rep(i, 0, M) &#123; scanf("%d", &amp;v); if (Vis[v]) &#123; continue; &#125; int lca = queryLCA(u, v); ans += Depth[u] + Depth[v] - 2 * Depth[lca]; update(u, lca); update(v, lca); u = v; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「PA 2014」BZOJ 3712 Fiolki]]></title>
    <url>%2FBZOJ-3712%2F</url>
    <content type="text"><![CDATA[N 个瓶子里起初各有 G_i 克第 i 种物质。共 M 步操作，第 i 步会将第 A_i 瓶中物质全部倒入第 B_i 瓶中。已知共有 K 组反应，瓶中每一克 C_i 和 D_i 可以转化为两克沉淀，沉淀不再参与反应。瓶中物质若可以进行多种反应，按照反应出现的前后次序进行。求最后剩下多少沉淀。 0\leq M&lt; N\leq 200000,0\leq K\leq 500000,1\leq G_i \leq 10^9 。 分析 这种合并两个瓶子内物质的操作，可以用树形结构来表示。 将初始状态作为叶子节点，若将 a 倒入 b ，则建立一个新点 x 作为 a,b 的父亲，若再将 b 倒入 c ，则再建立新点 y 作为 x,c 的父亲，依次类推，将 a 倒入 b 转化为建立新点作为 a,b 祖先的父亲。 那么会形成一个森林，而根据瓶中物质的初始状态，易得物质 x,y 反应只会出现在节点 lca(x,y) 处。 那么剩下需要处理的就是反应顺序的问题了。 根据建图的方法，若 depth(x) &lt; depth(y) ，则 x 一定先于 y 发生，或者 x,y 中的物质交集为空；如果 depth(x)=depth(y) ，则根据给定顺序进行反应。如此就确定了所有反应发生的顺序。 用倍增求LCA，根据 depth(lca(C_i,D_i)) 排序，复杂度 O(N\log{N}+K\log{K}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = (200000 + 5) &lt;&lt; 1;const int MAXK = 500000 + 5;int N, M, K;int G[MAXN];struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Anc[MAXN];int Depth[MAXN];int Fa[20][MAXN];void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Fa[0][x] = fa; rep(i, 1, 20) &#123; Fa[i][x] = Fa[i - 1][Fa[i - 1][x]]; &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; dfs(E[i].v, x); &#125;&#125;int queryLCA(int u, int v) &#123; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; rep(i, 0, 20) &#123; if((Depth[v] - Depth[u]) &gt;&gt; i &amp; 1) &#123; v = Fa[i][v]; &#125; &#125; if(u == v) &#123; return v; &#125; rof(i, 20, 0) &#123; if(Fa[i][v] != Fa[i][u]) &#123; u = Fa[i][u]; v = Fa[i][v]; &#125; &#125; return Fa[0][u];&#125;struct Node &#123; int u, v, dep, ord; bool operator &lt; (const Node &amp;x) const &#123; return dep == x.dep ? ord &lt; x.ord : dep &gt; x.dep; &#125;&#125; P[MAXK];int main() &#123; int u, v; scanf("%d%d%d", &amp;N, &amp;M, &amp;K); rep(i, 1, N + 1) &#123; scanf("%d", &amp;G[i]); Anc[i] = i; &#125; int cntP = N + 1; rep(i, 1, M + 1) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(N + i, Anc[u]); addEdge(N + i, Anc[v]); Anc[v] = N + i; &#125; rof(i, N + M + 1, N + 1) &#123; if(!Depth[i]) &#123; dfs(i, 0); &#125; &#125; cntE = 0; rep(i, 0, K) &#123; scanf("%d%d", &amp;u, &amp;v); int lca = queryLCA(u, v); if(lca) &#123; P[cntE++] = (Node) &#123;u, v, Depth[lca], i&#125;; &#125; &#125; std::sort(P, P + cntE); ll ans = 0; rep(i, 0, cntE) &#123; ll add = std::min(G[P[i].u], G[P[i].v]); G[P[i].u] -= add; G[P[i].v] -= add; ans += add; &#125; printf("%lld\n", ans &lt;&lt; 1); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2010 Hol」BZOJ 1776 cowpol 奶牛政坛]]></title>
    <url>%2FBZOJ-1776%2F</url>
    <content type="text"><![CDATA[在 N 个节点的有根树 T 中，节点被分成 K 。求每一组组内距离最远的两个节点的距离值。 N\leq 200000,K\leq N/2 分析 可以证明集合中距离最远的点对的其中之一一定是集合中深度最大的点。 证明如下： depth(x) 表示节点 x 的深度， dis(u,v) 表示节点 u,v 的距离， lca(u,v) 表示节点 u,v 的最近公共祖先。 利用反证法。假设集合中节点 u,v 均不是深度最大的节点，且 dis(u,v) 为集合中点对距离的最大值。 设该集合中深度最大的节点为 x 。 则有 dis(u,v)=depth(u)+depth(v)-2 * depth(lca(u,v)) ， dis(x,v)=depth(x)+depth(v)-2 * depth(lca(x,v)) 。 由于 dis(u,v)&gt;dis(x,v) ，则 depth(u)-2 * depth(lca(u,v))&gt;depth(x)-2 * depth(lca(x,v)) ；又因为 depth(x)&gt;depth(u) ，则 depth(lca(u,v)) &lt; depth(lca(x,v)) 。 那么 x 的位置有两个可能， x 在 v 的子树中； x 不在 v 的子树中。 若是前者，则 dis(u,x) &gt; dis(u,v) 是毫无疑问的；若是后者，若 x 不在 u 的子树中，则一定存在 lca(u,v)=lca(x,u) ，显然 depth(lca(u,v)) &lt; depth(lca(x,v)) 不成立，若 x 在 u 的子树中，则又转化为前者。 因此若 dis(u,v) 为集合中距离最大的点对，其中之一一定是集合内深度最大的节点。 那么求距离的最大值，只需要求集合内所有节点和深度最大的节点之间的距离，取最大值即可。 利用在线算法求LCA，复杂度 O(N\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 200000 + 5;const int MAXM = 20;int N, K;std::vector&lt;int&gt; Son[MAXN], V[MAXN];int Depth[MAXN], Fir[MAXN];int Id[MAXN &lt;&lt; 1], cntI;void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Id[++cntI] = x; Fir[x] = cntI; rep(i, 0, SZ(Son[x])) &#123; dfs(Son[x][i], x); Id[++cntI] = x; &#125;&#125;int F[MAXM][MAXN &lt;&lt; 1];int Log[MAXN &lt;&lt; 1], Pow[MAXM];void buildST(int N) &#123; int k = log2(N); Pow[0] = 1; rep(i, 1, k + 1) &#123; Pow[i] = Pow[i - 1] &lt;&lt; 1; &#125; rep(i, 2, N + 1) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; rep(i, 1, N + 1) &#123; F[0][i] = Id[i]; &#125; rep(j, 0, k) &#123; rof(i, N + 1, 1) &#123; if (i + Pow[j] &lt;= N) &#123; if (Depth[F[j][i]] &lt; Depth[F[j][i + Pow[j]]]) &#123; F[j + 1][i] = F[j][i]; &#125; else &#123; F[j + 1][i] = F[j][i + Pow[j]]; &#125; &#125; &#125; &#125;&#125;int queryLCA(int l, int r) &#123; if (l &gt; r) &#123; std::swap(l, r); &#125; int k = Log[r - l + 1]; int &amp;a = F[k][l], &amp;b = F[k][r - Pow[k] + 1]; return Depth[a] &lt; Depth[b] ? a : b;&#125;int main() &#123; int a, f, R; scanf("%d%d", &amp;N, &amp;K); rep(i, 1, N + 1) &#123; scanf("%d%d", &amp;a, &amp;f); V[a].push_back(i); Son[f].push_back(i); if (f == 0) &#123; R = i; &#125; &#125; dfs(R, 0); buildST(cntI); rep(i, 1, K + 1) &#123; int max_dep = 0, id = 0; rep(j, 0, SZ(V[i])) &#123; if (chkMax(max_dep, Depth[V[i][j]])) &#123; id = V[i][j]; &#125; &#125; int max_dis = 0; rep(j, 0, SZ(V[i])) &#123; if (V[i][j] != id) &#123; int dep = Depth[queryLCA(Fir[V[i][j]], Fir[id])]; chkMax(max_dis, Depth[V[i][j]] + Depth[id] - dep * 2); &#125; &#125; printf("%d\n", max_dis); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SHOI2010」BZOJ 2521 最小生成树]]></title>
    <url>%2FBZOJ-2521%2F</url>
    <content type="text"><![CDATA[N 点 M 边的无向图 G 中，每次可以使一条边边权+1。求最少进行多少次操作可以使得第 id 条边一定出现在 G 的最小生成树中。 1\leq N\leq 500,1\leq M\leq 800 分析 首先题目中的“除了指定一条边，其他所有边边权-1”的操作本质上就是使该边边权+1，其他边不变。 根据Kruskal的流程，若某条边权为 x 的边 e(u,v) 出现在MST中，就说明加完所有边权小于等于它的边后， u,v 两点不联通。 在这道题中，边权小于等于 x 的边构成了子图 T ，为了保证 e 一定在MST上，必须使得 T 中 u,v 不联通，而可以进行的操作就是增加边权。 若增加后某边的边权超过 x ，这条边就相当于从 T 中被删去。也就是说删去一条边权为 w 的边，只需要将其增加至 x+1 ，即增加了 x+1-w 次。 既然是破坏 T 中两点的联通性，就想到割。最小割即为将破坏源汇点联通性所需要的最小代价。第 i 条边被割的代价为 x+1-w_i 。 那么把 u 做源点， v 做汇点，建图，图的边权为 x+1-w_i(w_i\leq x) ，求得的最小割的值即为答案。 注意加边的时候需要加双向边，因为原图是无向图。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 500 + 5;const int MAXM = 800 * 2 + 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int N, M, S, T;int H[MAXN], cntE;int Cur[MAXN], Lv[MAXN], Dis[MAXN], tim, ffffc;int Flow[MAXM &lt;&lt; 1];void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || maxf == 0) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof Cur); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof Flow); &#125; return F;&#125;std::vector&lt;std::pair&lt;int, pii&gt; &gt; V;int main() &#123; int u, v, w, id; scanf("%d%d%d", &amp;N, &amp;M, &amp;id); memset(H, -1, sizeof H); cntE = -1; --id; rep(i, 0, M) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); V.push_back(std::make_pair(w, std::make_pair(u, v))); &#125; S = V[id].second.first, T = V[id].second.second; rep(i, 0, M) &#123; if(V[i].first &lt;= V[id].first &amp; i != id) &#123; addEdge(V[i].second.first, V[i].second.second, V[id].first - V[i].first + 1); addEdge(V[i].second.second, V[i].second.first, V[id].first - V[i].first + 1); &#125; &#125; printf("%d\n", dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3031 理科男]]></title>
    <url>%2FBZOJ-3031%2F</url>
    <content type="text"><![CDATA[求 \frac{A}{B} 在 K 进制下的混循环位数以及循环节长度。 A,B,K\leq 10^{12} 分析 根据小学奥数的相关知识，如果一个混循环小数的混循环部分长度为 M ，循环节长度为 N ，那么转化成分数，分母为 10^M(10^N-1) 。 这是在十进制下的情况，在 K 进制下分母为 K^M(K^N-1) 。 那么 \frac{A}{B}=\frac{C}{K^M(K^N-1)} ，那么 B 可以写成TeX parse error: Double subscripts: use braces to clarify ，而 TeX parse error: Double subscripts: use braces to clarify ，一定存在某个 i 满足 p_i=M\times q_i 。 那么每次使 B = B / (B, K) ，直到 (B,K)=1 ，进行的次数为 max{\lceil p_i/q_i\rceil}=M ，即为混循环小数的位数。 那么剩下的问题就是如何求 N 。 令 a_i 为第 i-1 次除 B 的余数，则 a_1=A ；设 r_i 为第 i 位小数。 由于求 N 时的终止条件为 (B,K)=1 ，也就是说新的 A / B 在 K 进制下一定是个纯循环小数。 根据模运算的周期性，当 r_1=r_p 时， r[1,p-1] 就构成了循环节，其长度为 p 。 若 r_1=r_p 则一定存在 a_1=a_p 。由于TeX parse error: Double subscripts: use braces to clarify， 因此 TeX parse error: Double subscripts: use braces to clarify 。 而 a_1\equiv a_p\pmod{B} ，代入得 a_1\equiv a_1\times K^P\pmod{B} ，即 K^p\equiv 1\pmod{B} 。 N 转化为求 K 模 B 的阶的问题。 根据欧拉定理， K^{\varphi(B)}\equiv 1\pmod{B} ，即 \varphi(B) 一定为循环节的长度，但是不一定为循环节的最短长度。 若对 B 分解质因数得 B=\prod{a_i^{p_i}} ，则 \varphi(B)=\prod{(1-\frac{1}{a_i})} ，通过试除法或者Pollard-Rho+Miller-Rabin分解质因数可以求得。 那么最短循环节的长度一定为 \varphi(B) 的因数，Pollard-Rho+Miller-Rabin分解质因数后，依次通过快速幂检验 K^{\frac{\varphi{B}}{a}}\equiv 1\pmod{B} 是否成立，即可求得长度的最小值。 复杂度分析 通过gcd求混循环节长度的复杂度为 O(\log{B}) ，Pollard-Rho+Miller-Rabin的复杂度为 O(B^{\frac{1}{4}}) ，快速幂复杂度为 O(\log{\varphi(B)}) ，因此复杂度为 O(\log{B}+B^{\frac{1}{4}}+\log^2{\varphi(B)}) ，即 O(B^{\frac{1}{4}}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;ll mul(ll x, ll t, ll p) &#123; ll res = 0; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; res = (res + x) % p; &#125; x = (x + x) % p; &#125; return res;&#125;ll pow(ll x, ll t, ll p) &#123; ll res = 1; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; res = mul(res, x, p); &#125; x = mul(x, x, p); &#125; return res;&#125;bool Miller_Rabin(ll x) &#123; static ll Prime[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41&#125;; if (x == 2 || x == 3) &#123; return true; &#125; if (x &lt; 2 || (x % 6 != 1 &amp;&amp; x % 6 != 5)) &#123; return false; &#125; ll s = x - 1; while (!(s &amp; 1)) &#123; s &gt;&gt;= 1; &#125; rep(i, 0, 13) &#123; if (x == Prime[i]) &#123; return true; &#125; ll t = s, m = pow(Prime[i], s, x); while (t != x - 1 &amp;&amp; m != 1 &amp;&amp; m != x - 1) &#123; m = mul(m, m, x); t &lt;&lt;= 1; &#125; if (!(t &amp; 1) &amp;&amp; m != x - 1) &#123; return false; &#125; &#125; return true;&#125;ll Factor[1000];int cntP;ll gcd(ll a, ll b) &#123; while (b ^= a ^= b ^= a %= b); return a;&#125;ll Pollard_Rho(ll n, ll c) &#123; ll i = 1, k = 2; ll x = rand() % (n - 1) + 1, y = x; while (1) &#123; i++; x = (mul(x, x, n) + c) % n; ll d = gcd(((y - x) + n) % n, n) % n; if (d &gt; 1 &amp;&amp; d &lt; n) &#123; return d; &#125; if (y == x) &#123; return n; &#125; if (i == k) &#123; y = x; k &lt;&lt;= 1; &#125; &#125;&#125;void findFac(ll n, ll c) &#123; if (n == 1) &#123; return; &#125; if (Miller_Rabin(n)) &#123; Factor[cntP++] = n; return; &#125; ll p = n; while (p &gt;= n) &#123; p = Pollard_Rho(n, c--); &#125; findFac(n / p, c); findFac(p, c);&#125;ll getPhi(ll x) &#123; cntP = 0; findFac(x, 120); std::sort(Factor, Factor + cntP); cntP = std::unique(Factor, Factor + cntP) - Factor; double ans = x; rep(i, 0, cntP) &#123; ans *= 1 - (1.0 / Factor[i]); &#125; return ans;&#125;ll cal(ll A, ll B) &#123; ll x = getPhi(B), y = x; cntP = 0; findFac(x, 120); std::sort(Factor, Factor + cntP); cntP = std::unique(Factor, Factor + cntP) - Factor; rep(j, 0, cntP) &#123; ll &amp;i = Factor[j]; while (y % i == 0 &amp;&amp; pow(A, y / i, B) == 1) &#123; y /= i; &#125; &#125; return y;&#125;int main() &#123; ll A, B, K, T; scanf("%lld", &amp;T); while (T--) &#123; scanf("%lld%lld%lld", &amp;A, &amp;B, &amp;K); ll _gcd = gcd(A, B); A /= _gcd, B /= _gcd; int a = 0; while (true) &#123; ll _gcd = gcd(B, K); if (_gcd == 1) &#123; break; &#125; B /= _gcd; ++a; &#125; if (B == 1) &#123; printf("%d %d\n", a, 0); &#125; else &#123; printf("%d %lld\n", a, cal(K, B)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3033 太鼓达人]]></title>
    <url>%2FBZOJ-3033%2F</url>
    <content type="text"><![CDATA[给定字串长度 K ，需要构造一个长度为 M 的01串（环状），使得所有长度为 K 的子串互不相同。求 M 的最大值以及对应的字典序最小串。 K\leq 11 分析 将 k 位二进制都看成点，图中一共有 2^k 个不同的点。 每一个点可以删去第一位并在最后填充 0 或 1 转移到其它点，所有所有点的出度入度都是 2 。 这个有向图所有点出入度相等，因此存在欧拉回路，即这是一个欧拉图。 那么 M 即在该图中的回路长度的最大值，根据欧拉回路的性质， M=2^k 。 由于要求串的字典序最小，因此前 k 位皆为 0 ，在此基础上爆搜即可得到整个串的排序。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// Copyright (C) 2018 SNqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chNMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chNMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = (1 &lt;&lt; 11) + 5;int N, T;int Ans[MAXN];bool Vis[MAXN];bool dfs(int x, int y) &#123; if(Vis[x]) &#123; return false; &#125; if(y == T) &#123; return true; &#125; Ans[y] = x &amp; 1; Vis[x] = 1; if(dfs((x &lt;&lt; 1) &amp; (T - 1), y + 1) || dfs((x &lt;&lt; 1 | 1) &amp; (T - 1), y + 1)) &#123; return true; &#125; Vis[x] = 0; return false;&#125;int main() &#123; scanf("%d", &amp;N); T = 1 &lt;&lt; N; printf("%d ", T); dfs(0, 1); rep(i, 1, N) &#123; printf("0"); &#125; rep(i, 1, T - N + 2) &#123; printf("%d", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉回路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3032 七夕祭]]></title>
    <url>%2FBZOJ-3032%2F</url>
    <content type="text"><![CDATA[N\times M 的黑白矩阵中某些格子是黑色的。每次可以交换相邻两个格子的颜色，尽可能使得行与行/列与列之间的黑色格子数量相同，如果可行 ，输出最少交换次数。 1\leq N,&nbsp;M\leq 100000 。 分析 首先如果 T 不是 N,M 的倍数，那么肯定不能均分，如此可以判断输出 both 还是什么其它的情况。 可以发现行与列颜色个数相同的要求是相互独立的，可以通过左右交互使得列相同，上下交换使得行相同。 令 a_i 为第 i 行已有的黑色格子个数， x_i 为第 i 行和第 i+1 行交换的格子个数，那么能得到以下等式： \begin{equation} x_1=a_1+x_n-p\ x_2=a_2+x_1-p\ \cdots\ x_n=a_n+x_{n-1}-p\ \end{equation} 那么交换的总次数为 \sum{|x_i|} ，代入上式得 \sum{|x_i|}=\sum|a_i+x_{i-1}-p| 。 再将 x_i 的表达式代入 x_{i+1} 可得： \begin{equation} x_1=a_1+x_n-p\ x_2=a_2+(a_1+x_n-p)-p=a_1+a_2+x_n-2p\ \cdots\ x_n=a_1+a_2+\cdots+a_n+x_n-np \end{equation} 令 s_i = \sum\limits_{j=1}^{i}{a_j}-ip ，即 {a_i-p} 的前缀和，化简为 \sum{|x_i|}=|s_i+x_n| 。 根据绝对值不等式， x_n 为 s[1...n] 的中位数的相反数时，原式取最小值。 对于列同理。 具体即先统计每行/列的黑格子个数，前缀和后通过 std::nth_element() O(N) 实现。 复杂度 O(N) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;ll N, M, Q;int Col[MAXN], Row[MAXN];ll cal(int A[], ll n) &#123; static ll Num[MAXN]; ll num = Q / n, ans = 0; Num[0] = 0; rep(i, 1, n) &#123; Num[i] = 1ll * Num[i - 1] + A[i] - num; &#125; std::nth_element(Num + 1, Num + (n &gt;&gt; 1), Num + n); ll x = Num[n &gt;&gt; 1]; rep(i, 0, n) &#123; ans += (ll)std::abs(x - Num[i]); &#125; return ans;&#125;ll cal() &#123; ll sum = 0; if (Q % N == 0) &#123; sum += cal(Row, N); &#125; if (Q % M == 0) &#123; sum += cal(Col, M); &#125; return sum;&#125;int main() &#123; int x, y; scanf("%lld%lld%lld", &amp;N, &amp;M, &amp;Q); rep(i, 0, Q) &#123; scanf("%d%d", &amp;x, &amp;y); ++Row[x]; ++Col[y]; &#125; if (Q % N != 0 &amp;&amp; Q % M != 0) &#123; puts("impossible"); return 0; &#125; if (Q % N == 0 &amp;&amp; Q % M == 0) &#123; printf("both "); &#125; else if (Q % N == 0) &#123; printf("row "); &#125; else &#123; printf("column "); &#125; printf("%lld\n", cal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「IOI2003」Trail Maintenance]]></title>
    <url>%2FIOI2003-Trail%20Mainrenance%2F</url>
    <content type="text"><![CDATA[起初图有 N 个点，没有边。共进行 M 次操作，每次增加一条有边权的无向边，并查询图的连通情况。若图连通，求最小生成树的权值和，若不联通，输出 -1 。 N\leq 200,M\leq 6000 。 分析 如果每次求一遍最小生成树，复杂度为 O(M^2\log{N}) ，按照当时评测机的运行能力显然是不能通过的。 首先判断图的连通情况，只需要通过并查集维护集合的元素个数，如果小于 N ，直接输出 -1 。 当第一次得到连通图的时候，利用MST的一种算法计算得到权值和， 复杂度 O(M\log{N}) 。 树上再增加一条边，就一定会出现环，那么删去该环上的任意一条边就能得到一棵新的生成树。由于我们要得到的是最小生成树，所以删去环上权值最大的边即可满足要求。 也就说后面的操作即“破环”法，通过DFS实现。即通过无向图中环上两点，遍历该环上所有边，并找到权值最大的边，完成替换，复杂度为 O(M) 。 那么总复杂度为 O(M\log{N}+M^2) 。 题库链接 由于暂时没有找到国内OJ可以测这道题，听说LOJ暑假结束前要增加往年IOI试题，我对此表示期待。 俄罗斯的yandex OJ有历年的IOI原题，本题的链接为https://contest.yandex.ru/ioi/contest/558/problems/， 请注意一定要使用std::cout和std::endl，否则会出现Idleness limit exceeded的情况。 当然也可以选择自行下载官方数据并使用lemon等工具评测，IOI2003的数据链接为http://www.ioinformatics.org/locations/ioi03/contest/， 将ioi03替换成其它时间可以得到其它年IOI的数据，如ioi05。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 6000 + 5;struct Edge &#123; int u, v, w, mrk, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M;int sum, tot;int H[MAXN], cntE = -1;int Anc[MAXN], Rnk[MAXN];void init() &#123; rep(i, 1, N + 1) &#123; Anc[i] = i; Rnk[i] = 1; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if (x == y) &#123; return false; &#125; if (Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; if (Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, 0, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;v, u, w, 0, H[v]&#125;; H[v] = cntE; tot += merge(u, v);&#125;int Prim() &#123; static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq; static int Vis[MAXN], Dis[MAXN], Id[MAXN]; memset(Vis, 0, sizeof Vis); memset(Dis, 0x3f, sizeof Dis); Dis[1] = 0; Pq.push(std::make_pair(0, 1)); int cnt = 0, sum = 0; while (!Pq.empty() &amp;&amp; cnt &lt; N) &#123; pii x = Pq.top(); Pq.pop(); if (!chkMax(Vis[x.second], 1)) &#123; continue; &#125; if (E[Id[x.second]].w == x.first) &#123; E[Id[x.second]].mrk = 1; E[Id[x.second] ^ 1].mrk = 1; &#125; sum += x.first; ++cnt; for (int i = H[x.second]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (chkMin(Dis[v], E[i].w)) &#123; Id[v] = i; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125; &#125; return sum;&#125;int Vis[MAXN];int dfs(int id, int x, int v) &#123; Vis[x] = 1; if (id &gt;=0 &amp;&amp; E[id].v == v) &#123; return id; &#125; else &#123; for (int i = H[x]; ~i; i = E[i].nxt) &#123; if (E[i].mrk &amp;&amp; !Vis[E[i].v]) &#123; int res = dfs(i, E[i].v, v); if (res != -1) &#123; if (E[res].w &lt; E[i].w) &#123; return i; &#125; else &#123; return res; &#125; &#125; &#125; &#125; &#125; return -1;&#125;int cal(int u, int v, int w) &#123; if (!sum) &#123; sum = Prim(); &#125; else &#123; memset(Vis, 0, sizeof Vis); Vis[u] = 1; int id = dfs(-1, u, v); if (E[id].w &gt; w) &#123; addEdge(u, v, w); sum = sum - E[id].w + w; E[id].mrk = E[id ^ 1].mrk = 0; E[cntE].mrk = E[cntE ^ 1].mrk = 1; &#125; &#125; return sum;&#125;int main() &#123; int u, v, w; memset(H, -1, sizeof H); scanf("%d%d", &amp;N, &amp;M); init(); rep(i, 0, M) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); if (tot != N - 1) &#123; addEdge(u, v, w); &#125; if (tot != N - 1) &#123; puts("-1"); &#125; else &#123; printf("%d\n", cal(u, v, w)); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「PA 2014」BZOJ 3714 Kuglarz]]></title>
    <url>%2FBZOJ-3714%2F</url>
    <content type="text"><![CDATA[一排 N 个杯子中某些杯子里有小球。可以花费 C_{l,r} 来获取 [l,r] 中小球总数的奇偶性，求得知每个杯子小球状态的最小花费。 N\leq 2000 。 分析 首先注意到花费的数据范围是 10^9 ，因此可能会爆int，需要使用long long。 由于区间球总数的奇偶性满足区间加减法，即 [l,r] = [1,r]-[1,l-1] ，若已知 [1,l] 和 [1,l+1] 那么就能得到杯子 l 是否有球。 那么如果想知道每个杯子下面是否有球，最少需要购买 n 次，即 [1,1],[2,2],...[n,n] ，可以证明这是购买次数的下界。 那么把杯子抽象成点，购买关系抽象成边，由于奇偶性满足区间减法/加法，因此让 [l+1,r] 区间转化为边 i\rightarrow j ，边权为花费。 如此路径 i\rightarrow j\rightarrow k 即 [i+1,j],[j+1,k] ，合并即可知道 [i+1,k] 的奇偶性。也就是说在同一个联通分量的两个点 l,r ，我们可以通过它们之间的路径得到 [l+1,r] 的奇偶性。 易得图中出现环显然是不优的，那么考虑生成树（生成森林）。 由于可以购买任意 [l,r] 的奇偶性，也就是说生成树可以得到任意 [l,r] 的奇偶性，也就能得到任意一个杯子是否有球在下面。 而构造新图中同时构造了一个新点 0 （通过 [1,x] 得到 0\rightarrow x ） ，所以新图的生成树是 n 条边，符合之前的推论。 如此求得新图的最小生成树的权值和即为最小花费。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 2000 + 5;struct Edge &#123; int u, v, w; bool operator &lt; (const Edge &amp;x) const &#123; return w &lt; x.w; &#125;&#125; E[MAXN * MAXN];int N, cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w&#125;;&#125;int Anc[MAXN], Rnk[MAXN];void init() &#123; rep(i, 0, N + 1) &#123; Anc[i] = i; Rnk[i] = 1; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if(x == y) &#123; return false; &#125; if(Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;ll Kruskal() &#123; init(); std::sort(E + 1, E + cntE + 1); ll sum = 0; int cnt = -1; rep(i, 1, cntE + 1) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].w; if(++cnt == N) &#123; break; &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; rep(j, i, N + 1) &#123; scanf("%d", &amp;w); addEdge(i - 1, j, w); &#125; &#125; printf("%lld\n", Kruskal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 2654 tree]]></title>
    <url>%2FBZOJ-2654%2F</url>
    <content type="text"><![CDATA[在一张无向带权连通图中，每条边是黑色或白色。求一棵恰好有need条白色边的生成树，并使得权值和最小。 V\leq 50000,E\leq 100000 。 分析 直接求最小生成树显然不能保证一定出现need条白边，而最小生成树只跟边权有关，因此需要对这些边权做一些手脚。 记 f(x) 为所有白边边权增加 x 后，新图的最小生成树中白边的个数，易得 f(x) 随 x 增大而单调不递增。 证明如下：考虑Kruskal算法的流程，如果 x 增加，新排序的白边一定会集体向后移动，而黑边则会排在更前面的位置，因此生成树上白边的数量一定不会增加，最多维持不变。 那么假设白边边权全部增加 x 后新图的最小生成树的白边数量恰好为need条，权值和为 sum ，则实际生成树的权值和为 sum-need\times x 。 如此就可以对 x 二分，极端情况就是将权值最小的白边排在权值最大的黑边后面，因此 x 的上界是为 max{w_i} ， w_i 为原图的边权。 当出现黑边和白边边权相等的情况时，将白边排在前面，如此可以使得白边尽可能的多。 复杂度 O(E\log{E}\log{\max{w_i}}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 50000 + 5;const int MAXM = 100000 + 5;struct Edge &#123;int u, v, val, col;bool operator &lt; (const Edge &amp;x) const &#123; return val == x.val ? col &lt; x.col : val &lt; x.val;&#125;&#125; E[MAXM];int N, M, Q;int Anc[MAXN], Rnk[MAXN];void init() &#123;rep(i, 0, N) &#123; Anc[i] = i; Rnk[i] = 1;&#125;&#125;int findAnc(int x) &#123;return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123;x = findAnc(x), y = findAnc(y);if(x == y) &#123; return false;&#125;if(Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y;&#125; else &#123; Anc[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125;&#125;return true;&#125;pii Kruskal(int x) &#123;init();rep(i, 0, M) &#123; if(!E[i].col) &#123; E[i].val += x; &#125;&#125;std::sort(E, E + M);int sum = 0, cnt = 1, num = 0;rep(i, 0, M) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].val; if(!E[i].col) &#123; ++num; &#125; if(++cnt == N) &#123; break; &#125; &#125;&#125;rep(i, 0, M) &#123; if(!E[i].col) &#123; E[i].val -= x; &#125;&#125;return std::make_pair(num, sum - x * Q);&#125;int main() &#123;int u, v, w, c;int l, r = 0, ans = 0;scanf("%d%d%d", &amp;N, &amp;M, &amp;Q);rep(i, 0, M) &#123; scanf("%d%d%d%d", &amp;u, &amp;v, &amp;w, &amp;c); E[i] = (Edge) &#123;u, v, w, c&#125;; r = std::max(r, w + 1);&#125;l = -r;while(l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; pii x = Kruskal(m); if(x.first &gt;= Q) &#123; ans = x.second; l = m + 1; &#125; else &#123; r = m; &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2008 Oct」BZOJ 1601 灌水]]></title>
    <url>%2FBZOJ-1601%2F</url>
    <content type="text"><![CDATA[有 N 块农田，连通两块农田的花费为 W_{i,j} ，直接在农田上建水站费用为 A_i ，求使得所有农田被水灌溉的最小费用。 N\leq 300 。 分析 如果没有直接建水站的费用，那么使得整个图联通的最小代价即最小生成树的权值和。 但是由于可以建水站，且费用可能低于直接连边，因此可能会存在将图划分成多个连通块，每个块内建立最小生成树使得覆盖所有点的情况（即建多个水站）。 对于这种多个连通块的情况，有一种思路就是建一个虚拟点连接所有点，然后以该点为根构建最小生成树，如此便只需要求一棵MST。 那么对于这道题而言，显然这个根连接其他点的权值为在该点建水站的费用。 由于是张完全图，因此选择Prim算法求MST显然在常数上优于Kruskal算法，因为 E 是 V^2 级别的。 复杂度 O(E\log{V}) 或者 O(E\log{E}) ，即 O(n^2\log{n}) 。 参考代码 Prim 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 300 + 5;int N, R;struct Edge &#123; int v, w, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;typedef std::pair&lt;int, int&gt; pii;int Prim(int x) &#123; static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq; static int Vis[MAXN], Dis[MAXN]; memset(Vis, 0, sizeof Vis); memset(Dis, 0x3f, sizeof Dis); Dis[x] = 0; Pq.push(std::make_pair(0, x)); int cnt = -1, sum = 0; while (!Pq.empty() &amp;&amp; cnt &lt; N) &#123; pii x = Pq.top(); Pq.pop(); if (!chkMax(Vis[x.second], 1)) &#123; continue; &#125; sum += x.first; ++cnt; for (int i = H[x.second]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (chkMin(Dis[v], E[i].w)) &#123; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;w); addEdge(0, i, w); addEdge(i, 0, w); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; scanf("%d", &amp;w); if (i != j) &#123; addEdge(i, j, w); &#125; &#125; &#125; printf("%d\n", Prim(R)); return 0;&#125; Kruskal 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 300 + 5;int N, R;struct Edge &#123; int u, v, w, nxt; bool operator &lt; (const Edge &amp;x) const &#123; return w &lt; x.w; &#125;&#125; E[MAXN * MAXN];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;int Fa[MAXN], Rnk[MAXN];void init() &#123; rep(i, 0, N + 1) &#123; Fa[i] = i; Rnk[i] = 1; &#125;&#125;int findFa(int x) &#123; return x == Fa[x] ? x : Fa[x] = findFa(Fa[x]);&#125;bool merge(int x, int y) &#123; x = findFa(x), y = findFa(y); if(x == y) &#123; return false; &#125; if(Rnk[x] &lt; Rnk[y]) &#123; Fa[x] = y; &#125; else &#123; Fa[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;int Kruskal() &#123; int sum = 0, cnt = 0; init(); std::sort(E + 1, E + cntE + 1); rep(i, 1, cntE + 1) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].w; if(++cnt == N) &#123; break; &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;w); addEdge(0, i, w); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; scanf("%d", &amp;w); if (i &lt; j) &#123; addEdge(i, j, w); &#125; &#125; &#125; printf("%d\n", Kruskal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Miller–Rabin学习笔记]]></title>
    <url>%2FMiller-Rabin%2F</url>
    <content type="text"><![CDATA[对于检查一个数是否为素数，有不少方法。比如基于素数定义的朴素算法，复杂度 O(\sqrt{N}) ；比如当筛取 [1,N] 中所有素数时，可以通过欧拉筛实现 O(N) 的线性筛. 如果要检测大量的随机数是否为素数，这两个方法显然都不适用。对于这种情况，我们使用基于素数定理逆命题的Miller-Rabin素性测试。 前置定理 威尔逊定理 若 p 为素数，则 (p-1)!\equiv -1\pmod{p} ，其逆定理也成立。 费马小定理 定理的特殊形式 若 p 是素数， a 为正整数，且 a 与 p 互质，则 a^{p-1}\equiv 1 \pmod{p} 。 证明 由于 a 与 p 互质，则 a,2a,3a,\cdots,(p-1)a 都与 p 互质，且不存在 i\times a \equiv j\times a\pmod p(1\leq i &lt; j &lt; p) 。 因此 a,2a,3a,\cdots,(p-1)a 对 p 的取余构成 1,2,\cdots,p-1 的排列。 那么 a\times 2a\times 3a\times \cdots\times (p-1)a\equiv1\times 2\times 3\times \cdots\times (p-1) \pmod{p} 。 化简为 a^{p-1}\times(p-1)!\equiv (p-1)!\pmod{p} ，即 a^{p-1}\equiv 1\pmod{p} 。 定理的一般形式 若 p 是素数，则 a^p\equiv a\pmod{p} 。 证明 如果 a 能被 p 整除，则上式显然成立；如果不能整除，那么 gcd(a,p)=1 ，对于这种情况前面已经证明。 而费马小定理是欧拉定理的一个特殊形式， a^{\varphi(p)}\equiv 1\pmod{p} 。因为根据定义，当 p 是质数时， \varphi(p)=p-1 。 素性测试 Fermat素性测试 人们经过测试发现，如果一个数 b 满足费马小定理的逆命题（令 a=2 ， 2^{b-1}\equiv 1\pmod{b} )，那么 b 有很大可能是一个素数。 但是仅仅通过费马小定理的逆命题来判断素性显然是错误的，比如 2^{560}\equiv 1\pmod{561} 但是 561=11\times 51 ，这类数被称为伪素数。 后来人们把满足 a^{b-1}\equiv 1\pmod{b} 的合数 b 称为以 a 为底的伪素数。 基于此，有一种方法就是预处理区间内的所有伪素数，那么满足 2^{b-1}\equiv 1\pmod{b} 且不在伪素数表中的数就是素数。 然而使用这种方法过于麻烦，不用它错误率却不低，因此需要对原测试方法进行改进。 这种算法的问题在于无法鉴别出某些合数，由于费马小定理成立是素数的必要条件，因此不会出现将素数被判定成合数的情况。 既然它有一定概率判断正确，那么有一个很自然的想法。那便是用多组 a_i(a_i &lt; b) 去检查 b 是否满足 a_{i}^{b-1}\equiv 1\pmod{b} 。如果同时成立， b 是素数的概率应该会大幅增加，反之如果一次被判定为合数就确定其为合数。 简而言之，通过若干个小于待测数的正整数 a 做底数进行测试素性的方法被称为Fermat素性测试。 Miller-Rabin素性测试 二次探测定理优化 定理 若 p 是素数， x 为小于 p 的正整数，且 x^2\equiv 1\pmod{p} ，则 x 为 1 或 p-1 。 证明 x^2=(x+1)(x-1)+1 ，即 p 能整除 (x+1)(x-1) ，那么 x 只能为 1 或 -1 ，在模 p 意义下即 1 或 p-1 。 通过二次探测定理，我们可以加强费马小定理，以此降低素性探测的错误率。 假设 a 被判定为素数，即 2^{a-1}\equiv 1\pmod{a} ，那么根据二次探测定理， 2^{\frac{a-1}{2}}\bmod a 只能为 1 或 a-1 。 拿 561 举例子，虽然满足 2^{280}\bmod 561 = 1 ，但是再往下一步却发现 2^{140}\bmod 561=67 ，因此 561 不是素数。 将其转化一般形式，用于检测正整数 n​ 的素性。 1.将 n-1 表示为 d\times 2^{r} 的形式，其中 d 是一个奇数。 2.依次检查 2^{d\times 2^{r-i}}\bmod n 的值，如果 2^{d\times 2^{r-i}}\bmod n = 1 ，那么二次探测定理就继续适用于 2^{d\times 2^{r-i-1}} ，于是递增 i 直到某个 i 满足 2^{d\times {r-i}}\bmod n =n-1 或 r=i 结束。 换句话说，如果 n 是一个素数，那么一定存在 0\leq i\leq r 使得 2^{d\times 2^i}\bmod n = n-1 或 2^d\bmod n=1 。不满足的 n 一定是合数。 同理Fermat素性探测优化的想法，依然采取使用多个底数来降低错误率，即检测 2^{d\times 2^r},3^{d\times 2^r},\cdots 。 Miller-Rabin素性测试同样是不确定算法，我们把可以通过以 a 为底的Miller-Rabin测试的合数称作以 a 为底的强伪素数。 第一个以 2 为底的强伪素数为 2047 ，而第一个以 2 和 3 为底的强伪素数则达到了 1373653 ，可以直观感受到Miller-Rabin素性探测的正确率之高。 根据 Wikipedia的相关词条，如果检测的正整数在 int 中（ 2^{32} ，即 2.5\times 10^9 ），底数只需要前 4 个素数作为底数，即 2,3,5,7 ；如果是 long long （ 2^{64} ，即 1.85\times 10^{19} ），则需要前 13 个素数做底数，即 2,3,5,\cdots,41 。如此可以保证数据范围内的所有检测不会出错。 具体实现 算法流程 首先得到关于 n-1 的 r 和 d 。对于每一轮（不同底数）通过快速幂得到 a^{d} ，再依次检查 2^{d\times 2^i}\bmod n 的值 ，直到 i &gt; r 或者值为 1 或 n-1 。 若 i &gt; r ，则判定 n 为合数，否则继续测试下一个底数 。 注意事项 int 与溢出 即使素数测试的数据范围是 int，也不要吝啬使用 long long。两个 int 相乘会有溢出的可能，导致死循环或者判定结果出错。 浮点数与自然溢出 如果数据范围是 long long ，那么两个 long long 相乘溢出是很有可能的，但是没有更大的类型可以使用。 常规解决方法就是采取类似快速幂的方法，通过二进制分解来实现乘法取模，但是复杂度为 O(\log{N}) 。 还有一种 O(1) 的方法，那便是将 a\times b\bmod p 转化成 a\times b - (a / p\times b)\times p 。将 a 强转成 long double 进行计算。 更具体地： 1234long long mul(long long x, long long y, long long m) &#123; // x ^ y % mx %= m, y %= m;return (x * y - m * (long long)((long double)x / m * y) % m + m) % m;&#125; 然而我没有理解C++对溢出的处理方式，所以无法对这个函数做出准确的解释。 不过这种方法在[2012集训队互测]JZPKIL的多份题解中被使用，实测也得到了正确的结果。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;ll mul(ll x, ll y, ll m) &#123;x %= m, y %= m;return (x * y - m * (ll)((long double)x / m * y) % m + m) % m;&#125;ll pow(ll x, ll t, ll m) &#123;ll res = 1;for(; t; t &gt;&gt;= 1, x = mul(x, x, m)) &#123; if(t &amp; 1) &#123; res = mul(res, x, m); &#125;&#125;return res;&#125;bool miller_rabin(ll x) &#123;static ll Prime[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41&#125;;if(x == 2 || x == 3) &#123; return true;&#125;if(x &lt; 2 || (x % 6 != 1 &amp;&amp; x % 6 != 5)) &#123; return false;&#125;ll s = x - 1;while(!(s &amp; 1)) &#123; s &gt;&gt;= 1;&#125;rep(i, 0, 13) &#123; if(x == Prime[i]) &#123; return true; &#125; ll t = s, m = pow(Prime[i], s, x); while(t != x - 1 &amp;&amp; m != 1 &amp;&amp; m != x - 1) &#123; m = mul(m, m, x); t &lt;&lt;= 1; &#125; if(!(t &amp; 1) &amp;&amp; m != x - 1) &#123; return false; &#125;&#125;return true;&#125;int main() &#123;return 0;&#125; 参考资料 Miller_Rabin素数测试[Fermat小定理][二次探测定理][同余式][Wilson定理] | 学步园 Miller–Rabin primality test - Wikipedia 《信息学奥赛之数学一本通》]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Miller-Rabin</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3436 小 K 的农场]]></title>
    <url>%2FBZOJ-3436%2F</url>
    <content type="text"><![CDATA[有若干组关系，形如 A_i - A_j \leq x, \geq x, = x 。 求 A[1 \cdots N] 是否能满足所有关系。 分析 将三种形式转化成不等式的形式，即： a - b \leq c a-b \geq c a = b 要求这个不等式组是否有解。 通过查分约束，转换成图上问题。 根据三角不等式 d_u + d(u,v)\geq d_v ，转化一下即 d_u - d_v \geq d(u,v) 。 那么按照如下方法建图： a - b\leq c ，即 d(b,a) = c a-b \geq c ，即 d(a,b) = -c a=b ，即 d(a,b)=d(b,a)=0 。其中 d(u,v) 表示 u 到 v 的有向边的距离。 无解的条件即图中出现负环。 通过 SPFA算法， 如果一个点入队 n 次说明存在负环。 复杂度上界 O(nm) ，实际数据很弱。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;#define ONLINE_JUDGEnamespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iovoid open() &#123; freopen("farm.in", "r", stdin); freopen("farm.out", "w", stdout);&#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;int N, M;int Dis[MAXN], Cnt[MAXN], Inq[MAXN];bool spfa(int n) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; rep(i, 0, n) &#123; Inq[i] = true; Que.push(i); &#125; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; if (++Cnt[v] &gt; n) &#123; return true; &#125; &#125; &#125; &#125; &#125; return false;&#125;int main() &#123; //open(); int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if (opt == 1) &#123; addEdge(u, v, -io::gt&lt;int&gt;()); &#125; else if (opt == 2) &#123; addEdge(v, u, io::gt&lt;int&gt;()); &#125; else &#123; addEdge(u, v, 0); &#125; &#125; rep(i, 0, N + 1) &#123; addEdge(0, i, 0); &#125; if (spfa(N + 1)) &#123; puts("No"); &#125; else &#123; puts("Yes"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3211 花神游历各国]]></title>
    <url>%2FBZOJ-3211%2F</url>
    <content type="text"><![CDATA[维护一个序列，支持区间开方（向下取整）和区间求和。 序列长为 N ，共 M 次操作。 1\leq N.M\leq 100000&nbsp; ，序列中元素 0\leq A_i\leq 10^{12} 。 分析 区间开方并不满足区间加法，所以只能每个数暴力开方。 由于开方是向下取整，因此对于 1 和 0 而言，开方后还是自己，对区间和没有产生影响。 而对于最大值 10^{12} 而言，最多开 5 次方就会变成 1 ，也就是说开方对一个数的影响最多只有 5 次。 那么假如对于操作区间 [l,r] 而言，其中的元素非 0 即 1 ，那么这个区间就无需继续操作。 因此用线段树维护区间和，同时对无需继续操作的区间打标记。 每次区间开方的时候，如果两个子树都被打了标记，则无需继续；否则递归到单个元素进行开方，并检查是否成为 0 和 1 ，对其打标记；如果两个子树都被打上标记，那么就将标记上移到父亲节点。 复杂度 O(M\log{N}\log{\log{W}}) ，其中 W 为元素最大值。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct SegmentTree &#123;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r ll Sum[MAXN &lt;&lt; 2], Flag[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; Flag[rt] = Flag[rt &lt;&lt; 1] &amp; Flag[rt &lt;&lt; 1 | 1]; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = io::gt&lt;ll&gt;(); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void change(int rt, int l, int r, int a, int b) &#123; if(Flag[rt]) &#123; return ; &#125; if(l == r) &#123; Sum[rt] = sqrt(Sum[rt]); if(Sum[rt] == 1 || Sum[rt] == 0) &#123; Flag[rt] = 1; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b); &#125; if(m &lt; b) &#123; change(RT, a, b); &#125; pushUp(rt); &#125; ll querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; int m = (l + r) &gt;&gt; 1; ll res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res; &#125;&#125; T;int main() &#123; int N = io::gt&lt;int&gt;(); T.build(1, 1, N); int M = io::gt&lt;int&gt;(); while(M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); if(opt == 2) &#123; T.change(1, 1, N, l, r); &#125; else &#123; printf("%lld\n", T.querySum(1, 1, N, l, r)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6009 软件补丁问题]]></title>
    <url>%2FLOJ-6009%2F</url>
    <content type="text"><![CDATA[A 是一个数的集合，包含 n 种元素，存在 m 种方法转移。 A 能通过第 i 种方法转移，当且仅当 A 不包含 C_i 中的任何元素且包含 D_i 中的所有元素。 A 通过第 i 种方法转移的方法为：删去 A 中所有与 E_i 相同的元素， 增加所有 F_i 中 A 没有出现的元素。 通过第 i 种方法转移的代价为 P_i ，开始时 A 包含所有元素，求转移到没有元素的最小代价。如果无解，输出-1。 1\leq n\leq 20,1\leq m\leq 100 。 分析 考虑暴力转移，每次转移是 O(n\times m) 的，至多有 2^n 种状态，所以复杂度是 2^n\times n\times m 的，发现这么小的数据范围是可以过的。 发现合并、检查集合时比较麻烦，根据 n\leq 20 ，考虑转移状态压缩，用二进制下第 i 位表示第 i 个数是否存在。 位运算转移 检查 C_i 即按位与，看结果是否为 C_i 本身。 检查 D_i 还是按位与，看结果是否为 0 。 通过 E_i 转移，这个是最复杂度的，需要两步。首先按位与得到两方都有的元素，再与原数异或。 通过 F_i 转移，按位或即可。 原理 按位与，某一位为 1 当且仅当两数该位同为 1 。 按位或，某一位为 1 当且仅当两数中至少一个数该位为 1 。 异或，某一位为 1 当且仅当两数中一个数该位为 1 ，另一个数该位为 0 。 那么根据转移规则发现就是这三种运算而已，单独解释一下关于 E_i 的转移。 该操作的目的即某一位若两位都是 1 ，则置为 0 ，其他不变。 那么按位与得到所有同时为 1 的位，再根据 1 ^ 1 = 0 ^ 0 = 0、0 ^ 1 = 1 ^ 0 = 1，可以发现新数与原数异或即可满足要求。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast((x).size())typedef long long ll;const int MAXN = (1 &lt;&lt; 20) + 5;const int MAXM = 100 + 5;int F[MAXN];int n, m, Cost[MAXM];int A1[MAXM], A2[MAXM];int B1[MAXM], B2[MAXM];std::bitset Inq;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cin &gt;&gt; n &gt;&gt; m; std::string str1, str2; rep(i, 0, m) &#123; std::cin &gt;&gt; Cost[i] &gt;&gt; str1 &gt;&gt; str2; rep(j, 0, n) &#123; if(str1[j] == '+') &#123; A1[i] |= 1 &lt;&lt; j; &#125; else if(str1[j] == '-') &#123; A2[i] |= 1 &lt;&lt; j; &#125; if(str2[j] == '-') &#123; B1[i] |= 1 &lt;&lt; j; &#125; else if(str2[j] == '+') &#123; B2[i] |= 1 &lt;&lt; j; &#125; &#125; &#125; std::queue Que; memset(F, 0x3f, sizeof F); F[(1 &lt;&lt; n) - 1] = 0; Que.push((1 &lt;&lt; n) - 1); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; rep(i, 0, m) &#123; if((x &amp; A1[i]) == A1[i] &amp;&amp; (x &amp; A2[i]) == 0) &#123; int y = x &amp; B1[i]; y = y ^ x | B2[i]; if(F[y] &gt; Cost[i] + F[x]) &#123; F[y] = Cost[i] + F[x]; if(!Inq[y]) &#123; Inq[y] = 1; Que.push(y); &#125; &#125; &#125; &#125; &#125; if(F[0] == F[1 &lt;&lt; n]) &#123; F[0] = 0; &#125; std::cout &lt;&lt; F[0] &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6003 魔术球]]></title>
    <url>%2FLOJ-6003%2F</url>
    <content type="text"><![CDATA[将 [1, N] 分成 K 组序列，使得每组序列相邻两数的和为完全平方数，且序列递增。 已知 K ，求 N 的最大值，并给出一组方案（按顺序输出 K 个序列）。 1\leq K\leq 55 分析 假如 [1,N-1] 已经分好组了，那么 N 只能自成一组或者放到某个序列的最后。 所以显而易见的一点就是，当 N 增大时， K 是单调不递减的。 根据单调性，一个基本的思路便是二分答案。 考虑如何检查合法性。 由于每个点之只能和一个前驱后继匹配（或者没有），那么便相当于一个DAG（有向无环图）求最小路径覆盖（拆成 K' 条不相交的链，覆盖所有点）。 若 K' \leq K ，解就是合法的。 求解最小路径匹配数，考虑网络流算法。 将每个点 i 拆成 A_i, B_i 两部分，如果存在 i+j=k^2(i&lt; j) ，则连接 A_i 和 B_j 。 建立源汇点 S 和 T ， S 和所有 A_i 连边，所有 B_i 和 T 连边。 皆为有向边，流量限制为 1 。 最小路径覆盖数的值即节点数 N 和 S-T 最大流的差。 根据Dinic算法的流程，易得每次在残余网络上加边再找可行流，与之前的最大流相加即为新图的最大流。 所以如果只是在原图的基础上加边，不需要重复构图，单次增广复杂度 O(nm) 。 那么二分答案显然不如直接递增枚举了，因为它需要每次重新构图跑最大流，而后者只需要加边寻找可行流。 因此算法流程为：从 1 开始递增枚举 N ，寻找可行流，直到最小路径数超过 K ，答案即为 N - 1 。 至于输出答案，重新建图跑最大流，然后找到 B_i 相连的所有反向弧为 1 的边，纪录对应的点（即前驱）。 记录每个节点是否被输出。从后往前枚举序列的尾结点，如果没有标记，那么该点即为一个新序列的最后一个元素。 由于每个数的前驱只会有一个，所以从尾结点开始，每次跳到前驱，并同时输出，打上标记。 复杂度分析 枚举 N ，最大流跑二分图复杂度 O(N^2\times \sqrt{M}) ，如果利用了capacity scaling技巧，复杂度似乎会降（？），至少会快很多。 uoj blog 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 10000 + 5;const int MAXM = 180000 + 5;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Lv[MAXN], Cur[MAXN];int N, M, S, T, K = 5000, tim, ffffc, F;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;void dinic() &#123; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1;&#125;std::bitset&lt;MAXM&gt; Issquare, Vis;int Match[MAXM];std::vector&lt;int&gt; V;void solve() &#123; int n; scanf("%d", &amp;n); rep(i, 1, std::sqrt(MAXM)) &#123; Issquare[i * i] = 1; &#125; init(); S = 0; T = 8000; int cur = 0; do &#123; ++cur; addEdge(S, cur, 1); addEdge(cur + K, T, 1); rep(i, 1, cur) &#123; if(Issquare[i + cur]) &#123; addEdge(i, cur + K, 1); &#125; &#125; dinic(); &#125; while(cur - F &lt;= n); printf("%d\n", cur - 1); init(); rep(i, 1, cur) &#123; addEdge(S, i, 1); addEdge(i + K, T, 1); rep(j, 1, i) &#123; if(Issquare[i + j]) &#123; addEdge(j, i + K, 1); &#125; &#125; &#125; dinic(); rof(i, K + cur, K + 1) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(E[j].f) &#123; Match[E[j].v] = i - K; break; &#125; &#125; &#125; rep(i, 1, cur) &#123; if(Vis[i]) &#123; continue; &#125; V.clear(); for(int j = i; j; j = Match[j]) &#123; V.push_back(j); Vis[j] = true; &#125; rep(j, 0, SZ(V)) &#123; printf("%d ", V[j]); &#125; printf("\n"); &#125;&#125;&#125;int main() &#123; dinic::solve(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>最小路径覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6002 最小路径覆盖问题]]></title>
    <url>%2FLOJ-6002%2F</url>
    <content type="text"><![CDATA[给一个 N 个点， M 条边的DAG，求最小路径覆盖数及其方案。 1\leq N\leq 150,1\leq M\leq 6000 分析 弱化版【P2765 魔术球问题】 随便搞即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 500 + 5;const int MAXM = 6000 + 5;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM &lt;&lt; 1], Cur[MAXN], Lv[MAXN], Dis[MAXN];int N, M, S, T, K = 100, ffffc, tim;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); scanf("%d%d", &amp;N, &amp;M); S = 0, T = 500; int u, v; rep(i, 1, N + 1) &#123; addEdge(S, i); addEdge(i + K, T); &#125; rep(i, 0, M) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v + K); &#125;&#125;std::bitset&lt;MAXN&gt; Vis;int Match[MAXN];void maxFlow() &#123; init(); int ans = N - dinic(); rep(i, K + 1, K + N + 1) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(E[j].f &amp;&amp; E[j].v != T) &#123; Match[E[j].v] = i - K; break; &#125; &#125; &#125; rep(i, 1, N + 1) &#123; if(Vis[i]) &#123; continue; &#125; for(int j = i; j; j = Match[j]) &#123; printf("%d ", j); Vis[j] = true; &#125; printf("\n"); &#125; printf("%d\n", ans);&#125;&#125;int main() &#123; dinic::maxFlow(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>最小路径覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6011 运输问题]]></title>
    <url>%2FLOJ-6011%2F</url>
    <content type="text"><![CDATA[有 N 个仓库，库存为 A_i ， M 个商店，需求为 B_i ，保证 \sum{A_i} =\sum{B_i} 。 第 i 个仓库每单位运送给第 j 个商店的费用为 C_{i,j} 。 求满足商店需求所需的最小运费。 1\leq n,m\leq 100 分析 仓库商店之间，费用建成 -C_{i,j} ，限制为 INF 。 S 连接所有仓库，所有商店连接 T ，限制分别为 A_i 和 B_i ，费用为 0 。 跑 S-T 最小费用最大流 C ，答案即为 -C 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 20000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, C, F;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE; &#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int X[MAXN], Y[MAXN], Z[MAXN][MAXN];void init() &#123; int x; std::cin &gt;&gt; M &gt;&gt; N; cntE = -1; memset(H, -1, sizeof H); S = 0, T = N + M + 1; rep(i, 1, M + 1) &#123; std::cin &gt;&gt; X[i]; addEdge(S, i, X[i], 0); &#125; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; Y[i]; addEdge(i + M, T, Y[i], 0); &#125; rep(i, 1, M + 1) &#123; rep(j, 1, N + 1) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(i, j + M, INT_MAX, Z[i][j]); &#125; &#125;&#125;void init2() &#123; cntE = -1; memset(H, -1, sizeof H); S = 0, T = N + M + 1; rep(i, 1, M + 1) &#123; addEdge(S, i, X[i], 0); &#125; rep(i, 1, N + 1) &#123; addEdge(i + M, T, Y[i], 0); &#125; rep(i, 1, M + 1) &#123; rep(j, 1, N + 1) &#123; addEdge(i, j + M, INT_MAX, -Z[i][j]); &#125; &#125;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6012 分配问题]]></title>
    <url>%2FLOJ-6012%2F</url>
    <content type="text"><![CDATA[有 n 件工作要分配给 n 个人做。第 i 个人做第 j 件工作产生的效益为 c_{i,j} 。 试设计一个将 n 件工作分配给 n 个人做的分配方案，使产生的总效益最大。 每个人只能做一个工作。 1\leq n\leq 100 分析 两次建图，限制均为 1 ，费用分别为 C_{i,j} 和 -C_{i,j} ，跑最小费用最大流即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 20000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, C, F;int Lp[MAXN], Le[MAXN];int Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;int Z[MAXN][MAXN];void init() &#123; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N; S = 0, T = N * 2 + 1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); addEdge(i + N, T, 1, 0); rep(j, 1, N + 1) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(i, j + N, 1, Z[i][j]); &#125; &#125;&#125;void init2() &#123; memset(H, -1, sizeof H); cntE = -1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); addEdge(i + N, T, 1, 0); rep(j, 1, N + 1) &#123; addEdge(i, j + N, 1, -Z[i][j]); &#125; &#125;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6010 数字梯形]]></title>
    <url>%2FLOJ-6010%2F</url>
    <content type="text"><![CDATA[一个梯形，第一行有 m 个数，共 n 行，每行比上一行多一个数，每个数有一个权值 A_i 。 从第一行的 m 个数开始，每次向左下或右下移动，到第 n 层结束。 求以下三种情况的权值和最大值： m 条路径不相交 m 条路径可以在数字处相交 m 条路径可以在数字和边处相交 1\leq n,m\leq 20 分析 一道三合一，主要考察建图如何去限制流量走向。 对于不相交的情况，很显然，还是拆点 i\rightarrow(X_i,Y_i) ，然后每个点的 X_i 向下面的两个点 Y_j 连一条限制为 1 ，费用为 -A_i 。最后 S 连接第一行，最后一行连接 T ，跑费用流。 对于可以在数字处相交的情况就可以不用拆点了。直接连接 (i, j) ，限制为 1 ，费用为 -A_i 。注意最后一行连接 T 的限制为 INF ，因为可以多个数最后均到达该点。 对于没有限制的情况，将第二次建图的所有流量限制均改成 INF 即可（ S 到第一行除外）。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 3000 + 5;const int MAXM = 40000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, C, F;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE; &#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int Z[MAXN][MAXN];int getId(int x, int y) &#123; return (x - 1) * (N + M) + y;&#125;void init() &#123; int x; std::cin &gt;&gt; M &gt;&gt; N; cntE = -1; memset(H, -1, sizeof H); S = 0, T = (N + M) * N * 3; int up = (N + M) * N * 2; rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(getId(i, j), getId(i, j) + up, 1, 0); &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j) + up, T, 1, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j) + up, getId(i + 1, j), 1, -Z[i][j]); addEdge(getId(i, j) + up, getId(i + 1, j + 1), 1, -Z[i][j]); &#125; &#125; &#125;&#125;void init2() &#123; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j), T, INT_MAX, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j), getId(i + 1, j), 1, -Z[i][j]); addEdge(getId(i, j), getId(i + 1, j + 1), 1, -Z[i][j]); &#125; &#125; &#125;&#125;void init3() &#123; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j), T, INT_MAX, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j), getId(i + 1, j), INT_MAX, -Z[i][j]); addEdge(getId(i, j), getId(i + 1, j + 1), INT_MAX, -Z[i][j]); &#125; &#125; &#125;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; mcmf::init3(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6224 深海机器人问题]]></title>
    <url>%2FLOJ-6224%2F</url>
    <content type="text"><![CDATA[一个 N * M 的网格图，每条边都存在权值。 现有 A 个起点， B 个终点。 第 i 个起点可以作为 X_i 条路径的起点，第 i 个终点可以作为 Y_i 条路径的终点。保证 \sum{X_i}=\sum{Y_i} 。 每条路径只能向右或者向上移动，可以重复经过某一条边或者某个点。 求这 \sum{X_i} 条路径覆盖的所有边的最大权值和（同一条边的权值只算一次）。 1\leq N,M\leq 15 1\leq A\leq 4 1\leq B\leq 6 分析 既然是求最大价值，第一反应自然是连负边跑最小费用最大流。 边权算一次，那就流量限制置为 1 ，但是可以多次经过，那就再连一条花费为 0 ，不限流量的边。 S 向所有起点连流量限制为 A_i 的边，终点同理。 跑最小费用最大流。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 20 * 20 * 2;const int MAXM = MAXN;const int INF = 1e9 + 7;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int N, M, S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];std::bitset&lt;MAXN&gt; Inq;int getId(int x, int y) &#123; return x * (M + 1) + y;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge)&#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; int a, b, k, x, y; std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; N &gt;&gt; M; S = (N + 1) * (M + 1), T = S + 1; memset(H, -1, sizeof H); cntE = -1; rep(i, 0, N + 1) &#123; rep(j, 0, M) &#123; std::cin &gt;&gt; x; addEdge(getId(i, j), getId(i, j + 1), 1, -x); addEdge(getId(i, j), getId(i, j + 1), INF, 0); &#125; &#125; rep(i, 0, M + 1) &#123; rep(j, 0, N) &#123; std::cin &gt;&gt; x; addEdge(getId(j, i), getId(j + 1, i), 1, -x); addEdge(getId(j, i), getId(j + 1, i), INF, 0); &#125; &#125; rep(i, 0, a)&#123; std::cin &gt;&gt; k &gt;&gt; x &gt;&gt; y; addEdge(S, getId(x, y), k, 0); &#125; rep(i, 0, b) &#123; std::cin &gt;&gt; k &gt;&gt; x &gt;&gt; y; addEdge(getId(x, y), T, k, 0); &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x; Le[v] = i; if(!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int mcmf() &#123; init(); while(spfa()) &#123; int f = INF; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += f * Dis[T]; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main()&#123; std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6014 最长 k 可重区间集]]></title>
    <url>%2FLOJ-6014%2F</url>
    <content type="text"><![CDATA[直线上有 N 个开区间 (x_i,y_i) ，从中选取任意多个，满足该直线上任意一个点最多被 K 个区间覆盖，求选取区间的最大长度和。 1\leq N\leq 500 1\leq K\leq 3 分析 O(N^2) 建图方法 以区间长度作为费用，目标即让总费用最大。 每个区间只能选一次，所以要拆点。 问题在于如果保证任何一个点至多被覆盖 K 次。 显然，如果任意选择 K 个区间，那么不可能出现某个点被覆盖超过 K 次。 如果选择一个区间，再去选择一个与它不相交的区间，那么依然不会出现某个点被覆盖超过 K 次的情况。 那么如果在这个基础上再选择一个与另一个区间不相交的区间呐？是否会出现某个点被覆盖 K + 1 次的情况？ 令开始选取的区间为 A_1....A_K ，第一次增加了与 A_1 不相交的区间 B_1 ，第二次增加了与 A_2 不相交的区间 B_2 ，以 X{a,b,c}=s 表示区间集合 {a,b,c} 覆盖的点中，被覆盖次数最大次数为 s 。 根据之前的描述， X{A_1...A_K} \leq K ， X{A_1,B_1,A_2...A_k} \leq K 。 由于 A_1\cap B_1=\emptyset ，所以 X{B_1,A_2...A_k} \leq K 。 如果增加 B_2 之后覆盖了某个点 K + 1 次，那么就是 X{A_1,B_1,A_2,B_2,A_3...A_K} = K+1 。 由于 A_2\cap B_2=\emptyset ，所以等价为 X{A_1,B_1,B_2...A_k} = K+1 。 集合中共有 K+1 个数，若满足上式，即需要其中任意两个集合都有交，且所有交集的交不为 \emptyset 。 但是 A_1\cap B_1=\emptyset ，所以上式一定不成立。 也就是说增加 B_2 依然不会出现某个点被覆盖 K+1 次。 同理按照选取不相交区间的原则增加 B_3 ， B_4 ... ，都不会出现某个点被覆盖 K+1 次的情况。 所以说问题转化为从 N 个区间中任意选取 K 个，选择完某区间后可以再选择一个与它不相交的区间，求选取的所有区间总长度最大值。 转化成网络流模型： 每个区间拆点成 X_i,Y_i S 向 S' 连一条流量限制为 K ，费用为 0 的边 S' 向所有 X_i 连接流量限制为 1 ，费用为 0 的边 X_i 向 Y_i 连接流量限制为 1 ，费用为区间长度的边 Y_i 向 X_j 连接流量限制为 1 ，费用为 0 的边，其中 i\leq j 且区间 i,j 不相交 所有 Y_i 向 T 连接一条流量限制为 1 ， 费用为 0 的边。 求最大费用最大流。 费用取反跑最小费用流，其结果再取反即为答案。 O(N\times \log{N}) 建图方法 根据 O(N^2) 建图方法，我们明白了网络流模型转化的核心，即共 K 条流量，任意一个点可以流向与其不相交的区间所对应的点，跑费用流。 建图的瓶颈在于找到所有不相交的区间，需要 O(N^2) 的遍历。 比较显然的一点，就是如果按照左端点排序区间，如果 (x_i,y_i) 与 (x_j,y_j) 不相交，且 j-i 最小，那么对于区间 (x_k,y_k)(k\geq j) ，一定也不和 (x_i,y_i) 相交。 也就是说我们可以在 O(\log{N}) 的时间内找到第一个与 (x_i,y_i) 不相交的区间。 那么如果能让流量到达 (x_j,y_j) 后“自然地向后流“，就相当于可以流到所有和 (x_i,y_i) 不相交的区间。 想象整个直线是一条河，入河口流入 K 点流量。这条河可以通过无限流量且费用为 0 。每个节点在对应的坐标上，是一块河中一块小陆地。那么在所有区间的左右端点之间架一座桥，允许 1 的流量通过，费用为区间长度。 流量从 x_i\rightarrow y_i 之后，这一点流量可以选择再跨越后面任何一座没有流量经过的桥，或者一直沿着河流，直到河的尽头。 这么流依然保证了其合法性，但是建图复杂度大大降低了。 离散化所有结点，即 h(a) 为 a 的重标号， 0 和 n' 分别为第一个和最后一个点 h(x_i)\rightarrow h(y_i) ，费用为 y_i-x_i ，流量限制为 1 i\rightarrow i+1 ，费用为 0 ，流量限制为无穷 s\rightarrow 0 ，费用为 0 ，流量限制为 K n'\rightarrow T ，费用为 0 ，流量限制为 K 求 S-T 最大费用最大流，方法同理 离散化复杂度 O(N\times \log{N}) ，求 h(a) 的复杂度 O(\log{N}) ，所以建图复杂度为 O(N\times \log{N}) 。 注意事项 从来没有说过 y_i\geq x_i 参考代码 法一 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1000 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int S, T, F, C;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; static int N, K; static std::pair&lt;int, int&gt; P[MAXN]; scanf("%d%d", &amp;N, &amp;K); S = N * 2, T = N * 2 + 2; addEdge(S, S + 1, K, 0); rep(i, 0, N) &#123; scanf("%d%d", &amp;P[i].first, &amp;P[i].second); if(P[i].first &gt; P[i].second) &#123; std::swap(P[i].first, P[i].second); &#125; &#125; std::sort(P, P + N); rep(i, 0, N) &#123; addEdge(S + 1, i, 1, 0); addEdge(i + N, T, 1, 0); addEdge(i, i + N, 1, P[i].first - P[i].second); rep(j, i + 1, N) &#123; if(P[j].first &gt;= P[i].second) &#123; addEdge(i + N, j, 1, 0); &#125; &#125; &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += Dis[T] * f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125; 法二 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1000 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int S, T, F, C;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; static int N, K; static std::pair&lt;int, int&gt; P[MAXN]; scanf("%d%d", &amp;N, &amp;K); static int Hash[MAXN], total = 0; rep(i, 0, N) &#123; scanf("%d%d", &amp;P[i].first, &amp;P[i].second); if(P[i].first &gt; P[i].second) &#123; std::swap(P[i].first, P[i].second); &#125; Hash[total++] = P[i].first; Hash[total++] = P[i].second; &#125; std::sort(Hash, Hash + total); total = std::unique(Hash, Hash + total) - Hash; S = total, T = total + 1; addEdge(S, 0, K, 0); addEdge(total - 1, T, K, 0); rep(i, 1, total) &#123; addEdge(i - 1, i, INT_MAX, 0); &#125; rep(i, 0, N) &#123; int x = std::lower_bound(Hash, Hash + total, P[i].first) - Hash; int y = std::lower_bound(Hash, Hash + total, P[i].second) - Hash; addEdge(x, y, 1, P[i].first - P[i].second); &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += Dis[T] * f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6227 最长 k 可重线段集问题]]></title>
    <url>%2FLOJ-6227%2F</url>
    <content type="text"><![CDATA[有 N 条开线段，可以从中选择任意数量的开线段，使得对于任意直线 x=p ，至多有 K 条线段和它有交点。求选取的开线段的长度之和的最大值。 1\leq N\leq 500 1\leq K\leq 13 分析 和【【网络流24题】【最小费用最大流】luogu P3358 最长k可重区间集问题】几乎是一样的，但是有一个细节区分了这两道题（标程也没注意到）。 那就是对于某一条在直线 x=p 上的开线段，和一条左/右端点为 (p,q) 的开线段是没有交点的。 还要注意的一点，就是如果是 O(N\times\log{N}) 的建图方法，会出现自环且负环，需要特殊处理，比较麻烦，所以不如直接拆点跑网络流。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1200 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 1];int S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];bool Inq[MAXN];bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;struct Point &#123; int x, y, c; inline bool operator &lt; (const Point&amp; a) const &#123; return x == a.x ? y &lt; a.y : x &lt; a.x; &#125;&#125;;#define sqr(x) (x) * (x)void init() &#123; memset(H, -1, sizeof H); cntE = -1; int N, K; ll x0, x1, y0, y1; scanf("%d%d", &amp;N, &amp;K); static Point P[MAXN]; rep(i, 0, N) &#123;g scanf("%lld%lld%lld%lld", &amp;x0, &amp;y0, &amp;x1, &amp;y1); P[i] = (Point) &#123;std::min(x0, x1), std::max(x0, x1), std::sqrt(sqr(x0 - x1) + sqr(y0 - y1))&#125;; &#125; std::sort(P, P + N); S = N * 2, T = N * 2 + 2; addEdge(S, S + 1, K, 0); rep(i, 0, N) &#123; addEdge(S + 1, i, 1, 0); addEdge(i + N, T, 1, 0); addEdge(i, i + N, 1, -P[i].c); rep(j, i + 1, N) &#123; if(P[j].x &gt;= P[i].y &amp;&amp; !(P[i].x == P[i].y &amp;&amp; P[j].x == P[j].y &amp;&amp; P[i].x == P[j].x)) &#123; addEdge(i + N, j, 1, 0); &#125; &#125; &#125;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += f * Dis[T]; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6225 火星探险问题]]></title>
    <url>%2FLOJ-6225%2F</url>
    <content type="text"><![CDATA[Q\times P 的网格图，起点位于左上角 (1,1) ，终点位于右下角 (Q,P) 。 现在有 N 个机器人从起点出发，每次只能向右或向下移动一格，且不能碰到障碍物。 每个格子有三种可能的状态：空地、有标本、有障碍物。 第一个抵达有标本的格子的机器人会取走该格子的标本，每个格子可以同时容纳多个机器人。 如果不能抵达终点，路上收集的标本将作废。 给出每个机器人的移动方案，使得采集到最多的标本，且最多的机器人达到终点。 P,Q\leq 35 分析 显然是最大费用最大流。流量是机器人的个数，保证每个机器人都能到终点，费用是标本数。 输出方案也很简单，直接就是在回溯更新每条边流量的时候的存储路径上的点，然后再从起点到终点，比照一下相连两个点的位置关系，按照要求输出即可。 不过需要注意的一点是，很可能跑不到 N 次就已经得到最大费用最大流了，所以剩下的机器人只需要随便找一条合法的路径输出。比较偷懒的方法就是剩下的全部输出最后一次增广的路径方案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 35 * 40 * 2 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125; E[MAXM &lt;&lt; 1];int N, P, Q, S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];bool Inq[MAXN];bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;int A[MAXN][MAXN];int getId(int x, int y) &#123; return x * P + y;&#125;bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; x &lt;= Q &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= P &amp;&amp; A[x][y] != 1;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N &gt;&gt; P &gt;&gt; Q; rep(i, 1, Q + 1) &#123; rep(j, 1, P + 1) &#123; std::cin &gt;&gt; A[i][j]; &#125; &#125; int up = getId(Q, P); S = 0, T = up * 2; addEdge(S, getId(1, 1), N, 0); rep(i, 1, Q + 1) &#123; rep(j, 1, P + 1) &#123; if (A[i][j] == 2) &#123; addEdge(getId(i, j), getId(i, j) + up, 1, -1); &#125; if (A[i][j] != 1) &#123; addEdge(getId(i, j), getId(i, j) + up, INT_MAX, 0); if (check(i, j + 1)) &#123; addEdge(getId(i, j) + up, getId(i, j + 1), INT_MAX, 0); &#125; if (check(i + 1, j)) &#123; addEdge(getId(i, j) + up, getId(i + 1, j), INT_MAX, 0); &#125; &#125; &#125; &#125;&#125;void mcmf() &#123; static std::stack&lt;int&gt; Stk; static int A[MAXN], total; init(); int cnt = 1; while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); if(i &lt;= getId(Q, P)) &#123; Stk.push(i); &#125; &#125; F += f; C += Dis[T] * f; int last = Stk.top(); Stk.pop(); total = 0; while (!Stk.empty()) &#123; int x = Stk.top(); Stk.pop(); if (x == last + 1) &#123; A[total++] = 1; &#125; else &#123; A[total++] = 0; &#125; last = x; &#125; rep(j, 0, total) &#123; std::cout &lt;&lt; cnt &lt;&lt; " " &lt;&lt; A[j] &lt;&lt; std::endl; &#125; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; ++cnt; &#125; rep(i, cnt, N + 1) &#123; rep(j, 0, total) &#123; std::cout &lt;&lt; i &lt;&lt; " " &lt;&lt; A[j] &lt;&lt; std::endl; &#125; &#125;&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6008 餐巾计划]]></title>
    <url>%2FLOJ-6008%2F</url>
    <content type="text"><![CDATA[共 n 天，每天需要 R_i 块干净的纸巾。纸巾用完一次就脏了，可以选择清洗后使用或不再使用。 已知新买纸巾的价格为 p ，花 m 天快洗纸巾的价格为 f ，花 n 天慢洗纸巾的价格为 s 。 求最小花费。 n \leq 2000 ， R_i \leq 10^7 ， p,f,s \leq 10^4 。 分析 考虑网络流算法。 第一天为源点 S ，最后一天为汇点 T ，纸巾为流量，价格为费用。 通过简单贪心可以得到每天的干净纸巾刚好为所需要的数量时，总花费一定最小。 由此问题转化为求建图后跑满流的情况下的最小费用。 最小费用最大流。 考虑如何使得满足每天恰好使用 R_i 块纸巾。 将每天拆成两个点，即使用前 X_i 和使用后 Y_i 。 建图方法如下（ (c, f) 即费用为 c 、流量为 f 的边）： S 与 X_i 连接一条 (0, V_i) 的边，即第 i 天纸巾需要的数量； Y_i 与 T 连接一条 (0, V_i) 的边，即第 i 天使用的纸巾的数量； S 与 Y_i 连接一条 (p, inf) 的边，即第 i 天购买新纸巾，花费为 p ； X_i 与 X_{i+1} 连接一条 (0, inf) 的边，即第 i 天没用完的纸巾留给第 i + 1 天，没有费用； X_i 与 Y_{i+m} 连接一条 (f, inf) 的边，即第 i 天快洗后的纸巾第 i+m 天拿到干净纸巾，花费为 f ； X_i 与 Y_{i+n} 连接一条 (s, inf) 的边，即第 i 天慢洗后的纸巾第 i+n 天拿到干净纸巾，花费为 s 。 由于所有与源点 S 的所有边都与每一个 X_i 相连，由此保证了每天都有 R_i 的流量流入，即 R_i 块新纸巾。 由于所有与汇点 T 的所有边都与 Y_i 相连，由此限制了每天必须有 R_i 的流量流出（因为是跑最大流）。 可以发现所有所有与 T 相连的边 e ，边权和 \sum{e_f}=\sum{R_i} ，保证了最大流为所需纸巾数之和，即上文说道的通过贪心得到最小费用的情况。 至于购买新纸巾，快洗和慢洗就都不难理解了。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156// Copyright 2018, Skqliao// 最小费用最大流#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace mcmf &#123;const int MAXN = 4000 + 5;const int MAXM = MAXN * 3;const ll INF = LLONG_MAX;struct Edge &#123; int v, nxt; ll c, f;&#125; E[MAXM &lt;&lt; 1];int S, T;int Path[MAXN &lt;&lt; 1], Pre[MAXN &lt;&lt; 1];int H[MAXN &lt;&lt; 1], cntE;void addEdge(int u, int v, ll c, ll f) &#123; E[++cntE] = (Edge) &#123;v, H[u], c, f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], -c, 0&#125;; H[v] = cntE;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); int N = io::gt&lt;int&gt;(); S = 0, T = N &lt;&lt; 1 | 1; rep(i, 1, N + 1) &#123; ll f = io::gt&lt;ll&gt;(); addEdge(0, i, 0, f); addEdge(i + N, T, 0, f); &#125; rep(i, 1, N) &#123; addEdge(i, i + 1, 0, INF); &#125; int p = io::gt&lt;int&gt;(); int m = io::gt&lt;int&gt;(), f = io::gt&lt;int&gt;(); int n = io::gt&lt;int&gt;(), s = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; addEdge(0, i + N, p, INF); &#125; rep(i, 1, N - m + 1) &#123; addEdge(i, i + m + N, f, INF); &#125; rep(i, 1, N - n + 1) &#123; addEdge(i, i + n + N, s, INF); &#125;&#125;bool Vis[MAXN];ll Dis[MAXN];bool dijkstra() &#123; std::queue&lt;int&gt; pq; memset(Dis, 0x3f, sizeof Dis); memset(Vis, 0, sizeof Vis); Dis[S] = 0; pq.push(S); while (!pq.empty()) &#123; int x = pq.front(); pq.pop(); Vis[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Path[v] = i, Pre[v] = x; if (!Vis[v]) &#123; pq.push(v); Vis[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != Dis[T + 1];&#125;ll mcmf() &#123; ll cost = 0; init(); while (dijkstra()) &#123; ll f = LLONG_MAX; for (int i = T; i != S; i = Pre[i]) &#123; f = std::min(f, E[Path[i]].f); &#125; cost += f * Dis[T]; for (int i = T; i != S; i = Pre[i]) &#123; E[Path[i]].f -= f; E[Path[i]^1].f += f; &#125; &#125; return cost;&#125;&#125;int main() &#123; printf("%lld\n", mcmf::mcmf()); return 0;&#125; 体会与心得 选择spfa还是Dijkstra真是玄学，有时前者快得多，有时反之 问题主要在于转换模型，对本题而言核心在于拆点，从而将状态分成两部分 贪心那一步比较显然但是很重要，它使得求解的模型从有上下界的网络流变成了最大流]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6013 负载平衡]]></title>
    <url>%2FLOJ-6013%2F</url>
    <content type="text"><![CDATA[G公司有 N 个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量为 A_i 。 如何用最少搬运量可以使 N 个仓库的库存数量相同。 搬运货物时，只能在相邻的仓库之间搬运。 1\leq N\leq 100 分析 两个任务，一是要保证最后每个点的权值相同，二是在此基础上使得总转移量最低。 那么状态量显然也是二维的。 考虑费用流，用流量保证任务一能完成，用费用使得任务二的结果最小。 每个点的最后状态为 T=\frac{\sum{A_i}}{N} ，需要额外流入/转出流量 |T-A_i| 。 先考虑流量。 常规思路，拆点 i\rightarrow(X_i, Y_i) ，即开始和结束两个状态。 建立源点 S 和汇点 T ，如果 A_i &lt; T ，连接 S \rightarrow X_i ，流量限制为 T - A_i ，否则连接 Y_i\rightarrow T ，流量限制为 A_i - T 。 如此便保证了跑出最大流之后，每个点的权值最终一定为平均值（对盈余和缺少的流量强制流入流出）。 然后看费用。 每个点只能向左右两个点转移。 有两种情况。 一是，当前转移到 j 的流量只是路过，即 j 是中转站； 二是，转移的流量就是给 j 的，即 j 是目的地。 根据拆点后的状态，显然对于两种情况分别连接 X_i\rightarrow X_j 和 X_i\rightarrow Y_j 。 费用为 1 ，流量限制为 INF 。 对于为了满足任务一建的边，显然费用为 0 。 S-T 最小费用最大流之最小费用即为答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 1000 + 5;const int INF = INT_MAX / 3;namespace mcmf &#123;const int MAXN = 200 + 5;const int MAXM = 5000 + 5;struct Edge &#123; int v, f, c, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, cost, flow;int Pe[MAXN], Pv[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, f, c, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, -c, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); memset(Inq, 0, sizeof Inq); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Pe[v] = i, Pv[v] = x; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void init() &#123; static int A[MAXN]; memset(H, -1, sizeof H); cntE = -1; int total = 0; std::cin &gt;&gt; N; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; A[i]; total += A[i]; &#125; total /= N; S = 0, T = N * 2 + 1; rep(i, 1, N + 1) &#123; if(A[i] &lt; total) &#123; addEdge(S, i, total - A[i], 0); &#125; else &#123; addEdge(i + N, T, A[i] - total, 0); &#125; int lst = i - 1, nxt = i + 1; if(i != 1) &#123; addEdge(i, lst, INF, 1); addEdge(i, lst + N, INF, 1); &#125; if(i != N) &#123; addEdge(i, nxt, INF, 1); addEdge(i, nxt + N, INF, 1); &#125; &#125; addEdge(1, N, INF, 1); addEdge(1, N + N, INF, 1); addEdge(N, 1, INF, 1); addEdge(N, 1 + N, INF, 1);&#125;int mcmf() &#123; init(); while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Pv[i]) &#123; E[Pe[i]].f -= f; E[Pe[i] ^ 1].f += f; &#125; &#125; return cost;&#125;&#125;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6122 航空路线问题]]></title>
    <url>%2FLOJ-6122%2F</url>
    <content type="text"><![CDATA[有 N 个结点， M 条无向边。现想从结点 1 走到 N 再走回 1 ，且每个结点至多只能访问一次（除了结点 1 ）。 求该路径的最大长度并顺序输出途经结点，如果不存在，输出No Solution! 1\leq N\leq 100 分析 首先将问题转化一下，由于除了起点可以经过两次，其他结点均只能经过一次。那么问题可以等价于寻找两条起点为 1 ，终点为 N 的不相交路径（除了起点终点），使得两条路径的长度和最大。 构造跑最大流显然是不够的，因为最大流只会使得流量最大，而不会关心沿途结点个数。 构造图的方法很简单，依旧是拆点，然后边流量限制置为 1 ，起点终点限制置为 2 。 如果存在路径 (u, v) ，连边 (u.y, v.x) ，即访问完 u 后可以访问 v 。 然后连接 (i.x, i.y) ， (S, 1.x) ， (N.y, T) ，构图完成。 但是它和最大流是有关系的，因为存在路径条数为 2 的限制，即最大流为 2 。 对于无解情况很好判断，最大流 F &lt; 2 时，即不存在两条路径，无解。 那么问题在于如何使得途径点数最多。 考虑再引入一维，使得在满足最大流最大的情况下，该值最大。 想到费用流。由于途径的每个点，根据拆点的思想，一定会从“未访问”到“访问”，而且根据限制，每个点至多访问一次。 那么将 (i.x, i.y) 的费用置为 1 ，其他边均为 0 , 那么 S-T 跑得的费用即为经过点的个数。 最小费用最大流使用 SPFA 根据EK的思路增广即可，求最大费用也很简单，费用 c_i 置成 -c_i 即可。 关于路径输出，我们可以发现如果增广路途经 i.y(i \not= N) ，那么它一定是通过某 j.x 而来，而且这个 j 是唯一的（流量限制为 1 ）。那么从 T 开始寻找两条增广路，分别纪录前驱后继，最后一个正序，一个逆序输出即可。 注意的点： 可能会存在边 (1, N) ，那么这个时候 1-&gt;N-&gt;1 是一条合法路径，但是按照之前的方法建图最大流不一定是 2 （比如 1 到 N 只存在这条路径，最大流为 1 ）。那么对于这条边，流量置为 2 。输出路径的时候如果发现不存在两条增广路，直接输出 1\ N\ 1 即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 200 + 5;const int MAXM = 5000 + 5;struct Edge &#123; int v, f, c, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, cost, flow;int Pe[MAXN], Pv[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, f, c, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, -c, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); memset(Inq, 0, sizeof Inq); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Pe[v] = i, Pv[v] = x; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;std::map&lt;std::string, int&gt; Map;std::vector&lt;std::string&gt; Vs;void init() &#123; std::string str, str2; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N &gt;&gt; M; S = 0, T = N * 2 + 1; Vs.push_back(""); rep(i, 1, N + 1) &#123; std::cin &gt;&gt; str; Map[str] = i; if(i != 1 &amp;&amp; i != N) &#123; addEdge(i, i + N, 1, 0); &#125; else &#123; addEdge(i, i + N, 2, 0); &#125; Vs.push_back(str); &#125; rep(i, 0, M) &#123; std::cin &gt;&gt; str &gt;&gt; str2; int u = Map[str], v = Map[str2]; if(u &gt; v) &#123; std::swap(u, v); &#125; if(u == 1 &amp;&amp; v == N) &#123; addEdge(u + N, v, 2, -1); &#125; else &#123; addEdge(u + N, v, 1, -1); &#125; &#125; addEdge(S, 1, 2, 0); addEdge(N * 2, T, 2, 0);&#125;void mcmf() &#123; init(); while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Pv[i]) &#123; E[Pe[i]].f -= f; E[Pe[i] ^ 1].f += f; &#125; &#125;&#125;int Match[MAXN];std::vector&lt;int&gt; V;void print() &#123; if(flow &lt; 2) &#123; std::cout &lt;&lt; "No Solution!" &lt;&lt; std::endl; &#125; else &#123; std::cout &lt;&lt; -cost &lt;&lt; std::endl; int cnt = -1, A[2]; for(int i = H[N]; ~i; i = E[i].nxt) &#123; if(E[i].f) &#123; A[++cnt] = E[i].v - N; &#125; &#125; if(cnt == 0) &#123; std::cout &lt;&lt; Vs[1] &lt;&lt; std::endl; std::cout &lt;&lt; Vs[N] &lt;&lt; std::endl; std::cout &lt;&lt; Vs[1] &lt;&lt; std::endl; return; &#125; rof(x, N, 1) &#123; for(int i = H[x]; ~i; i = E[i].nxt) &#123; if(E[i].f &amp;&amp; E[i].v != x + N) &#123; Match[x] = E[i].v - N; break; &#125; &#125; &#125; for(int i = A[0]; i &gt; 0; i = Match[i]) &#123; V.push_back(i); &#125; std::reverse(ALL(V)); rep(i, 0, SZ(V)) &#123; std::cout &lt;&lt; Vs[V[i]] &lt;&lt; std::endl; &#125; std::cout &lt;&lt; Vs[N] &lt;&lt; std::endl; for(int i = A[1]; i &gt; 0; i = Match[i]) &#123; std::cout &lt;&lt; Vs[i] &lt;&lt; std::endl; &#125; &#125;&#125;&#125; // namespace mcmfint main() &#123; mcmf::mcmf(); mcmf::print(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6004 圆桌聚餐]]></title>
    <url>%2FLOJ-6004%2F</url>
    <content type="text"><![CDATA[有 N 个单位分别有 A_i 个代表，有 M 张餐桌，分别可容纳 B_i 个人。 不存在同一个单位的两名代表再同一张餐桌上，求是否存在分配方案可以满足该要求。 如果有，输出每个单位各个代表的餐桌编号。 1\leq m\leq150, 1\leq n\leq 270 分析 比较明显转化成最大流问题。 S,T 分别和各个单位和餐桌连边，流量限制为 A_i,B_i 。 单位和餐桌之间连接流量限制为 1 的边。 如果 S-T 最大流和 \sum{A_i} 相等，则说明存在分配方案，反之不存在。 至于具体编号，考虑第 i 个单位，如果与它相连的边流量限制剩余 0 且不是 S ，则说明存在流量增广，输出边对应点即为餐桌编号。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 500 * 2 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f;&#125; E[MAXM &lt;&lt; 1];int M, N, S, T, F, ffffc, tim, total;int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Cur[MAXN], Lv[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, H[u], f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; Que.push(S); Dis[S] = 0; Lv[S] = ++tim; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != Lv[x] &amp;&amp; E[i].f) &#123; Lv[v] = Lv[x]; Dis[v] = Dis[x] + 1; Que.push(v); &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int f = dfs(v, std::min(E[i].f, left)); if (!f) &#123; Dis[v] = -1; &#125; else &#123; left -= f; E[i].f -= f; Flow[i ^ 1] += f; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;void init() &#123; int x; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; M &gt;&gt; N; S = N + M, T = N + M + 1; rep(i, 0, M) &#123; std::cin &gt;&gt; x; total += x; addEdge(S, i, x); rep(j, 0, N) &#123; addEdge(i, j + M, 1); &#125; &#125; rep(i, 0, N) &#123; std::cin &gt;&gt; x; addEdge(M + i, T, x); &#125;&#125;void dinic() &#123; init(); while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof Flow); &#125; if(total != F) &#123; std::cout &lt;&lt; 0 &lt;&lt; std::endl; &#125; else &#123; std::cout &lt;&lt; 1 &lt;&lt; std::endl; rep(i, 0, M) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(!E[j].f &amp;&amp; E[j].v &gt;= M) &#123; std::cout &lt;&lt; E[j].v + 1 - M &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; &#125; &#125;&#125;&#125;int main() &#123; dinic::dinic(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6001 太空飞行计划]]></title>
    <url>%2FLOJ-6001%2F</url>
    <content type="text"><![CDATA[有 n 个集合，选择第 i 个集合可以获得 C_i 的收益，但是必须购买其中包含的所有元素（不同集合中出现的相同元素只需要购买一次），购买 第 j 个元素的花费为 A_j 。 求最大收益，以及选择的集合及其包含的所有元素。 1\leq n\leq 50 、 1\leq m\leq 100 。 分析 将 n 个集合看作二分图的 X 集合中的顶点，所有元素作为二分图的 Y 集合中的结点。 - S 向 X_i 连接一条边权为 C_i 的有向边 - Y_i 向 T 连接一条边权为 A_i 的有向边 - 对所有集合包含元素的点对 (X_i, Y_j) （元素 j 在集合 i 中） 连接一条边权为无限的有向边求原图的最大流 MaxFlow ，以及总收益 Total = \sum{C_i} 。那么最大收益为 MaxFlow - Total 。 那么找到选择的集合与所有元素，即找到跑满流的边所连接的顶点。 即最后一次增广经过的所有结点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 200 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int n, m, S, T, ffffc, tim;int Dis[MAXN], Lv[MAXN];int H[MAXN], cntE;int Cur[MAXN], Flow[MAXM &lt;&lt; 1];int B[MAXN], tot;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;std::string str;int cur;int gt() &#123; int x = 0, flag = false; while(cur &lt; SZ(str) &amp;&amp; !isdigit(str[cur])) &#123; ++cur; &#125; rep(i, cur, SZ(str)) &#123; if(!isdigit(str[i])) &#123; break; &#125; x = x * 10 + str[i] - '0'; flag = true; cur = i + 1; &#125; return flag ? x : -1;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); std::getline(std::cin, str); m = gt(), n = gt(); S = 0, T = n + m + 1; int x; rep(i, 1, m + 1) &#123; cur = 0; std::getline(std::cin, str); addEdge(S, i, B[i] = gt()); tot += B[i]; while(true) &#123; if((x = gt()) == -1) &#123; break; &#125; addEdge(i, m + x, INT_MAX); &#125; &#125; rep(i, 1, n + 1) &#123; std::cin &gt;&gt; x; addEdge(m + i, T, x); &#125;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for(Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if(x == T) &#123; return true; &#125; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if(x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for(int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if(!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if(!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while(true) &#123; while(bfs()) &#123; memcpy(Cur, H, sizeof H); int f = dfs(S, INT_MAX); flow += f; &#125; if(!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; rep(i, 1, m + 1) &#123; if(Lv[i] == tim) &#123; std::cout &lt;&lt; i &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; rep(i, m + 1, n + m + 1) &#123; if(Lv[i] == tim) &#123; std::cout &lt;&lt; i - m &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; return tot - flow;&#125;int maxflow() &#123; init(); return dinic();&#125;&#125;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout &lt;&lt; dinic::maxflow() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6121 孤岛营救问题]]></title>
    <url>%2FLOJ-6121%2F</url>
    <content type="text"><![CDATA[一个 N \times M 的网格图，其中相邻的格子之间可能互通，共有三种情况如下： - 已经连通 - 有一堵墙，无法逾越 - 有一扇编号为 A_i 的门，需要对应编号的钥匙打开（钥匙可以多次使用） 已知你现在位于 (1,1) ，需要抵达 (N, M) 。 有 P 种门，门和墙的总数为 K ，共 S 把钥匙。 走到相邻的格子花费 1 时间，捡起钥匙和打开门不消耗时间。 求抵达目的地的最短时间，如果无法抵达，输出 -1 。 N,M,P\leq 10 K\leq 150 S\leq 14 分析 每得到一个钥匙，图的连通性就发生了改变。放在一起处理比较麻烦，考虑单独处理。 一共有 P 种钥匙，那么共有 2^P 种不同连通性的图，分别跑最短路即可。 具体实现即每次到达一个有钥匙的格子后，如果有新钥匙，那么进入下一层跑最短路。 钥匙的状态有两进制状压，记 D_{i,j,k} 为在钥匙数 i 状态下 (1,1) 转移到 (j,k) 的最短时间，答案为 \min{D_{i,N,M} \mid i \in[0, 2^S)} 。 注意事项 同一个格子可能会有多把钥匙 注意空间 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 10 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M, P, K, S;int Dis[1 &lt;&lt; MAXN][MAXN][MAXN];int Map[MAXN][MAXN][4];std::vector&lt;int&gt;Key[MAXN][MAXN];bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= M;&#125;bool bfs() &#123; std::queue&lt;std::pair&lt;int, int&gt; &gt; Que; Que.push(std::make_pair(1, 1)); while(!Que.empty()) &#123; std::pair&lt;int, int&gt; x = Que.front(); Que.pop(); if(x.first == N &amp;&amp; x.second == M) &#123; return true; &#125; rep(i, 0, 4) &#123; int nx = x.first + Dicx[i], ny = x.second + Dicy[i]; if(check(nx, ny) &amp;&amp; Map[x.first][x.second][i] &amp;&amp; !Dis[0][nx][ny]) &#123; Dis[0][nx][ny] = 1; Que.push(std::make_pair(nx, ny)); &#125; &#125; &#125; return false;&#125;void check(int cur, int lst, int lx, int ly) &#123; std::queue&lt;std::pair&lt;int, int&gt; &gt; Que; std::bitset&lt;MAXN&gt; Bt = cur; Que.push(std::make_pair(lx, ly)); Dis[cur][lx][ly] = Dis[lst][lx][ly]; while(!Que.empty()) &#123; std::pair&lt;int, int&gt; x = Que.front(); Que.pop(); if(!Key[x.first][x.second].empty()) &#123; rep(i, 0, SZ(Key[x.first][x.second])) &#123; if(!Bt[Key[x.first][x.second][i]]) &#123; check(cur | (1 &lt;&lt; Key[x.first][x.second][i]), cur, x.first, x.second); &#125; &#125; &#125; rep(i, 0, 4) &#123; int nx = x.first + Dicx[i], ny = x.second + Dicy[i]; if(check(nx, ny) &amp;&amp; (Map[x.first][x.second][i] == -1 || Bt[Map[x.first][x.second][i]])) &#123; if(Dis[cur][nx][ny] &gt; Dis[cur][x.first][x.second] + 1) &#123; Dis[cur][nx][ny] = Dis[cur][x.first][x.second] + 1; Que.push(std::make_pair(nx, ny)); &#125; &#125; &#125; &#125;&#125;int main() &#123; int x1, y1, x2, y2, z; std::cin &gt;&gt; N &gt;&gt; M &gt;&gt; P &gt;&gt; K; memset(Map, -1, sizeof Map); rep(i, 0, K) &#123; std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; z; if(x1 == x2) &#123; Map[x1][y1][y1 &gt; y2 ? 1 : 3] = z; Map[x2][y2][y1 &gt; y2 ? 3 : 1] = z; &#125; else &#123; Map[x1][y1][x1 &gt; x2 ? 2 : 0] = z; Map[x2][y2][x1 &gt; x2 ? 0 : 2] = z; &#125; &#125; std::cin &gt;&gt; S; rep(i, 0, S) &#123; std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z; Key[x1][y1].push_back(z); &#125; if(!bfs()) &#123; std::cout &lt;&lt; -1 &lt;&lt; std::endl; &#125; else &#123; memset(Dis, 0x3f, sizeof Dis); Dis[0][1][1] = 0; check(0, 0, 1, 1); int ans = INT_MAX; rep(i, 0, 1 &lt;&lt; (P + 1)) &#123; ans = std::min(ans, Dis[i][N][M]); &#125; std::cout &lt;&lt; ans &lt;&lt; std::endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6005 最长递增子序列]]></title>
    <url>%2FLOJ-6005%2F</url>
    <content type="text"><![CDATA[有一个长度为 N 的序列 A ，求解以下询问： 最长不下降子序列的长度 K 原序列最多可以取出长度为 K 的不下降子序列的个数 （每个数只能用一次） 如果 A_1 和 A_N 可以取无数次，再求第二问 1\leq N\leq 500 分析 第一问，随便 O(N ^2) dp一下即可。 第二问，由于每个数只能用一次，那么基本思想还是拆点。将每个点拆成 B_i 和 C_i ，即结点 i 选择前和选择后的两种状态。 记 F_i 为以 A_i 为结尾的最长不下降子序列的长度。 首先，源点 S 和所有 B_i 满足 F_i = 1 的结点相连。同理，所有 C_i 满足 F_i = K 的结点和 T 相连。流量限制为 1 。 对于一个合法的子序列，相邻元素一定满足 A_i \geq A_j 且 F_i = F_j + 1(j&lt; i) 。 那么对满足这种条件的点对 (i,j) 便需要连一条 (C_j, B_i) 的边，流量限制为 1 ，意为选择 j 后可以再选择 i 作为后继。 当然， B_i 和 C_i 也有一条流量限制为 1 的边，因为选择结点 i 之后，状态便由未选择转移到了选择完。 跑 S-T 最大流即为第二问结果。 对于第三问，很显然的做法便是放开对结点 1 和结点 N 的限制。将原来流量限制为 1 的边修改为 INF 即可（或者直接加新边）。 需要注意的几点细节： 对于单调下降的序列 A ， K = 1 。因此所有结点既满足 F_i = 1 也满足 F_i = K ，判断和源汇点连边的时候是，注意是if()if()而不是if()else if() 对于第三问的修改操作，直接加边更方便。但是要注意的是， F_1 = 1 是一定成立的，但是 F_N = K 是不一定成立的。所以加边之前需要检查一下是否原图存在边。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1200 + 5;const int MAXM = MAXN * MAXN;namespace dinic &#123;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Lv[MAXN], Cur[MAXN];int N, M, S, T, tim, ffffc, F;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1;&#125;&#125;int A[MAXN], F[MAXN];int main() &#123; int n, ans = 0; scanf("%d", &amp;n); dinic::S = 0, dinic::T = n * 2 + 1; dinic::init(); rep(i, 1, n + 1) &#123; dinic::addEdge(i, i + n); scanf("%d", &amp;A[i]); F[i] = 1; rep(j, 1, i) &#123; if(A[j] &lt;= A[i]) &#123; F[i] = std::max(F[i], F[j] + 1); &#125; &#125; ans = std::max(ans, F[i]); &#125; rep(i, 1, n + 1) &#123; rep(j, 1, i) &#123; if(A[i] &gt;= A[j] &amp;&amp; F[i] == F[j] + 1) &#123; dinic::addEdge(j + n, i); &#125; &#125; &#125; rep(i, 1, n + 1) &#123; if(F[i] == 1) &#123; dinic::addEdge(dinic::S, i); &#125; if(F[i] == ans) &#123; dinic::addEdge(i + n, dinic::T); &#125; &#125; printf("%d\n", ans); printf("%d\n", dinic::dinic()); dinic::addEdge(dinic::S, 1, INT_MAX); dinic::addEdge(1, 1 + n, INT_MAX); dinic::addEdge(n, n + n, INT_MAX); if(F[n] == ans) &#123; dinic::addEdge(n + n, dinic::T, INT_MAX); &#125; printf("%d\n", dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6015 星际转移]]></title>
    <url>%2FLOJ-6015%2F</url>
    <content type="text"><![CDATA[地球和月球中间有 n 个太空站，有 m 艘太空船， k 个人要从地球前往月球。 已知每个太空站可以容纳无限多的人，每艘太空船的承载人数为 H_i ，以及它们的行驶路线（经过的每一个太空站编号）。 任意两个太空站之间的行驶时间均为 1 ，太空船周期行驶（终点站再回到初始站） 乘客可以选择在任意整数时刻下车或上车，这个操作不消耗时间。 假设所有太空船0时刻都在初始站，求所有人从地球转移到月球的最短时间。 如果不能到达，输出0。 n \leq 13 ， m \leq 20 ， k \leq 50 。 分析 首先判断是否有解。 很显然只要地球和月球之间存在路径，那么就一定有解。 用并查集维护所有点的连通关系，最后判断地球和月球是否属于同一集合即可。 然后是求最小值。 可以发现对于任意时刻 t_i ，所有太空船的位置是已知的。 那么我们将太空船的承载人数设为边的容量，乘客设为流量。 当存在流量 f \geq k 进入月球时，转移结束。 那么该如何建图？ 那么按照时间建分层图，对于时刻 t 的点 P_i ，建立新点 P_{i,t} ，根据太空船的行驶路径连接新边，继续跑最大流，直到流量达到 k 结束。 具体而言，即： 如果存在太空船 i 从 e 行驶到 v ，即存在边 e(u, v) ，那么对于新的第 t 层，连接 P_{u,t} 和 P_{v, t} ，流量限制为 H_i ，即太空船 i 的承载上限； 由于人可以在任意太空站上一直等，所以对于所有点 P_i ，连接 P_{i,t-1} 和 P_{i,t} ，流量限制为 INF ，因为太空站的承载能力是无限的； 设汇点为初始时刻的月球编号 T_0 ，那么连接 T_{t+1} 和 T_{t} ，流量限制为 INF ，如此任意时刻新增的流量可以回到 T_0 方便统计。 不能使用ISAP跑最大流，选择用Dinic。 因为Dinic是多次分层，而ISAP是一次分层，无法处理新加进来的点。 循环当前时刻 t 并直接在残余网络上加边构建分层图，累计流量直到超过 k 输出 t 并跳出。 注意不能使用capacity scaling来优化Dinic，这样增加新边后似乎是跑不出最大流的... 复杂度分析 Dinic算法求最大流的复杂度上界为 O(V^2\times E) 。 分层图新建 t 层，复杂度 O(t\times V^2 \times E) 。 E 最大为 n\times m ，最坏情况下只存在一条路径经过所有点从地球到达月球，且限制为1，此时 t 为 n\times k 。 所以复杂度的上界为 O(n^3\times m^2 \times k) ，对于如此小的 n,m,k ，跑起来毫无压力。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace uf &#123;const int MAXN = 20;int Fa[MAXN];void init(int n) &#123; rep(i, 0, n) &#123; Fa[i] = i; &#125;&#125;int find(int x) &#123; return Fa[x] == x ? x : Fa[x] = find(Fa[x]);&#125;void merge(int x, int y) &#123; x = find(x), y = find(y); if (x != y) &#123; Fa[y] = x; &#125;&#125;&#125; // namespace ufnamespace dinic &#123;const int MAXN = 1200 + 5;const int MAXM = 12000 + 5;const int MAXK = 50 + 5;const int INF = INT_MAX;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int K, n, S, T;int A[MAXN][MAXK];int H[MAXN], cntE;int Dis[MAXN];bool bfs() &#123; static std::queue&lt;int&gt; q; memset(Dis, -1, sizeof Dis); Dis[S] = 0; q.push(S); while (!q.empty()) &#123; int x = q.front(); q.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; !~Dis[v]) &#123; Dis[v] = Dis[x] + 1; q.push(v); &#125; &#125; &#125; return ~Dis[T];&#125;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -f, H[v]&#125;; H[v] = cntE;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int curf = 0; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &gt; 0) &#123; int flow = dfs(v, std::min(E[i].f, maxf - curf)); E[i].f -= flow, E[i ^ 1].f += flow; curf += flow; if (curf == maxf) &#123; return curf; &#125; &#125; &#125; return curf;&#125;int dinic() &#123; static int ans = 0; while (bfs()) &#123; ans += dfs(S, INF); &#125; return ans;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); n = io::gt&lt;int&gt;(), A[0][0] = io::gt&lt;int&gt;(), K = io::gt&lt;int&gt;(); T = n + 1; uf::init(T + 1); rep(i, 1, A[0][0] + 1) &#123; A[0][i] = io::gt&lt;int&gt;(); A[i][0] = io::gt&lt;int&gt;(); rep(j, 1, A[i][0] + 1) &#123; int x = io::gt&lt;int&gt;(); A[i][j] = ~x ? x : T; if (j &gt; 1) &#123; uf::merge(A[i][j - 1], A[i][j]); &#125; &#125; &#125; if (uf::find(S) != uf::find(T)) &#123; puts("0"); exit(0); &#125;&#125;void addGraph(int t) &#123; rep(i, 0, n + 1) &#123; addEdge(i + (t - 1) * (n + 2), i + t * (n + 2), INF); &#125; addEdge(n + 1 + t * (n + 2), n + 1 + (t - 1) * (n + 2), INF); rep(i, 1, A[0][0] + 1) &#123; int tmp = (t - 1) % A[i][0] + 1; addEdge(A[i][tmp] + (t - 1) * (n + 2) , A[i][t % A[i][0] + 1] + t * (n + 2), A[0][i]); &#125;&#125;int maxFlow() &#123; init(); for (int t = 1; ; ++t) &#123; addGraph(t); if (dinic() &gt;= K) &#123; return t; &#125; &#125;&#125;&#125; // namespace dinicint main() &#123; printf("%d\n", dinic::maxFlow()); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6223 汽车加油行驶问题]]></title>
    <url>%2FLOJ-6223%2F</url>
    <content type="text"><![CDATA[一个 N * N 的网格图，起点为 (1,1) （左上角），终点为 (N,N) （右下角）。 一辆汽车从起点出发，油量为满（ K ），每走一格油量消耗 1 ，剩余 0 的时候无法行驶。 有些点有加油站，如果走到该点，必须加满，费用为 A 。 如果该点没有加油站，可以选择增设加油站，费用为 C （不算加油的费用）。 每经过一条网格边，如果是往左或往上走，费用为 B ；如果向下或者向右走，没有花费。 求最小花费。 2\leq N\leq 100,2\leq K\leq 10 分析 如果没有油量这个限制，就是一个最短路问题。 那么把剩余油量作为表示状态的一维。用 (x, y, k) 表示坐标为 (x,y) ，剩余流量为 k 的状态。 根据条件，可以得到 ： (x,y,k)\rightarrow(x-1,y,k-1) ，费用为 B （ k\geq1, x&gt;1 ）； (x,y,k)\rightarrow(x+1,y,k-1) ，费用为 0 （ k\geq1, x&lt;N ）； (x,y,k)\rightarrow(x,y-1,k-1) ，费用为 1 （ k\geq1, y&gt;1 ）； (x,y,k)\rightarrow(x,y+1,k-1) ，费用为 0 （ k\geq1, y&lt;N ）； (x,y,k)\rightarrow(x,y,K) ，费用为 A 或 A+C （ k\geq 0 ）。 这么建图有一个可能的问题在于：增设加油站只需要花费一次 C ，下一次再加就只需要花费 A 了，但是这么建图会导致每次费用都是 A+C 。 那么存在一个结论：每个点只会走一次。 简略证明：回去的目的就是再加油；如果加完油回来，跟之前的剩余油量相同，又要多付路费；如果加完油走别的路径会更优，那么在第一次到达这个点就会直接那么走，故回去加油不会更优。 最后增加 S\rightarrow (1,1,K) (N,N,i)\rightarrow T(0\leq i\leq K) ，流量全部置为 1 。 跑最小费用最大流即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace mcmf &#123;const int MAXN = 100 * 100 * 12 + 5;const int MAXM = MAXN * 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 1];int N, S, T, F, C;int H[MAXN], cntE;int getId(int x, int y, int k) &#123; return x * N + y + k * N * N;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; S = 0, T = 1; N = io::gt&lt;int&gt;(); int K = io::gt&lt;int&gt;(), A = io::gt&lt;int&gt;(), B = io::gt&lt;int&gt;(), C = io::gt&lt;int&gt;(); addEdge(S, getId(1, 1, K), 1, 0); rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; int opt = io::gt&lt;int&gt;(); rep(k, 0, K + 1) &#123; if(k != K) &#123; addEdge(getId(i, j, k), getId(i, j, K), 1, opt ? A : A + C); &#125; rep(d, 0, 4) &#123; int nx = i + Dicx[d], ny = j + Dicy[d]; if(((!opt &amp;&amp; k != 0) || k == K) &amp;&amp; (nx &gt;= 1 &amp;&amp; ny &gt;= 1 &amp;&amp; nx &lt;= N &amp;&amp; ny &lt;= N)) &#123; addEdge(getId(i, j, k), getId(nx, ny, k - 1), 1, (d == 1 || d == 2) ? B : 0); &#125; &#125; &#125; &#125; &#125; rep(i, 0, K) &#123; addEdge(getId(N, N, i), T, 1, 0); &#125;&#125;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Dis[v] &gt; Dis[x] + E[i].c &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125;&#125;void mcmf() &#123; init(); spfa(); printf("%d\n", Dis[T]);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6226 骑士共存问题]]></title>
    <url>%2FLOJ-6226%2F</url>
    <content type="text"><![CDATA[一个位于点 S 的骑士可以攻击到所有标记为 X 的红色格子，在一个 N * N 的棋盘上，有 M 个格子不能放置骑士，坐标为 (X_i,Y_i) 。 求最多能放多少个骑士，使得他们两两之间无法相互攻击。 1\leq N\leq 200 M\leq N^2 分析 根据观察可以发现，棋盘的红色和黄色两部分是互相影响的，但是其内部相互独立。任意放置一个骑士后，只会导致某些异色的格子无法再放置。 这是两个独立的部分，由此想到二分图。互不影响，我们可以想到独立集。 合在一起就是二分图最大独立集。 求二分图最大独立集，根据 二分图最大匹配=最大流=最小顶点覆盖=总结点数-最大独立集 转化成网络流问题。 建模方法如下： S 连接二分图 X 部， 二分图 Y 部连接 T ，流量限制皆为 1 ，不能同时放置骑士的点之间连接边，不设流量限制。 N\times N - M 为总结点数，与求得的 S-T 最大流做差即为答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = (200 + 5) * (200 + 5) + 5;const int MAXM = MAXN * 10;struct Edge &#123; int v, nxt, f;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, F, tim, ffffc;int H[MAXN], cntE;int Dis[MAXN], Lv[MAXN], Cur[MAXN], Flow[MAXM];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, H[u], f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;std::bitset&lt;MAXN&gt; Bt;const int Dicx[] = &#123;2, 1, -1, -2, -2, -1, 1, 2&#125;;const int Dicy[] = &#123;-1, -2, -2, -1, 1, 2, 2, 1&#125;;int getId(int x, int y) &#123; return x * N + y;&#125;bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= N &amp;&amp; !Bt[getId(x, y)];&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; int x, y; std::cin &gt;&gt; N &gt;&gt; M; rep(i, 0, M) &#123; std::cin &gt;&gt; x &gt;&gt; y; Bt[getId(x, y)] = 1; &#125; S = getId(N, N) + 1, T = S + 1; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; if(!Bt[getId(i, j)]) &#123; if((i + j) &amp; 1) &#123; addEdge(getId(i, j), T, 1); &#125; else &#123; addEdge(S, getId(i, j), 1); rep(k, 0, 8) &#123; int nx = i + Dicx[k], ny = j + Dicy[k]; if(check(nx, ny)) &#123; addEdge(getId(i, j), getId(nx, ny), INT_MAX); &#125; &#125; &#125; &#125; &#125; &#125;&#125;void dinic() &#123; init(); while(true) &#123; while(bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if(!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; Flow[i] = 0; &#125; &#125; std::cout &lt;&lt; N * N - M - F &lt;&lt; std::endl;&#125;&#125;int main() &#123; dinic::dinic(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
        <tag>最大独立集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6007 方格取数]]></title>
    <url>%2FLOJ-6007%2F</url>
    <content type="text"><![CDATA[有一个 N\times M 的矩阵，第 i 行 第 j 列的元素值为 A_{i,j} 。 现想从中选择任意多个数，使得权值和最大，要求选择的任意两个数在原矩阵中不相邻。 输出最大的权值和即可，无需具体方案。 1\leq N,M\leq 100 分析 首先将原图进行黑白染色，显然任意一个格子被选择后，都不能选择相邻的异色格子。这是一个二分图。 将每个格子与周围的异色格子连一条边，原问题转化为求二分图的最大点权独立集，即选择的任意两点没有边相连，且要求集合中的点权和最大。 对于这种问题，解法为： - 构造源点 S ，连接 S 和 X_i ，流量限制置为 A_{X_i} - 构造汇点 T ，连接 Y_i 和 T ，流量限制置为 A_{Y_i} - 原 X_i 和 Y_j 相连的边，流量限制置为 INF 那么最大点权独立集（maximum weight vertex independent set,MaxWVIS），即为点权和与最大流的差。 简单的理解就是说边 S-X_i 和 Y_j-T ，视作选择 X_i/Y_j 的代价。那么在总收益一定的前提下（即总边权和），总代价最小即最后收益最大。 根据最大流最小割定理，最大流即为最小割。对于任意一条 S-X_i-Y_j-T 的增广路径，被割掉的边要么为 S-X_i ，要么为 Y_i-T 。 割最小，即总代价最小，即总收益最大。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 100 * 100 + 5;const int MAXM = MAXN * 10 + 5;namespace dinic &#123;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, tim, ffffc;int Flow[MAXM &lt;&lt; 1], Cur[MAXN], Lv[MAXN], Dis[MAXN];int H[MAXN], cntE;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;int init() &#123; cntE = -1; memset(H, -1, sizeof H); std::cin &gt;&gt; N &gt;&gt; M; S = 0, T = N * M + 1; int x, sum = 0; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; std::cin &gt;&gt; x; sum += x; int cur = (i - 1) * M + j; if((i + j) &amp; 1) &#123; addEdge(S, cur, x); if(j != 1) &#123; addEdge(cur, cur - 1, INT_MAX); &#125; if(j != M) &#123; addEdge(cur, cur + 1, INT_MAX); &#125; if(i != 1) &#123; addEdge(cur, cur - M, INT_MAX); &#125; if(i != N) &#123; addEdge(cur, cur + M, INT_MAX); &#125; &#125; else &#123; addEdge(cur, T, x); &#125; &#125; &#125; return sum;&#125;int maxFlow() &#123; int sum = init(); return sum - dinic();&#125;&#125;int main() &#123; std::cout &lt;&lt; dinic::maxFlow() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
        <tag>最大点权独立集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6000 搭配飞行员]]></title>
    <url>%2FLOJ-6000%2F</url>
    <content type="text"><![CDATA[有 N 个点，其中编号为 1-M 的点可以和编号为 M+1-N 的点匹配。 已知所有允许的匹配点对 (a,b) ，求最大匹配数，并输出配对方案。 如果不存在，输出No Solution! 。 1\leq M\leq N\leq 100 分析 裸的二分图最大匹配。 考虑匈牙利算法，复杂度 O(n\times m) ，复杂度有点高（虽然也能跑过）。 考虑Hopcroft-Karp算法，复杂度 O(\sqrt{n}\times m) ，但是我不会写。 考虑最大流算法。 根据陈胤伯的集训队论文《浅谈图的匹配算法及其应用》，得知利用Dinic算法进行二分图最大匹配的复杂度亦为 O(\sqrt{n}\times m) ，遂选择之。 建图方法很简单，新建源点 S 和汇点 T ， S 、 T 分别与二分图的两部分的每个点连接流量限度为 1 的边， 可以匹配的点对 (a,b) 亦连接流量限制为 1 的边。跑得 S-T 最大流即原二分图最大匹配数。 至于匹配方案，根据残余网络，输出所有剩余流量为 0 且不与 S、T 、 相连的边的点对即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;int EN = 1;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EN = EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;#endif&#125; // namespace ionamespace dinic &#123;const int MAXN = 100 + 5;const int MAXM = 10000 + 5;const int INF = INT_MAX;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int N, M, S, T, flow, ffffc, tim;int H[MAXN], cntE;int Dis[MAXN], Cur[MAXN], Lv[MAXN];int Flow[MAXM &lt;&lt; 1];bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;u = Que[qh++]; if (u == T) &#123; return true; &#125; else &#123; for (int i = H[u]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Lv[v] != tim) &#123; Dis[v] = Dis[u] + 1; Lv[v] = tim; Que[qt++] = v; &#125; &#125; &#125; &#125; return false;&#125;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init() &#123; M = io::gt&lt;int&gt;(), N = io::gt&lt;int&gt;(); S = 0, T = N + 1; cntE = -1; memset(H, -1, sizeof H); while (io::EN == 1) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); if (x &gt; y) std::swap(x, y); addEdge(x, y); &#125; rep(i, 1, M + 1) &#123; addEdge(S, i); &#125; rep(i, M + 1, N + 1) &#123; addEdge(i, T); &#125;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &amp;&amp; Lv[v] == tim) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int ans = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof(int) * (N + 1)); int res = dfs(S, INF); ans += res; &#125; if (!ffffc) &#123; break; &#125; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); ffffc = 0; &#125; return ans;&#125;void match() &#123; init(); printf("%d\n", dinic());&#125;&#125; // namespace dinicint main() &#123; dinic::match(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6006 试题库]]></title>
    <url>%2FLOJ-6006%2F</url>
    <content type="text"><![CDATA[有 n 个数， m 个属性。第 i 个数有 A_i 个属性，分别为 B_{i,j} 。 从中选择 k 个数，使得这 m 个属性中，第 i 个属性有 C_i 个数。 输出任意一组解的每个属性对应的数，如果无解输出No Solution!。 2\leq k\leq 20, k\leq n\leq 1000 分析 二分图多重匹配。 二分图的 X_i 为这 n 个数， Y_i 为这 m 个属性，建立源点 S 和汇点 T 。 建图方案： - S 和 X_i 连接一条边权为 1 的有向边 - X_i 和 Y_i 根据属性和数的关系连接边权为 1 的有向边 - Y_i 和 T 连接边权为 C_i 的有向边。 跑 S-T 最大流，方案即为残余网络为 0 的边对应的结点 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 2000 + 5;const int MAXM = 240000 + 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Cur[MAXN], Flow[MAXM &lt;&lt; 1];int Dis[MAXN], Lv[MAXN];int N, M, S, T, K, ffffc, tim;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; int x, y; std::cin &gt;&gt; K &gt;&gt; N; S = 0, T = N + K + 1; rep(i, 1, K + 1) &#123; std::cin &gt;&gt; x; M += x; addEdge(i + N, T, x); &#125; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; x; while (x--) &#123; std::cin &gt;&gt; y; addEdge(i, y + N, 1); &#125; addEdge(S, i, 1); &#125;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); int f = dfs(S, INT_MAX); flow += f; &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return flow;&#125;void maxflow() &#123; init(); int maxflow = dinic(); if (maxflow != M) &#123; std::cout &lt;&lt; "No Solution!\n"; &#125; else &#123; rep(i, 1, K + 1) &#123; std::cout &lt;&lt; i &lt;&lt; ": "; for (int j = H[i + N]; ~j; j = E[j].nxt) &#123; if (E[j].f) &#123; std::cout &lt;&lt; E[j].v &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; &#125; &#125; return ;&#125;&#125;int main() &#123; dinic::maxflow(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图多重匹配</tag>
      </tags>
  </entry>
</search>
