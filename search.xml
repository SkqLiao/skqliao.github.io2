<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[「AHOI 2013」BZOJ 3238 差异]]></title>
    <url>%2FBZOJ-3238%2F</url>
    <content type="text"><![CDATA[对于字符串 S ，求 \sum\limits_{0&lt;i&lt;j&lt;|S|}{Len(T_i)+Len(T_j)-2\times LCP(T_i,T_j)} 。 即任意两后缀长度之和与它们最长公共前缀的长度之差的和。 |S|\leq 500000 分析 在后缀自动机上，两个子串的最长公共后缀对应Fail树上两串对应节点的LCA。因此可以反着建后缀自动机，变成求两前缀的最长公共后缀。 记 f(x) 为 x 子树的子串数量，则 x 的贡献为 len(x)\times (f(x)\times (f(x)-1)-\sum\limits_{v\in Son(x)}{f(v)\times ((f(v)-1))} 。转化一下，总贡献为 \sum{(len(x)-len(fa(x)))\times f(x)\times (f(x)-1)} 。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include &lt;bits/stdc++.h&gt;const int MAXN = 500000 * 2 + 5;struct State &#123; int len, fail, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;int Sz[MAXN], A[MAXN], C[MAXN];void push_back(int c) &#123; int cur = ++cntT, p = lst; Sz[cur] = 1; St[cur].len = St[p].len + 1; for (; p &amp;&amp; !St[p].ch[c]; p = St[p].fail) St[p].ch[c] = cur; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; for (; p &amp;&amp; St[p].ch[c] == q; p = St[p].fail) St[p].ch[c] = clone; &#125; &#125; lst = cur;&#125;char S[MAXN];int main() &#123; scanf("%s", S); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[St[i].len]++; &#125; for (int i = 1; i &lt;= len; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; C[A[St[i].len]--] = i; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; Sz[St[C[i]].fail] += Sz[C[i]]; &#125; long long ans = 1ll * (len + 1) * len / 2 * (len - 1); for (int i = 1; i &lt;= cntT; ++i) &#123; ans -= 1ll * (St[i].len - St[St[i].fail].len) * (Sz[i] - 1) * Sz[i]; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1396 识别子串]]></title>
    <url>%2FBZOJ-1396%2F</url>
    <content type="text"><![CDATA[对于字符串 S ，对于 \forall i ，求包含位置 i 且只出现一次的最短子串的长度。 |S|\leq 10^5 所有出现一次的子串一定是对 S 建立后缀自动机后Fail树的叶子节点。 而对于任意叶子节点 p ，它能位置包含 [1,max(p)] 。对于 i\in[1, max(p)-min(p)] ，贡献为 max(p)-i+1 ，对于 i\in [max(p)-min(p),max(p)] ，贡献为 max(p)-min(p)+1 。每个位置的答案可以通过两棵线段树维护。第一棵维护情况1的差分值，第二棵维护情况2，答案对两棵线段树对应位置的最小值取min。 复杂度 O(|S|\log{|S|}) 。 分析 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include &lt;bits/stdc++.h&gt;const int MAXN = 2e5 + 5;struct State &#123; int len, fail, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;void push_back(int c) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; for (; p &amp;&amp; !St[p].ch[c]; p = St[p].fail) St[p].ch[c] = cur; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; for (; p &amp;&amp; St[p].ch[c] == q; p = St[p].fail) St[p].ch[c] = clone; &#125; &#125; lst = cur;&#125;char S[MAXN];bool Vis[MAXN];struct SegmentTree &#123; static const int INF = 0x3f3f3f3f;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r int Min[MAXN &lt;&lt; 1]; void pushDown(int rt) &#123; if (Min[rt] == INF) return; Min[rt &lt;&lt; 1] = std::min(Min[rt &lt;&lt; 1], Min[rt]); Min[rt &lt;&lt; 1 | 1] = std::min(Min[rt &lt;&lt; 1 | 1], Min[rt]); &#125; void init() &#123; memset(Min, 0x3f, sizeof Min); &#125; void update(int rt, int l, int r, int a, int b, int x) &#123; if (b &lt; a) return; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; Min[rt] = std::min(Min[rt], x); return; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; update(LT, a, b, x); &#125; if (m &lt; b) &#123; update(RT, a, b, x); &#125; &#125; int query(int rt, int l, int r, int p) &#123; if (l == r) &#123; return Min[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125; &#125;&#125; Seg1, Seg2;int main() &#123; scanf("%s", S); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; Vis[St[i].fail] = 1; &#125; Seg1.init(); Seg2.init(); for (int i = cntT; i &gt;= 1; --i) &#123; if (Vis[i]) continue; int l = St[i].len - St[St[i].fail].len; int r = St[i].len; Seg1.update(1, 1, len, 1, l - 1, r + 1); Seg2.update(1, 1, len, l, r, r - l + 1); &#125; for (int i = 1; i &lt;= len; ++i) &#123; printf("%d\n", std::min(Seg1.query(1, 1, len, i) - i, Seg2.query(1, 1, len, i))); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2015」BZOJ 3998 弦论]]></title>
    <url>%2FBZOJ-3998%2F</url>
    <content type="text"><![CDATA[求字符串 S 的字典序第 K 小的子串。 对于 T=0 ，相同子串不被重复计算，对于 T=1 ，不同位置的相同子串被认为是不同的。如果不存在 K 个子串，输出-1。 |S|\leq 5\times 10^5 分析 对 S 建立后缀自动机，通过Fail树合并子树得到每个状态出现的次数，若 T=0 ，则赋初值为 1 ，否则为 |Right| 。然后在DAG上统计经过每个点的路径条数。最后比较当前 K 与经过点的路径数，从根节点遍历自动机得到答案字符串。 复杂度 O(|S|) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;struct State &#123; int len, fail, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;int OPT, K;int A[MAXN], C[MAXN];long long Sz[MAXN], Sum[MAXN];void push_back(int c) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; Sz[cur] = 1; while (p &amp;&amp; !St[p].ch[c]) &#123; St[p].ch[c] = cur; p = St[p].fail; &#125; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; while (p &amp;&amp; St[p].ch[c] == q) &#123; St[p].ch[c] = clone; p = St[p].fail; &#125; &#125; &#125; lst = cur;&#125;void get(int x, int k) &#123; if (k &lt;= Sz[x]) return; k -= Sz[x]; for (int i = 0; i &lt; 26; ++i) &#123; int v = St[x].ch[i]; if (Sum[v] &lt; k) k -= Sum[v]; else &#123; putchar(i + 'a'); get(v, k); return; &#125; &#125;&#125;char S[MAXN];int main() &#123; scanf("%s%d%d", S, &amp;OPT, &amp;K); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[St[i].len]++; &#125; for (int i = 1; i &lt;= len; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; C[A[St[i].len]--] = i; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; Sz[St[C[i]].fail] += Sz[C[i]]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; if (!OPT) &#123; Sum[i] = Sz[i] = 1; &#125; else &#123; Sum[i] = Sz[i]; &#125; &#125; Sum[1] = Sz[1] = 0; for (int i = cntT; i &gt;= 1; --i) &#123; for (int j = 0; j &lt; 26; ++j) &#123; Sum[C[i]] += Sum[St[C[i]].ch[j]]; &#125; &#125; if (Sum[root] &lt; K) &#123; puts("-1"); &#125; else &#123; get(root, K); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SPOJ 8222 NSUBSTR - Substrings]]></title>
    <url>%2FSPOJ-8222%2F</url>
    <content type="text"><![CDATA[对于字符串 S ，定义 f(i) 表示所有长度为 i 的子串在 S 中出现的最大次数。求 f(1),\cdots,f(|S|) 。 |S|\leq 250000 分析 显然 f(i) 单调不减。 对 S 建立后缀自动机，状态 p 对应长度为 [min(p),max(p)] 的子串，由于 f(i) 可以更新 f(i+1) ，因此只需要维护 min(p) 的最大次数。而 p 对应的子串次数为它在Fail树子树状态出现次数之和，因此可以逆拓扑序维护每个状态的出现次数维护 f(min(p)) ，最后从 f(1) 扫到 f(n) 取最大值。 复杂度 O(|S|) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include &lt;bits/stdc++.h&gt;const int MAXN = 250000 * 2 + 5;struct State &#123; int fail, len, ch[26];&#125; St[MAXN];int root = 1, cntT = 1, lst = 1;void push_back(int c) &#123; int cur = ++cntT, p = lst; St[cur].len = St[p].len + 1; while (p &amp;&amp; !St[p].ch[c]) &#123; St[p].ch[c] = cur; p = St[p].fail; &#125; if (!p) &#123; St[cur].fail = root; &#125; else &#123; int q = St[p].ch[c]; if (St[q].len == St[p].len + 1) &#123; St[cur].fail = q; &#125; else &#123; int clone = ++cntT; St[clone] = St[q]; St[clone].len = St[p].len + 1; St[cur].fail = St[q].fail = clone; while (p &amp;&amp; St[p].ch[c] == q) &#123; St[p].ch[c] = clone; p = St[p].fail; &#125; &#125; &#125; lst = cur;&#125;char S[MAXN];int A[MAXN], C[MAXN];int Cnt[MAXN];int F[MAXN];int main() &#123; scanf("%s", S); int len = strlen(S); for (int i = 0; i &lt; len; ++i) &#123; push_back(S[i] - 'a'); &#125; for (int i = 0, p = root; i &lt; len; ++i) &#123; p = St[p].ch[S[i] - 'a']; ++Cnt[p]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[St[i].len]++; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; A[i] += A[i - 1]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; C[A[St[i].len]--] = i; &#125; for (int i = cntT; i &gt;= 1; --i) &#123; Cnt[St[C[i]].fail] += Cnt[C[i]]; &#125; for (int i = 1; i &lt;= cntT; ++i) &#123; F[St[i].len] = std::max(F[St[i].len], Cnt[i]); &#125; for (int i = len - 1; i &gt;= 1; --i) &#123; F[i] = std::max(F[i], F[i + 1]); &#125; for (int i = 1; i &lt;= len; ++i) &#123; printf("%d\n", F[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>SPOJ</category>
      </categories>
      <tags>
        <tag>后缀自动机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2019省选联合训练4 解题报告]]></title>
    <url>%2F2019-Multi-School-Training-Contest-4%2F</url>
    <content type="text"><![CDATA[2019 Multi-School Training Contest 4 Incorrect Password! No content to display! U2FsdGVkX1+yiQO0X6rACT9RjNtJ68L/vXL5rjPThkUydUG0AYQ6RG5zULzRpZKiLmULlwPeb+yX0t1HpEdFG3TdpbitVY4S7p7WaM3KtKZo5Nrr5nRS7TJCnsmnlJeuTxJHakptkC8eXnXEMlifVbF1LIB8/Lg5mxKjULLtDvVKjs9DcQS12bbpbsiXPVWGTQDSrcfsVZsEJrE5wr+4szTmpo1LVtuSOmLSD6E+M8fLJMjhi8m+QO8W0iFNCex/zT840aiQ0vHegSnruMhEJGpZ28bacK0ZwKDcPTdCAZBhGHecqrwsKHy/BmvgFDRjle8mvWlSz9/VTr99VBg8WExpeV4sXt22MADQrhkMNf2DzA6XCUEvyz4jkwSOEUYugRNqvkkOplvTx9XnvsDPHyfrzz6JErriJWqm//i0cJCGcBEmN6+ZDfN/TYxIYA/+tWrruJ4UxvY7AjMj35jDg4SCLCZpjrG6jNRt7pKza8gDOogFoffLt5PMTE9fc0r/4gckfg0LGz9iuIVksmDZZ1ujMunr+zYHkxFq0ij1OU5kfhTObc8nUJlnftojjPEumsAhN7vN0L0rfx1KNXTP5tbiIvZl+KOHiXNyOfrbZuIxxt1CPMTMl7Zh/rg3bd0drEE2j2LHjyB411uPk7/SvvdyPmAJr7HARdeLOQl4dqt3ONl4Pwoukh/VLCtJTSAlz/EF7g/Ha+IxOpNzxga9By9ZHFqRvqB3t6HOnOueWOPdgS+FymMHs5GjEsI9FLYm2jOYYMbZwlcdoxTO9tWG07c/I8W6t2KUfF4KMHASyYCk8YCYCxQKf7RqNnj39iQk2dWuY+lPjUtXMItT4frKdfAMHHiu3XWPdjUCxp1vBT0UnushHXMaxa8WlwNp0iCzEO3xNA55DugMFROeN62GpVpZgRqz5khQvW8iSefYe/d8S3+dypCqQelx/NWepCcSxzNNcf64bDbrTinjf+4/xB2J8bqOUmj9qm+Z0/B2Ry0uCbdTs0pT2nGoMzzsH0ySGTmW6xBh52H58NsFW6e1O1wHnaRZ3/GD2daDOvyWDdbmR2TtjvI77vckb7KmS/4pAS3JfBOVcjX5SFke9Z/hMt3Me7X65laEt6N76iHYbppkPreX5FuoNiq6/xeBU1c/M1erIWQWx33VKmlmonWvx8yTuxjMj7uybN8CVyoD+Lu1PWpIyrPRtkN2sOZSjZ90HA9yc5zB3eXF3CE2BOkNXDkjxbHTT6dOWeB56mv7zTWxIJx+pD8na/Q/yjR5JrqNyDtOPYtEMZo7XIK+AhvkwvTRTUjxvCu5WzBZlLW5KgfTwY/ylw/ayvYrPx8FZUjO31EdfBNbbXmxXgIyilZOcCrVyFTlBWOScvpnESYSMYZtowLK6ysyra/yc+MocV6AvryQu8HKZg6ASSO3BpGTFr09vIzyjX1M7dYBWgfxGbYSL9SQTmTb+BTblzM1GcFZmc4xKroBDuqQ8GTKSyN0v17IjQlvN+uEHBmBMdPLeiy9TLBi3WlVFJt8x3xb5uMQInpQ17NP3Aqtaji9XUfgQh1hSrQIb4gtMXfWE2XPB1qLxooxvL87vmKjhU5AxwBqLicSpbkSEgD6CR2NbdkXuEV2hDmYCqUUEAMjFxleF2Klx4ZZbAT7CrXEOwQtDutaibCm5VmH0B+ck98LBnn6Wvhm/DapR+Fwd21sw+QJweitoJ6N583M/6TLVBpPodn15EPLYI536Js6tntRa8KwYr1fvzMiWorthVT5O5Yvb5/NdzshVtlGX2T9Lj+u1t35qxce4A9S7jJtkubGQHXsHj4svjPnm63nKb+eGo4OZFFeQdWTn+zXBHiFBPuQHH6+np8Cfb+iSu0tRxe6kNQdwEMJi7+5FakJVlcgkfuAbu1Ouv4QEalKqkE5di2VGlhIuYcvNUmr7TmeG9KZrropwtDIHcir/SryCYhEVbod1Ynrvlt6W+0iZUd1xMyA8Y/h8q7iV+ukW5bNj7631fgruOeqiKVINSiDp3UCadIAVozdiVaDUs5H8X8ulROLeitMpg++iF8XRfAwHPx2dBxFRs2rgMuyzNRoRVUHsia6Hwc3citLECmOeTaMzVaq5lAMOWb+nH5IakFtYHte2raVMLHFXRpbyTUcrZupZGpZJQEyK3Abky233+2++kR+nPmOK5cCsmYFua0Vbsoo4an1VXFFCobeuSCLIxJVxZp4X8eRlaFZqzP01X4+EobqOtUrDAlcAPLfF1U7D8GUshKdZrRRw0iyguREqKm31qDt6t56I5jtEAM9bX7GiH0z3z1O+7dCY13sq7rWXb7oSYrBHRwSJCPWk+xKXW+X2x01mJiYCT3uOC0EGXnw9exYN3FVLaRVxPBP9t+98c60VIPVW2Kk0wNtDkYVC2a+bzeQSKXHkrpt2g+3sEbpDDzNcsfL+SHzL0UsmjikZaveIKpGC89xNwTE9BQbabFWFFNaVzr5k/w76zc0jdOrqZzcULLMHYqL9a+i9IovkGcyNk4XxY93doL9KJD+0Dr4/vDd36lfg8Vs3bug2408HW9B2E8I3cKGh76SSi+nVv5wN+6duKDmyfeFF9i4e5RdV000qnxg94N0n0GPcB9bbdeMRkVS7qoINu3vthBIjsD5741BG2dfDwtwRC1CtR5eFnIy9/TQavxQ1EBbjywI0rN8Y9Ali5EbaOOljNU44dZkWmwPayEJX3IkMUcUEo7Jvhx3sOYItPDm8/bSs1ntDrkPMUBZcneTyIMFvqNkNjZ4uebAQ67B3ityQE7TCIhJwbEvpi2zDnZOdVOgNPUC1fo5LPIiTNsa+Xcvz9eodbFnTi24AEArEBdIXczhOJmuFcUiuDeO68AOq08cSxEeOQB3VTukOnJ0F7p8Ze+GuslC4VVrkv4v76iC5B6c4JdXJ0fDGBUPATf9PrgHLMkCt3RFHKmuKLExxQIQ5M4h723I0xKQeUL0Z6ALM/ySl7Evx5Sn0nBLD18UEfTQ6CgFhbW8hH7Ojxc80HVdBRPgj7JlWLh+10uKMD2Aop2AN2zh83XBlYI0/1C3v/rGjOh4uMuZ+GZ4IvcUOIdsar4+fB1/Ymv++mXbhll8l8DsX/Fpx8EuVDAGQoIo5/4veFr5FWhdadhq/a4EzWY/laAsa7CDpx6hwFWwpxkS+pS/C53s1T/jN344dMAN7IooCX3YD+b0IZ5pvteVEnL5YP1Lh0vSRhkEZC639fE8OUEqNBlN54z9TVac0M7Frb+oJGIgvrpjowV9zL5utiaEYml82AvncNvu3XMZ4MOW6zXcRgehhgqqmIgTUlgJeibT50TlxyFS8x3rGnK0OYLWaRH0tl+A0YZDbWY1T1qJIovI7JgKKE0EuxBatgTCJXYzPZm/EaqwoTR+FeqWkpo5JXVLR1uNXCVgyhGuMkfzLXoy13oyaN5P5qg/sPNzAT+kAfAsbiwSyJqd1wLA9ZgjX7a+bWLa28lAt0z3jFkoRWSG4CLIS/ItIElyiZTFwNiXSSIyn13uIJszrkkliFIFa/vppYyuJDFPZ7PwDIGryujNUaeJgusSDp27kRMeU4H8mfa7xekV666IoNr7/7s8uXO7pk3ul6rvQvpv1fUVn7INHW2dDIUxeLJvT7S15KVMNy3cSbqubGcUlxzywBaaTQsb4RQrVKWPlSPTvYHE50gS7hSzqWUb7iGFqK3NfjuVAL6g5DLD+F5u/kCy8KRDtBkV8oP4Gz21zuhOm1NqCLDT70OS4DNXFuY3nM+iCGxp/B5MnoLC0J8RiAvavKm79xxCxPIHTyri1rPU3jJDvRlEkHq3GIHfAsfW8894WY4CRsiu4P9e+XIC64vgH+6CiE6eudC2flvf0fBBnbNv1lk9QOGbxMh2Lbes92zibU/gQySHNV+lepyxlOphNLcXjK1SNQbtY2/YGHlr+JM6ldM1+m37Hl1Yl5/o4Fqq03Ozlkvh2vT6AM2HF42usEKXFVPZe65V6V/vqL6BeC+0pMPkkYrAmfHzfP3JtbQae6V7MFny/yI/YxmxC5CIxbUoMxaTchHsjcQyRQItLJSpJ4Xg8dmJpcmyi1vxcHrRFK+AtcN/Y45j0DpfmdivWqdgrydiPSE7ZiPqtrCCV4SyF0ktta8UHsTLrTizeKeftfQ/+eXEJe0Ifr4TdbWhFvbFTRq9dfbnii4dCsJqQIChX0rZZaXBA+W0NrGJ6OjrRwxKAwHImBvNwbXBMfkaY5txk4ItxeGyH3ACKScZdDiLE5SLN6tvLobes4y1hgWiKtuk4JBEeeSE6YrzqoTFY+fc79yAFwSmzwAiPvAih7xf3+7F1vaYSeGXkPcz3rWAh/ufOt8U2lTzkjQBD7t9PjrYD8gHvg/trzZ7NXg5g1sNMk18xyTHp3Dx7vASsdVrpMMRaDJ3KiKL/T8AbG+EneGjk1MMAPJ77B0NgKOjHuIk18Q9NlhHo7th7kERTdK/MKUEq7mZsqWWCsE1GjEBqE7lLuLPtVNAd6nCpkOtTHOXFENvaSUegHPOqm5E93XKtb2GEjwwNL+8QON5EqXp9zfk83LJipmVjD9ueaPJ4L7Um6sq8rtRgeFA2GtrwBDimRNc8NMfWGtBqZi89uorIMLBl0CNp1dhPgNOF41Vp8uHOPm7c1tEv4P4nxMY0WR7SeoNEY/sGwXT8/Ldn4in6Ra/X8Qj4a6rO292kojMd76rLxEj48Wb0JLIKjIvMnpUxabM4jLe+UMynSfpm4HCRBMtCwDopkkHfS/7XXiQ+oJEmbJBdV4gXb3llnkpgu1WSmj7uaC/jSk8IBZahxCVJBr6SLsKtkaLsB9TS5/wvuVNvAJQ/Noje6B18BkAg3O2hWx0W2RhSwXFH1al4nhp9VMfFwVoHYBKBMRQ6974F+FmIWWraxq/PXQnECJeaVtPMmmAZHz9ancEgZpeZCH380nfyFBAVaWBxQ33uNADCDDXFQkzqzDb+KNb5kgEm6fqDeCNJ92FwzKJs38FGu5BepfOxbU+UHRsWkAQRxxtnw8EmmkIoNxEXHjSPx3ShNWfYlVL9gyGXO5DE7SQIOVbBPv47mFyaXGJaLmkNKq8CEH6uA37Pq92zQgSpyIlAAMYpb+iq1zj9iXGawDXvZRfWCm8JDSWXEgjll5zO5rEaaaCGiPI6YStcZAYSz01MfQDBkM6+kPf3ZY+9Zsvx/hL+JCbSfSFqyiGEMbkTKYIeXCcuN0sTkTAWvdJKbUV+uTL4GUzAzB8uZ3tbfieevv0q/YfWsz7sKUjommDRE1B+XVUM1SoR85VoBwTKTQE+mSnbYfXJ5PbrzisZ3un3FMaQN8aylAc/2LXav0fAhvrvYW/6lX4Y2q0GSk7wPt4f3HIIjM9EMbXWO7THZmg/Fa4r1UI68kejhUuHO1KHuLw0NDvmqXMxBOAo9FQ7VD7KIqoAxsyQ531fWaAl4XkUy1SEXjG/9Gs8msgF8f6fjiHt1/MMLLRbgQM20gTT+0dWCbRvVxAXiu4myzLBHXVPKyKZgn3EjeSOOzCvhpIMF3LgA75CzkinOakcz8ESipgy/yESXOkZrZEzGos3VyG0puVdsdT6eimi7SlQCkGS+1cWbtRws6GTFv9z2jIfhCrwDQP4c01q7fHjoiE5DfP5UexcSxcg78FnZwXFbu7AXpiq/rX1kyX0ipmZvF5XmeXdWPP75xLU4p+MhmHLxvUqRyWncwjKXVGkaH7Sb4txkWLPLbu8K6U3TOlOchA3i/ETlGuXmIsYowazb6xmlIcxwrY2gb+ExxLdFcAq399TIUpfBJEi7bhMG1M0zYF/IpO73XtKNprRN4ywN18vzF2dM40KELrqkfVZshE1+dahqaZZljTBubIt3x+BFz+nNVHmvehIjImvBiLLpvKOzXnyn3evit+1H5bT6uUGnGfPEaN/k4eikv6avWXZ2gLtHzbQgDV5pA/zO71ZXSB9Oghi1QB5mLq1m0iiN2r8ZuX5BcNsox8wrIDgzBreK52Whuajt4dndhy+OeN/kY8EDdqK6zkAbfO5W0d/kTvC5NAjl4n/BSz9Drk5/xhInCpwb23CtkJxXT3qhZvdDPMDWFt+uZQ9fXKMZyeLLLj+SjkVdN/yzGnreMDaY+O0e3zT1zUkOJSmIqBMN9FOo5A0uSbxQl17PBm+Eie4qT8AWLYrhiXPDKxbIPLD7xtcXhOgHKQ33pIOY0HwMc+HRjStNBs6oVRBBDpd+I7jADhhzdCIc+eCaCnrmZZ5LGFG48R4gZfNDekxDBtd+G81NlxL/sT1UVTeBZZw5WDup8KLiwruWW3ZMszVdCsoSUbC3MFtTzY4KOwHYuj9TnUHHAkRJE+lftNouvolatTs7b97ZBc/a6cjZu0XFDDrvg0NrNin8ATs2CoI0XE/EWny9ZddIMrLccXa6o0jeBafpdCNSP6WZ/tjE3o1+i90iWqlOWCvC4oDwJQyS6oI+44+dXKF4ZmJHh/25uZ7xGKjB/O8KjfbPi6fOdsLZsvCFhWmo4hfb878355YQYs24F5VJGleHEAprt9VJWHGDk0T8NMQMFQC5mO9druECxx7e+vaMTTpB6U6SSTJXmYEdwmO+YtysyGlvDkbb7yZf952WpOpiawKCy+QZcz7PqzZP9wuSnHnIYdFPMU3vk7eBfJju0hrQD6EA0ZeYvnsA1rNnZePgNcXO1s6JpYOo8XPcZseJfMWZfnU1K4uDVaIjqpLr4c8fobLVCWjYk7HUJBn0g6N3EdfW+X9/N6MXT6Mqi3mcWxRlU/9I0bDiKXe1sPXn1lIJ/Xi/LvwzAwVmU/PDDR5hHz65+UyigkGY/yLxtV99t1djZaftUxT4pBErSTPIlX/+V432bOiRKTGt+TgsjtVZhhFqBcdSex8L9QXXXYTA2x8NIQaqBS8dMJ1n+ME6OmRJ+ADgZo80DNXioYzY8KtnWvW9HFFrli1JnrprZiYH2Zhrfrm6C9yQUNYBG4pbd9ut4jnEYTGI5UWlAhIfLTG0evjjAWCsEU/ZakHLxFQxg6Y5e0iUoXWdkiKcqURVUr1dBEoa6e5bshN8RCW+u//6qMg4KODeo7BOg+dCt7dBWCVsq3X8Bu2aZq9k4ISKWzDE3KTYG/10xVTNovWjSqrAvn1CxMBQuN9aiQzkzb0D+vxfw//J+omiW1LcR3dOyD7e9DIRKlZsPh9X0X+oKc16s66nnUDsO2lHtHhi2Ahkiao9GLfEyxlTI3vHAoQvTX8h+0RvhIZ2KJVgDuqtv00kFdlJHUP09DWAAgDYWjWVGGptfm/X5V5kfp03kvy5rn9/F3wUGw5clO5pBOLiigyrFLGWmHJMSPNOQT2GlUZTfkitD3fNIuhWkjN33+ZWHUEmt7hPsN2seZGqj1hr8/ka+6NdK/CZHkhhnK9pF3dXaBPJ5UKSNxj40Nqe5DrSOus5Vyrcsa35NpK75A8OL7sf7Z1BbD1VjFjmiYTveuaATp7OzWNOgKDg0JGDwDChW4jZrIX7WUgAiiWXcB4Jjogp+8OWtbJ8TWj0t8E2jNMdfCCPUkRtMZOtmaAuYnGuFjgcMOdjuv/NIngQiVrmLrvRM8fzpuvNlmpqxspV1BqdUZqRBb0FPhapFsgCri6STje+AbIB77kJLL9sDYslg+5BEM8VVyd2D5P8Lk2BagGkmmNmXA0Vel6D3YMG5SriBkmIYV744NcrBbzG1ih3EbvfVGids4eQT3WSEGUbIZD84WS+flnecs/nLIludLJKG/5ptrYNRbRYDYpp0hiVCTF1Kde9vZVkjUFqAweUtija7I+ksWb061ySOZlp3ZtnSpu36DXkzR5+8q9KXQoMtqsKBHUA3cvHcI4PQk8cHaGj4UFFgWmeyKRr2nlaPpY1w33P+fFV9XTvCcmrLJ1WfEkiof52BAik50wYJP5YHENNJuotAMQu9M92aRpX+7bwN6DtvaV/N1/P9XiSdHlyC5kAajatH3LHxDUdRbwnGzd43oH/2gyG9udqtsgUxonMPruPZwN/CHBGV1FTGdZl0/lsOpFkbtTaZt8AEkjDH3jHZHtlT49GdvPn1vvbnMWLVWeDwAP72IXWbYwNl7VPaw2R2PNWwdd6BsuGLBUx1XU9NvS03x1k5BbgFDoq7jCb9CNOisFDdoNBz639t+XsDMay2X6p2KK+5UNZfXR6uFg8KZK2k1IMLIwtWu9zDGfzboIschq5GmEwTGWsSUzmUIfTgpzx/0PSi6CHfWyMD5VgB90eEaginXtFEekmuI22ddynoqodn4okEKPtLPcK+70jLqOH5MhaOvM7CCUWN34YE9kHoAck2/aAJXbv2BXgQHnWjMfnlkGOp07mXfqzgZEJQGVBWpb/p3MMxYh7/ux1FnSZvqQl8L2vL2iOpj6HHTf7yaQmIhq4pAi3tKfgDclcagmpeq1AnERiRGLDgiO1hPrWk14/eEdTrCwCNNhwp3VfGPSvDkKOo9CsvlctT/PlnSZhKFNcVtTY0VnKll54ZamZcP9/2kwgsa5gjWpdt4iIe/eYqZBfIY3CwqLX6YBkM4xktmtVTLVqsg5QdjWB4AlxGUleoDpF1QoiHoLAQta4p84vHvRiWhkemwgRvkG88peMUnm7UCqwlHvAsAXd3TH1AJ9P8ePuWUar/AK1kNDhXAjJNuKBOzKq/kPHvUv2lBpsXGJGC2+JeRLr3sGrDNe0Q0e3bAXTBBE0U7a5QBnF6XFRMy/pgPUq4f29+0riatPyYV9D1tYb3NfAtGybizcRFJj60vpOMGThiRWTGcfQOnpevYseVfKUtz090llwkRTgM/W4BpyiaB83AdP5JcjFbsc1Xl5l86LHQChj0+D44juPhxgDUrHHqRzEpRgnGuvZNCNd793/xdFqzbko9U5EuqU2ZaOp0EkY20WIBOkXzDdp8EDS0NMirlKhxd/gsJGV0RY5ISiyx4wvTz43VR3E70pWqHCutDCQ15hTh1MVn5WtczDKhuKrfb5JyPgGJMvhXh/0MQGmipktMhlReIU0MT2rV/kpo2P7g0r/7yZnoQ1oSgQ7p2V4+6fx6bg8jb/RH0pu3iRy+GWlGo/9IRKBHNun2efIqImcgghhzg5ja8VkGRBfrq+ksjzf+cexrvXGHFqPO3rgZ/TiQ5NTcMnFAU9+FJKOv4z97FTkqWTlWELRd9KeUX+Aqcdj0BQZNjcZwdms111PZGS0PgIgpfmek/BdJiPuabisDj32WzLBNkBA9hXs9riJPjvFhRr854fxQogyHPHD7Pyia3pboVlcdLahYyTfI6egPmVbWgdrDGsCiNPTva9llILsx4I2UI8cglpK7OtFB5kXldZZcqCraJshT7KBMt+/0bW6uCr7JS6MXneCa3nJRdUl6hvOOy7kGz2Pt5Ki1yP6KwSwUEf8RYfx4KDMBPFSrZgTECUqkXEFxjFHHAXctwj1q5u2LheIhV3cchGbKsJ0XHy7R3PAMGNH7gHpU2g2orypoqVnkgHR8WNx/Cw6LQMt0ydx48cguWP9S2+uFfEW8gzYgkCFh8vInioKneP6qTMXt7/mRU2VTJsqheddckfD0Kl7EuDIIy9FSq/+YBfMIUDKaA15T/kzt73OaRkus5ercDiTtFVDv3P3zJO6WeEFxXYzfmOqG92Bwsm7rCEeoB5siECz490inJRnkP9MbA4fMMWqt7GuJs1O9TDNvIH4oWg1fGwwc0pnqCW/MllhMkNiuxNNIxbyV8x6PoAtK4BizuBK4crHxX8V8ps0wnHSvsyC0803uAvGFYDsqL8VqTRXsXHmdd7/u8RG0mGV5EtWwYELHfkrWbW5K8TrUG/twm+SJNyRbVlF0+aslLP4JnPyUdwRX8nmFdRZRWqYfJ3VmZeSzssUOpbMDTad/g3KsA62ydLNWeXyK2yf6RG4kqcSqhLUSj2JDc0OyNLkZWj6pC/pumrQ+w/Z1v1iRpNSjhS1KYkZPTJJiCMwlkX0mlpt/1ISZm0noV6dnsng63vhPYnoeCz5eYKzDIXVuys9BOJYT6GvIdSkvKA4bzel4AoGzSs9ij4EIdWjAhN9YbVNUF3FmwroZyNVyBbrbvWqJs0uq1OU9GzI8qE5SUdLw65YXvNKCm5BRTQIV7mla2CzXcQ/i6N/nz1wZz8h8RLzFonBiJA8+zsFL/KZv48X1lrM3rMq2BCzyT/KAZqcYGS42nm0Whbr+Acqsh5F6nJM1CHFtQfrxn+iNyXA09+IZn1+dU9gSMwbaGK/iUCY08g1YldOcQu8k7+LIu/cujntiOFPLrRmd55ingM3xmeSxZmZsIQqknQgfQWEPPjjhlmP5jLySGaiay7dy5tkRSizfyTQOCJuZg59YBo8JkdKYzH1sEPkrtfs7tlCNUm/JpWOcQdLPjFeEtGYpbjCTuGzNaDEik/RInfEiiR7un4xrfZBPJY+LYhm+ExQLPc5YFuluMeAzHZM3J+EIvd+53susve3PlTlIga+hZxHPeE/odanUycEGpN9jDAxImjsgbrDHzkqcvA6ie2sKPeNg9r/0N+3bNayJEwYZIJMUCF2hpo5O3xmWu+WSnFZmZUyvCmZjhMJJ3ZHqJmTp/EGHsUGo8dA2kuvETz7iTIPhvMFH5S5fFJ+reHMMxjsy67NMCdda1wtbn52iuUW+bBMqBrSEpmQIwthx/1zExVtTGddL8NNlUE0IQwVdnPlgd1lM8IfHv13+E8xz3/2FBePTUks6W8hmb6oxU/CPilJtFaQDSm0vYTEywNkRY3S56BRH3bzy/NzEjEHd7VvCLah18xawRV7zKDMKRAyvegN6jMr0y4LHYSujLbWhHNtAfYm3wDEyzZ1fMDYdMe1SJzu692b/BDqTWRaRgUk5lVcZJMTdPUUM7vcH2XISFUMnhQgYX8Ix5ap3kLHVbRzhQgljsWiwbW1LMID33bRrvYyRAmAZVLKzezHMKqlm/NSWNoX/Fg84VstEJtUtAt0VZeAuqv2QHrz8YD+X6mMlgTbnJde7zXRAnVTVfQz3jaMfumpN/A+Oz0ljdGcAyEzg7sPGw844lkXjXXfKp7RIEfN6TmErzjsOsuT+2TpMD4L1kM/JpauxAhId5xkPzKZJVXrgDaIU+xxwLf7glZVoChov0GO5g/X4s2fpamvo71M+Mi7z6K/9OraGaH3qjXvDo+06R/gM43xuw8+/uAMKgezHkSsqZSoP+S00eeShKdYvpcnyhPzjwHcz2LTYemIhUfFDXutZd4c/pgj366UpJlX9mOD/3ujsng9vDTIXm05L5zvz4PQA5hyAOrXyFjZEXTB0kblDT3ClRb1nqe93D+N+7T8QBe4R8W4QxaYSuSy6QtZeXXY7uCCyk4PF2EYcnnGaaR9dvo+Rsw4PfKwlIYYw98eqXpJvw0nkX8SlYNbL+BHl8yYzNcMRyx6b2dvcMNqBdfRglekjAHTi367jVnwhRhv91uvFyf9c8ajSOtfjwPVIJyARq+uIkB3SQjEinzQU+uTEPvDggQBx+uny3Ol7TuKFj1EKNIWwwwLifdSep4ItHYSEkdhIw6HTF4z8NlctTajAjWa/PsadNOwldj92fdrtMVV6fhUJ7usU1AK0H3dGplo5bw4YPPdY2zlgqkMWPWZJrrxWICXCW3bL072IwX18d7HWOkVrLxWtPGmddEga4Z1UfzegtBUY3T8eDkFHN0gHpwyNoRYc4BAAvNdMwT4Sj79Kjb9ElhmTaW40Fk41dIUM8OU7o6VK2+wNcn0AJdaA4UE7fWAldOcD781xFsoTprWyh406wRl2fFEVLyp6eKOCZTgKQXHiCNMRxvgVQkfJp7elbw8sQa4Yb5Qo8mQdKLORlEWcFWAIy912P8uS1L01xxfpZbJGbIIHi08YDsNh25hYYhKjSbrAVxX9kj+twS32It3XgvRNoNoKumM/LHYjDsfGjNaaLaQMZK45WZ0dpTl0TpCYE7DTP7lSOLF4275OXx8TZGGPvT0FcStZKPCVtjSybtYVKEIGfBGBAyz+mgbPxVAX6zdKss4FRBkHQimDlvwiJGaiMJVLrDoaJtYD5Ug7lOG3DLyNi9uuk+Kw8aN7g5Y9DzWDhGc4k3+bogIQJHn3VbSQuLEqgysI00GQoDtV/2RqDLksUu+kzrsXFBkUx6rtb1lnhQzzwT5wkMu15rnb84WZV66sq0HiCAf9wme/RVjQ1VQ0Nbk1hvTCbsXanNDYrvjU4RVi5kBCWcQkehsodGRSJ1nAdxx8RhJX+A3W6U+75Kp5iPbR96tiESFgL1lLddQ8tNnhevNtjN/W/8uMl4kR5KG4KWyxfDSkFZFP9lAA7AR6AUwembTD4Sqh2mu7a6vI6DWh/BjA9bYxgJYJovMiWrxHn1gIFfoBxONQHqe0vjyw5ya9IwtLlqK8XouHZPoHh+rQqHCL8V8dWctZDQHhGFIdMTZAHXb9I6ekUSpnyfWGDkbeBcoH5F+ZqamF1y531BuppbzfmAkzWrUXGTD3V0RLGtIykSRy7mfe4K7MIRoq/O0CoBCJlezMs5Yy1jHnh8Yny3HR5XmG13l9R3FFSZ4uv/08P7XgyqueUNeWvWFfdMCqebgU9J4rhDtEgCrojssAEPzj92i0hkB7wYGZm23af7bEUHFWrsAVtxgJ4B0Y6XJPtotHp7i6sh04dbQtozL0IZlgRuJ7veW9b7jmlJDAN4qQiU6mA8BJsMX9p0pmLvuk+g6C56rxM+KU/Sgl1CKxJIKVEOPq4cnLTYG5Fw+Y83MiHcL82n08nY0EWjjt5cL0gBmLwlb6iKAPF3gnhEaj8Doiil0DeN7tDGqw6RjeEasF3IIsaPKm9hC2occ5H1R8jclR3t8kB4eQYU8ZtveIDSVeP4HfsLX4OBZPps6gSvaZ7QOyNRimulRYE0fWP94VqDUDQjW8/qniipNVW0z3VUgU5sVxJgutpeb6MYSFoRVLcI0PiaEXSt8CGmvrtxLsjXoG9seDKLUE11HACokx8W4M0uzXt4QihU/mdabhqQjr49lxsliVNo0pLAYTUk4Md7rwREcin/517BjjZpRXnV+w9w6vD2ck+sJfKKAbZSfjzrSQISH0rwXwlqK3oom9CCOtaNm1flz6t59COFi/HuGlGiOBwa+PcxbIHNSb4BTE6aY77LqRaV7ba3nKYAJZbIBAOgj+19rokhU/4KBtVpgk0eIZyD4avmt7t0J7Pz1bHMDVXJ93Ym5Jg64QiABuqOURiTONu0e2CLTgkIq4zMdkN2H5PrUSSaOMhjZYrZ9qlO6ChxAYBdjtnI6DfoDr8lQk4kJQTTLgjsD22qdUT1v0bk3CyshL8Xo7S4LNbE0+UVyWhXXVDWarbWzeS8fwKfQiFnTjOIpq2X4mSEvWilI2v2AccVD0mT8QTsu0ruMELuRn8OP4chkFElqwrpf7ccGlUubWt+q3IPkM9V077tBya/CiiYeaR7NzY0ELqplbp73rNRESmygg7VyJ8ngdOnWO3loR/je9LuOIcKb6DJnTV6X4cCPcvSBxtZ69CzXp8FOl3fyN0uEcDpygoPL1Zaj/7oVFZa7AaRQTJwWcV0dJTQxmn1/h+Fn8S6Q0fJY9esybufpbw7oTDlcb65+kaG8VMwZtrsrHQTI1/ev0QrIBHV+qHb4aKuxQlbxX1KZZ4LRWezS7vGjp+deDa095NDAPnsththkeZavODPck5AzfkcGpGBwExDOc0vaONsvlSWhH+VMW0Fd89ZlwpHBzI9U1h+Ge36Qe3XVYIKt/2NqPiAPsDBsiZ4PRLa2G1ioH/jjCAzIOhuN2SdcRTPTxbiJx3vB8yxriI4/bkOHVDGUV383i+WrnZKLFGwDPJ1JQ6HrGc/ZAkMQEGmrp7qwMqO0PHv58qv+s4jJ7mN6kOLUK3/24xqyvK4xcatZqtPqQDzU7y251HhHcofY6V+bXjI1nHQXNhOnhh4cpc18YC9aCh2hwJ3moo1q/K0xAAnPBIX71xOBHFb6rHllCGlJaceCB6AxeO5xdF+WUa6BOdzuzSvCT4SAe5n35sK17pZZoFUb7Jg0+JCm2lmkFZD0Obo09EZI9XJ3Yn83D2RpBvBICHn8J2obxuKg2LvBKw/b0knYCBt7c6vIGlNY26qjiwdaGeFNUlXuFu3Pgv4GstvORuhCPBrUDhpM+eFUQW2+n4gy32l/6nMnBMwa7xSOeZ5EVQgsX4OI31UlA42dEw4TH/F1UODkljofpSP/qkuCl7V+l+cWZLKz+ebvfP2u9ZjxpkSlqGfDAJfgugG9U9kEQpc+ecElm9Cys2HKOjmGzn5GLn0eQpWhYQp1YSdLssuz9KJOd3wvf1CP5+bkEN6+8OjNJjeslla9QwYKHh6BurWdBOsHj6C3da+CjheZ/zTC/6eLZe/TsiyrxVLQOlwedSEC04yPELi7+Tn38AMr6kGMW4whXaJZZJdVj7oEL9W/Omm2uLsfJOvQHU84VM7wdt12/BVG6ol0wttULWeEsLpRSFIDmyjPfHisbxHIjyi5d/wlkJAj2iR5HBgudi5CS7336058TD9LK5BH/D8pdVXBnfzMwvg/b/zkZljc9t6o8hSIQxw7kSUobBfp+3nL7/vlWj6eSw09izLNFlJfCpjvuz/r54t06h4b9uMRWvZNfRJo2y5qAdcwTnuwJbMKIg3BtK/snC8Q9fw1yVx4HJInghoCF2fYiQi+4LBptEzE9522cD4BSeAF34CpfP7XXB5xAtiDtgwMNup/l50A5SOCCaTf8GFQ5zATzX1P4ooaQqvDjyKq5+GXAZWFUktVKQukM+vnFKkMltqXM69NS+oKjQ8a39Byy36fR9vpYqP1xBgE+qg2Upr94pA+RsjK11E+QsNp5aX2r3LzWqOVcXVWJz/gutDXvd8HS2tZEcocsCUzIfBeJj7CUOrx+UL0zTHBbLlgDg2gxIsMoEAzsFi9+2HcJc/2/gU1Lni8JCcDsOctEZ2JlZdQZvBEnHTeV80lGaiNMUJwOMArWgU1aYWHqqt/uPd5JPAueomXnwIRQjvCC207VWYpZNqrEcxVDihBCSWW5+x4FYgu4Ux1dpm/B7y24xyowi8lfqj5X0/+tWSjm62Wgtlip3BdTOBtqu5G7ubo51HQ64AIoZwIYsT1p39czDCy/X0nYC0iE+2DDmGs/BXMVx5yMGsYdSokFdlcZ2W8jSwW22aWXxAyAoeYLzayeeKqfNoH+pfkq0dA0s4XnCCHe5WfpbI6oJMjXCE71wZceDcZnFETIAkH2iOjQSY5vOwY1BXS+HzG3deqYfoLuMvjyk658KrbX0oENvyjjrnrbmcRksh+ESLB6wa38c9vcwD6Zhem7VK20SlUE89kFbsjtf4VqQbWzqnVRdZEh7zqHCRoQnOD/mkZbCs49UIZkT/ySFaAAxU9aSNPrwGqMGpOM/Y0cFudsz72UJ52zwrLDTF83uuDfn15w9gAUmnhM2qdv4OVS4HI7rqZtpmXTzVxCFsFFIO9pWB2f+8pvg1106VK0dtvll7KbUU4cHwCu61lmfoZvxeLYW5YR5zsiVNgozJt5mEWLtMGqJNVshlcxzBfMmTxdX0OzwwNXwDQcIa0TNu1cO2vQaUdfEn7iLjcJ2BABciexnjIrbFWxJXWdF+SfsVQyVTUv8Mrn+NVCJ3adfqItYi8Lu9bMzSKIGzT4cas9U4b87iJ7InooRlMREtG4Gbg2lAu+kgO4AiXF4Mr3URt1RPtzZlXpDs0N4T/EVGAJc7MT8zaqH/+WIQEj7LQziNyUznnEHPJedajbcDjgEImbBfSLcAl+ssbOfsM3qtEu3BbW2BNAFIAT61JX2jNdOKz2qTxbDE5IeK64JDIBnepQvGsTKr9frX8AnOgiuI01g1ngQfJt5d/odavFfuIrB3C3MCnMcCFrX/Gil4ZLcgNVyvb3YRzFBLZuNxB+VlTR/93hjXTBeo6FNmjYEeCkMiUGMmtCJf0wQ+fbOq58ymcxiYPupZExsH0myZs0LNU445ySeNNn9EK4F9P6LOlLd4vkLAeCHBa5zL6gObkdB6gURfYjSP4rufetiHaQnGT+Nl645pHChWi/ks68KvB/9YOTAvP4OnxOjErm8caMLSilwtebxpynAJt/DCLtoJ4joCQu0szKpW+/U58YslUPJS37ZNNgH8lzuZyLyiA7X/H727cttRBZMXVAw6g7tgVeep6DGBX1eQZGg47vzIF43ZoRWhktRcz4iDBVu2i4d1w7gr59M93zBPxABWPyKSFlsARMoD4fDSI/SsyWqObZ8v88xSm37cZkMNJSN0b8SnAs9b+lzX7BdzRpkVKxzhZA2a6VHX1ItyT8GoxjJ6x5bq5JbeNZDf8Ok7LMtmqW0IQlONH7u+UNNVo+iySnWe+7xISj4/xIQe02rMM4Eqv2/qESactaBjTvwWXmqbZ7bD0KKgyEQMahauStoADTHxVTvCiKnHbXK1AqBpAAL5Uq2sOaOsBu2BKWbLutEdGxfSwXeYjCx4c3o7qA+uC54ckO/PM2h54Jhn2mAkqiSlmx6l1mBC1aC3poInxyTiKJb+O+Mi3pZteAb1r8UeieNM385/J4JrhkS3qfp48S54GDr/fmIoMeKho58on6B/TTFuZugHZOGuVcp+7VoTouAH093/3h6gBNvgmvhODRCjDopTI5GmOxAAZQ4QPmV2z6Y7BI7JTuU26F9GNewAyJHlVezzDiEwETKRqce4G8hdYxsn3h1Ibk/zOuvJQRqhEV1gRPzAXwP+pbXEqMrh95DSrdMhG88X48bsdYCABeHwS0EZwSooEzIOuHFcXLztEmWv8GgSeBvShezyZjWi7ImVOSq0XSQWjdd+mMlZ8LV8oSs6JDn8WdmdBYjlxTroyrG6qyliIGm0cOX76lApmumJ4EmI7ARt6wZu4yCtTc2//D5m/SkKHECmTs6NiPwKtkIDhQ6ZcUkuOsK7OZHcfNKS3l4PGMvji5I/WtXGEipFdWEqxTaVyKi6RFF8XhehEPfxObF4N61YEl5cgy3I8JyggQwV2nXFclPKP94+H8y83XTfwvu9Qt8wII25ztnZhZRwg98fX7E6D8Dj9sChj2Q9oHf+0x/vTL12rn963Fjtbltv15MAMOkTgoxR8NV8xZKum1Uu+k4qyrJUI3BFtHr7RQ4Xk6Gqkm1mwN+CEeOmj7n/5KVltCBisqFuyNgYhx/9ibNT16WWxL73g+GmfjRCJcxgfJjmbCYOCSFs9ofDN4GiO2pg8zQwIPa4pkyoO67lw98CPa5eJjjnbKqi8dwMQjVgFlMILyNBshrw4hus6jrvoqlrjAcVW9SaoxavbdBD3nXcSOFrXPvcqpa48FXTjAHTgduGbgUyMY7mzH0Lb0SZbASTAQRda/wmJLdwt6wbSXKsr21v7XVQPSnVtkpr3SYpVxyGDGymxgW4pe+JJ3J8bE2XqQQGSo/mZbD1OVEb9T3+AfCb2MuSS7M201x78C6vgWODYNFKW8K+uhnUhE1nnaElAutssjlSXH9OtRA89YqTRloZiPS+Z3INd/n2+uMbGzPUJ7lvASF7Pxc72MEqb7SZtrzIW+a1lWdv9MsvQb72aZWqyvRm3PhTj39RvlSWvxNemK2ml14wndYbVJGJmjcJPoHET/Y0IGmYxioneDqm9sKfwZHYggRPcwTPlJ6MMHVjNyrqFTAAv/qx53UGhoOEVwo+wkR3ctrl7M+2Q28Q0yTBToBr2BIemq6P/NwZ5Y/VotULwpyMdNTibZImWfSHK5ln9ft7P7e8UIcmHvgLJrjwLh++QJaeg9FJRdnWMgbwGJ7GELE+51DJcvmEA6+zsuHhDsX6BdB5Be3N4/HG1qhYCH8d8TOfcKWcgVnEGD+lqdnUPuzTMw48LjsXID6db585wr+URvG4ECniH5GoCLy7oecXaCV9JOdaNEDim3CEV3bAkOYZrcblr2ad2RoC4zYJ8A6DR9eRLzQj86jAU2KoMOnrHEVhDXFwcdlL8o4U7o2yuhjE6UlU8TIxAgHSDtknSaXtxBC7MlwXomqLrDAcbBoQl9QD8LavOVyRrCyNfKcZ8AWrer1daSP6fEe6lAsinPZ+pl40ccHnKMuq5PBkKYaMAo/wjB7xnxOpcQZnfmWhzCI/rR2blGJ0BqguTZJimnMESdfqj+qGQzVYAXCW5ip/tPU139ZPN2rsf+RkfdDsg3s+rOKB91ciNnbPwpyu5y9IH480li5hsQ0RJ7pLNYuTwZ3Tsp9ZNAmQQsimEIQv/EkDBSkCSz1wZWAIjsNrOc/4GT97M+mmpQvHKJvcTmxMafyF1c/vHrsO8+9SlnBetJMNCDusiZE6Am6O8Z/ps3qsXh9Rpho3bVTUhpdDKVWK4hvuZa3xOZE9jGXmmhH7Rx7UGVFCsYK2+gdXoWYMosdVpKstmNxOdEnqQdgLSfknPuX1QAS2S7zJQChdHBr3MVFOFPfQIO0haAktsNC5fmTQGx9rXIxfz4PLy5AwimXtHWgM/tBfq7TcJfpkikPGCSJKbY8s95xug9T6LZoHj+lM4KM4yJ8bDcdMNxN5JptlOHsSLUtZSOGwdf/q120eWSCyg6CGSNH3344yCqsUBtUt+sYwlyDZLNm64XoKvdtKnmXhnyGY7RlJ3KLeZltUJQ4WKVjqppdZ0wwj1uUCRDOcLQJMPifkTK9Lo33v6kDe+GKA0nrrHj795vuUJEyDebJ1pJcRvX6X4pfiK3u58JKusejIlHHb/8aQIAxev/1Z1cM0zuzbiZSiwTrykCWxvNOFSwuc1y9kNq/4CJ8IFnNDYKgz+7WBGNPM3u287fIPKy2M86/5xAyhUOqqQPlh8fvi6zdJFesGcTeDy4PZf9F3jiKxl4Ii6OiQ7SGIClDGUZZRJsSx2b9e3uIPlsyis/8E6XJYSvz4fR+9TSvB5epDJBEz+F8XO+8uDV7r0rdrFR9hgExDz5vO4VFVnLZ9SrCoulH5rS2iubVhu7fcWavALuQ8IW3B2ea4pIn7R8JWTaccotR66WHO2ux7+JMvE5k5AV3DtuE1Xq4ONhl9tvtPV9WZKCuiH7VrzROAPtZtPJVKG3hoEvlUJgK6V0pVoGwO9WLh8GCPd33I1rJau1SB2cF7BLaEyiEeor5FSK0l8PE63ZC2rzd1NeQtn/AvGCt8hN2mwTLVgnoeuZfhtDa4o/KAhzz6DbvRhYane44KUroJ9mwS3+2tynF5epTDIrI3nW5Tm5jOesb2cp5DBtLTBimoGv/cKcTdvIaMu5kp9bxdSX4yURbOoRm1TeQgI/faI5k4I9F+kjFRA5vs+/4uGpZmUGI1N6o4atLCT4R7QT2/NZMro4OWCxW9wO83CqI+hiYxE1FPHyqMZo9DyhxcfbY0oDlrjIjnFe1Vx/fjn8fCOBjAYcJSFdcFxxSL1seBOYzfqjN3wiu40UCfUMW7zQ90tTHNVNIQg8tdM56kxFGHxsWxA82JdkhBe7IglUhO14w59R1ULupJKSADvsokxCzM+VgsssnfKgfkWxCYzTrOwRRIYTBQjIHCgSsNaHza4oEhkCM1eYwtgDkklFqx7FeITK93877x6OMEKZzKJGcsPA2SocZQqcJbvBqO8ZP0V/WFC5hLcSuEVevKGu/kS/BEdTaT5l3v7sv/gb7c0zPTOrA7SG3pFrTa7OSpIqEvMgB3qOsrud3chmGki+ojYEDEor0faWNzLreYTl9s4LfautwjWfmfw5T9ri8+R+BxQWDnA34R1JIKc8zrMrHJdn6ktse24dy1d9hImnfcqxaSN4jXO7hFG5RJOYEd5TbFnlt9SEJbogHzQtBkValE+M60XXrO3ZMhqr83AYNw5ElXq3SU1Li0LePwOJfzqiZgQwpEm2WcL9j8zMczYbpe5HyWNIAPYO5YPIa3trsjhSjRxQ8pXYpQtqrdrzfrdBs+vmLZzF6u1nRnQS9CnjGs2mDe15+osnk9xmHWv6dzjs0Cag2KAmXkGxOJfjjvO/hj11Vjuv7/q1ET4Rl0I1pSra1fX7EvqE4WkFw3bUTEycUZFNUs2IQejmZU6/LnwPa5sqhhwLgzI75q5hCF9BpNPLhsHRyTquzz0J2WEPiP+Eglrr/tUxtXyqt6zjbt6S4jWTnwa8xA2UKjyVvduSUqWoh8nMCaFKkemsQ/oO09V58fVjFGeYYJs/N5bsQaX8r/ItYl1zyjpFSjXyJi+V/fHuitl4+uZUpqh5YnEbG/wCg64gGiQqrJYPfgqkH3Ba/86RsfQ3kzVQjNM3oC4cu4VBQK0FQV/s32sb5J9Gr/bIMHfiEGl9gG3zqPhr99UB3ZtwE++Fj1AEpKqyNOCA8gmTcrKxEFgYjyjcLUCj4XiGyeYfEizYwbWIhB4aK+v2RpRIWQnzPCekaihhsgu0FHCpCkVnxh+qLoHd9hIVbAOvReN+HnKu8vCNpckLJCnGYIMf6HqMNurB8yBsIW4HQcz0PEmyFFRS6IdKvv3UOaqQiwpGPhhqFYFihBVY3Hae7j+0PbJAIUCy4CUVGpMCwiovKgvOkcNYaD8PvBnO63ARuvGglaVWPBWTz57l8lY4OPfAEMpjbpNVE/l9hhAjVRS/mcSO+3cEAVOTOlLOwb/QmBnd/4aoHi2D6PxeYlvfbYQ17uECGDx4F2dq8sdf4++OeYpMO9JBizlbdSP2Nu7klLUrwX1b+9kAmLwl0PokGdVBoLg66HYWH+lsz42ENNk7B+D0NRHTXJCZcN7I0Cj81iEmWnDVFUbmt6FvwQM5jaPL6wKIuA6llZ+QzUeMrTTWiMCpTx5YtoZwvbzx1JW9eJsxxe3buH1A21Kovr6g3sR+a72nG1jpiXnXklKGvDp9Blmvk3OgspjX999BLjD8jMxiWew5UWrrA+gNUy5SZj6XbHsRKTqd2HxsksS6ksRvSkA7mqzb5jUq1zFSpJqU60qLM05Zg8zCEGYza5aSoqaJ6AFFaxRqF9Ut4tY1qwPJ4PGziqqggh7wKGA8xkjQyp2A3fRrtXp+tsxZI5uA808R+XE1vdRbd1pkpyDW0D7CzOJME7PjEXL0D6Hb0OG41jw9MyfmWaHI3Ptx2eyTupUR9zRYXAUhL/prGlywFODsW7l0yhYhA8c2/RviksJVNkf4fOCnJvtoDhd7Y6L0U6oWoIvKaSO1nqe/EWiGnVnoU/bxMvdEGELO9TaiFnp/yU92KNH4LJpArkPp2c/8gZS9qN2TS4FdOsNpyoYrtHJxg8h0wd5i+LtRivxHpu9YXUbp4nPueVVbdrEkILLwdPLf0xB8vge+YWvXcPhoUYksFEhyM82QNY5jDMACaMl8PHBCnByAl5xaxQsHn0B4ekgTX0EShWjrGO1D8GuFekls9S8aTL97PzgrU+vV3YyxTlMBcUuSMu0t0BNxwRz77yQTRF4eG450pHM3QrKQAtMWU7BDqnleSgLkibXSLEBQR3i8rLzs7Rgk8nCPFEAYco5QIPhnnpCuaAW3LlJgeY3AgrAVQmTapcSV5qjfG5CxSpNRjXhrGK4n52zJn0EjBucd4ZoSaqDFVrM1Ayk0Xaa/mrfNGMtvvLDeLsdEVOgGsHVxDDGSbsP1M+hAeI0NZH7XrRIwlAeeFj4RaJGgu+0ver2STtEW/DSB0R6B8fYTvdc3QzipCqKDOzfU4UDS+/y/Jsm5rdqD8n43gtfYMzQ0EbmwMivHcwNp5SlAbaGywW7U0O2NsylNgjZuHEiF1hNpIgAJVOfgUf37Fe1v83reBeX4/7ExVzIi1fkgSd6JiSrtokHdi2qwVKGe785FoTNfnYQt60hEeGthaCeoOf7zsL0qKO2ON0LQPf5+9i+kpZBU6AFzvbWOv7fyI8XJ0pkh8XSuYMGghylPOMv+HtLi09wAQZ9EPKpZHyQ7hkoHGiHSi+MtN98f7RbZn/cGYipEXhbcwoXU6tQRt3mSiKrbsnaQawMl480rPlnje5Xgh9N0p4ye4KY0BflFHqcy39hS40U0b0K0HWbnK7vkttyoLU5v3nuJslJkwPpDxfNX+o/i5L0SEHcrebKvl1Xe70rUi2SCICeXeIqjunN6i888LH8kxMUW9J681E2qkmss98fwj4D7kUwwStLvirhBz5m0ZW3mUACO3P43ZP+KXW6qNBPa+ec9/obJtspwUNuPPDJKSB5iuyqJZBb7qyTmJv17G67lSyz0zt+FI9FvI8lm/wKf0oJt0k7KMGSaFWjqzj4J5JpNliq3jpoaDRZdRcFuP/5sg+PWlTQUnTqmJWVNxPt+FSu4da7EoIRxBNYO3IjgT21/2vRzrs4IsORMJylLlrf5Jnnwtb/BLbEqqN8eXQJOcaBznXCWgQ7s4bxlvUATU9JCAGDivmCch6bqZnHfJFh0Kd4U7Lx4LxEhCN6jojxGlDsVxoypeXzfMjTd0qnFpqmSTGWuMy0anztJc3weS+TwUPwaG7oy0/CRYQavc0YVKkX8sJV+CojFAUPzkDxj5wXZjV7ZbSLc0pj5TM2oJ0SiBz8yB2cr0nDv3rwnFspsLSuZmiL7OJ2yg2aForbOJsHEOhnmY2JdsKAZ5Rxwy2Ej5WpnsdR2zMzJ76lp3nwslORYxX7iCB8Xx+raaIKiU6e6361RG6gTeY4HoKzzQEi2j2744Qd/IrfMrOE3zZvoV6w2flsruJ7udaGaHSF2HMekiq74IqrpSSWBtQ4ab0vRCuauokdZq0u46T08XrMmkEY1OvS+FwWJD4ncxBQIzMS4vrU4wpzANOHlxTT02d82CGQYFfV4ANDQX6s3cLdTMHL0lBU6VxJOLCz1oDxJN4Oc01kEr3uNURPyAkxsY1jXB/9y/mp/y5DzhsmV21DfwpQqhBaMPolkq1iZfT3vN9J8GwqiGK+EZQxfbQpnsP/aKrjoNJlTrybuGSJEQk5gOVibhkv2gSzbalLB3n8AdyVyQrbdJHRsJn2DOexg6gWWosBSpHdu0fuobQruWjAGQW99TqtjmGzq/kDjaaxJQ6n/i5U/vHBNJGfWlnGK475bW4gaWWwdxOZ/veSrtel5eHv98TNSeQxx8rkg8J9GMsF2OoIbD2QO7nO54WTEL1Y9sqjYxcVIcudSQ3MaQkM+XyIXwXTS0WS29PGP56stW5W+Bg0UZmo7qohAQBn/Fv5aSnphqr5M5tMvvPKAZ51o3KoJ6EK7H9i6xQ44ZvU+4jV/bEgjUCQNDt1PO4wSTLpU4+thB3YagQEGgNcNULk0ODwI5TF/NLLDpSW9PimZNmJAQPELafmLZQ3JQCY7ZbJtwKEHmLLJGkg56MXea/6nJqpc2Jwugd9QyA2SO1wGNn29GLlbozzEqMYo7U74XjwVUNc7heeM81aiFmFI7yTBTkTpYiudMRyKk21WhxPlaXvmfHcJobqYxHysiSlH43gEB9BW22o6lxYx4LGhXSE2Ft0u3z+p06PvHeoFzov/SWYRiGolQlxyTGHLuTx3zk/dpEp7xRviFFl1BVWaaMGRAEIMh3b03lXqiSpTLhOWN2ILsRoJ97qTg76cRCXJiK5GJgJDXqnTZhOviOuJdaH92ok4x5YeSBMa8fRnOQb+dixa1GWOd8I+5pwSDyRQQlcg2RzRBMk7zhR36eXXgOyo6TPXcWqAybkikX/vsisOKfsLwQm9b3a+sNLLlC0kAUnR5dEf6ZouMO/LV38h0zP4AIOAQIYpm+lgA/fi3lfRHdywG1SPX5Kgak3/lzkODn1AgRebXWEBLNEE9Fuy0aMkIAoVE91XnpJVa3CzxyMA0VWe643OoY+cQyAXus4b1+zJ8eVxbERG39Dl4c3ZQVRCaBGq71eexsIF5wF4eE4X4zlnfivkBe2uB81pL23EPiwsbjgZY+iquYjq2fF870QR8pjAhk2hy1pNLDxqDOZze7qOkqEME2EjLYofEfi16vJoIyTiErB9mwRalWcWKl6sERsSDKO4fi9fx+W981MdpRBrECScwq77LT7YBCxPG6YycJxVM9lOjSu4d5Tv1AXXJinUUuEAl1VoRrxco+/KIengC8YW9lUwdXXOn5NdcgCvTsE4RVxKUqUaIfZBn/esUGUYQ0mZBSEK33aetgPLZxZafQ3Ro/lh3uC/xldsbTmYOMoLqHttJFqgkkkiSNf+jpurH9WihOmKuH6EAp8TxtIQrUTDiYK5GrR3EttrfizN7qg7QoT5LBfG9nsV2RbPWAPH16+KCoTdu5mc7PbI9qVggyvuOWeVsQWO9gcEtK8gbX8qLPs264oaQzNBVO4Cou4lRVBWXZeEZpIm7Wf7aTsQjFh580MKyXFobD+dpI6WfRs8No58uUKUtkdbxh6v7YD9ni03lCySR2zyUm3XaN47Ctyo2fitWud6BeVYcAJ4CN7RUu921DC1zOqTmOflgYzyrJfY/2bt1jvo3x4psMBU33Srlojt/Hoy0ANUvjmOjjISL0FqMB4j/S79PZU99U5f555ArY8SmqD3E0eoSfnAnauQ+EBaIYEFD2f164mMwP1pTjxMe8dMHcG9cTv7ZnTQyXLk+dSfWPLYhsXOZKaOmolK1h7N8B1Ogw5kQHOv5Kcwccek8bRVSoAKVBuPLq2C+Fo63RB1/7ENw1F6AHKk7IfEMx4rg62cBF1eKJVEHd3wN119JjN+Gc2jbkpG1jx0PbpSaquIPgDYx1imjx9jgI8cjFSKsfV88qAYoLtCWj3cNEE07QsLwaYA0+ETjP3Kc32RynqqLB0HCSSneYgiPS915RZcB+PSZ2i9ujx5L2U2AaVoTnuTg+WGCuR4cgHi/7vbyFFkSgVzZRL1ICJsTOlDow0SbzrnslM10UCXSCL+RtWUUUpVv/OXAl361MbF80pZTrvZFp12T7z4WjD7TAXvYiYb4oI69B6E4njL0pMUBlFuuBWw9gbVz2kvgxY2uQUIu3pSXqCizGr9KRxItGeN2+UCJwBcRrjpZqnoQOGDfI6rnbNKQkuCe/cABk/xBYXAYJEWRD7XDtzTVIP3H12kzBt1POl/Jb3O1UFTa+An8ZLd3idT7d0wnYhlO9pUC03C5QbIcpnnkGKD+vgGPEnvYuy8TBR4RObywzgXH8g7g2/X6cV6r+YoIZyh3qBfFslJVkrP6lsJWw2g2zTUwjCxBv/kPpTwJ1iWZJUFsipm2ZBfUFuGVU+3hno2hWTedZemAWd0qM+jbayTK8Zi0IWspuLuqbdWdC4i4zPdjDAxwiYqFHlxNOGUk4rI3oXUYadxM9pxy0UZ8z6B4XGXUH6yWwcgmF7UA+CS+3ZAKnDyXqTwdEryQUabA5RVKMKDbWutOUtgJAhD+Us8mqTx6d2sTLlnZw/0gslLaoqN1BrdxikRi4mU/8x9LLRlEaTGJ6LXbw0ZL6Sj2arXu26zOpHwJp2n2mtxEl3vzVOkALgFp/JHVx1XAuQ0nUvxLRA/MoP6vLYuu0N8GIkU9S+UvKHZJgBEByk6SRDygtuwGJuFwBgupELgV3rbcAa0/WbgYi9vvy8gKdOUkFfFiqOPVDvVnIW+/QKO4jAGtmbC0X44PHSFFbXcKI1lusjktvNQVP2XXs4L2Hl2oktPTYoYAmEPylCy3UifsFXV+e8xoNnQhXm5kH1Ko39At5HgAXDAe+IREolkfPPACxNoNK+pGXgKqqdKyQXJvLEQYTMaU7OWfZZPV5f/w0RZ/0DeyH1IPbba9BLZyqb5a4VTVO/tcHvVqsaHexirHMX+m8dtqr14246AhXnm0datwd2kT8VH8kKSLnI9lEMT0N85PbRwJu7XgYPf1wtJ07bKjTR8lJBXcgKeYZaTVFRqUfexzRl3lAQDCyN8aV3IIzdO8VHOCLEWxEkqaYYnyE1lle67DzxGHSWJWUIstp5O8qXdyGrl3djf/afTDM23F50eXDN/4LpqTn47p8OOpBZ+tnppSvvGa2v4RjSM49gka9lFLpDzBCb6cF9/ZxiFcY9dmnc8Ng8Q0gTvq/Up1OnSX6faY5f7D0p0uX3NohC8hh2u72YGoyGLPi4Fa1OZWpc6tVwVhfTCRZNc87Gm1AX8DNJyJDZA0rxDx+RKPdzBg0GVeW1Ne/G9YMc+gD5FQ6wORnyJX8ToWvMQfGJLXKCL7gcWBmmHyluAQoL6yiNzgoa+9CHEyPaHIRfE0g5mLsnoKHV+OY+8FemKDeHbzrP0q5+2DK/76w7MDjGyAMF5LEIwXpCydr4CjCx/syCXuzfhQ2/mEDfxmtyv7Q3UHwW+rNjIU9y92iBeMBGi3a2utUrfVX4RZgL5ONCjc9ok+rl+GDn0on6KxX4Zr8f2NyOIDDK62toaMtpWyJ2uktb+5vCO45Wifki3gSVZ2unBsMdJvJOsd7vh49XlxhFliS+x1aaipoTeFdgJn0cYlY1gxJsUHOQxuWjWWCB1sstF1/KtxwqT5yQ86lfVX/fUf97nLZKfCB4J3XYrckQgcDS/yniFt7gV7y6iLTNii7JDzoRs0JCfIKKBSrqK4JRHSoS9kZTn+FhfPXS70ntxY8CMg1j28maApoLtaD6LtoegIyAsAaiy9jTZrfU1710sw+dp6cep86zGskmcB848IiEZ4EA2T8ds08KitNtJf6kRLJlM5SQMpA9Hq1YYnQ+/SEw4DZE2WbbbCf3KKhs2hy7lngE2iwqpK4JpxsSUGXelbVd9kCyStiEp1/Lp4PdXRVq46eTXcdtm3kU8DB5Uop3WDCxj2v6DOi71053WnSunz5FqOrJoTOhTQlSma958USgdYXO+XEI+zs+orpvjdqFuIuzbMDa6qLPA1bcTywcMNNEMPckwF4WXVqFX8RSUc2yb+vpbz2MtdonRWuFoW7IxshB4fPY2yjuYVsg8NjJNMWjDoF6lq2ld3YXQEfQcdWsei4l3Lx0x4K+weZQI5gT4akvbn2PAXWYFodxpk9l4g4hF6MNYRmqk/iFw76tNJw/IBFfAsXFL3Y5YLRO90H7omZq8862BaUJkfz72Op4DL9vrMcz+TuLUw4gxem00y2UxMAqreZ3mXIDud/GyapSbzwql6MSpp1s8wOHEJIJrbIrzDR/txULt+VPLpOunnl/2HAUxqI5S5HpGJX4oEsASEYrn2y3PVY1khPsI36G2X8hZiYEz07NvkYhTF1Rg8fLyv9VLLk7JNpnNWBGY3Ucs9cWxRWRJmap9rhsYL0K2N0CWfQPMKUSo5JwXXRrpXpzQ6nJVDMRTFILzVYwoKJSmZ7ycpi710vPTXvZ8o/Q6p8ZWlGTQkZEO4M1wMg0ZvKaV3LtCLEI6kg5im7ZnhBoQYDer2+0i+QI2B7OXLUTTd5OY6KLdt1oDi+3SgkLobjKZF+nXgYUSzSICswwJm+TEc/u8RWLOH/w4roVMjUyMaJ3NEczsrZKwS9gcDuCsa+3wwwUOlu0o+2u8i6WlPvkhcHWNmoflE5uOqualeD6hJC5MD00ap09cP9CscdL15D+N1JUCAXLtiiP+uxPIG3cKe6hUxu8Cr7k0CgNqOdXuPAUlPqd555eA9a9NloE00YOBiyTSOr8WIwJ17+kryXMSR+q+mhyxHXiHpykGKEcTepaA+1OiIvsUg14UeCUMQzcPUfio5vUj7FWqPNP+sUFLHnaItwy+uo7D/a0tivpNSAds1ZF6xf5bq39L06eByq9gaSl9OlhDHQEFS6tKNewaXPR4HiJyISfiqbhfb7uV84ZOpvZvOQySFl21AUHnL3QloXn+jXk2QtPSto7JldMRCVkXByv6F82AhqdTiGbInfi4CpPYY/2Xm87iM8Hx94octNRiTBqt/Q/zhuxunERwkw4v2N7pK3OTpoDtwrtmf4lgcebzl962DwLFWDGmjty0pQazo+lGyzhUc0K0+mMWoSE8j9vkYfNY5CRcSlgNap+/MDCpP01eibv+XE1RHGhfVsF49cZV5hHDpAqDch32imqp1GwWRP/Mh8jSOm7toytmBRL6gdKt9OVBhRX6p1RScTzKmvvUgqL7yI5yb95j1BjfQQBKlATqpbTYbrC/1u7K/wo2JklsSifMgFQ2vah5yGynRpLdYCt1+DPLC0D2r6fIOw28dxeNRCN6OSDqmSzGOf7GknwN3v8RWfqFJaJioxKkZ66lV8mPlXqTKGV5e78XzApCLVtkZz0cZ+XDU5zT2NOeiex3ImSQpOJXwbDUxZpWL80Hl+UMFZgiBgq23Lst2wISIEhV1D0olZErnz3/NZ/1K+TFiM7aJHUIq8Vtse0vGY6shIjoai+lvpmRC6LtY1t1VUhtd01aJpsfUoIK815yTxYdMV1u0wE2DsJTMcV04sU1cCcG4m/cxu/BjshT7H4V/OigI4tevOj2Z8NpM0NuhTuhMLpUpdnaHpITIPuh/iHZrNz565MlZrVlt73KcPf+d+mCOV6TZ6Unm4SuJF/IOXyrW2NTBVPGj0wGe0ROPGls3QTJHTz9HMPs4LPcl+PsJRTV/wgme4RkAyIAzwy3DS1PbfWNZd7+godkYaR+XXaVc1ijYd06XIELVh1ykynNXuDGoFJsj1RzZMbOue3mWqVtLQcZduu3LOdwbmkk7PzsVP3/5SdPRB5lEybD6uf9rQ7a7r4meMbJJRUe1tFUBB2mqMaMtec+ArsiY289QOrgT00Tchmr2cL7Si2b477pzFsM11hmBq5BXLcKqBWVFXkNesGenY2yU2PObL1VtgVbFwzvSsGt8I1nQeRT2oIqO9tTUW27lzwJn7TteRjTvcL/hx0RjES9hM/zFnuQTAeRnhBeNRdpgyLHgbQsrRRXSUfnpqzGJccbfKMqSo3y0BZGd9dOAVz9vzTxcYK75KJm7aZsdZLP6eS//W/WtcF/b+E4zEeDnqOw4LKEjOPL70guJwwohXEM+OgH2A9WJla/StaFlR0/T8etoKbr+S46jAdbe2JAknNX4IZUWvTL5Tvc8PhsC+dp58fusNQb8lNzx2rPFOiwI8jq8wjJzNiFQ4hznUwNfNhi+RZKQ4sHjJ0Ozyft3L3Pl9lGVe/kAFn1Q0zuftYwzDUDb7pC0Q4d/btjLl9HpqLlI29uzfvVv1sIfFHf1otLUpBLeK3r675APekZz//lVl7Y89aY+CaYer4VI3SwzfLqqpq0tcDW4rOLPMstgGx3LmMsPJshvDmeCGlOx+zCul9cQfrZjS490G6flXKt3KzHsjG6EXU5EgFuFekr6n4GSsAOFdzY9bO0ruJb5CYWV9FqIcJLa6CnPHNZxQNOZ2f6AfCMmx1iNaML+SG8C776O+V5PcZsVR6HdicTZFs8CYGfhbPHvtfSFC3sG5eCTA9oiuowj9iah5SHqWpkQrtaOphuZVppovJoM9PWo4CFl5TPgIEaLFgKivB6mRftrae8nGvOohBJjrDHM8AY7JC49jKLb+fHoeuLgpPqqQjdP+68aRfi02Tm0W5Hp4y5iUdjWv2dhvy1F0zCqK51eSaIDXHYSbzN28MCYDlj36aOglE6ArcnBKOluiO4o/2IOU9maznHq6r9o7R5/YsL1NCHG1L6zddfS9HzXMjHnbG3stEaDJUD7lxIQ//iYGc/jYpMUMcrRDNKHrp0s0E+aRvo4nTWw9iyXliz0Gm/tYlrj2RVuoFVGLqJFXb1OfG2qhHlVCtCHQuD0A3/QnN15N0VxJITimAfwxkyf51TXxGBz9TGpHMYKfrt/HbSppwp7aV7lckIFV69ezsQ7sjXW7XknaxoBmqYYZm7/fsOp4EJRvEdAEZBW4Xz978Qn6jBudpCkHxDMzxn4sFGnxWE8leYPOq+5b33H0mVbteX20dXMYFpPPkmk1PudNCrn8sU1jLGtaYTbtY9o/L1hGdxyfQHyNwwXxNOJoQHz+keaWFQUSsgGeEBqMBfrCwQI6s7N87x9mwV/gk7pvQx4EtC+nkPPtRkVqCf0H9d217x0okzOUD6HRucLh7Pt5z4txXnVdzNIjL9c20x83v0ZGnZXN5Bl+YZ4YRVypc/QnH0H0JueMmWmC+0m9NWSBp4N7TjwVSlg7iokP7RTFDV6GyRNIM/CjdyVV8ywdQZw4/0Ap+QRFiJdZCd+B2U2tWNYJwKhI90f021o+SA26Ll1EXcLexBMgopWSYbMsosf2CrIvFVOaAKAz7UsHTbwgpLN7C0kck5y5Zhp0x8A7Zx+PgQyoFdl4xFAnkvYUPsgQm4fisCuGnvw8rrKvTwCvL28WKqvLtnD0ra9xKrVRU46/EMqaEn91UbZJEV0SnONtWbi2qg5Y8YTkqt6sUNR+uByoxekBp/3anks/lg/Kxkuov5Mna9F2NG64bdLEFgV4/6wYZil67rPFmIHOWaFrr4u6/3/vnJBZjkBllr1iuTeIbICVq9kGbOkItnwlozLlW1273SW6BOWAnvuLnQJKx+2Nps68TLJP2H5sIEuQU8pOP4cLnlVKjJcI98pmHzdFLwDNkSjiYC2V8zb40osQ5PxryE0QcZWRaL3mpXb6lkOD7q6tYpr7yKias3muR8UT1/0mQQvCQWhJTZU6WAXCLmPe8fCedz4BW8loih7TXmwGGw0BLigD90mS91Zzk52aIuU8lJVEdp7ELBp35Q8VIsirv/fedSEbGFFsylgLEJaDgLH1yL1D68wnOliAx0tE74SioEYF88Jos6ue9spMp6DAf2iTvOFl0pynM+ooqCRFbB7HaCwLmtaVhut+yflGDR6sd7MW3Zjt7d++Bj6tbwx/eJCvXo7MU0Zu1qGyeJBjmJ26wjxEfUNgA8LO0AtCY51n3TddRhYSMNizRYubV/+2VIT/WmTMi9U9ZqQ+21dhP5J41sEwjgBP9lmIdBYFibptF7kKxjpq1r41eqAxv77OWWlgcChITuYOHuwTsRTwn6LLSlWrbjkWRi8V7tI3YttR+8HwPgLXvdwMVD648vInNxkxQyZ/pbC1eKLtUkOTOvC38jK1MvJ+mqf3X6K3lAEQH1435zRizzOsbJw8QtC5woACK1vzgFJlMdcO4RIZxOfvyFxvn0emUj/LDtc7OFjB6rXpRWqdxD/F/3dXdG7nAa1tJH/6JvmhzADAuhoBgGT8XcZLV3AeRa9h1KNIlEtYfMwKYo+A48XnGuBG7ycvggzNhroISFT/uWZILxpY8RQRn/RE7Oa3ihdyPHC1iuXqGL/yg6VQwrca//v0ltqg4iTvz5belz7JJUOcP/NP1AupPxVtv5aI23MuJVjdxD+TcFqQ6lLXke6TEhIAQdZXiJc2LKYG7WXt7EI6+QCgaT0F3imGmQjhH2vFul0WVji2kVnije1CLN6jJKW+daaBlco/hr/sff5YSH/654ka59kf+Flz+giZ3s3CC4ukwG2EeqkEbIHe29dv8FGBXID5gxQF54heYP6yoqCqNxYgt7NN4rj/uyGiWT9d6G2Cj4PPoVf4/H9KivADNZNOYIdf7Gp6orUOaU3bKaai9s8pGTmFBWhyMmzZc6fO3PGnAoK0hzbXtzzbpOcsEyuwiPA2M7xl8paltEZCRf7i7jYkA9qC+Hf42eOgciFZuQHaf++AyTsNAuLu1fpN/WyZPrT8NiZMfxZmo0D8eGEnru6jc/NBbIprLd5E8YWiHBv/q9qOo/ezRVWj/4yl8nAQgBjahQ1SqHk9+tqoG6BcHkbdlG2RD0Qp38AVV64S+bHrPIOLoN+V8+ahS6WmWTpvqdiWyyni+ldU0jSKPka6TAABvF/iES9XFg08tF+e2gdxmA7TloClQdvWp6wubXmGwvBKxeKwbx+W/D9WxM+VT5FK3TEJpSkaA3Kg75+WY7q+0kDI2AGT5LkoErTBZ77dTjTwW/eDHKkwdfRu2HvYDSNFYzGljSUfQB4RU/moRzsIwdp816YDoBOBUR/gqa5D17IyprQZVcFel09YZR6gmqrvDz53EgwhCpBcc0CVBjQlHHXsx15XcgCNk1wOTTjyEs5YJggLSQs2BQLF/YroJaKVNOjY96Zg0UEKrT58vXFPrXqlHwBT9XzKMsUtvYcNWb8piJDIzSmwJzFyTKvKIjSGkQ9toxQJMbJXhlm7IjCrrbtcbuV8LTPY6clcmJHuLEjb0fLykyfJ5qPdqdGrB2Mg2hXnPGkMhs3jwO6gYbyy942biuBv8jGQSzoIx6K36mhInfAlcTN75D61w/XEAPJ18bXmBiQld4jT/fWNwD0SKwiElHiugyVWuRbfVR8otVirlZLZ5JUcmpTs+to0ggCuZBaCzsPSBdMiTn87NfKVsk5R46cg9DgGUJAg+GCxb9Oxk8tVKqrP+I6PRgFZcKjf36Vo+c8ZBuT7jKO6X3S0D9jK4iUXOMwjKeVbWn4H+k4955wLpK9H9EsjoHDL4wHC5vX3X7qfTd2v5oCQ98dKrAJDkdofLAtDREq0Jahrq2ugU9uwqmxsioSMj9NmdSJjK2+s6Q1UdaNGcd4VWsuIs0BhZtqGmA4if8hXxjtuspr0340YPSIHpl8KIgMv0n3Kg594LK0Gmk3tK/G+dzKrD+datqzbcqsvXLE9zvVyCHQXH2NHK1r9HKseDzq2605/PtTVMKlyqlotU9svBNEwIy6huAPtE7kvEYfG9aMUZHnI/QCJ5sUgznQYlMXXES3a55ZQik9fVbDwdLMyJHW86gIlVG00qSYhAgKIU5a/XeZbWP11y09sCpvDjkL3ZQEfvhEwYU0EgN02MwdVfVwhoAezYdXkUE5JgK3ytEYkiaAe0feXsRzVTTlRmBJKKyI7ui1YAYZ/SEOI8K4ROOlmUfBEpSvBH7d1aHrNSZXyY7Ka46vYkjz/NMZYcn3656kKfR3/5Bwz+xy719NhBwB+JbgeEC+j6RvNqWu0g7AGcQNFqkNGcyQNlp6AWA3oQ9WhOy4RXLDyUWe321SPgVK9DnYRaZdaoatMnCA/Tknxvu2af6SS0C7cSefvphy+e1DBO0SASz5ljxNHmdLd5Q59MrS7g8ttBt1mg4aSgoQa7SALdb42sDr02V4xVECN62GH8H8t9Z5colEg+AFZBFXd2GI3QAMKGSzLkn7Xo3yjXYyWXJHf0UBHVpKQZyGawdbksagYyLS8aoJi9WSJ6NNdHWDxYe0YFu0ANOxG7KhQUMDOAtDxeEF2jwX/M9y7GHhi+KOId2h5xR+RwQx2saBGxVANqduEIhOGx/aDT20KRwNjhACHYP3StPvY5ZFVD6x7X2kkeN1hcUO5/c1Hkhq1GoJ6hU3p8T01aXx0nFlJfRpE0lPGOubeCJsD7xz1eDWTEG29EIvLllZizuEimMb1cLyk5XgMCnIr2uR7NWX6DzuffC8it0nHWTvHYNqgKVX3vARfueDaFgqMWLU7EQzKNFcjLAid/s1kEHWZEayRYZJfTtF6ciA5hf9AEdYl0Jpn3l2hcLEoTIBQ8k67SX6odXzUJPOgddDE2J9VBsMI7+XI8Fgq3MAXhSzZmBxCUfmkABXGc6IkqpRgteXGGNMnilA6uKcbS3Jlpem16b4IDUsFbK1q5+W6E7VULmgztVbFAYdBENA+7gM0unNc6PTmAqitx72uIn5A9QasMz4h0bhl04BFEc3Dy2cL8+aUWMoSx+Jqgowi8Y9y81+J1bZck+gfsr9olPbsQd4qix/nx5hr/jf62v48wmJVCMBMNDdQutEexUtZOfSIAxapMxQxenZHuzEkc2ajJEgcCpf31PmNZzWa9lyBgOKFi8o5Z51lPoEucsZsM8WLqklfwxvveWSmvbKnKk5yW0FHE947OCMLmVe7BBy3cozaHDrMZGtwXdOUXhiQTwIHgeShC1QuufDQfXMes4iNs85FdAMFDHHwibiQZrXxGKP7se5+8Diz53DgBf09QL2ZGF7FNLiwjoPzWYo7WJercMYeEPpiynZfuPpkuCa2/qrPOZKX3oA75qLVQ8sY7fVj+0JUNkkG/Z4o+rIB7UftJ75XdtDtogiIuQnnGCFhwPvU0ZF00xNT4eDgJB3VOJPKZb4ruN1hXKSAHzGJKyaIBY3Lhz9tSsfc/H21o0JC0gfX5JwYC36kkwjezpKXlAIszQqmFWF7SvnhQv+VgjkPOcRojNtW9+mbFVyB5F+jt2L3JN+pEMry3RVKrzLOcRSpuz4msPneOvVteISWCytiAstLxhfyA0kQqskSAVmfMVVThb0j5H61qbBmKWg3btmmcZ9twE9brFgSmOFw5t5CPXVCbeHpvhSOD9cG7BaO/3/vpgH3UkMgb49drop+3fCq90m6paPVljV6X+qZ8KDIatXa2rWdtEf0b9wIXXm3mGZbplMaAh+n0MLDLtouTNus0ecRMev2mjp8MorUdDsr1T0okBJ/A8jPOpIp9Tx3JwwCGWOJ4RcaRm7Vcd7Q5FBmjD9cKsM5VdMNB+kheNF54U+PBfDzi2o2gC3xloVC113vLwiuuFgY9qToR9hlV6h2iW4S9fVhD31IIdnjQxJllxP7GYT6u6iTwEyCd17sLxAhDWnYZo/mskqM3fGGCJqYLfnAJz7QTkf3sgP+Magu2n5BddIJN2fs1OTzvSi6oejarKjF2cDwiC7UPpfetvlbh6cdu1YddBF+WZg8WlIZ+MNBOF+MvFiiKOqFeJykthMIjjpTQTtJBVFHaB2ZYOAvqCzfa4ViCsLTX04t58vdfQMHYZUFRhnS2fSZ7QZUdB9B3wBUnthUsXnyIKJvGTF2oDtLnYvBc0Bgmz+kOBekZyn/+C4WBb7ql0nk7inCuwckxaUe4fyLxai311bfFpwH42OV9dH/h4/POI6QSRU/Yj/aLag9QMfqBQy1YIBvoCtLq4Tt2hH0Jblubx77nC8CQeFDsfMiicUhjXe6vWeDTGE4a5q2KVl2hAGx9AUVutccZE8IFc1EHHc5VEPbFoB1KYSMYhFSUMcQ8GDAPbd4FC4jGNFYfRD6sjFQR2bioHWsQ6C6cdoGpGPjHoMlY1TWmKwU6vquW3fDydD0ywmzRFOi0D1W2+7RfBhJG319Qef9gjSIv2I/FP7ic/IqSyXvTa0T67tRqf1uPGxjVAg1PY2wlhkcCmvaBg364eW8VGvdokQ3L80PtmlkuO4G4T0TIrrpZGoK6ha66CzH9YRs5TXZrPGAkhrilfNHYOSFeuO46JkTf7BLtXKFRZH51B3SCqhEFkmQZG6eFtKSwyft9BPUdnSp+qIEpgZjY06RvaIxvOIfxkaJue2/Es4tTWrGEzy+ePn6fugPR59B/lMVAqbPmOHPg+zFBztK45MDcFmF0ixMLqJV3ec62QBkmBs3+qANwxhk7h6H4GC8uBdi8ahWLSVjr8C8ZDTRScAdlQGxX6KVWxbnNun/lCSP5rV8mCVkI2WBt/YpMhdad8KjmYV32oFznZ3ucDQUfkyyRrxIeeuybQeYQuUypNATY4bsJLaZApVrtUt277XFlzYv/wbsRF6r+dNUvDWS8FVzsyQjj0BNX7btMa+Gdcv2ArWhjniyq2+myvw6iS+ECFicMgfcRvPMVf6mz0u7GAqJsuR+N7BJN57S8zpG7lmQYSugb5gb4jt6jd93n3AtHUoBpLBEKhS1eU17WdwKpaL5cQEtlHRI7IVigCWs8yb6HJqzKXbipjxNEPwJ6AouYfcBRNF7+Lj0vp07n9AB8f53BnFQBPL1FU6k7LKGTEaF9/T/Q+ZNN8PLXOrIjLlUhBiPPgkONzmqURiCFnCxyvvFvkDWQ/0j7WtED+K1DHo+cDOAqU0JQ56Cv9hBeP2gCEnP7Vz9CbjwAX+qQtlpiSfLRA+1nAKdglufDCDcR30RRkHVEkWlYk8AbKxk3TC16Szprk+21Jqg7aR6iQZW5O86nZPFDYvl2xGPweKpzH07uqjPtuf0bz3HU0qn49189sm86EpsdXWEGnTcYBXA1cECPvaJ/oQaNK6u73R8GETuR/N3KuYHQgngitie1HuS4Dyfm+siO9dnnQLm2IYbxhY5gxbkMQJUhvbf1CwZslArUZWy/Xy4nA9pxA6x4jExehvXXpViguv1FC7sGAt4EBPbpjA2cb6JztmMbzTNx+tIcp4tMMLdK8z8CoKciSt+FPeP+jtufHWoKqkWIckjwPxk3eHY/7f7Aps8uTc9++HP0Z2DYOWvNMyFyoCCo0aPPrO2UF1KJN5mJgfDElNZH6YNMfrckncwdRBhq8G8ZsY8TWeJH6YsHrmE7gxGkFLSoQy595NoIiNWcoD+3cUeWFxZ9fHOjL3yXFr8mXGDfy/93oQSnUsmb77GgTKyfYyhtAVCUqhyv79b2pgWEn7b3z0+PCKJQeljIUYqhv8kd/16UDSxbtEzPrVu6LnnEZ1/FWsXMiyd6Lf/WVarEsBA7iCMq1ObUCccXi+vCnd2vI6euCEdCzSaBT8Jsb0ODDbD55YjIrEvwVEofqCccW0h+RtJNsKQ4Uk9YcOkgq4TEUhFaF/AZtdyak+2WDH7pgXHnKfnV4HFVJ1ItBBTjvJT600GinoSP+eZ5lbSpWgmOcdzW2KM94CztwXTDtAGFjRgoWgOuYVSaFiyWoV8PuCtDX9bP42Ys+TvIcRwPUpOopi4wY93iT6w924eagDXp9TOgspmAeUrcMvdkltRLodvJpM3xOMMDDUGMFKBqV4qbOCtej7K9+cysPVKJOyDpMtGbZAj+h1Nrfw+6gC1O/FAssyCEwYyIH1scKHxnLj7r014fH6vl+FwlAbA4MrPZtefiOIkY6+Fz50ArcndhEetiboy/i5wx4U198IML+YJJxH9ErOPIv9XMjxUZTh7kiMQU3lWh2Lzi8VDVO5+GMa8bUYX+nyVnpABFe/ZDhhsA3BdP7fnSFtRqW72/iLsuzhXxx+QWbnsOto63Qr5YzCi8tRaARYxWNpSXmvec/ctyAs3UdQVUPGIb9IUNgY1q1jqcSZnDyUyrzs3JzIm2pwJRkMXtIPLEwkYRwLgsYZF9VMINI0tEsEWChos2pDdXit0nQByxWZf06lgvhhRz4kU2O0h6oMK1AYWjEZiygAaeuYZZII08hYipEebwzdpi+ayFb68IhvbggB5j+IBc5Ya3dBufWQNaszk1e17xNGcvWqfeGO8V4dkAdOmJQQ/IAi3hhsehOuY3jGWrlCGm/bwtMs9WQTDHpFmTO/tKnoIojiEGEpRZtzrkLFEgzEHVwKFdjxl5XHKOaSSRKphKTSMR+hdVTYtYvG/bOc9rhOB/HDC4kglS2gFS8/6cAaRVeOFimw11IhBAoXMHzszha2Esi5UWYc3Rca/wCq3SXCBVZdo+9UflnqlOCc9mp9OqVv8FzSpSHBCkHYrgWpb+vfc3CU7Rtou1g//0vuuZOUttybxzkyXabGvZK7KADL0vwUqeo2ynK2rd/DERkZM3X6Nggu7SQ7Lp6t76NWojccCPgVXxX+JnMPBuL/LCWAi0WpoQIjTurnn+G98IeOQx/jY06ov0OVQCNSV5wdDOX3hDpXs26Hzg29ShsTpL1UCmXBoU1MEWbvA/jaA++1nrDUcqWrmnHFX5WzY/MGVQb67MWVk7SE2gVcIdkw7zD9rFjsNGMSbAGn7eSxGTjPM87waSa1VinjOn9RlIK9rH0mktXh8FzA+Y1lj90QXTQaBhFyz/unXtd5qvgE2rJewOpDSqtz4W1Ywe+BNXjQmzcmB6WLkEehIB5pGlgOGpksK9RupLDHVwRmgtIssrqK5k0s6JXAnZC0X9sarO9061noe9Tbq4GwTV0IgVccUF0DD0ofU0U1qnYNt+pcFRgPUakHdJXkISJlUoNBNt4SA8XHZNCA84b3OX/pzO/MGW53sP0e1h8if95nm8M4YXB+yf9NFk/KG33OBLgrUf0cBLSTknjdhiWQhdvXNFR0DQtRgQ4j25pZM0k2Fd7CdTgEcPpUcB6lGKiRkjaBzZqWqpmUBgnP+mYZS8T7EDe3PFgpIQslZsPfDYnidgHDFQ/pql7b1ByB1DNpOmlVECx/P6/NWWS+uobjox8KdDFOHV3Z3TNo9GvU1NWUOqUX6JfDmy9CAzMOCmeq6CqLcTAmbP+rO1uP0hsf7PgJTfciousKUqOIcFlkcp6zZ4E4fVjScpg0FaX/CY0BFdEY/Aumv79gYacp1c7QDmNff60UrUkFI48Ah98fqdSEqfWQgZK8URzWSUC7Wwp/Mkp187YgSQUI2rfXi6Y6B6IFBNIIgti5P9Vo/OkB3BgwJXOrb5JWAU9vvLR4aqW4FdZ1I/ZG7uKYcl6Wy5eWn8XO0PBCklXsPO4th4B6BBSFZcXuJJAJrEamjXbyx0yPt1FvxaJev7tbe9wsMkcdsNpMjvuF/HECRPty5aDfhCvj9HfmOeR+KI8bPhIUf4y7cD8om76fCs66mKXFi7qH4jv4OAeP0XOsfS7WT/QKt3ncY2qnyeyduyhICbytXV8rnaJhWEKHk+lnlbAVYJ4m8o3Z4yhqdPR7/Jko35ld7S9EEZK9oAnxKsRvPFmZTACwXtm9x7pAgmGfMhjpeGtA6cz5IBUFpnX9Yr4EoCEaBomEepxTd2wMQHHGbHSD7lkTfgoia/gOjz8ObgR/qyqGXVwg9t0BKqqQxwzzn3AXy1NN4DFsWYP9tIXFyhCTnh9n3ygNJkGd+v49iLThQ6u3P0UE2FBSibfu0YAANQiVMluus+uErmnfAaOnC/OVfmcI8xTRhQ9y/Eug7dgoAsqPmX6bJnPlYsghuOmu4DC+jju6ay8rx3h32aRlCw0l7UjCIjX683KyTWS5RLTTeys4PuSWaysD2njgNtAMSwJjhI3RZ6B0eHjd1slftS5+hrMuabEArVVhbELbes96ljKDqqvUVMsztQvGqkEz/ifv4Qx7s5kPgLXyYb5iBRvBDH+L8g3AxOd4gDlsPZw0Bnofh9rLtBuoS3LUR3f6uZyQydKnqzkpGgpQP5S5fPqpE5X3QWC2iBlAYJtI3EcIhcz9bGnecolTWe/tYpn03ETVCiH9bmJb5nUexHWC7SOiwtTdzUgp3JTmtsW2BnPFqVTEJ65iWziKFFQIug+VAwKtRZR6tuXTJqCqSC4dPgyNailqYBkNidVWuP0oN+R86jmJnB9B/xmOAF7PAXsRokR6Q1EUmY7gUlVo424i3p31ZlnFUzmf3Xa8zHCe3LzwnAJyV3+J5oNUPScFP+yWGfNcqueNQkU/llhILz1RHVCSnKWXtEu3lFMUOjy41+UyawjCGgGOM27Z+X8aQXvfzoSC0ZW6JN9p4vFMJMIkAFGDsPYVKsvuytp6wWsDjHSAfPbweLKjBTk/WyS3XSEQTklr+8YGYtAZozHSBGaylT8lRYWYoMVA8Mea/uzuIHXHNPmVOCCSIPDeQ2GtKgqGSlzaLunPcJdgWn2uzv3z2jPW/N+mtSpUQCXIKwa+iKgvIL8s2u4sMelick6JobTSb1/XWH5Oi5xzx8KFP4mxyTqPgX4LtG1SuYMUx01+hQsNLTgr1RuKvYYY+mNYbUVFNdu9JJcE75hL9BAdZhNNVl3odpKWoLE+3/yOEKN6JBsE7Dr1MYs0yDJ1sAaomwievY82gXhrZyaHpi5iCb+WyORS/Jh8fjk9C7yMCaGREAqAkhqavJuFC/IeZly3ESXlG/0kRkk68yDH9pY8/so9NMqCOGF2nH/mtDrhlBdd7YCojlOsrcWDD+tJSuyYienqDNIXTFHZfz0GYSpDLmEj/zwXqZegHn+5XPpR7zB93WmghPfuoCetnnzOQw8AQhkyMoskn6hDcJ+q+ANNrPudKRPk1yihLtSF++gKj1VWYLAjBg/fYLlSXnCH2HcL0Nj+u3YIh9fBYO62WTviZiUSK4FKV+Kp1jelDVPoThxOvvhB39xOsyveNoDWoNV5qv3jW3lRzOgBwj3zoGmP9pj8eOZEfveGATVXA4t1Bh5F8uG456bnISgDfBNS9WK2N0/vQFC31vO/S/YnL8Aq6WQKUmVHufX6AU8PMxbWnMv1strh2yArH9dyO5ATH+rJiL6BaaOpsE3MWmZmWJQeD/UlDx/6lj6ND5MUFfdHbhzj8oyiBYbw0kAZkGZ3V8hxuJ5b3quzL009jlKRLZbNm4Zt/8FQSwOhOQ/4y5rwc9F+0EqVlavvNPLiH9z4bnr+DnJvgToAciGFI+AiW6Nmr/JzvgQ54WANZ3R3wom2PtVCuFlqs/yNFglkwaUJQRSgcE2YdxMS3P8VsImN/T6ylqQYe7xvB+DCc1UubZ4cqab9/1uN6HvIA0pJZEPPAgRtyGYLdEVAsskCtDQUiR83/JqvUnIidGV6ON8c26yCkH11DbCeEMecdjaruxS6ud57KWcgCbg3/Ws54sKGOJ2aXMF/ByZ8GwDKSLlK9YHJ8j+v5Dbb0lvE1mBX3yNS13Ma/KJ1r/DT9VlI89+Gwsb+6fhMvkNusABsMwQva4Z5+xMPWTFRDOWZ0B8syD1gvuRG+potkxPHg8MKBAxvh6CRF7kvxv4Z4/STQqYo3ZkoMRS5r4s6zE3k+AwxW5063huAnokAKqRmKn23XwhHTqHkEH9LVPkmq/sU3DP2Db5Yq6POZntP/k55PVVI2yWWQN76xFTJ0ryXm0uRcgdiRBx+I8ViQ0e0tHmtLuUwGEsmqHz/nXlTbNJsvlP6YkLbHmH494cmsZDFZDBatMUWSyUTMGQDceMDMbzQDBdw5jLpfs0obsNhHoicvfcb6PhOMm7h3Mh4a4WTQl8hWqtIrUt6YRGCj0zcRjqvOa6stfP/c1ZF5h/I3ep1220B5arqlRxYua7/RKkEO5R+Nmza8O/q2DLEBExhSHCfxp4OxCWzG/SEQ4twJ1dmy2DBhsOVpxIMovEixAd1fT7NUk3S3xSb7GGILd9stMrG7yyje6WIeYdeyyUehjmQEvpJoivYt5DltXjCyiqy6a1PQ2qMDJDYZmAidtnj5GdOigFBiTyn6+fGDFreRTAwmFgvc3s4PaxuGpW7iR0YlAcDCb1NWSX/lDgeEKAe/Vw27FN4krRdw0NooTW2mFpCWYEUV2yLOr6CfU0F6HyRzwwG/ZuazvO40nZqmAGJ9S584OdapBa9uQw3L9/ZSvhHUuIa8iY13iNINRtwVzdULSuE1IM8tPxXUgoyxw/IjW+RpzRIUWqA/I5brZyJsnfB1w4liCFM3L+pHNhjw+sMRCqPpSFMsUYc1Z5F9+jk0O3d87jJ1WN/EjecgzHg0EBBlUAMIfZEPwV2UsgSBnJ7XvmP6jR6/XwkZY0KTXPffKvY5AFQuKG5jbEEWkaAP3hkPpFZqJhjw+1/UKdhH4U84llNy/zpGLthnz4hHUcU5RVNwSNYr2TVWb31x4ohKZIkE64sf3rm3P8MOhbNfzQDYGRv2JTvujoRPZVtaT+h0iD9vYc6RTSyeZgTO+eUJlacmthdJNUKx6i12lLj8dQA8ldY5QwncimWnb1xeTQhABI/3viypzVg/LjC1Sq2BEQDFkv+KtnORucCWqADT2ovWaeVNksfeWtNltFssElfXbV4jHKmwYjSgJCsnRGRNAmYD/Moqt2vEJNWuZPVkLyfVGmPpe2I2CGWT5i2JoJJKeJOb9eZ5AuvVnt/Lz6RLoANNl26Px2Wqa4Bqec5RKuAda6MUcYImpX0ZBhBLSFclzIcrmX23pF6e+5aoUJDdzxlBJzxZT/LCnZx6IBeGUjZ6H63JQVGTAwIz1HOMKoHEumw8JOoKXcoRHCsBzusF1BGj3fy7tyjWyJcU3L8zxs7sKAZoBwyJviR8M/PsdD8AunR4niscN2yN2QgqMo8bk9oS88mjTklX9OKeWlSe6XsNDWL1Hs3dZg37mKTpBPb1AeP39V3lv9vlLbbFJV4hVifyLr3QnUMvXJTc8d54ze9MvrTFIU1AWhRE6XSRKe8LL7J8C5tUnKodg6AxLw5rB9LjgfknlBzBjMvMilMORrJez7+T6lrzi+dKK7jiJBdGFFdEkn4DjkHSrfEsZIP+RCpzSE7h8p5olFwVxSlJHIAmlSChwHkhoiyV/UkX7oBZFy6CRieLvLNt8GzzIl6SQP15gBlBNV/Uul6UkhLAGiMyFz1mj6xhEfE9dtlwkpsei2WaPpBQzR5Fowu8vqwIHvUvB1d+Ep+mVJWCIJhv9XjuxqzImWAzIuDbBOs2eh9aaFwNbP+b579U3zBmn9u1zCKlzbH3yTemG0SOofvl/aGg+Qbo16PKzuVtJOMhzT19+CEtg3iBcrKO/FSBRpSLke7n/sR9ZRE92xvvpGdY1OhOdpMgZWyCDX9SRRGo3NAVosHpNtvzrkW2DK/dgU96L6BcIYKXWeyj3bG+rfVAmPcZUmBXD0Rgs5fx74r4JUcWXUz1wkyQUsbazXlKO2nX6c81E1+kJFHQVg3KP+7YdJycRHZweMdo45iE5BlufRJjk9D+cUOLG3zfxc4HShMPE26iSCN6N/CYYfW8Ul17wNzXNlUaaHPLNhVUwAXb5LYIOGrde6freEF/syr7icaEFsrU9aOcQaM1pMcIIpE9hxXQBsiRnBxtu1qEbN2u2a0I78exKydWG0MQJfvQ+HkcUOMtufBUeVip7S6QyarRi5MCqXSacUXOc8dmJmxSvvziCHwU6C6auzUsT4xMAJaMUEiyl8vs4+oJJIyWAogtcDQxsumjD36YsmR2T7yJx0sLuBiSaRXoWzVyQn2KWmYarAQIwtT00msIK8P1D0uDnSZbXeigGEfzQLlXr5OoYLQ7Ul9DwjxiDQnaeJ42MPES1ANWfDTS82Y5uQgcvTX2eLkmtwuv6ypVq5/gEyK6vu1CLqVQhbhNBXEir/B8KS4SwQ/Q2JkvpCiqKnUt3IiH+91owb0z/4qoOloSbyheP49V30fDTz8O7xT48OhfdnTguGrq2n6t28tDWt7fnr19aiPST9HSCT6iX80Xfn7DNUx1R7hpzvKmZbFSgzbkBSPZN3oG/0vrbCiKPLa8iLp5w/9Ifx0/NwbzSMap91OlsrhAx4tlEFrTmfZGxpQHPwbBgs7ueJx5VxhDQ1uX0NLQ1cao16ZqGHnAWCwijAI0aSPoB+6/BmaMdB3nq7YDWsRmAbZmPMnfqCvJ/f0LVnd/1gFEuEURkVyjj1G/Hr9s5eLMqbtbuBUNOpYKdXxIOlsUB62AiBqPh6Cawx0rSaDMYaqgI7i4/FV/RIUoX+/HQC6H23n9X0OYqWVxEM1W5STZF4nL4jCQXSGOdZKtXDXAHXRVvmZ6jMSP4VBmLkN+pOu8qsP8tqg/yoXYQq9XqSdKwE8oCSYKzCAAXCnDjH/CTBWiLApvefT04mKOQiVR7GNHKqAV5OwdeNFnKTCw6m8ooqAs4yo3afuhqsBENUafCz26i0i+6wT9gPma077mS2zhVDzXBhpSY7Z17gjSNXvL/LLQPqvb5SG0FoE52Zk4gjfGVuK9WRDGJgmg0rwijAHTWnb78Iz6WNJ8E4RPaPG5idhzIgsX8YBarPZ84WnCwwDj3ihXLQMbaeckWP0r+VDfHGZWEN05hIWDcAxvxy2jLuyoXwIvP+6JFPBKvtELp0uRJSgvSxH30toM7gBXhFAZSzaci57J4CglOVZTJ7e12ZrEDEpZpwSWMVX7Cqghe/aFTF1DVXISrOq7lBySnnC9fz2fjkivKrBVc7V7zDY4S+KYdqfiW7JR2A+/uHygFBoSFIq7Xy83s+yT6Qn6ttnx5hZU9mgwzwUf5tR7Ta0QVY1lHWA5QxAWFuEKFdGhF0dmNM/VnjPhmYmpp4Fua27HLpIS801rt6HFkpgkNjgmIkbDVXA07M4a+PGBufz67UVepKKt9O8V18Yt0HsezPLIj7iSOvFgq8CLyY+FkGdi7fAS08EF9tVjPRvZTMVzB871grpEWdglPyhjh7FdpmlYl9SZAY0DwdhLyGKcJgFjdBVGE/Newn13NhPTJs/kAwIsXAhzXRCMK9xsaIJPGuLJAGbg6ZEP4/wAIno3axaXn7JQbfIel+VnCd86Q4Z3ccjKkc6skkT24BDkDDvVQtl2sh6dC0KPE8+Du2hOcEiiriY+pL2BG1SM/tXahKQI84wKiXcnJeroWG6t9wMn1X7owFmDAY+Lfi4vcedMVcKAmuOku9QTaXX9Icu3+MUe835shaMlOh2KaqkmQmqCksIRyHxvTHWAZ/ReAbSh5U5wGyWIeXHe20OK8W94ONEK5HE8lP9bqps3BCRrQqMSulvUySdb7b6U31Zycc1Ms2nOLAFgZZGqORGQnYEEaQCV++Vc1ikFgVZQ4vIsoQoTSo8KC+yKEIZOPkIXYH4bEjAA8pKIYj0ebPgDt4s9P5I4X2rS+RB95ra4rjsZy5Hl79WgrWJqa8tChV4ZkfPsirfUafcsHcoafBR91UhCxrZBDNYl1b+wQN/iUhFxXiGGPhkK1Of090b8KM15iTnCaPi36VgAyt5qAemS6WRbcJKa4G7wTLCON77SlKgBuH5GA5kbHTBkYgKuseW//rt4gkHrxlEk7S36ou2WdyQKp+7gHkf5QcnDTBeEDLNAf3fR3YSwl9kfQU4/YKJI4OmXnnzwtqmh0swC7IA4ye9C6g8qHGEM1w6t8SYdr9cIglwtM0z5mZpouStvVcSvHx3/WP/xFr+TGilQ6OtjbZwSUkcdmOP2bt6bHu+JNbZn0mxQxzMtajVoMcvFQDIglYtdTNAlKqjrTTDn7qnHdQc0yjaQQSdaQCWEZ4kMCcZhh6rps2tTgXa74mkwvL2UB52MZSmLSrIR93PSKY3v1vyXlCyqvuec8hdJrdMGUbp2KYd0YiiR1xkAg8qbYT/FSsipSO5Y5OGQzDReIypHgUgU/Kh96M2pmF+J6/t7ve7XVGoZ6kpO4XAmd4anNJ6CYaGdhUDpy53S7aKOTYgINSU1XyKju569L1bLPTtDVKCXGEa6EVGR3CGmIs3NASzWRgv6ySRPeqCtHBfQWIenZ8S+j7JrEsoK7O8J47WagAh/qtzu1grABUJae0ZBo4rqwZ1Q7bO1AEM9IDdkrZHDh5CmVPQzTKBy9l+8PLvuR5eH+PNE68OtmBCKWySvgnqlf8wQkqQz5zxZCWxYpgh4rGh85hnMT8/UV87TsIhAjmoCLpeZhtjfucgbLh3lvGZlFEiq7KFb6Af9EHjc4YtWPn4MnKC2bPGUfje9w7eBSQpB0UkBpJID5DB98SxPW1N9IbM16hb2tuV1RatbIsaOgD8cVP9ITKXzBa9ZR2PT+2myfm7pUPJ+txREe2n6w6C6rGmNAKJFbyIYxUNMY/pZq92kN1ctyWRzb1h0mDYwm30I0bWxcs2YhMqvzX84ei0Pes5wnRcssjb64VojKsZMTg1vyjdQf/xifOenUN+YaQMgshmU3efbWmoR0ejuxeGi31+gc6lVWy7rZ1xp8H+rlbDnhrJi/iFgIZM0VJZ1o79dvgXP+r948Gdud6C8mqI3BiVarDDFdDk5EP0OPQfB8CyWKKoJgkQ6JafIW39bMLR3g97o+vw+pYHniHey0JbiOchA8pwZY9qbIjYbIKRrLmWMHgOFargMj8xyron9RlO1orZyh+o1+gP1IGldF4Z7PLX1vEJzFZe+SjeT5+kM+NR1O9ePMXVfL8d46jMhaQLSb0WmyxR7PGsxturRvTjUTB2KpbebNPoUPjvxt3QjG+6af1DRuu/dQed/y72FOa/+WQCRi5eN6VmcZ6ofUYuyyYAbDfknTRwh7w2QK6XEP9yaOOxQ0acPEWZivYWxo4Xgnj6/cpUDTFS8skQblOKwFMz5CMzLYDFLEqgxgKIbnqMqt7ar4y4+FThoaaSOz87ljjls+JaNAN6T4HpOIRr7DGv/yAxTx3sJh4tRc2eEI0RF+5uLosnTMwYFgLE2C8S35zjG0vVOpBCKlLHtMuF0+qyx0jJbbewNLf8d+CMOWaPl64N8Re3z9K6BBGYkwtt3L2Us33jj6/H5gUM6IZE1f5XFx9Z2M81A13S3+xIWF0mzsR6U80HzYuF9Sf7YsVf/5LkMai9Hb2e9kien1Y4eLOvFLj6ZyJe7I2fhP5EabRKPIt0sqOOqoiiRAfI+aATftlif+7F6mqXsDt0ReEPz+cpsp0K11kNFJVnY2s8VAEgM4ToUQkI1c/ef9BVuZ+5SbCbY5eYgsMU0CZTpcl2tUwJkzaHradmNLVT+GMA97W4FCr0IW0+sXFSXPZZIpVMg5REXNFRWNrpuTvKyKJmFq08L+VIxa7RdtmejeG52rovy6PbBw1mS3NrHeRe76B/88Iu0hc8Mdydc8bqe1IoVpxesRr5LaGI7C4i/o8kKZf7A1VX5fvy07Iiua2dpr4sc/2qhcYM5En1/1BnqNSffozqzYUPZxuI/6i13gwm5caBTttK37Qs9WSa5pyac7eBOUes5lCIL7F3Ee1SEeD2P9wOJ2iCEeVMa/z+5UcMqhsSWDqvU0IafKpg0421BGYlv98/OceTnTnQTbs1wi2aKFkSTcBncRG0LsEYIiIR84+/1OKzxTYa6VaJnmwoEeZLx/khdak4EHb3YdXltP/e9tM4EZlYKuyaURX0bagjvdedL+xYEDNzG31kWKQQ8su+ayFykH/hj8gyNrMNhvXG8/jDLKPgmfMwlSH4Offpcw0jSlbFlP4cEySozr/N/H/8xjoJqiPlUu99jB240f9gM5ZXq3LolBftwAsN5GmG4qokOiMeJiohwep9T/qhNawrvm0FIcn64fcj6vuJIb+dmUk+yvDa+xJU6wyGhLtgzTJGGy+SswW42VXSYngGKwq0OyTn6VSwufgCMVzwr7VA/N3T6VfU4Aow/j1xTMule2aLo6c55UhiaVBRhtKkWbxbus4fx15z06EeSqsDT7JmZONSZmioM0QnK3x+/8emYD49n/CvRW93gWb5qUGXaaxrj3l79p7l9m7+jOS/9ZcGJkIJQOYqJLg9VTNzHILRXfimzblOEn6rxlqlGnIgOnsnAh9wjafN/ZvshRza6WXayAxeD7GAXJ2Wxzn4yjNs6fLbLExcFr+fMpzler1aDw0cncbOxT2tYANngUfe1RYQnwWnQqrN2Xg7N+hWkJ4xysFpiRrMmLWX1Gwz1QXi+iX8mBT/D0ql+lhe8Nj6Fwp9hZKxwrS1HopLQTIpE+bIEeQKxdat5UAG3UHf6ylWmL6XcCh/zissj9xIT4MIMyl6lolk4/ET8fEmzAdAZFN220490lIv2D0bJnF6+9obAfta30VwUJUlS8V1TQGjKHeIPZ2BUkfcL7UWhFnxIWZF58FGiZXj1i+7yuoGVB0CeTWXQN1J9X9A1eHDto85JqrG3d88RrUGGwIiVzjKMwsWehsyT0YiwIjVE1FYf7qwR9Nqu4wUaluVAHW1+4Wt2Rkiz+leO3uba3pouiVUfPMziszvXK0df3wUZQKTZMqmJ9aKmZnRCBYqDumCtz5uAbp2wDi/OyoJg9xLXntYGS1PgXIXcTXL6ojx/Fdq4mXiTlXJwzKadiZ6YlMC0s6TtbswZZ3oW1bqqd/JH4vYpzRONzmivaSip2mzdKPX7wkhoZOrlssWnBkvYohkvXduDSByTkPAkzkifoZ/PVvPABdrcJm+BBCM2Hg4iL5A1qa3sa7jZMt7WufKhVMuqJMg+sOWDSesJB4ssyfhe3ZPErToVt0bEH13TdDudDOiRNrshSrdlYP7GOLBpWwaLHKJKBGMfmFK19VB52K//520ioepmeK0obnIikGBMvlz6M8ry5oqODeui+W7xCb4CL+rSCDhwGR983losKUzQzMhObeOa2cynUhXDzQkvnkT6Rgue147oWK0nLEnZ7qFiAyetzotaWV/XmvDb2ByFOLpl6NiBXrcrw0mfNTMd91H2JcGwpmJ/fSfiEorfaTpxrlHfV2JvSJzloGXbdVCuHcR/oA0IldN8b9pVRTZjqOmdgpVC+eS7LdTeuBh73k6yqu0nLvDgQfeLyczoK7ayRNJBeGq+QWsvaZBm5fyRnv8Yot0W0CbrQuTkY5WHPVuqG/J6Sded00b3mNX0kpbo7S2SjA4WUcxMrPtP/n/6GfscvKhsnDBKHTRpl+HR91ZEjYtKAmCLtTSlUkLi8j7jPOJVyaXumDUEB09dRFbrcqYNl0li9eCkfgD8KWQ81P/JXItH8h/JvMTX8BX8J8+WTEGqCIW16S1LkfeGBNaIBnuqbtDccBLT4omIIWIBTLhzOy4BA7emBXH8qQUIeFb31eGOeYL8ZyoootHMc07EVfs3i4F7g2CXXrlqOeM1wHskvLjQzZ4NoCkZTRnDKCI+nggrwENZ0qb22e9LlY0bqD719BHNRta8BJotVBy6XlMcyK2PBLpS/viPb6ZyxLxYce553fRALBN/0poR5Dit6GM3reUxHvC8OtGHwH3wOAHA5lOSW3LEbA8dWUcMe/zbZ071YKonasUOb8LVKc+rWiUeoXnVtqwp2KvTgOX50sO3oi6Tc7fqO3O9AgQQnHaNo6i0fHMhhF4gBImJheeTpAk7t4+1diyvk7sTeVFwwHOlX/3RAnd4m8U6za/C/KN6zu+e1SXzcXxf/DMhOhbvFoMbGUxNUUiFtZV3mAhdJeH9GG0XMAB5Bl97fv99wYCk82l3naJyEVo7HcQ/PQH7I3fvgTrmvPE8r8tkbaJaYEEV074gB4QTUaXBnaMnHNgtWoEs+U0ie7wWLz2Sa9z/nrdbBsFrJptEujPGpgMj7qTSG5NqzWRfGFnScfFEIbVx+8ksAhuxN/pni547o2I+xMngbphS/rlOaJZqzQi2OkcISDv9Y7oc6shzY7Vv/lsF7qJK4t8wkochA+OQq+d+EsYJ/OXr1VdYimQ8sxFBzJYR3fx4uFFOhbVF4hFBcLAlGL86CMRh9gnUPcB8PBU7AMTWIPGEW6vt9snN/qsdjdhYTsA4ctTdAUyT4teQgzAuFcpxq7XiBeLgeeSAgtcYdlzNI3dH1ZhVMVtvwS1ncePHDVxBx+DmftqhBzAw9AV1jedXjR293aak8LDT0VRR5feExKu9wZsT2gXkNsjEleafpeNOPV+SmV4o3VTgcEW4srgldGyNcAOppht4ckOIksBMq8EpOXmz7m0Yj8Sh2UfOO+AUsah0Vj4bQUIpe966EccrC9oa+nbZIHUcWiveP1am5OdEdBbLmZnb1l+5j45cqfXEB6bp0BLQoVgu8hsA+p5oG03qAam5zNrMN9tMv/s3T4y2MFJlC0tx1Zgj9Ff41rfO2C8MtwOB31abKGAifcmhgl+eLHoU4Xg76aZ2G6/5M7/3paAvhl0XV4xP/wYVLopapHbCerPDkx/Ji0J23cHLVk26v/xXJe7bMztvknNfzKfvHi4TwdqFGE0SSeA3KbDzHkhUifwT+z9fIVa7oLfZ+p/AgBhLm+CodREKGwmjvYxgjMkxs6QavmXmLysOUypvxr93zj4lRNglYigWu9BUzKwZxo1hgZQqkcJHmCesDgv2RfATmv79QCbiCIKgObrTHKz+VvuQihDmxvuYWxchwHuNqxjxPnyqly/CT9ZQ9SFtqYHhZ323Ul+dGnHWjdFwgLp1y87zhn/pvam57MAmBhAKC8nriKzp6O6qd0PARJIV4TByQ/KtyRnJpGp9Gl4C3fR4v2GjUo6T+KQNVxq542QzuN0Q0HGUTFqyRBupu/sGfnFELzm2d3TLn00/WCbcxUZhyFUJ7wRtPPYheCmhMZHl3GlM4wOg1lVL/MnXw/EewfCNPc3bAS10vdFaWdQkc/S0iKBq1+2PqiD/+jN3x70vKq7b2Gi66r8HqlBZalaKLSQMcyeZlWLvhVgFn3PpWfl/PSMC4JUOj5LVdF5TP1VltFlIl3dWLTlQGmwtqZ0ABbcc/tq8D6WoHK3SLd2/iy6qVPp6KnuSOP7VbWknLbJ6linqmd9lDuHEo7vfuCyd4vNDjBS87HXtTE0KtRkU41PkPrCFJzW3xbayuuhA3P7o2lHLNqpOOYX9ddXWQVwuALWgCw5jzBgF7Mm88L6xQnascXnwF8wizzXSNnboj5FxlqS4dvviCLD36goMPIEBKZFS8QevB/vVJk8KklApS7s+gez7bV+5XTwRkQcK4/8LD+9eLR31CNgQYkupMA93mI3+u2EAd7VKbzJRocO1q7lHx+RjzNk3mK+LDy8aB3VAN3myjBMPXvI9pypTc534IhbdyBhZX5lOvCe2hGeWo5h48YjBVWOXCM/qqA1/go6hEHSCfSYntjckH/0Kw083x9dSMCkMkOYFS/XZqVmFxiS/SD4Fv1tCPtHWG0CesnygQlQRJzen/eM3QzS8Fko1Gx2cdZdLkwAP9HUA8/XiC8Q0zC0IJGYHfunUvOyAmtkZksauWukH0ho8vU0ZmTrRuZj1nw1pbEJXrHeffslHYNPwlaqHqWpSs4xATjeUwQHHWw2JTw1pQuPLNYUlhuFxcQ5SKT24foBOe6zDhHYsjEUN8yBw3cDV4bUrZYJ68M18TLUjl8YZ6de8P5jF6lB0PE722mAqAD4AdknWfnEIYOFS81N5OWLsEwp0PJYql26UZgNZ/5eeUf5yZNA+b4pegmvazTYe2+T366FnB/Si+Wri+1jJEU2EtZE7tSLnXVLgmZIfFUN9KpAu7s0crxk5eMhqxbTvf5YLEGfmPSzn4aEfFO7Ngcnr9kpizveew4ttDoNNqSsRzeahXuOFBdCzLYvqRGa0AmX7bvuCpguSR1Bi9eUk+5Bgz0Ihkcjn2SeMKQpU6n10AdDIjtDhl3D6rUQb5gZFGLsG7zqjHMgtnuMKtctJGPhZuub/GhTAD+C6Yo4MccHm1gl4GvfoigR7USs5vssmK4+pGx7zhdcSbp+qNiddtU19IifeOfpBHavl5SqPbCHT2Wxdr64cuE8plAuyh9hg6Kv22WzfKemL73QVBKMa22jaLKNSgY2pCmmPoNlimgH5ADlalppFCRtTQMoEn2wUvKsts3JV7URcNWgqnx7vpz2nPNn0yYYFgecTtizW2TecyAkoft2Mt8jCZ+OoE0WC2pMQv2MzaeaIzignp1e/UrrBriSOYDYgP4AQNspbF3rAdLgMaRd1BiBe0+k9KrB9mSHP4VgBJTTPrs66VFQ2zDSSuyBZwUN8TPj9HwEW2zoBVXnuqrs1SaoAIEyOMuMFuNqGC8PnpQr9fEh7gsF+GbqYZGVz6B3+e4aZdcXiDjekNB6y3TP7aNkScfGtHXsxEIWQO5luy81FGhVfS+hoCuxZgo5DztQ0i5j9S2vzEqdmtfPoTjX1qTyoiyCmOygPB8+Nblta0BoqYjCaeVMF4l2JM3rEq6rkPTTLfFCs2CuZgpDgegJLO5PvhhRnVLLE6K7U7+4JNlAB9+8eN6Kz4r/x762S8V5OeoVQIpp12PReGGO+3WJxmFjN8MU56k+Na9y2UarzccCvVyZJUdugGJlOYM+GDlkLwu9Qo8wvTrTjjmB5tdgYlUvLdhdw4qL4/RipoeirbmTI0DbbYnUgxG0FlagiAdqYbSS+IP1thaZwMdNg8O6HdwHl2w0hVyuKNfsbx2oRN75+h2qqQnrGEquCN3mSflw1QE/LVtjLpyKABZbLzQSnAT6VgLcHxvOpQTRzX8yXj7OVzECNDyan16TjvXEK+62Vz4uV0PE/4dtEBBAh57DYe000a5KVWCIvTBMZKg7gg1dZB7T8yFUKNY0IRyzVrLUGiTZbegA+l2ta5mq3zsYsLAqQ98zG7SdlO8W5WYfvBpT0NVSDy+N7Vi83utGRqaLcgDuSVu1RPcWHV5rcvOZt7g981rYS3ggHwrrobQQkHCyQyJ0SkSIsVIbLri+RCG7e7u3/E4cWwlMsVO0aJZAyEAN6L4chn4u7r8p8ceOr6wis/4tTrxuz3hF/Ai5qcRG1NefuK5+GQrRxInOiTMoLXJwklT5h+cujruN7hZFZcaQ158rB13kIJ6NPFkf7ghvQpgov87oXpu4KrGg1co4iSYlaq30jxkPZgt/Ml82MGnptmfm4YYaGjp8fijJd+B920eN/oyMisSu3xZoRIOUwuM+Z9YBrrRf2j+Wmfq0zeXEjs4hG6StpdxoWhXCjpxQv/7jkOIqXB/PxAbjHbdPv+xdVoclriAILna/LHnuVaYld49pBsdJH0VyM6nO4D4HKZw+OHXsWPrCYWnAEB5DozqI1vcGe0aTx+pDgztMzOlaY6pZDgnD8w31U+y/uWiVJdg6Fe4AEd+sspikYOO0WYbN9SQjHM7ogFEszd9pV6AiYSZz2AkqVmQ7sC4IL7d4r/lZLoCGpnfrSThUFDnwbudyyZpHYsfHQFtaAqGuRP+osV6jy2BdL/9psMED5FC0cF5zgTdDnD1D1qrKESXvtjAyyZNUt7Iu7+VaduYgxnLpdgvK1i3DDabECMmpY+Baiwe8oq2CqLMB858eZd7/IdUHLwoFXbLcaS1pRYvOo3bbe2XaLmjxPMvLMUG9FuPT8PFSQ8LeQV32bhlYF1IyzQYXUXj6IwZKm0L4Nuu63QbTJYGmaqbVajhBzbArZeCy8TZiAXQj4nGzjBHnRyv4mPGYpUJmmrxXCmE44fB3VapAspOanhdPsnsGkvPerl88MVS4CROXu9f8T+yX7XikG7zVmKhOFPZKkUAz2Qx+HH88fsvAfvYfjwPy3Hxu5qlnpRMOLQ0X7fe1SNw6XHMmhwOaceCK0tdnsUX6znxTP6kXBry9t/bSVNwgybnJePzlKJZ3J/1cpBSdzwO1Yaaa8rugctAW7DaebqvUFRhWyJYU2wiMgZVru/1FmPMYF+QqRj2H3q0uOk/lug37OrqzOAssoBhOBfoDzx/KJYOYL0VW3uZr5uWq1xAW4zFiM7taN0HtaNfEcF3H7vUePkWaVwbpWsa9D4eMvzLqYsAQOg8jbPbBbExtgQQfYheEWQql6TOsT4RQ3zi6AEKxxc9Dz+4rpu8jyRi5hVF0Ty6l/qRzk6t0bsjvg+/HA+VW29xe8os1ZlfLmamIsKV/7CrIePcMklaBWkda9Nmu044OUv52sFQj+hlH04qdw9KtL4LxRgo08ZLF9ZxvTTZUzuMCbW2IGqgPuXaBvxFZfm4PSa8Cy4/mby08SrQf6E3QOcTn3x1j9MU5Z3HNBaxNO+ka5Lu57B70QHwqa4VElsJ1BryXX5e543knKxN4p2/ssq9lJjtiu4ekK/YicIu4fsWhPaok03uS3czMTEzsoJTJoXn92LhZXHdeD2aYkSag5/YIhn5sspM39Bgn8XEs5VMC59r6Qjf6T/MAgUuMkaSkMCWln69skqOeLBu54hy5ieqqsHww97lZEaQ9eKrWuQDSKBOZmodDU7U+ps8kaWqJUnOSYeQ8EnneMxt6BkOomQ8O8pfUAfPtbcJBw5tsP345D0VZHfPGKfaST5e5Dj2b1hZeZY3M5EqruGwoIfoMnpMNM3bEcOpumEgYTe3e7wLLa9wF8U0ssoCJxQoFc/6aok4wPzMpj06kHmfQiWQgX+1OtZz2DvVROlDBuBi35GmeGg+tZwEu4CVYdNi7/xlsgLlmNrK6Zwp0v7qBU2T1xTmBVADcgA0Yo0wPpF54Q/409lPPE8V8JbSjU/LwwOvHekmL8QNCJviIg1R6jjSx4XE8GSfc002ol95pqeIydLxe7YCwLIiCypMS7pcCTtgB3jrAy1+t8gN8K5nRGG65zUvgk4mLFHdqm2AIwum8lc6yhHlmicwUvIFxs8Rk0H05R5nS7jmVxnM/Rc4Or8pvmxdEm3H1AVRnE8yOb0to/uKi8sHsMFRkXR0HQ4w02ct4Z5vBgkMb/WshC4wravvdgIhdFwo1S27Ja7DTafsamjnAcV5LtjZjtJ4GbwGwY67ScL/X/GywumfQm27JALd9fzpho2gSLgpB2u96IvrSvcZZv22agt3uP7qKmaUN2xGdmmOFb+OKDw0Y+rZOxrDGNsEIilTSAW7ZVEdJ2qxQGTqOCs4pEyizT4JiaCresm+IAF2heIbWfF2uVW8hnsgt3Ajzsn6JtOfw4lUaBU5JTaACTa0GvesUJMnHvWqQQSgC7dr6OQIyF49qeZuPHL83Sm3ni+ifytMxFQEW1aPG7FLPfs8hnt6FTRdvaw4o4spPtALYbAxWg5atb4zzH7C2NK7eebVbouk1Ag8iMsgugTKxbPmdQTt7rGjfYbLfsk+9SA9P/ghCYwZSrs+wCQJ7XJQu7hvfHY80FUann31g4TPtagjSXWjCosr78iLor9H1SWmWp/yjqAh5kwNJWWQT851XBR4g/L6Kc22e/Y50kVbvRZdVU9MUVfANXRUgI2B3H3gh+IaUtBDxLvfx3awmM+AmlQmuHKqb9Mg1USS3NHTCnsbtnYeG/82kGgphhF2bwEItz0wmUbgGWRlgI7zrWZAK4U8xf6zFfFYDx9XN+BVJQA7d/8ThTEYsxnHNeiE4RmkKeAXimtlvN417aU/pN/YEMCpACDhG2x7DWnOAPxYpzRtInCpGmfkn1y1lTnrJRJPKL+Jsni5kLPD4vIivBPmwFSK2XYu31diCRCn9Rn11CmHrF/idrU/h+Qw/Aeo5IHP48sMdFHNZKBpKBhO4fQrR7MXT5i6xYeH4D/o1Ai3i0IojagIkJky2WmfbKY3tq/S4nT09wnY0FE7d91P15pK9g3u13ZyP239xfLs1/Eb9t+ub+9nDgd+KJF/+JZvM01QE4rMQSKdnyxWC974n/EbPaX2hPiBo0gXlf3nVIQovgQMaq2cSysddb+fCrLel08WICsNTme5z/sKZFhnTOygrRcRlgR1sk053zP5eYkyuONGENDl6jNt8Fc3t9pFtxsCE5tokQZXEQAgfK8io6GNces+23pd05VM0UBebB9kEwqqLgI/08sytGfLVlzOAIA+Y/KiRKGqY5J2RPgE8SorukPKDo2RVmom9WxDflimQ6VQBI/6jxyCRm/WftRpDfjNJgx428iAUI6IJPb0cF7/5kz6n6yy9TX6hEfW+3Vt2Ys5DGfZle1+SZ9nRVmtZLKVAQoO/5GeoczR2+PEvjsfQbeF7+y/OnPSHdEUvIRyoXidz4NoaM6+711nPKNRN6BC0l3LHL/nar8eNYl8rfNRS+3kRYwOKkjgkETvhmAEELEXOQ/05WVtYnlOgJHbcFS66vQ+IGa/bN/NoQm9Cvhe69T8aHkzOSxQG26cmloqvmntgZDBm/NjTYOAbRQoL/JfD0LTWnzSdylLAW7C3L8pBAL1pcVoiZ+j52k1nHporR5+g1T41xWyux/9lv3fcsA3AKpP/36plLzmCRkx3S8w9KIu5qpLxduF+uWa1CssYWuTchK2JvDlCrCc9rar8px8+GptRCK52laxQbYf96/fu6JzVHH31uLH58S0tcBSEzdcC6SqsKZprKo+Ljg+bYna3mYqjFiWHMK1NaJliwLsSLRmo93cNjeIMHd3xMoIx1X2lYoBRaIn1euiEZZl1pF2QUEuWYSe9bBW4RHUZN7aknEzDmMLTinf+BDX+Z6D13EZLSpNuA21lwZhmzp5ZLbu/WfqbUD/BqFvn3WeNCVugPYN5na5DMocTAqNAEa31f4dPGxC8sPcfkQ+RZSuZS491WkLYmxaB2Wvy64GiyKUtbTdohd2lrpHOd1hryM0VSvhiG0eXQ33KAs3LQCVpwyQ8rNd7F71J0rcjL1FZ753yogsYBwoV15ve5e6fQIdAPveHV6xEqdzFxPcHDWyE1opXWnrm9klJLNkMq2moe4MyOWQWro6CoYxsXKPo8NjADYtE4MFFQhXPe/t8qHljNI0VzktJMW1ugSfOvaSwn6iyRLGgc+fzVeLieOmEyigarluMlhXsLNzQuDNuhEQTTzmdVH0pH3cZaho9qssQDvwrSLc/Zat69CUs9F8OG4FJvdmgMD6f9aAhIh3Rckl0Foek3jNuA1HlEh5ZhwxkjFhfusSTsESz/H0cwlKMQfXZo9TgQSi2QwW7keyQmTLl7ZYN8/VCvYNjaL0V/eU3vDxlktetyQoI5U40hYHRuEJ7qtpVj8/K5xM04IWvBzXp74jqh8cfd7Iuv0Dp4WMjv4jxnPimEVJxqgTqxWwEsXXnxJvC0IMcCPE+v8k3Y9QcHBX+1HCEhSN594xVDItEAnE/jAn0Yyp/XqCNtC0X/lhECcaEwbj/KH8bIMffOw4K6cWAx7Tn1WwhgleOrlq4mVoDu8alMOcOQZ1X7h8CkkN1fbyN868N8Mm30MBR1IAds2EwJLaQ1VzVGkhQRV5MpdRNs9e391pW22Qf/zyXQiGxXFYealQX892WLsWG6hIW7YcSuboq0VPVXtA8n7238AWK4OuGvVhc+T9jctE/uD7rVxXeylDMJccwdWepuApAa5DGUBPD/YCnd2a5+hqW3bR/mYaV4PtHo69M77YP+23vmsZUA5hnz3Juk4Bqarw3z9RefgRWgTpMVEGY9CuQYTcQyFG4Hq3chwvY/vwPkp8gEJqtnBw6ATe4/8e38TPSDrHjNj+vzFpRTkbXjDoa9/3zWylyGM749590OwTxgfrx3zfF3/oPNCRzSuSbSn9NkF143DIWumHTIEIKN967zWt/G9+qF/lneWsd3a5KdVxRnnWSIGLrjIer3gDIUJp3YZi+UUEaWFch6zIbyGla4Cr+4EPtI17J6++7s/FFRmahJBxbSnB1XV4tDP9v2Zpx0XdCtMxjk1lvGdJ3DfdZbDvaHe/kA4n3L0vJmjL0nxufbbpYxOFQ0WWcdsj1tckSGgJ7zqFcS/KwXv9z4gwdj3u6styOsKQNVHJUrD5eiVNoc+2AipjWFswpfApEltle87zPXX7M1TBmw59eOujVA/nrnrEhFLncsaPm7RZv/OvCaC3cJayMeWVyPVH1TRYupmgkDo+OKCAOjafHzpjcVF9kJrTECa1o9g1poq/qTTZQmu2peUI6EA6YgNjk2zLTGg7JEZiLJOtg3Vh+C0RbAosD4NMJBGHCv9vrkqyTfEhNgy8Db+dRjOmpUtuilL3dEWUbvoPXx/x8Uqhf7FdGdDSsZOZXntzlEi0RZRIwA8aNrCAcoeWzpSEkkaF+/vSMrXBPvvvvji5gK8iAbiMlVr2XF3Ljva63lHv7lnUCXgY75xWDxdrAssFEaiZUocnDAscgHQ5wc8GLzHU3g7jv9z1r1R2sNB8VtOAc2vv8fMYUHHJrvZw2zUO5S+c0vrCKfx0LjvF+YJFvU0VDpSVsqSnv5lxHSSn2tywLSonHRvyCA9TQ4phMY1YMvM40ZEyq81aNARIvOqY7EYrUt8Ya5lgn4W2kb8HlRDnNbrt/2Ot3DCc/l/hj/RoGe/NsU5KH26Y3h+8tKLK9mUaySxJSiv9sIvx/PSln6zZHSeNkGQPkJzZBtQq4FCFd3nkYEaiyQs3Ekn8WDA4oROeU4HF6qPP1wpUmlKVfZWWbqHCPLeGA4TSH6sXGXYmC1aCP9rAHSceBjxVuLCj5k+Z7axQenKru53V1JZl+zFWGErImYaRcb1wFBHKKdCXnwmyUWRXfr93eNRyy8HFRtBKat+cCEv8plZ8xOkBmFMCHpOvCpSahdHwOou2KsKmBSfZsKgnpzycYcq65iypf5xQmg4tPnoOJoro5A2+t5+4cNSkQy/Cuf94GrAMeFh35/tsgyNBQm6ZWZTGD42uGPbBGsAl6G0YWbUoMpdllAj6N8QfhMPG0or9ikfRrjaWDJotURQqayBgFpYJt6CO9rKdeIt5oE4cWBpRb8gSpVXvWG//XloAySKhrexugAmKTAJurkyq2ycsisGeE5O2a5hIrM6/Yfdu3W50PgD3idRGY1x1EB860NVkGbkC6NJ+ph6wkjCB7uXsLoG3Q4fzMOgLAJEggGKwlhU3kFCQcFEKsg3maJRH/Ni6ndmX3Fru4G80n9niXUIZDnYHSSLQB1QkVkJCVWDKVs2+mMg0i2MsZEmTmf8TcgzbTwpCN/+tbSTfGn4u4Vdeec0u52pls6SK2pL9k24Ewx1w1RJTzNGrDZvMBKZ15hxvl+j9PfAD/T/XA7CwOX1CzjeQbegyy8QdfnckBmSPLHB2PUtR8U0S3Y5CxjfS9vzA+QNWNR2u6qtHru2cnLY1jBio1s9/aiAaVw6p3LlZsFLTCAK1VWOpd3oP7o/TITJ14H664LUOaFJQ1BzrAnvw/vaObfqSYJ7VRq72k+WijeuGIgiUUyOzIQzB812BgEYDkomQsETBHcouxo2Jn0WshC5NyqaFhftfjmPkUJcJJqVf75eBYDUhr1Vywn8Fl+9Dxmf5Lb0KrQQ0mSY/Z9RNBly7o8elpFCYHABFJ/gFkYKpQM7jyGgx8/8lFqFp3bEzOXUceqdXHdQCbZI058a/O1bpq7Fp1d2Qy5RwV6we/ys5avcveoqJrmELEWsPSdBTRKr5hWzb8GqaKEKKa0fHMWi6T7Z2UjzXXOdGUIIQOlKqVjsYVnicYOhyd4zCaaAveOQzTC8LMR+y0oq2BrWdoSWGKMBIJ0R3Z+rw0zSmECxLt1681GcADjfENpaYTZwbc66XFeWiy4TZhFbDeJzI6oLoY88Z84yQr3EAuDVZY1CEy8OOS6kmzjuC8qoloynzTkAd4kW3FRZHXfzkUvCUxhVkkPHdujPYZmzW64o0B+9Sv9LqkDr7aws/WXZjhKWe2+u7PeLUHg6qVxdFavwbvTe+2C/f73KPLRvRZGY62/2ZgeSMSQOHAIqaOAoBOHDMp0/QER20Ka1lmg//4CcFLTTUNLhAmQbYj9wrd41wJCXNasJ3eMNEXXam4E9338YMAwXySZHC3dawPQJfL/bhR8ANOeKwpgkka0/frCkC5o6xqyV41y8ZgeX08ob/0npvqftPKwSwKj7WiOAYV8kVpah6pZBcJJAuJonIdcE4UsbDwTWfL58QhqLO0fwON6dG0kH5NVjvUtUCRq2FxRRBfvXp5+AQ3xyeV36d4ziiW6OLDVgD6d1a1tIsipdVElh/nQZfSD88mGrtprGPJSz8taN4K8VdkSQc4+sXpafT4dkRFOu6AF7tw1BZ7BLh8evMJTV/0Mlv6moiZq7YKLv8Q1utPg9ii4NUE0abr9/UTFgQbfLj5XET4iovfGLlfM9u0pFwkr6Iccusr2FPzxvac6am2bXHzOSuj3Al7A7kp1ZiWODXvOBU6/RSJZCSyRVFFAwzTmH+tszwFjowKLy0xPJOcGZknhwoUgxwPglMN8/v4OCLIF5SrGqfZEdFGDxCYPUqZFtTjspu0/0U26NRSNus6xi52OnteXCxRaF7xRpKhTN8mVRv4+JZqSrdZts83sXVQobgzMwVCz/8mI0RjdAKxTtlal0O87X3cjh68UeSzF+r/MowgzyTsZ6Fs9tVikgrZr4LrsTAKPEThpHo5b6gThuQ61RItmrQ0iv2PfH4626uVV0Z2edxJE8ZvJ6GYLLKHLukyQAH96JsGfqqaj4qNdQ6fcyxTR7VaU1tpfk++OEV6tmzQ7Yv75hIfCytEG058QlSB6jQ05wtUyqym2mbRsmsbZBc2gBTOGaJclAYQ4apvESq2BNaDnfopUMJM4R5G3NowAttmNh2cN8+KqfGy0kaCM2bAQhr+v0I4jVFseDxBtNOjGd08ded8qnmtCk/nza6qtg8qTKZzftT4tDM13eb7Uucy6yAd325tl8E4p8QVWsEqRsi4oJZPoc39NQFCH8oRhf8pR9dWohz4aaS8n7PoZ6oW6EC/FDPUnkMpp3y6BQYbdxdTX6psXVFUw7VRSJ7/23SH2f+rH0WcRq7tBAiq0QtO/PNxyFbUx6/pnbUOJndrpV9+sPQ7F7XDKz5zwXKc7NMU4apYhVeWPgSrgGdJGpESavT3wEFHWHEc5sImSojXRXYlaYKWOUGaArNIjGU7KB5CrS2OttMeTQz5kYEWlYhrtGTUQtu5pTCSFvCPWjSZNAPnf0TKIyIywVmCrDbzBN7YQ33g78dYsM1j06U524tSV9HRhiNHXVxP7iafuUuzBFBcfHhuExMW7eJRMRr64cMuTYaRbNHRk2qNcvCwN7qgJEk6Z3gpDsJQjNqN6DLEVVEhynPW76dh4R4wkjceuShVQpiPMRfWF/wab5Hq6mhfAHUngnhAGs5mR2tb963jUGSKBy7lQjMrZ7SBbajaq9Sf0RWICiQqMNETG48PN1eo4IHJmY/ER7m3MX+kZMAafPgQrAPNkbWwxnEs72cXBAjozgrfqNs/C0XwyqK1tmR35xchNUyT7vItE0ZOH9+4gsW/MotrnpnL+UWDSKtq9DBOtDgI9zTDraYNZx96X8LxAfl91RbaJXdUMtEHB9ZB3KN1BsSuqH0VxcJcdT2iE2bH6MR3r3HGSkySyTQlxDECmso4UXLWdXb9pgIpTdc8xfoPdKtc0h7/wVEUyLkET89h7I1tqQPObNTy0xHzwyso06OaiPsUuTjswEcfkavXROrQCjyg+bdao4b4PVytuaCnBfNXUEf3/tD7vArl7EFj1FArAyg5OvdfpTxG5oVQZYh4/BOz9WAF81a1uAbZtmo2QPrdOYACOB25+zmUb/a2rA5SZ5sASKEcS0axC5QBJDOU6diQHhhL4+Un0SdzhR7mtMMTZ2YZG52R7o8zfOVhYhEtHLVVI4G5as/iE/3yPJse1uwR3v35+QY6bREPWeumSN/KifIX7e9+o8BldjYqO8S7bFOO9F1Cd2epsJen3gpn6Ggch0b6QIPZgMrDM16CsQN/66QFxxw2bx+28c2bPF8IwSDjJzJujqCM/pmS7xG0hEaY6bHIhAtcqnvXcnqMZXNIXIMwm7lQQZ3U6pk+SRuanRdrTr/+YHcsvFux+V+WlwIAkN1ZKoRllM++tXr5cr1eG7JjzckQBd+7GTgY/X85II/uO3LIP0/5od664+aKoHPZD+3ati14Rv/WN78Fqg/+S5spHupeJiXID626wQDLQ6Olf7zmH9EZOH7Fkh/BHs8WDTDyTy3ubRXqJIKCPPyt6BpakOApB7+zRI77pr9r4CFWZJ4liKB0yQAerGDd4oaAMuS9i5PGd6yMvFcIZ+g4fqcaXznTbS/alVPN21VovEyAP0rstKo47G+k7vVuEiRxT/ECbA1gSkHJB9wI188ICV7CcGv43NmAf6HSfDZK1bclLPcjcCbuo3GJ5/4J+VvqSBHzgfbILVS7O5CYcrwTHiJTGYlfGWWMMXwpPRQhfooWhuM6vUWrermSjAW3Rd0i1dkURujxOoO/VqnV5EOBZx4QDBM3eQAZFOvTbRHm1Gu+HefEgGjen1xYiBbqwUoqGUs0qTF4WC+r/Ot/hZVPuBtu4/uq2B8vRmxLeJb+qneEbPZKHrpi3B5q1YdoQ1LP90QjFIPjmbB3/vEy4QrmP7G+jTTXx8/G0vdloFTfNTr8gTencpCc3A/NDrcbjQK2BnPRXpK72yD4pyOImXlNxz/BruYH0UiBhq06Iepd/kymMxlk7rJ5wfzO+f6ObC5BCqTgUCQgSgEgy4LZAXI7FmT6kOv1zWPk7p84RiAxFE1PYkP6BMMIVjEppg5XdLhc+7yY187vC8A1q4DkNMvcTvd/WF6JGBfF5EJDuxBCQ3AFm0aY/7LH+45nv/TxzWG355Ip5+OFopbnp7F+oS4E6OHn0dvHArQyAvYMA/x+wT8MV6TCZru81RA7jsGuTNo7iUnsGS8HS6+kJDsdXd/sni0TKX6XENKtRsWkREmsXGK5UaTw2zSjC5NHNa76KBT17GTaRtH4yxyxqYe6eiNXTX5LFe5F0W3lwyWDoVpWWiFwicDhX36G0wi9eB2VrarQsWBkY1ByYc7uaP7LGjXxXCddGYEodVKBPJ/zg6ThO9JEQiLC9RX0c1q2+I49tUc2BURTcWl1JtMjfXC0WKoVr7sxrdU6foSRXQEAtkMR1ASr22sJVBIhPoz68030dVkJav8v2tpIYYRlglQztoNTRuwUBc4gnD+FoPVmknC/kP411X2vnDR/d5WVuPyBxqaLJb/JHAVPEoG9zTtXbEPmcJh3yFZ4VOcIuiuCXBYGGfz+DygyZXQAk6Laen1p+jwQK3m6wjOzq9LI3+KTiTD4PGPtYG5APxHRVwfme3/eNtu6lio83hyb7FdASAQiZPhO/s0x1nbre3xY4n+7zpVFa+VemIWKLiJ3hfv4bRYEJCXeftJAT0H3bXfRRXQKmk0MNDk6LsNBqKt8K0ncpWr0grLYF4zXbFOLjVXOnmTx/bjzETdgpZhFf1p/QgzpB134oXANpSann2irSBMqIJd+dFAKwqmUDvhE4To61QVbNswfx19boS4Qde/11tZ0Iw6zMLEJ/vojsPQaXjA2eyBAVuIxzO+yjx8putvJ9XRt5FepP6Fy8qrJQSy5Cii26Yx2PCgNjQDtBpfWJaJ8Y/otxqWmKtVtUqcMpSWaEQeX+OI9gYJN9Ej9GLjH9bBCb16faPhwA09biuvC8dXGstdJOzeTBUtOJgUKf4ZV653zR6lRASuWivD8Y3VJpsVUz+Yut+MHYJor5d5do+KEiOuX41qTP74uhlSOn8E4XWc1fFjYfe03kHuY9CS0CegEc9XyAPKX2pRLZrOi3XqRqrTs04kDazxrZSp0GE1lTj5oAUalfeP6CaWfs0NysBeJkPXn1aNs60SRN6Fwg+Mjb8nHcw8Ye+2W7IVtz2kC+TJTGm8JyatcBScQYSVCjH7GsakbqM27XWkZJFDXnZPtMPlIQ1BL4qR5pGtOmQnLESzF1v/n8kEK0OioMJu1+FVpYFNE3e2zU0ixqfoI7Mx3nCu5VPUjfYJZtJaknMhy7+6TYbfHGJxJch/IX88HL1I3fWQCaxnAwqLKahnSEEblVQ+l4yNJnKQ+nAElO9M5SqWcicmHTKT1yTJ3Q7v06JhqZQwVeuC7VnA7qHRSMzLA5iSLgRIldL+WSOwt+1uuN0T7N2+Qyf1FgG2hVj2iKw6rWz5wyqrOMXZiCMnE6pPt/23n9onwBAXWLcIY3RiRN4zHjya3u2StBaBcoN6uVfECj4JfogxE596wlt3I66z9yzlyS4G9ftkWw6U3fsL4b/cTYAgiGPwmcY+Gq7r+cMONK0sPwGmUYyhTCs136K5p3uT3lgQXZNz+jSLKKLCskw3eMWt5OtavMFa4s041xtVMpEBcR5RtwtXSin57Krwge5d/SvRn0r9KC162+2rWlcoPuSm7warkEESL9UIhe5ZEjLBY0zB8jz+nQdBh56cMYFlY9VneeTSnfXCcxLhoYyUAhLexBZbBj1uS7/JaYCcEtuLXxDmZj72THNv/7WG1Vb0yqvnviRoQXNYlvcF0eVlhTXkIC6xnvbcmO7F95NFGrbUu8VpffZiMQuGUUSl2L9+bN5UJmN0ko170i6LrIo81hLKkchs76X+8Y/K7YQIX6G222ChsDabQKaSA53BsJw5FFyF8Y4EjyWNyBOwUDVqGXSRe/HcxHKvccWN+rOpQTeFv50m7g2AYhASjfPBEYTMcoB9o1jIiAKFvZNi2dMyzExujwphT+SKA9rc+3YkFhIcqHgNhZx3sr9NsWt4/NeV6A/nLPqRQ/YvOpmnAcJ0oHcJ4Q/1i1C0KFvZ290hLh+088PN97qyrEgwluvAywpOWhmr6WqdTuKDVqdDIFwN9oJjBiFUAT9hmvulstbvnf0GoHdLhkHjhHmYCgHCfqIWQ0inof0HVFmMs8eu9PqeJRLOHEXJYcUPuChZqTVdstTNZr40V728DCJO90ml2tB+W9FQ+UvDgr/k2snDa8XjKQhgGa5Xo5Syc1sshT01Fs1Y0pFraMIHeTTN8OzHLoi+GC3tGX2utLzzi0Dae5/v2aa3QtB4SIlXaKzEB98Ea2BoWK8xQT3PYCIQseuxqBwoqPppeSlzrsf7qTzzT2S7cMjoOE5kvM+XuSOqCtOZk1qxPlKVC/wbcr+GeQ6aG3GHcx42T97XeV7a48NiSoqGgzVXyH/WIY/QFrRTpVL9+sZPEegkqow+upGdgHx9HC6dfhrP1KhZHTkM16jLguiNsJXPee7Qh5YXx1YkWvuw4Qq5OBdSqlxKelgf24i/PtzWmrOFKhAnoWWjDk/6u1A+opagrwgQ4u0ww9IyPBhcjuzKaCgo+DFJNgLRbB0uyAQolgj451xz2gX0c0EIb+3viYl7wfFdJSARdpQ79Y2ghzOO9vvTTdWHxr0FIuNAkfLU+qx4UuvAb4jBjmVkY8i8DIcpUCjgpoGHo0GsUD31DXhEln+W5kk0S7Gm/6DSvKNIgo5EmNVwLF0pU6x0kRC9Hrkp9Na5SKfMWjktAf/DFCpTQg3Vfuv2HmcgGTHre9SjenSLDiGI5iDgE8yfFJklGz8gHFyKAxW++/Fv+uu75TMKua/UfrfIKpGuRgy6i+/K5vRs9zKcJ+h8PHbzN6A7jTORJ4kboBIBb9EbAr/ykKzj799cDbVjbD0rE/bf7b1QGBT2SpvUvbbp/6oXkE8Ck53mFOylNYc5NvYgaUYuTQoaQykneFz0XzInlF4VImGBGno5/VssG2Oif6Wb6lm2/TtoRTkJEuazk+ysnidxX5GoQVbJjPK8x2LperbCaT6aWUfDmoWNYSYwRC+rQVJVx4Q/OTvgDOtPTh4aYhePAtkLAqjJB/lpCOrgWdSbDxBE7WvO2rSK3wd2UQKyM5h0hVknFIbH4zOfsWxnABpyiDIAVdYYl3t5h4dNiWMW4tAVSWbaHgJ5u6SCGjZjdiXRPT+ZGrxN4LjHKgdFY/PLeSlGA3NSTbMlG+V2mFFDLDjppS/cWz9BRN4ATpBGQjSTC1JYGBeJpBwrxBvCRVkcAM165jlODla4UXS8F45ynlwIjuJfORAELgkSEoKHToxjnOJdcRMF3eJeqXgKL37vQA0p0ttuUWEpGFXzPhCGgCU+P3JhI8basKnMKUrkJA16N99dlxcHavk131imVqH3tICTLlPlBdu6bKe3N+S7ehs2ukrycYrpfZ8PNbxQHazXKcQvhchPBXOxDsC/YSSPJAV1jOeLPJG3i1ODCoz6WNtri4VbveatP/ov6o21ky5SKAELUdcxpYx8eVN3AUTWFLHk2he2cQXBZyq0SFRR+z47fNDkwi+Vxsfw1f3Y1DY78HsNsl23rO7v50/LN7V7LawnLeabuVvQrN3wheMwdHscfZKyic0FYOAWFKGMLsY5Sbr+NRnD71nE8IZeBL4P+7UeySrXF7ubQ/LnQU1ge7zEqoD3jCkes2Ye+/nQPrW0ie1jCFElDWN2nlmZ7FdClgup0u2oPYGbd/a54zkZS9H/gaAoE6BRGQ6D89gfsXbXWeNC19Zhu2Ijm4vsWAdjHYso/MvcZGMXHwr4DPLm74KCX2o9VYOqUiRdjkXN5HhvPjZbLrI166x4tIeb5mbKPumMSq5JcS8gOgQYkTQl6x0kqVBBu3ctlaFEzJel+cORJOwLf27S9hvtSHlpLn5s8AgCd6KcYpl2GZMnm9rmU2At0SRqQKidBW5WDwyObeLre58lsJGATUh8Wd/kjey0bWWm0zqzFcrDxLQhIUe+MB0S21s8zAsxkCcablHpRbBeggSbHbh4nw6PTsFIWBMPfUqWnf6LX+dPRAzn2IrmQD22XfWZ8kMHfbO6MhraRYex8mp7Z5CjPOfhsrDCpI32abNKf1TqwnAZ66u9pJ4/0N3NtaqxWuFjR+S/nGe1aJ/5VHOHT52wj0/qob43bKF883xtJyKdfNI7PBoyZEWMZeSrxGs+dJR6abVO2ant7TbTgJrcs8fNibaV4GocUQi60yP6c/b0GerIKa8YaS6cpneEv8o7w0tZ1hzOIzqi/MpiQ/cRn+iPcc7uKCIb4UJUQo/XgffMqyqjYdA4ucQXiXjelXw7OGIubHJlqrCKce72C1L/IvnObnsiYk/Ua0BTlUsytTgjIWJS1fT7+qxKbaIT8IQaZRFY7tkY96dAba5LNkJvlG7YAXwpyQT0dS5d7DppB3IJe6KLLqLEYz71c3VDfy8MnJCV2JmOKrAeR77n92hx/9IF3jJxCIXXT5Exvm3wWtlC8o+xIci7Ar3PrMcchRvkWvAnejqZurrMZWKNDT+4Y0NzXVp5+kCA/eOtRTwi86LzA5cgxa6PNccrBHcxfThkMBKBCWRZQ56bbOfBg0fzgDN3e0HJSAcOtLMsRtyG5kKdnd4ZOyc5LIrHQ2rD3o7v0CmWEDbEZi7XvUXimx1udWe1fFEeSrQYdBWCnOP/0wib/FpB6So6EYE2VPBVORt3ovVq+Y1HjkIFF+xB04SDJvyASjCWWdJ+ylT21U4on7LP0wHRZ7D6EjKiUgXZTfpYDFyPIpItukGlVyI3ckRCaoUsPLGHfvm8sQ4LeuVtcE1ueV88QLZzVM/Riv/B7iiSK/hRxo0CYU9cipV+nz3dgOLtfJYKBwwMHV0hej0fWbCInjQ5gkP1DowngLeNRXSfXemGbjhPtbTpZ9x/yZLLtsJ1ysjaRueI+knUTBM6y22kOMNCfnaBjeIRCx1GPiIXWwTAovKuzkGpia5eXj7Rzc1wUgR8nMOxaQts5vWWmwsOVTUW1o3dcGxPNdFhgzNgaYjiHuO1kuKg6uiynuzTqg6vVoF6yZgBLMUnsjCiETKJA/8BCaGGDDMDE44Jl9vVdS0NbgXRHPV39Wwe9uY5AlWx/usV3jvi578nE1Z+jb8wK6EMnxGK2A5dAxN8rdqeIYP+hbNIb2/WniWhWCk24k+ZVy/c7BwOoHcl2l/EfttWNvFACOcy4OAVGeBdMljsOQf0gE4qLYV0Tgnv292EPGvHYzqaPKdjaEPzKrRz4/tEY1rylX+v/c3TAea3bSjBLKbjI5kc9aeRkKa9NRYzaJ3/Hd26RVYGMUppjGuzT1tytzbNSUPAXJjSxyQ0r80yM+iNU50fXehjQVcqMdZ8xD1E+ScEx4vrnmY408hXqRv13sT677PtGzCnfctjekpJnFnzYmHpEM9op8QEO61/eBL1NgHIzm5AVwkPF9372B8em2YC6SpM/qr3DSX+MbemIfIKOl0B+UWdirGx2AKQvHk/I73YPtjMcYMFd/emkt6yRfRM0KJ3v++fqY93g6BfTg7nCByRWlIjRUoDT6SdSXmkNA4IeN6kv4WfuhwY1teddonu7gq4K+TskBa8oU9+s4s66+dg69XfJq1aDu1MhMpdi8YjCGa3jMOu92XS2TkGdkcXDl5itwglKUsqdjg1vFhFF/HCOnPPRcpJ4S0rOgqlg9Wreem/UylPeuDaAvwl4ZDP/CSWfuGx/IQyxm4VHcbD6hH2uOZaCsQEJU0bl+Lg88BM6X6UMYqgaaPH9tRLxuo1L3l4A+ZTVDWktrCoyG6Bh9v/myvnYjuJIaAzpRKZlIn3RP7SsmhVtGEUW6Ra0cEIyZvZSLFr+o5URGMR3V+dwjxBHSKb+oZLtCUABcesxGUFppi2k6b3QPGFbCeveoflalswDifyo9MzAwcjVmvSSKy7G/CL7giGkgapKZmJPrvNT6bTv1EEiCdnNaMym740UgxNEKi1WG5eEkNDIm1BZuzHHYAO+kFO5DP+nDsmlwn7lgPz1UL4ivv5GJqcolEnu4xG6n3FYDNrvv6AHs+pAQpJizqFe6ENuSLMc81ZqvfLgyA+k6tosf5TD3EACAkv3KMZD6Vasmyp7As7UHe/4kp8gBqlUpA0itbdfdciOS24CN4dzDjzxFVkwmhBcDYT1+2G/ZTEwKvcXRBd7Qj0RMfuMb+UtHp4TeONOlLXQp57fvuiOO2ujCT1Sr7Vwaw3mwt9ApxeqPC15BuXvT35ht5VUYzQRPN5X0VfBO2TLm2L76LqyZ3NpWsondK0PYaYhgBTkVaQ/Wox6L7VRS/6IUXM63B3m17Ok5wdHseBPwbN8nrjPf01nhEJsW5iR44B3NpMJVVZhFcnjpAUkOqI8kpd2IhRxt6cgGn+GZ+xhW9Jn0eJXPsi5eI3QHC9/eoyMu5BVYTyXWzr8cGb545yadRF6la0UZ2hMtK93GIfqytJ+t9wcVomyKboEd4ZYEssGvyQKdI5nYuVnK+SVu8kAAB5iSxJpWegenHjRNZR5WD7vIXvCQMsJvF2TTeHrH1nHYC73lzmWtmOHDw6Y50/IHs4Mpq1hoYQ/HziHQahbGEW0s5c6OWHN+RcjjYqCqzU7bplSx0GU0E47kQ6C8gQTDrp9pZwrwBboWJo2U+HoGm1Zh2E+SoUWKb2BbxvdtjDAig9T4nnsPS+42LED/q5OVAwhTDNWNmvJpDml8Gq6zNmk78CN8fcPa4wA50owWKuc0zl1CDvGvt1milBis/v1luwqFiUnIK1Zpx7p1RqSbmDNFzV0ekyK4TXkXpqQ1eGkPmylnr8xD9+M6YU+i0rt0l7+a+jsI7X+waK/JGmSLvWL0yOXPfotO6tLCA5F/fO62vI9fk5BS8sdfRGeBSnbmIyJBUnWXCr/Q6dIsHXOstOdZhEg5B+S2Vbwzp74jp+efYovIP3fQXKP1s3c3//Zw1+bZn+RK4CaAvxopZQXrzZpAc4t+8gCewmQL1BxJ8nCaRgylMoHLjO3ucffadf7JBl130yIl5VB0J0H/klgIgkwi9ALDgvxJNYM69OXHPFXyBKquAv4+e5wF0NRxdTzWItt0lmAFAXqqXnK2AzijDAbT/dV4RlY+mlZJmN1eRknTO8f5KTr1PGu1ScNAt+BZeX3fT5vfuE+gkf9Js5ixWext9P/jZ+LlX5o1uEWAwI/Qj0mtpW0mcdSi5iXEkix+fpyA5a7LmxA45SbmR+mcMhPff8AQfEZWDzczb+iwsy10F/ojNbOPXefaQGTXYx6Xa3aIY+xH53jSnF79YzzDEuQQp+QV3s43wGu/f3JdZ0w4T6UKQh9WKwiw2BVC+PAqSGtd7y+7SYFOkGHNtiwnhfxFY7rh0N53d0gNXRG45WemxGEmer0WZSob/ceaRQuqwv7O/UrLzUnSkTOsPy5wgpSm6KFN8PRuRTuO/f3F/d2RCa8GZw8wvgIaPXSklqYfaQpXHGYOg9scW0LG3ayx+XYCigOcLDh29Nelm0DYmkUoR6HjSieux+h+BXZ2tdHJ1CrEi750NtfzjkxdMKz182OysG/ZYuzY64tNLKputy3gBwYTphMd47fFT1T2uSR4zQrq5BfZOHLF5kPEmrPT3HnwNYMXF9oC7Bicz6bNNl61tkziptkFf7nPXQR7fcyZytTtEy6Quz4hc5KPfY4qXpLVJrP6xaEJJh5EZ9QO/J87KPb9VOXcG5Qudq4yHUtjFKQ2483uEBu2Ch6U7CjvfWIRVSEfegVqxr6GtAzeLv/dHR7PyGwCQ6JHu0oLaTaHvgzfjW843GbJcxzIz6tysQgYwm9LXCN+a5MOFJOjO6bZV15I3Fr0QocQVxyZCO/GxzT8qpkl16g9nTatO0UFF1h0o+BX2pRrLscDvVcObssojr4t/0EVH6OvL73dXlJAztzePngqeqWE9xrvZX8613G8hYgbZbioaf+VfboAfJ1nb10W0boB7+dtjWSdiX2QOqvxTioBo5jgNPywyMB0b1s4WkgNsjMYftTeZVkhFX/Ehwe7NLkZsqmW7uEWNNPRcfXnwMS05GvfmUuPX0nGWICDSVGM3GD4wHsgKfE86qubSqwYArs9nCDCC7ZWOgE8ezUtEG1R5YU+f6daPFI3TfZ0wtiJYZqfbogEvchI3VI3nulh1cPWd+/P2k6IdfLXMWbCmiEi8yCcHP3dmf2PQZkMwDAJdGsKykOjt04ilvPl+5WTH0oABkei16iQeNhYQIIJGTh/akgjNZeT8lg69nHEPqLdKZnX1EJTyPiY/SMHbioJNoKxpcVjbJjQ8ve6d2UHeXu3fuAKYKN39fCe42ghNOJaAtZ4dHaYyUR+MxNr/5glt7JuKZffvzdsnMSnUmO/42LMqJUs3ssCl2mUbVfT0N41z47UThZuha71i76Rcsf1rJiMkXH0JVRMXYNNfL31ePSTLzUTiAoLlmnrrjXfzQbwOC1CnFf1TaldYKuMFuzrV3+5NHB4swI0QLYeb+dstuCJAwSEM5wxiWum8ZQRIFgwrTpGFnvhj4FebgS11O+RStk0b5cBFaUK6Cfuj2b710A7ThrqUjFSU4WJDv7Iirk0VPadVjNuAJEY8s2ZXnKj3Fs+7h7E3Rywutjrl8bKYYXB1nBxvs0Krm3lvu68IrNyuYP+VJPJdCu9L7PAJ5hUX4zefsMrn3tpu3YSOfmN+bIVKQBh2k1qxVHP8UGjNxS17lpx8D3kzu/L+cJa7MwGL5eF4MbVjjLZRoJeuJjyZQ+ZeM4PnSw1UG6AUYmHNO4A+59R8xhYNjLGZq6RExdi1Clm5xTBQGaRGmyQSjHmPWJngplwzty+kPd1Re+k0AR5jRKp0xcK8gEo9M0x8il8bB94ig+S592n9ua2Y+9+ERXTUkm3MY8tyz5JnqJfy/aHJg0mkwNtmG+gIP2kLGbD4R7aPJuu8n+L4cQJMbo6RRx6XRMFqtGcZX0URdP26wNSbJovaDs7/pyO65/ksyGDiK28CkpquKXHaQjiH1ixxlN2yaMxce+30q8lQLDvSq9nvKIAAwj6S+ZbaJ7l3LCsOCum/ghm22c0IZxTo2i+Kb5R36ADB09UWhVYXSwDFNfqZEV83dvy309dTW2nKUq2WSLI1J0fjWUAv5LRunElGMLDSluVRAu7RUPBZ4SHWMF98h6WWpTWIqTgQHh1XMg6J+FHpuNZlx4kfxzI9djOMuZkaoZ2Rv98dKgs4oanxxWy40ft1FmNtA0DgasfsY+bdEqHbpZKhVi2r3p0XT9GF9IAqrYoPNIWgLa3tWFA1nVbJpDZr67gWEwN0GZ0D8z/XVACwyzhRLm0QuZN2vYebL7846GD4sIRaibhFPX1QA7sI2hhjh6wKCXEAm3wiv8xepbCGH7oJJleLNH9c+39zp3QkTeWpWjr+kFASsckcBMyfEZH1UQrLrlupKQTRYO4OcmNOxxa61JAUdEjapcHjJY/HmT86Pg1Z+ON7nB8hEpGKcqyRMj1BUECTTj5Uh1/YQD8jh5O78bSBwW37d4sGeNmMdCpT0I3ITbFV2keqkd3Dx0OugqAU0IJfuP5S/co0luQc2QyYmUCv2v9/RpnoG54lY0pfxMRJ1pwGqSvp6aAo8HmLU+J+lTLaiNOinaT8I2E1tZsoB0f1Yk2zLBT/LRt+osFyFUq4afWxI0IpEyvp/QV5GMEK6k4V1FcT2XAxIG+xTpNN4nzP63C7bjCuiW48PZpHugK61mg8S9NPzdYY7oFaHJ1SsyXjySkfFs8Kky391WrgUEsh8Y+VH7LEJX4ykW0sE+8NzQv9fY6285OZtDgU79X4RH/CGmr56R+pjnBizSqlLnBhl9v5O3LgTw0hZuLvVWRizu3qrjL6v532FTA1YPAHSBI+7zLO0XEyxDm+/QokCW2FgJqrpQ+ObF79/gT7s8HX+AG9ffIL+fUYvP8UR3qNcxaTTO1IU7pTkOJEmKvjUUKgVSHOCXTOpWIwacrVLuV1lxWpcBTfJtOS+jgywsPIhE6PSjJj/tfJ7VAJV+zZ2Nla9OJwACfVLI0GIgZSAot/AZcMXwt3b6RbyDrz0OyhVKScNl9b9hC+9L4h8aDfzyDMtTDsAG4ik3evUc5S6ANQWgqO+ioFFXr6IhIdnmzvBfdOnpefu8HA/L/ZvRZKToPkulxgcTtwynM3EKIWQUhc224F96QLdZbJYT+vm4smX0Rejyx2Evzj0Vsx/rcvhm75PkMf/+1WlU4E3dMfwhqPV2HQaP8PnyY3ThXEFaQJcp5oyFLauf7VhYrOUmnfWv++k2nCvf7koBSTwhmZW8SS/sM3OC5Hq9dYTIW3ggESp2vp7c3s9HuycmLruXcR1Vvb2XBrvUG/S31DKBhdWuJV9Tdv5AYrtoq/5o1FDvxBHj8iw/9EbKuu3VlM98KIDMvSscWxx/ETHEj2wprRsbIFvkXra6vwaW/jhAe3Vt07u6JE3RSIDNy8LZLCDi9p7B7HMm+ELaYLW9tNmq+cl+2Y9oNveZXL6Ab1Dd7pFaOOVpgdpsu82jJrg7NBV5C14prA+UZen/MmZJyzkHIan9hkWzBAZMEPcmHeJpbHs8prGMgjVAO7ZttviCuptr34Td8zEXyNBPGOJ59eU6uJCEtXAzYuP2dXpZoWoxVWCb8j3zGxnaZBaeuuc8XVBfpYZ1tDiep7XbRAL2tI3KbxPXHQrbj2wVkMnzB622LL/BXIsjec/tmrx7XHbjp/xcWyyL+sGO9mkB3pDwVZDRM2V7Ri5xCHqSAcM9nuRX8yKiQWB1hbWyrxuxJVYT1BkQliwVyMil5MotfnIwd9u3wqi83CqYYj+qIQdEk2W+DVILwDqkukI5J8qr1tMfpTKp08GrUYtbXMIH+/uvXfpEcMuAVzmR/raNqzlQk3jBXT5D5rZ5iRbesw5QjnD6qKJ9ZS91VxGEVO8iNIQsJXXjeoBc2fcsSfVA6SwAIWQeyaW353Pk2IKcCnZxUQx1ttmoZLSZT/Ax0GVf3qIC4KbVvrO/hrUbru4gzst4OLW92f3xgk5A1hxrFN5WzTOTzamdYiHW/CFlBXWOMOVfksd1qzosuOKq2cv8HM6kFk+Q9/dz1qNJ4yNAa2UlCFh428X9XOUtBU5BUhWJDEDR9OsW3IcC/TMNId/GaxJN4yTJ6b1qBr7qWYmy0wEjt9rJtZBssFwN+rd+E5i5UnVhcNQ6fiAfU5bXT1Xm4j59aBeb8CAQjZyE+RpkO9T9i+C9nPN14XU2sPnZeloKgtVmktEogmUkq8FdFTWYpyDwrpyREYCXtZQE1wzksgeX9QHZNWXWcp9obIEE2tKSa96fq4Kh3t4Tb4I6thLxY2cYc0RnDAZoQuJPp88KhtC4gqMcGaDALSHMwQyp1DS65sh1q6Uttc9oLNgrAMs/uVN7pkrhyRI/o5PiCN0iRVoTKpGve0jGmtdsTbhaSw5hZne9Cp3LSFSRXt3X6QGmGz7JtKtIDJt7Ek8T1xCaDUlG1PWIW16/EnCuHjdOI7SztO5NOQ3s0wpN5ni9xtK4/BxChaFlAFD65k5BtfCKd5dU60fXvMmBMhff1nfG5XiDZIA5WJ2yNcsuWfoW8UqMAHO3gr0+mTF18HN/MT7MgNVuRSitjtztoxgwUWW5vXDduqkJMjVlTdP8CQsuFNeiqXhafWqIHA91dMq9XtjfgTkuBkcVp2s8D5LZdt8HFRfzRzRzMsU2mRurYEtwOrJqUPlmjJGa0gzVsFqcqhb6jfa1jMRAscDZza2Og7NFW7UTYKZrAEr+B5TgiDnHNBUlPOFs7H11dAsE0lBOoBf8CWB8eHACojjJCWlZjqvitRHp5f8Nrab20MV36Mt4MQEw4ynOYy5EFqoxP4idn/xnzrokv4f8l3JLOfMQ1tLdY9e0UZ3LiFAL40xRM4eAktDX53t8uqJuAz89TbYN81KCZK5aWdb/QclSZa6Lz7gEe5RpSexbmEJPec0hLhO8djY4IkEpC+Da8EkDsYColPYnnV/EGNDG794MT2whu3C739po5/8RWiiauIGgZ7aOo8dCfryyBzOV5YJq9Odf2JhzyoDB5yFHTMGVKHOyCGk/ZihGbQ/rxFrwG1lIEQWmdah2th6JMLjoYPjBNkXDRR3lcMnLlp/1Oj/ecDZgaFindZME0NKJXjsrIcH0ECTVwX4BRnQzGQ7Gsn4TAFF/UFMqYaXuXDUrSLsZ0Z3zps230dBEJBXskowqMgvbYbEUsJOJvBOBjlMmaWfsunJGeB/Srai1VuvvxkJ5mR6mu/NloA6IHenrhwl+eeXP1c6YCD3puYZO6TJjfBJuP/dvfWmfV3zpwiWSVJ0cEiI64z57BEMJ+rFoUh2TFNdAyKpGDS7TFj9uu2JtjQMm7E/E/0PPvHSrGAMLx4XXPtDasmWUQ3ZDoUK06ispgVl3VR28bzmaitKobNeJUbWkvK5abl9F8hcUvxi7vOsAQaJi2+uAmf81UJ6fy9AFZBEEBWf5hl41lcrIc6X+lGd55Zsslk+o35G31fTeweZChmDv0qN/4kYagDKVsG97EbujhN7u1HLNQlW0W8e4IB83Bty/GQ10WmGTPz8Mimg1VG26VxI5U0g3T8uM3PIc68m35tIJxziIogoJxUAhfiwVFPet9fSVWXvuEACgtw7bt7euFkP2VZ8kBydmpPwUbKWFuySF3vGUib0xoTloJdicrXcUynCRGZtbA9gYfb5Eb6eJHE6dafPhZvMPe9yTwQ5lrvBZkMZ5FUy2t4agPIYM3FD/tNXu9l1ZMjlS6tKuNeyI50MXP6cmDk7PfCU7kJ8b9KNK5I1igmruWqDEKf0VXGhcPJQ3//gr3K+vRbY6EJdUcvIWjoSoHUr0xbeFHf49cZiiFMVcT+LLRFAOl2W/Yubf7dtq4Y/uJ4WBT6xuwZeCUqaIu58hoW7c1W+f0Nw3nO9UZq02H8biHBRc2lcrWM8OZO7hpDaBmTxSoSlYaj7pBrE5A36VwBJwFHWB9BNbkBgazXLuzMMrEIAOQzZXh78OR2Qg+BSp9HgdS1o0De7O713/SJf9gq5ljkjNxnqMFKzpEhtWkcL93puUbEvhXqa0sjtZjf2KKb2cppDUbEsXHbskh+5D5ZyQf/qLqG95X8SseYJJ7egLVv8px+wUxkGAKiycDPc6ULxDs0j6Bu4I9VjCiGqX0CW2/1Tu69F7kJ0l9sjmBCS+rVPsodxrGgNHE3xb4y5ugu1hCYxKC6zs6om1DrTfz8w3X9Dpfwn1a+xs18IBDrrE5kKtJBpDPBGAzXQX9IZLwfDeXwNPKj6L9YP765dF1RdbOkvmN1ToQbY40GjJ/QI3FisNB4ko3Wtg9+68xL3VBOse3JnOU1AHguYP6qnr9Dm+3rWwXwm+TCWrTi9lisZhwsSyFOXWB/4uK6Y19wLicvBAsmZpxKCtL+b0PfDs8afPY837/UQsFB5VgAt3KiRFftXYARykPrN149uXZbwopWVvudtuT96/Hcnyc6Otxi273vN6zHXUJgpPoDoDqMSq8H0V+X0NDGhV9CmFfaFuYyRpIAw5G0afgp6FXAOm4dgkYebkRW7dGcwNzrOqeH5g4wO9zEL+04OveHWFDhfG93/F2BiDPaxmHvNdx1P5ldhEICoRxjH9+kzVTxHDAVOulyOcQKp3WP6j4mB/UlkduoQ4edAXYqkPfJUTS2rGjuYm133gALDWr0VC/KM/nilctrV/pDil1lMnvhQclrkAiRclzHuS+zgvZJdgFnDZKrlW8AB8UZ9St34NVr1J1/h0qbDX6WhhS/9hkyEDtAlSPNse2nnYgEMs61bRa3cXtikIa4Cu+bCt2pZe63nBRNHINuBUYCfKzr9USdRBK22eQdLsQ36td1neDOtFI/3fgmT2JYPT2/NS+yrZ+MzSPFF+8kW+GQmvqKEThEcW1y9iVEwjq6xo9zlRk8j7WvF7IW9ffv8lkWAZuUvcX3sCyxaikQEjTjoC6kczyPjuWZKnG8Tkb8ou9ZZUriEJfVTDmOy63WhrtwagiHMo5Y4AkLuScOQPxi2WQnaL8QZonKNhd4Idm7a244tXD9zUlf1ESowjhDt7elsH2Rj3sPEhUz+ez1ba6sIf6Ou+7M1/QwXbxBOe9FPXiW2dyl8uRkDsJHrxWXBGQeYW6IX4xNspV3Rgrd+CKxiUOu6/YWmjsMW5Axh3NAvrE2VnDrEyVjZR6/GNCKIzVZ8GyZNUwb9MqNxXPGA49EYZwRhGk9n/rg38eY87ms6uJIvy24QBibjhJZSwSlZNdl5c2LZpm6hURp38WvSHgQV0ordsH4un3HZO6zYHLntQSXnaKkklEblj/zU0Tqm3+Zd+6xEHk9nn+MTEiHIWHJdRlwcEGt5MeN/fKPdGzD8sqZ1cekn/pCuzfIudhkoV38M/2rdsxpO9NkS4SY3s+AoJTNJXNk7HHZFauykV4buOxxnjbLobwtnNzb84WGDO/6E30FaByXhvujoZrw54Se7w/MpDT6C52H/UNuaBh+VQ1IntXKb9qS7hkCaDd+bij/Hhj1RRb2LO0G1OuKsLkSj3K/oq+F96IDlWiv+dDASGaWwzdqllWkuRFKHER6ZtZgxwzzsmr88Y60GEb33cJFgsBpbLY2R0eprX0v7AQs2F9Gr+bYQbwmNzKgwGeiS9YBGWtlNIQpIgyLqULqtgWODL/IXJdMLlMxCBRoW71X1nJDgkuURcinudq1gyVA03h7f1t/sTIvE8VUnlB5pvcjI9eKejzy+rg9coW3s5yEzyCmjgaQj0ILBoprQthC/DHNWPK+nf3CEiBHPKpBdaxlYLuxfjrQqpjGlGq9At7k+H1iIyQOetx4+aa+2rJ/CLcbYd7x4yMiG8c2e4XFhd/0/ZbyQ3zLUNkcP5Pegvk/QXYNF9y+zuLquz8hJMpHckzfdl8DR4/+Qe6gfaHtaVw0/iDHq6ghGEH1qhiZydfZNVBmJvMPWfjg1gFDxGuW/4vhrBAEZwHfM8clDX7m78OmcwyNTfubD+Ef5mR6XHqcWsePv8J17XRMLfOtIcaB0fe8KR4Y8RU3TltZXjCKV1n4mZgTXATdP8J5cAc0L8U0Ade0r/aE9jOjvXuRbScca6vTmt5aks8ij7z7Q5geC3f+orQb82TTThAAPLrlhuw1RTZ+Zfe0TEGfzPJbntsNc6bwm2q5GGwn5iWBX3L5M9viiioc1blEsntK1aNEv4JDp+F/7jQ2CQ9dHZ0j+t5qMJ508IircpTkyxr1XJFp81brHooN6W+qsuEkD/lA96CqTnlk99lRQ99+P5wmZr4knTCA8bpqfHleUR5CrQiVs7xvZtkwxUE10KVTEW41S/8uZgHPuuKF+WAQPAb3IbvfBR0Jsld8/iysYiNf7UetdUG5VV1khDekCqL9s9lluDroE+Kzmemc19g2jJbZyc9kdy88JwPbVsMgWtS/OLZ5k/vmCDzdTPiODhR877VXQngUkZkURT5/6n3tOH2PYo9F62Lp30wQTZpx3mTcvMQ17yCvMDUjKWYYQofsJw7KO8zBw8PvMhAnLuItt72TtxlPI/YQ34ZMnx0Daq0Ol1SZ6uVSZrLqmlkX+LQNU9imy0PkA7YxqWuuyiAnu9jmU934vSMv8Em/daCCWENRxJMgxcUY/y7eadjFNQLUcgnLb2PEg3Z0qh/owdDBE/1LcD5tY/a7ybV3PywX0hiTJnQ9Q/gELZdaziYANl2op+sQN97IHTzAF3O9UzDhItF+KfiwGQfE4x/qi+wJ4DY25JjINSvptWjCDtFebmmOrnHiKzULcsIYJXP8dcTjEdOARftzb+CzX7JVHGJASnIv2EoA88NP6Acxw34FpUYJrqrumdRTLSHuuWVlsVxhLDEdbhbAlJzCz+95+c52S20HhQOoaKOQEpM9rtyOlOnVkCA7spnZvJS1LRu8dMTh01XVj1n5AVqKbiY1iAqnE7bVHvhM/+231p+bSXITHsJvf1GLhHV3IMhhcx9p9qkXWWUebEprcY4mIYrSHxsfmkayD9GF7Er1xzfq0Byk5cX/QyzD23wL20+q+HJPRtaUn4r5k+v+BVYgqc+jVhcNN6J4NpnnNIhjhDCtOjqIjEgZ3y3b0/OWJX7VR/8Y+INp5Gxok6O9RUpl5vgd254xWjzM/66yl+wq1JdcWcC6/rhSyIg1iYJ3X2Bwdze4YbY8bm7F4FNpQD2AjKYPJ7ODNESLmCpT8sPg0+oH6t5zaLNMuqAH4A/nTI9anAiS7OkNCfTadK/fyOLWzjrZLEwqTTy0gaTTwBLjgmjpIMIgxGhtsFSEWZwNRKw1UdqkiKtorAPDDjdTCBDbQfCfGX+i+H7a2UHLFmXr9o4AX5QLKlAHoeblkW73UMYen3nnBZ1cbuwJ0hPatrj6W+mjffp9ToMwGBwMwCLuD9shfRwbZdceOUf7Q0xtzNtoIN8yxpkV1Tq36tNpmvWlkaRPGHeNvKJPEKo3Dq8B7KrHvMCTnO0hkqdHOevQWRHQ1MPZSV/M4b2w2PIxplvorrA7u0V9HdDVK30D8BSWrVT9JQbQkJoQq1JB3sc+GiU788kWqJmjlFZSGmqdwEv10tUevCu5zIxaUOVTBs7L3s3Zr5FfmOGZ//2Rs8MHsxZII7J56o2iILbYjri436B7vLcTIQgG1i06OsDZiXeTwJQ7TSuyRWi8w17loZSNvSTlPUamhqFNJoikW/ovtSfUNGokGDUSFi0SKicyX+UCfZklcqAZqi4xzCq0OA6a032PO32Q1dlD80aWkQEa4UkAgc1WSqowNFa/PXa84sBjj6adEbptLjGJ562hS4B4sUcsRHj6f8+EaGNbK6Zl+oDMlXqFajkoayrnHO40/mt1XIQ8tpcvQTYMVcuD08FCKvayfGCWPikljhZ+MtrKrfKkd6wO232eeDKiT9jwkiUZaHHljPeCuGyBIpt9UC9X7N4mvIyH4lYxoX3vohQ7G+ZaCO1w7t16mjQXGpOBFauL+QFtvLfA9pFe7ojViE+eyKYELwST2KVuCEAUfYvmROEDfEuEreFDMnSECfs/ee4zlcyK3E3neIx2hSr88c+4zE1DLHHp6E0LA6LJchj9q8xT7gxbn4itJrBQu4MxERGxfYW2VMnE/0Culi3zzHshN3LaosSwjnj9+5lHDTsVECc218LPxIfbtAs9Ad5njQD4D9OEsfsuAJcnD/+E3Yh//+PFriwgyZoYr0376kgzCEprmdzSVAZa2yBCPEC7hm5sn1UgFoj3rfTeYJqlHjnId4EYhUMk+tFZ3QK6ytzlPsz679ADPmsS/siWxkc9SG/HSVUKlefmf8ZHOPwkFOQetsdVHo6Cl/v/wnXrYw9deslj6ppE1xIgSyJ597G0nqRgHP2yzO5EYW0Zi/HgAwy3XuF5BQE+Sax9nOwqFNSqHK12FmXm4ksQkx1bzn1CNOSntpYbKiPtDxou1qFl6SU3mP0Y7bzmwhrSc3MZIktx8hfhqKHfPGbFiY+IRBZUZAGYdDNcEVTJLWGSbovWq4003zgZXEpC57WXhGoCpJci7g9jESBRcInv4YhD2pCqtY7TqwOsE4wpxvWCsEBZrKsLTlhV1KukgHgGzPFPcq5yHYBUuIfx7Mezja6slTvkYvTjjNrS6qOBttHlEIh2EyWze9HcYgfoCMLSJM7dt0zwln/b85Qfk4jwrSwAcBrtJZfpn/BOWF4pSH1YHTtsrEU9uFUYd/d0kuoBzuGS0XhjJUaWyy06wyIuMJI9CI57883HBotUfyZWJVfOk5G5f6p7QgIDiiOOuaNxPHgmmZaNb6xHKV63OEkIwewvXF8TvyBU/PUfM62HIDDGnC0YU9DKs6uY0JGy/6Aj7JpCMSrOPZqeR56YsumckRL25eUUpGbqgVx6vJsqe2fvQrkiCpW1yLIRyEYV4Swt7H4C9Y8EEOTTZ8Vi+kKEXI20hoymesYuZA6pEnYfqG8NP+fdu8toeutwLN8slexdtc72vinN/WQ/LsCuv58t5finiB3jAxEvJEoROHf68Hjhrkh3qJ2lHmRc5qtv1fSpg/JT3XMBB6U9Xhd6j0g+x5/eNLYplriRPP+1SdKCeeuKet0D9+lKUuq50DlaRLJ4Hdh9OOJif5Ve3Mt5N7ff0FA2DNqLzZ6PUdfb1mmDQdAV+qb8g1rQ64BPw3HbyPYAtnoe4AGAofS2RUSGxVnl8Um0u2XGgcqtdRyLNQCue9+s6pxPRYdV8H/H3YUcMits7V7nqY+TRrAWorL0XT8/U90/vJDqxBjevHT1EIQuWIRVwkrpK5hMj3OdUzq2QouhRFX87dgAq43ns88/K83VOYuI+RcxYyacI3BRRydGKg6IwLXYBEcWCzOlWFpDq7r4VHURcOYhMc/SC5ECjWyDLN4K6kcG6b77MAo/NSFpvUJ4K40phpAJftRYHXa2eJ79DqAkkKvuespiEBb0IyHe29c7IMAVAeKghQdy407BiDXLo07oq+Ylh38cNR2I8w3SeQl0pMLFj8yLSxKpLXB69GAq7miQBYp9DirNIKljhoqAWoaVpBE8uVr2jlo+Z5qorqnz+gPql0bjdMgBCMQVD08DRUoiWjEusMJokvqifSrhE1Kc6bhjgMN1QQDE8zUuj392s9CyiezO3vjco9qBEkPzao7Tvuq/QOOpFS7YKvGjz4leb8n10ZW4JB27hjSBQaU8nygauqtas9pN+4dGjta6pebdyUKbQfQ6yYyHuo/k57Z4+q2GtG2tfLcpmUcH4g1n5d0OYc1tyPkoHrRkvJV7tUJ2SQWUqG95fH7VuBZ9uiWGn+nQgucB11jlk9ul1pY7G8A3HG9BKyfmjgWE2/uDpCcKSe1cK+TjmBo3dL6BacFhD3o+uzdH2h4YReR5yJ5U9CJ40xIIq3qKP6BZZPz4heZ3ei1s1S8H0E4bS5/Tg2tQ5RXAGyz2zI653wQ9PrNjgmpa/PKcy9NVEI6OK9aCwMm//9YndgZ/nMgZcf/rPp2mobz0Vb9q7jtEaiL0bgGt0nLUipbskIYRQwWKXQq+tbjJWEzITxaRkNRnfxsUUGCE921VqMHtfNNVz2e0GN6j+ve3c/TMJwRDvY3M8Aa1bj653R6laOyPw+bDKeYSoxKzL489j8W+BNdNBAwficAGl/xmvy5IhD62rgXtkNXvZb0/0hw++raXD0+zwZa4KZgkzRBHTwW9IUVvvI9lMAPbUB0xCkre0kJ2xEC1Q+RuIoY/MdrXehniSEBKLJtUNXFfLcj//pe9vccD/E1U7CAPoyduiMuHItFMfad03JnvTTX3RL8XQEn27uzGwZHlDjkw7JPOGhwWFTF+RQ/HT8w615ISEyW9Gx/dwOKqL49rI3+eHrAYxFk9+Ai+tWfa8ggmhhsQar5Fw5MXEHjq/NOLJCksd9RhFYaOxRxT7DiOK1Jy8Rp4f66+2Je9G+Dj1pqo+NaM+pGKglCmhE598bPyWTzQewRFyZLRpjLPJvLrnzT1BDR1eKBXKEYD8ic6YqcipWBeorT5yOUrbWmIKBeV+brm39gKpFk8/Qs/4mtIvv8hyAR0R5vOfkYdJvUQ4S4lT52YGjaoeE+n50bQXPImezkhpS4aQKWx+5Wll995o3QxkhGt/kLhEnuB3ra/vbSg5chQ3lY34rlqh15nLM4UQkVL19RI/sghDTATatrm78ttKz9GjsDZHSWEnN2LV1VdAiRDXW/bG5enpzuvv/QP7FqHSG6W6pofcmREhA93mU40gm2IapRnrFNsnmfOD+PSGl0OHnZyZ45iaHAX+4HFBqBsnBaKgJsAvi+jG8tf6FkARLt6mzMZ3rd+FZuPqmV00zLJOVmjq/IjXMGadHC/Sw+WgTuahHrdtEkKzhl8hRzPH8edB/K90e01omJdS+ii9E1ipVjSfZpKSmdNyRLXWRVy6mVbzWzx2Hb1EZJU6xyiECTQO4DQBXQmiEke7752iT7g8/d6nfzK/iSclsIFsFM46xMxYaDgwY1b1neBE/S1QTYmMU4XKwJqyWnADbdSV8ULcn6rsj9dw+2T2fij5vY8ZUMVAzVaNI2+TgWZ32GCKWs2fPojbDR8oucm+0HftS4MGjkhvYZlKvYdrp6ZIEJwFWaKt1ARzEZK3X4hW5ZGZ5BTmwJKHbgvjWF1BeTz1DvlUl0h15rxcX3HRntQXskdX848vWG/s+Jo5LjkMBtD/HZnSGEM37fewiYOExJw/+vlhA190FDj8hvPr5HJT6R79+WSjDiyRHyjIZB4dx1Z1c+NkmY02WeRtoU9i0uDlDSOoNKq7DSut3g/2u+Pd5Zt4BlQtK8zh60MkIaZABaTs8WIXd2jh7YYgVDXCL9zOsgm2YnHmP6yMaO6m1iTlJq7EyIkEcAetT3KCFTeGtxJyLKV+KHN6yO5U3AQmf74appF0gjEn0MPXVcsKPqs1J5vw5HQ5nzkp7p2p9boZV7+GqLUx1USyCaihb6OdQumRyylvjS728zCMUkFt4OlQ8WFlfewSfJjNjoOnnvYpVyqPeHEm/1zZRsU2tVQ/ozv1GB08DRrhtCu17uiAapOmVeRKhz1ZSorz1QY5VoHkvUEWkq7ZwiSaG/VXPgp49W5adxT4vygJqFMAyiqKlOVumiw+UiqFXZxk9fddsEl4VqiU6wZnLjnhPYaDw/feKA+ucm3tPi+KLCEW3dDlu8n8hj6AiSZdGpSW2etCmWyhZ5HjdorI0vY2y0kvjlEUCqzKVouufspbU0tPVPHdHnnuqLIIJa4Ni26prTl6fM75lCvnh1QGDKS4SeZ0jc6+WwEWdQENepX6FdhbXBUtxBF1qGe9Pz5U8gXMsdxN09I4ziBXCtBoMINEJjS1Dfw+LeZkkg0omyJBWXX7kSZs707ApFHmBTpHS7fxc2D5scGjqMxiGW2RQDuT6PoyL/M7p7e98i6t4b6XaTS4aFx+FwSVnmIErhA98MFEmFGN23Sm3u3r4COKd98Ph0ul8ozDE9TQnhLwVuHEPkEblaThqHPqGCDFVSAYEDgQZ3FWZOZgGez/L0vtA2nHAPpBJN0LbpSMkEGRIJFwc6349imKUwrxOMuEE41d7TT0sOnHjGCwN1AbugYxmzoHEaXw9zhjX9hGgQfDeZlMnIACI3/dNjntvh7Y/BhlZu1pR3bPrgcnOtM4vK6zHTxw6S4K7Ekshpzp5DuntMFvT1oD5EiILRK3uBYYpcepQ88u406odJb2oRjQTsDEnqG9yhcw+EtMKKo4X2NKjdNArkp8Nu4arcLk4lDfsjf4dwEPsB1X4AvJPfm0J5PThlot4LU5ehS2IcdnyBEWNw6qBVTG07sxNDpfofkZvR/+cQvcdKIlSk8yx8DCYFI30rDzkSo4dpkjYlyF0gPVm7yDkPiIQVBRDkAy6FhGgiHbCI43gXgajeHYPHF9I3818gWthFIGfQGM2IKOgUm+pT3j2A4ZBH4UIHLtXi83H8RFmyIqEdmePCX0mhXcDp+K4xNLGuas4jXB1YXoI+G3te0BUib9jFVGo7UPNNdBYZvkKZSVv15z6CldqQXYkBbtQU2l6SVD71qn82cjVXCJcCBMNgdjKgexntMWxVCKpS2OgrVP1XYc+4+qaPkBVasGxpiMakDHjHC2AhUYXoePEo/sj8Y8zKI8pVJzYDEeuxtU6zwcuMLdJlrEFzI5k5EU+1yOD//92VmVJJJhacILzlfFO1l/GLCss3fQb/SsgTfQKALW2KmaedLhQf7Qa5ME3AGqU0TS022YmWM906/+FXzE9miG/pC4LaQEj00wozAnBbNGDIscHBkhsyPz5Vh0HmAghv/hv45hPHI0ZdUahcTLrVat9b89lgV39wM5ja4+pzMOHEoUZs7ofSUmP9ZwZVYxfcxh8BYj/CJnRoi5TFJc5lyZMnuztj3Jp9psf7BPX0WnQQZR/qIHtzqCUAlJoGQmMOU4fF0DJgchZAbB79ui5J3j3eWTiF31tctN3uraq0lmLtuIQXcUV3faOyaiS1POakL9VHcQiBppq0Q+QgsEYb/tjV/hCBrDg8wvXQdKClz14bRrqlMtvk3fzVlMq6DH5urXBwQAp43Adji6oVNcJksSf9ZDUFgb+RLfX32f39wiVPjxQnw4SY2fqp8HAD3KClJoaAvxCf8G9Mf6qpLgBWFjmThM5Fpl3oLA3p6YRiiagdZyq62VGL7hp8q+gEKFtPHFqprd0j+dyPTZtgbI5/82HQ+WX9kLP++NmdqJKjI7uYaKIaPmo18yvR/3KGUlSo8JPbnFRYr6OyX9aBNTDu3vLMkDkCYHH4FKu4VK2ARru+oBjqIa5esUprRG3BBfolC+f0dGa/q0HFAx6T8PazgZx9Wt1sdSCW07XTPfxp2eLyEWdpntXUxSQxaZJUR2y/5OJI1/4s15e+lWx3PfTGAhuZrbmMHLGaBLoGHjM8y2K/uncFUFFyr12jTOK56HJJJgj5aYUpvfIW1/0tsH6zrhXsxEsJ9mHs+lwwdSQyHZ5i5ACzDvk2y8k46cN9U79dptWgT84woYadvNpwMPvA70CTIg2tagh8og5+dMFS1qa+Qw5ZaCdVLZjXZCdLfgwbIZto5/UA5lXuZJ+uvSPSJVabodd+tIMPKkyDkKz7GY7ZBbPCTzKL54OI0v0lSjMHQcb7ubZTM49o9lr0w4umL7jf/q21cu8LG9Bt7C0Sixp/Ce8eFKCt/cwAqgd4wA96CYi5/uJ3Ky/CkSC14W88RuYEQZWQp///v0F5sWD7jRGpbdZr1j3i7xrIXc+uarEjczB49MceErLcRYSUDdW9vLotHvjPfGahV2vOSaxf9MpwkRRl90gMgjhKWrJVpeWoCXHEy4OE2RO1FKZ6KdMg6UKBWsDSLxMhJggIdpXgScTcQkT9lDnnojwjeMDTiqYRdoniRhELyUOspoQHGMLJXGe83GiX1JJR0b8kfqqBw3Xkz1Dfe5nPqVYrriohV14iqjverHunudDFIdWEOcZ9TJ3r6tzbYF6p5r4EK7qaC/FEl+L4RO0qrFNqo8hXd+5Fdgd6JClbNxb3orfwB1ZrJzj7xtJmneR32VZBugYRJ+YI0Zsu+i0qAQIdDIBl5RpNurb49fzHW9RNjJinhWBIy47uS1OOtgdJh5xhUsFIiKb93CwaNOM8GBoTEzL81gIDxyT+uuFk0WR3tVshsyQ+3mlODSGdhjghzjciPjFkckUx4BT5j0XHa5h6gmzrQms7OKUdATokhtrBez1eJ5KTHCKohry3E9gb0bx6rePpalPDEPs4rSV1bZqMfeBLiLn6mwHRI8XxChR2QW/hY14Wqg3N5XGywaCYapgOza6DNXMS2NnZYhK4Ghyg4Y1YInhoykoEZ7EvfMrHl2IcP9Nxt6MuPMz8ymGZ8VdKy04bNZav7mVCPnbdYGr7atn9x3Y1xokwVjw9B1ObZ6q5pf1BQdFe5HAwbuZLOI7DQJ3Se8Y6Zgtye27v4AwlVlSf98TIhKkCeC4tPb3+maVLnlViQjpwUV0NmJfm/0x6aCdGwWtUQ6m43+oySqku/5KaXSb9e3cUtxwiaGzTb0iNBPfCAdMYLqB632pEDT/q/qK260GYbm3C959aQimspNxhrh584xVRgvr2sIhWL8J9wKh7KnhgA28tW6VqKjYsO9qod4TmkgOJLvDPhL0fSTupoHAiyZjQ7Uzr3U1d3dO/kqu1PBfcAw6IT3nOdMSaxsRUQLS9fhWwW/JKr6QDZMkOwv7L63kD31zeNXduVUAfDsm+Y5/UTX5HSiVeuJDNkVLITe3iV4bBIZRl5ms0tij2T6maqfY/fK7Vhr9s/xqfJemteFBeTQbybZE9JFmUbj20w1qUS0idcRs1mo+RxETXrKW85c8Ad71C7X3j9WE6jxzBM8shbNx3eqlKnXPkoLpiHT1ew0y0czv87c3RMgCov95xnd4BYBUkBdW40kBJDWduQU6GSke8TGwc/Xhggunt5m0YwRd1rKtmsZShKGpIEoQ7hPPKukHkggcR9yxH/lVHmrcT1Q9KzW563lz0BOHHYAifeIvi8/OBHqua8E+e6UQUkaSd4p39sequeNDKVBdNhHlyRJS6DahtqwrD3NOUljGlYuJWn/udndK21n/9clwfv6nbi/N9XOCQ3/lbdicnX3G+O2dkRUl80Kg36aMLiY4ProkjvkoL0v6qI2BxVzbSVcvIh+Ndj7Mi0Q4L7xLvBka8qLnhkVrFkAOfMa/PYP2kzCohN3Y/oW9i3gLX0Xk17YFQRRB0TLKORNJiwP/Hq2pbkt0MyOMqAy5VzlXzVL0G+n0DU/KwJzoG+S/UbStI+yY3AxLDgGW0vB3vYkIj+6JyZOEexxCQKUWIVg1Wq3HBwo1TuFNOxcDqPYv9aYBUAKjELgXGSkhZXOKSpfl+XsGw4MnACj38KbBvijH5PAuwKLZXwTo8pnZgBBL18hlYXbQYxhXo0tY4tTbPnpLIeyncxQ/rFCQMMxrsa1Uh67M6jMD1oshElIykhrC/+5XjmESawJWOB1fROD8xDj78H+miD49JcjkcWEjaTlUoHsKChRJGvulKxD7aF1ueWqHAcWNoxcxFE8PpPgT6+qJaXctI5C+J7kw4aR4Z1ZGRPK5UJ8zMvRRllWE+V4wcNDJvaMiroY8ye/93fQ+Hiq2G6cPOEg2veAcq8Nkpfm491viYkttpEk06ocQixUaCwQzHIniD9Tge62r9SuPMGPOqwxbi/pcvy+GK+B0Boq8UbmDcP6WdrNZfCXXIz75Aq6lMmSd6lXfD3i9fkqGWN5rg3uO3b76Xq4FERYaXuKXva9cah2tAh9yrKXOMOvPuNn5QqtbTla0anxQZKcxWLKKpoSHdf4/GpTuTPniNGEJExRVMAnX3jnEMCU56kxk0hob1Z0DXh3U8qjmDlXXbvy38sAR0HrOH13fm6yLxPXMwSF8SyhLg/XirE04BOEJN9zJ5iZu9WW2pOdo+JIf/2jq6KT9/xobE3qK0b3IuIjB3DK/nyi9kzWZE06GjGSF5iWpsHum6fj2idt1yQXtVe+Nuccojz0iztIwYU1/GDo/TG4nhp6H76LxtlJhs0gcFIv3X3rBFxqQpWIz1h1WW44Ojs9mdEgcHnpH45tL+c4uwIjgtUi0jPz8owT4FYxNmaEKhYleTTVzCwLx5qHVEJ1VLb7Jzzo5PA3eL3Lffkk6IA8JF7PK1qZ3FUz538C22Ct4rHG25JVVThLf39kOUpdbZcPTTnIwL5kieXYJrhMTcVODKsS2JEwBaLC0JGmy4yuKJFYaqwMC2qpTZ40oNPUG39EetcnezWvUEHtEPAGcI4gB03SmSU4ZoGQL+qFOnAOhxkHRJpv+wQ81l2Jn7tmyUlu0x3keYPtL1FYTUxbV1pH5yGvFwflaOfkUm/9uTYzOxk+i7c9td/3OhbZMpIJg7RsYFIWjglTTtAJSRS10MyTmG1KqRgjvaX9g5UKDaqdR8kpSiKImJr3/T5af81XXDFKzN17BNRRtMaYvVr77WPuWOhBh0wHtFrunvHxgGR617pBRPVw3RKbVmMeUgoTKLTIxJ0tlcmuRek2vdfaQc0Wz5s1oSg9CiO5oVLG4gr8JB047qVVV9jrLWjL2esJk0OSypq/OQIWsU3dTDnfBgs/h3+momnYMPghktkodlb0gJb6uTtAu3BnduNPv4TfhHnY02DQdYBfDPZuptnWIPq7ubqSaia991EsHs1FXnghSJbBxHrdoemuI49cfNo1d2qIFVCkmE6Me/wyltwXFBx3maYIv1jNusW0hwju4jqEpzF8TFPTQlXUsmXycr76ujQHSKfNHW2JIt0yR9cvM+XS7i/KpUcNaN50xLFalLUFY/VkGEqa0GY2FlinpfhkJ08X6EKIeEfHhj4fW5l4ipPM+Isool1+QBRtr6Bl3HhhyMSU38hAkNszcWHaglqnpXexgwi1IHH6Hw6OYoZ9nAZBovHrURd4+z8eOapN2cp/5Iy2F2Kq8zYVAb/iNT71IfuJipl3X7azbmqNJ6obKLLRi6HVPuXsZOmTUlhPkVTCu702GrIqXPWG6O7+6BeJkElaqu3hDyGBd698hQfKaDuAQXENihbfndEUfio4R3S5cWvvz3fZqg20mUgLtIlJZ/whJfaqm9VF3KkEBtJ8yI6kku+bBi5sBtuqfBJu6c4MGKsy4CTOA5x41TDRYe/61StMeIXfP2tpmDiqISLz6vi17vRTu9m3SMMr0eG8gKsrOFi4cO0nWTsq53tXFdS+NDJRNycKg/DNPIsfcn+4ml7tLIh41FxuOVmGI/C6RopvxOz9gdPDYvzRdhEZ0DEfyv7eXR9ScTQ5rOqsoos+8H0s1Rl54oXWTj5AWzzdlpfazNwsiG53625LJIFsVccCmSBchvtirRmIjuOYvbJqZn6i7IXNtjq9kJIb3PsJIAmJWMnwIdo7q05cislDg8WuOS0XCc5NXkTyTIG9OpJf/9lKLK+3RnFFAfvmf+z3iQAf66gqFimhr9aKZD6UIj8GJiyIzvQm6GQL570c/NvvANthwgivcCVHlu9qkbZMejZyQuDjfPn+pVeg1jvaNZZocLYN2POZOLujyMdxEY27KmKLSCcch+JRQ98zWDsnV2/Q23k/cLskyU/HrCcNXWAnLyQPof2OQDSrte3RDV5gCCBzPVtWPUB1dc3v751WCGfnwCfSVt23gUcmhqAuALcne7SGdPfIhOLnPuO4QGd4QB84Lbex2gmC6vpjCy6Ikg3XGB3ckYF3S5R5MAYBxGUHEM7nJgRiZ+ZvKa5Rrq1j202aM7aMV1jXdx5dHNM/FC/EsHj7gG+dElWAcGPD+f4ywY1ll05Xhb8RvyEOyNZvr1kmA09mw0yRy0gEhysBi5+eVv679arx78idq+h6Sd5lkOjbM9fYGlCM0cqpXBJscLsNrGE8J+f6tJtB9Q3egQa63Gr9VCtA3Jj7NA1/zIUKRB5Q9hn455MpfNeyQY+S4No++GmjFQ9czI9v6WZkRZrpsUeTo2bnc2XdP2hDqoTkQqMhBMpWtE3atkZGWx+kRLyiNZDdh+dlonzlTnEr5ytSzw0MMziMZI5GixIYTDHbyD5bWw4jyWy5oUk/O/2zQVUEmsNAveK948mCa3oa3YgeBDiRXWD/diUu3QbN0NOa5jhj87PVtw+txLe/GvMTV1AaliftjEeoaBfOttHnDMdt9vXx8fIWgVkz9fG4km5jZToZpE/1uU69C+v/4IAQ/ldAUmFdoJzbLCQSauEt9oONbM+404WUCruvdwTty1zsUKQm52IgSxKEZVv/TXb0I+9kYM1+/+wwyR4+6o8rDcmRrNf4HFuP2vPd9ZiooFqwS6aqjwlep1/Mew9tUoHX4RCh3qJuJpk9BcVQ7jgsLZtBGGIT4+jGhq7GqkMB/sjSf4noJX87YVfPw10ohAqXAzTLkk08lJsBbufACajVLoot1Lq7nkJuWbS0CG/G6wozP/V9cKqbTMbIzrBqTUe1gVaV5+aBFpcnPLarZHZadSEBEjmMVE/XU8crHY/Km/E8nnPCvydpIGQPr3674deLeeWxnCYUPENqY6MXnPRyviOS6wVeDxFfbkA23dNU3f/wABUKZk10+dRAaq4VoW69GVetWxoazmNiLCKNDwAKuZtnYStxhPrIblfTMDCzsAsCnwtCkmKzLYcECQ+FOvcSx+yUm/vhaIfopjP4IBcoS30T8ewJJeaT9ruq2JAZsebrEs3JUU87wI26CM915nTYInrqBmIvJIgurEy65W+G7U4hWVt6EFYjir2I7iVmrRjSPOP8pyCWf5qwbWwbEFN9ZyNefmwFfayybAC0btD5BQYTDOAGz0dK5EeDJ0kUqSm4Uhz3yoK1K17dpKBR/xMdTE3Y7PuyiiQYL53rOwqqU77HECRVZ6ZthUCWA3TND2yVrgRwLcPIpyqOE/K791KVKKBiOIpKTSJtqNI3xLng4HCBPeHKOfVZ5dHLw5UxV72cyDeK8+61lX5HUFbX+bkXH8lFQDsQ8DygaGNWOSba9CWlUNd/pZ7pfskUHfSrz9Rvc+T4lz4x2UdMFLf6lQoUdKkMw1eZZm8SZ9OUG/WsnNdbekJCDRSJqY9G2w/HtmlF6CZM++UPOxk9DA1YdVidKvieTT/pwNmBSXi3jXOkG6pTIZ2rFPg8KI4GMxWQDRyhTHwNDYqftCRrW+lSH/CLPfjFzcG843WhWh9i9JfTooCll1iYs/sxnh9wZRod8uOBSosyeOJId9DE909jzSTkoNZXXhQXHh8EO5zz0fwlv0zmU5c9s3IS710etFqGQa+6kPZJG/j4ZInf8R+B58lgIc6+3pM9zBKPof0geQs79TfYDGg3uoN5OXeEZi8GH01ZW7n6Ix8cSHGDPN+c1tBZ7iNPPTW/6GviJvEuFPrAq7wAKc0ZMDTbJRzKKnaeKwk2aQeEMnKvU555ntRyooYdVs9T5qbli0dIrK79dcimSpzpayiZyB0J3nBHHgT7HkQZQG56d1KU9IpCC1UW663KMO3jMesnfroJql8iZUnvTvodgIybv7fXIEBapLS2E56S9UR4qdkp+lvBiswegjebfsssGyuaFamcvt6e6+sFmTSVuC6By7Ysy9cqdLefUOeX0tEVWqu80YUpM5hy9mbPD1WbUI2A508OVQHl7+ixxTLgLDFMAWoNQafiNZ+pzHy50bPqSuSpflY7EooIDy1e4bTiSZcnf9sU8UxBDZ0yakAlLcVjjCOEL7KPXsj9GaZk8NIDDQE4RgGZbLKsimPxyjnHisFHtqXOP9Pq0Eyi6UFTq1l1wnufFbgQ3tfscfN3z/A+FJIzlnTzPVfdVb7zgfwY/jqjoIFf1LVnwDuGGf2sAk/9M+/x3jij2ASATBP4s9f6Rvcyt1NzO5aDScuh80xWEWRPFPLIo2nRVgAyQbmH19HnsxOzWNxqPjLYr/z3a+TAGEXKR+51L1HTV7721Xsg07MjFgOMuxNNZ8V7j2iYgkAgN42rzNl4uf7vc6uMjRJ/m4jhFJNmC+CJ4it3t1PITqhf/p4vgA3/tRjaQ2SUuJcfaj7CiFdkraj32mU5yV00XUf0zz4XKgkrJG6GGb0l/0fUnpwieMq/kIDHJR+ugd5CI9nBBgjhHKZKsf6JQRuy2Rnr4KfcD2iaqjWCd0WMS6QWXbecTZgOQAFvUh+15u4L8DQIz55FwwwPRtj2ci35Uxp6e8KSK1uZDQSyBtQrJ2LHOaGgXbTYH+umpfQ14dah4CrLvthDGeurcZNPPMXMvTsKr+D9fWep0lvIQqCSDN7u3FdxizP1srzX0xf5F/9x+M8WkEJfE3fCC5j8YymhYTIfs+6TlQBUosoNwPB9CVF7j/8wR1zgSqsT499U1eonW5qh3PQ1tF7mnHWeyz9ZqXZ6UGwFsKZzaG17ey2O/yyAZJU4e1Ukn+Ge2Xv6yiq7U7ZxvI5AGPZQ0OKAWYaxrSS6mYjgJahTSl3lF52Zu1yQje3wKgqhKHv1zefo3eFbjV2GaZXAhK2T7bB0nbJov9KV/QjeIBPfkce65eBDDlxlvBzP8wgC5Y1hIYJNDTM5ZZuG7gxmjgqGUxs7CDw4YxikpYlLvy7JYFDulI9K7duw3Dpb5sp+XINfZiHgaWo06YkMSyT3ut04NSPbC8RPQg83qBpJ/3FCDP2HwhOc74GDRsgozt3g2I+FFsT0Dv5+LAgrqRIszVlp7LAwrqLVeE+3/CqMEsT4G/yUyxF62ceb13a5JPNpbX0vNKXHKTCJ2ikfj75Ig9jEFiZY/VNDoWfcJHc2fDnw4rw00y+x0IiFGo43ovhM5uV76lRymPwKRQvFaVLWmMzhi38eek68ttHTc37iniIiDqpzujzEoab6nG0wTIBOXyzRzXGY9fQvDRdykt2ANp62ZGsuF++7iESSke6FC51BWHwpPqbW6oh8dfvVPe2r9lX76XLyvli2BAsUP49/ZQ6kRJGN0g5AGz4z0EoPI3Tojm3b7mWl1K7wA/In27YL/ySV8SC8GMYn6nVKIXYOLZSjy8mdf5dZTRZmT+Ibsp4BZWqjpBrABMvLIKGVOMMhrLH2fP+URJqaLY2khOBxBXmpfbzDUm63FHeelehYTlsceIYu5qrvv5WhZ1aTcTY9PfnphbAEbnfStSEXq9I7tB3UBo4QM9v0MXjL2v1vc2xOBTHiCkOhCWxW/QKqP1/HGA9PiVNIlr23sNF3ZH4Vqepw/yaXqaKaf4KbvPo+vCQyFfufnvprHUD+w2DgJLRzY9FwxJuBh4JDT6Wx1zn/bhNLtBDHccmbntMy4mjRhfKxtEF/QscRrXDBTY6Xd3Y5FvenL4fpfdTB6OjrXvBsi5L2JWpX6m82PdtgU1uEBXNXMIUhmHhrMTvDaauG/rCX732TsXwh2wVmPoSTOK8gA/7Yw96ubqdCGwg9aanzGKA7OonuzcBD2P/38zrcaREifife0+RhiJMVkwURXRNRWb15eOx/7ijkUJoJTLj3kZ8SrgLi0T6WUpgQ1wFGPerXhrfbAbjNvzaZuLQax1fADlLLvr8NxGRcd05rFzC2DdtQeb8T4tSywoCD71FvDMPIAPOr+Wj+23KcjXPar8BxoESqAXPAbTnBfIS6QAFcanUDU8T0Fc/3dmEwfxt1gembDo5VNmFmX7CP8oZheYadQk0oDm5pfJphZa1bgpElsd7l+yQIAzvFm26Xjj0l/2QNfSIIqp3blWObcdxgyL5pO0jYCb/SOfaN+Y1CXEpUswfJrgSm4ejChwZeLtDTylPAb2xJJ3qjBDtrc9rvTGAXVJwbh4kdmlouVeaScMnukoGnv7o1c/Gk7X3BakfmdMIiapRJmorgoXVfzPcRAzRQoSDdudZ75XIf7/kKqHwHEdneptSB2yg+OsBRWwc1Te4D9Je7JTVyVP7Xr04m7S91FRawUP2xXyr9eTOA+tNXSBXSpTE71Mutz72CptkWgZlXxKQFhbErcTbFA14tCwT+XsfWNFRpi1bgvMiYo3JQqj/R252l0nu1hmVA1WQQaRFk9EKJyetWwrkTdwczxPE5xFFbvse1RIHu+PTrp7wWwl8GkckFzF0Fs5a9CX3Q9z//bIVchQbkC6fbw1o2sBlWizCNuu1it+NwHD0m5xGeKRXebOGQ+VfqwmxUw7AlMUus6Ngb92ins6yL4ziBNqfbk5aSQuCJ0Pr57eM4i89O7CQcWhT1CsWEnMtGJePADfyzElaFy7Z0x8FdgVu4gx2L7FukY/ufaliFPH9i89G3XO17ngFTdawmO2tRJ6pAlMwbMW5ZXH2cznJAQOBLVdvt0ngBLHSF818j6qUu6my3FUVMyvE1CQ6cDmxzeYiocezWrT/gj3ofCj2M6QF+Q7aOvPA6Wi3VKo9GbAJLiLSPhOaaOCl/KVmzrSzKMQT+TUM+trBN4Zm0t5XHkN34wUC9IOhB97Vdx9ugzFXfms6r/n2ywHJqqikT626diE+05ctBDaXldUFQeDASO2s4WnxvmBHXcM/ihDlg7DeQCYaegkpBPL/fOkoal6zUVpnKNKzq1fjhX0/7zUuqDBxvgb+6YRgFsHS98ywa8Rq85mFwPLe+OdGf5IC+FTao1AnBNuoMJcKKGDCuy3afLveIh9V923nGToSSauJt5CVsRenRzwkUWYrnuQmSNB2l+ObsKutX7PWFZFMGx1EJ7bTBYyw4gILGD0lgVuvRYgZokEGlyxBLbGiElhm7GRCu5YYL9tM7B4Mhm9m27EmoMg8jO8CjtXfhzwueCikI5A2nxO0R5iIp/2zxrRA3nwwjRDs3ZTEXWhy2BB/ys3k8N3DAqvyHqFGMi3USXhBmBpZTMtofqd6Qh8ondIk5Ktfc9DnflU5FyzXMkdm6M48IE4c6TyDr2yzNEeYBu2/MBnJV8iqRD0VxLZtZow8ywBn/d5ThqPrrpZFbdUzPPZbp937CeFbRtRNDkvgL9EA9IJPu7KoArbIjQcgt7UVgBTM1j0qHardNeDSx3u+O1n6LY8IYrE5BLyU58ongdrOHFMx91hBKy1Vjw5LhnhYGMaIJ5eNGX4tnfvXuLrIk3pZlnXeo6aRrL/sfhnjgit/G02lxnmVIhKAkEjsk5VqAcAW8+UtzGj/enm0ZSHUlZSbMoczDS4dtMH+A22bcJgg9aTuAazis/sFqaPYH3ZonGl6tiuP0zostKMdhwkSnQP/8f6cqwfj1iDyt9hSDvh7I6xJPyMaWu7e0fr2R5fZJMinKd1zL4vsLVUlEJ3lH1SmfLSjbLn6DqOur0d0RhzfGbs+G+B+StNidWW5IA+K9TTHJ5BPGm6cxuqXtuOhlHgl36/MbXHm5C1IBxKm5tDLNuxscaEz8/5riwNN9giBRIjLE74Zqq5F7bpLUmKUS1qE6QWYZu/vduwqDs4SsM83NGZw0A2hYHrOs1NlCVA7oI6QPRxQ43eibZz2nw7o7axteq9KJE0J4n752OGTOYgijsqlx6dcEyk+xc9T2rCyKCWsE0J7KWfEPIn/a++i6GPGBXm2sxQcvRsmqNdJp6zNitfiISDUE1nSZlOgO6AdJnKwzC3NooSzREvHQWA4XqoMKggXEsLD0C0DX5+Xx4zzJ0j7X94wEfEKyjhKyvaQa+4N9sVEGaTd7GDtHwDxekFq4pGWbRqm2pX6xGfkETEV8692jlTuTLgB77+rHvNvcoDOnQeKSX/NmOZznQu/i37z5v0zunRs08Xcy1DcbWiLa5GdNlqAd7MYJWcyV6foDPYSI1eOdEt0SZ6QexESQtdlDcD7+JdWawzhyhrsmTiVDLCtPjbANFoI13e3jyuW4FgjOgbrVHX+aBb2u1fTIsaKY+4qwvrf2677uJkqduGdMrmLfjVLlm0RqN4mDIUXgjalEUehFydcexyCYEDFst+0ELhEJLUBSQ9PDPBO9jHSBVNJtR20GwitWPzgNgLiO0VZqvhSWarpMZJuYFNPYlFfFYLPYYvM5xKWADKJEIiMtS/tA63KJaQnmVd9y1miOJrplysenGJlNYrpjLhvDO3qhANY7ZDqc+uq8liCTUhWVHnD/z0hfmEtrq6N0dgRvrCjGYWP9povG5LRURb0uWHfEomiOUrqboK8YKZiRHKl9Gj2hvHin5v+qu2OTp22JDKG77NbreUZ5Q+0Wi/NHkzMNuNgbpqvJJn3SDvxTjhWZN/XIYGK+XvSgucEwmiiwz0vv7o1r5vRl0XIlJLasmN00RZ0DX+cI6/Kl+a8FHLZof8J49qcv1Hc1Low3f9uZ7SaQR71+h+VV+eWuwd+zbe811buDquF6TSXQ3O169JJf8CFpzcwpKxjiF/4+pOatbrs4DIFSbo69iasSD51PX9tJ/0rq17mfkzkLSYbstHYX9YkDpc2gEgp80W8r9CUuY2NnWPgLLET3AQk3RD8v1XFj8c5A6sM/hi7yBTE5pEjFHO9XEtQ+YaCxIklgpDLKTO31qx4K7TSYRFABKroDyNpI1VgvzBOukkUPAU8sqnPhUne1kfLAu9v5TZTIPyiYD1WGUuTuOJ+p71CLsxo6clTyYv7PmTYBM9MS8XXlmTeDRtkiMFjCSdh67RofZOEBm/hsD2O9nQT2xbtqUe+hjX+YDBpi/EtC+AnA6nnCwOR1RKbXF419ykFgxHrHKYAsnjfqXyZstiI4DlbROIPnt8JIMAg6DlapVCY1Dl4EOOJbsZinwQDtfjZKl1PMiTGVDQ2tuGnifMK5M3G70Kj1QsUwY1nuiPY0GyJEiSHly4le4YvxxIfJBw0puy44ecPwHH1ivDu1InxadiFS1leVqemzkWzgAeWFMLwNX2LFaBQY8B4f8sSsQ+XMMY+j+AdP/69e5YEXy4Xtf7hyxQOsgfrVHgUIpv4ZkKu48YajaYrIOC46KbE69BRa6vAvP4gvvGSdWXsFjkFzvJELGJUqkZdijO0VMp0m82nJ8piCVTtIELuV8ULDl0xZPfcWgfqeaSxC05nvVhfqubVsmnGI8M19jafFoYoUG1aWA1AP33QrNL7j/T2va1iC2mjlooL4LC3D5IR/LTC0OtmduZZ4r8RdMkjivGaNXRnZwemu/GcrfUnINH/mIIelThG2hjgPHUe4iou2nJxOa3r4XoS2X/EpcGDy/mQRrhElf5fFtqM9Wa7Qp4TJNd7LiBIxLU6zWLtYhxaEsr9jc/cDARJoTl/bxj24C47dc3EE1hjfZSgf5k70NM79BcTVYBgD0uTsTB/gX3VcT4xSSYMyt0wY/PYau3w9KO36jcxyvFBVmKizONJ2lah+PfoI1X4EpDuQWdqO2okvHtzW9+j6cS9S3uuhqU00kA4XAyA7qeX55YjREasCSqvoD1xKz+WLPgv4I5iaCRIEGo3fg7/CTha+z9WjNpqUXvokqxknCsYbIpu1H/gA9zx+6wfEhhvCquHhvUqlvx64QdiOjmXqpBogLcBMbwHkOuh9UETURHY4C4RCDTu1nzfDXKnZGBZ1jte0QIblUN7azM3TLyxLPUf0wKxyIxwgITs/S/WTxEUx3PFOC4+0f7K2gphDY6BdlbnG5aAKMgE4FZF40t1N4yt7zGIAOEpru4wdjaTKMi/BO9vnOQi9PUDkVkn6BjQ2Foh1D9/zetRYNZbT0alHwF9VXXU+1CQzww6GcI/DrcqFWwEuQDdqSnaXn9C8HD9fylxdfSaa1ZDf2C8zbqv+SEXLx8eux2NQgXkAjh/xYPw2nJv66RmYXWBpWCUiqAE3OVcbP0XUoxyWAc2UpZ9A72KiKE/kdbBEcXZIXf2gw8CrmKycq6Xo2Z8wb/IF/KzWAB14FIdBXy04tnaSs1UFh3TorSfqkTtHpvP08u5ON3az2ujyNFZyw+4oQ3M5pdqo0jow22kkcYO0gI60KdXeprHdPAfKiDIYuCh8U5wc88O0OVpJyscYvxfCM5dgSvaJWb3igVULsw6rxx5vZb4oC6obf0oB68kR9AV7YzMkojWDPO10SRsTwWvpp+CURC1aZOYgIHCuADeILavuOyNlD2SnBxJNXd65vrge72N5+oWPy6K806IejFOGO/JkJSrSUP+dFPiAbzHK6TluZARdua+N/BUsH63WEFTOMrkw0TyYONIApefxkv3PdV3Hgbsb43N4leKxtby8FWJZd6wtGzGtfPTp4HMHSyKd9oioniu7ytK/1e4zufWxxJ1N0n4EgDO+3Tc3FNU9aO/mR7Hbg+xckQjv5OH6+ZJexOqNCzhq/7tmsWV6/bxCcKkUpIu8lxihgWlYcXXb8XVU9tCFghEZQTbczM3MAOkKZX1wFFVdDTNUKyUgOb68YPQurgotXm1b41krVjflwkx/ksXAQ+cUBkoROqEYl6zmS9aoMNW2n+bL+uWfb6uefa/HmZVsNnf0MBeeoBXSNL79LAB4DTf/tiDQKXOLMi7nPdMwVfrgR0GTrHWOTey7cOpmX3rU3kLbR9zhYZQUVMsIyEDAU5yllqqW2h142TDD+rVvHBzjM2xQTxueTHdPuRTAi2JhYazaeBDPzZpvGNvgfWgc4c+6yoLeS8z8i5C/RmNAduajX53IiwBh8cMUV8t4fDaINuo/RWrt9w00dG+otJgd+56cUb6uC6MkHp1Oa8xOpLJ2mOdBTfqJdB4wT/9qMJYTLS+iwecnxkioAtotaIFgpR5/WM273yAEXyxoi907kmap30y7Khk45aPqFpBw/8DwGE33sY+Qg+fZAd7HxkGwmggQRz3OFCyz/P63mszHuFn7Zp3VxfGeKYDH9vRmFvYFAosFBxSj4uphiLoLlZPOmAvSX1trPXcWsBZQYfko9HFNbfii5CJtjKSxDg77MXCM2aLwcHmWPGQkfWhoVwRaSdZrHL8g8jOgwwcmSLN2iFlL8CIQxHrC9U6gx10tm8C6bg7JCnUT18Fe7hfB9JvadcDKwTVIGsZToQdCDNsvpyABHEsQ/yxo6WOWCMEEsohd1nQMDkSXjkAnrCRv9xDMbDZEtXG2kO3CB15QKC8fpjPHFPC0SlGsQRC0UFNi68KcKvlfchUh91oYHwTwox2ujR4fQYxLhnjHDaY8MjyfK7vmKiMGcg/KGIiXUPruoMZQMX88Yt4zT1+7b8NzBX5Jl0crz82JEXTMmv1Y0hQeXnl0bqqa3CC/XEbKOfhUvR9bciSqLAhZdd8KuTkYvZfX9qaJFt2B7uwWKk6CwPElv6RBiYqTNk2NjZPTqw8fgMDfMeIMslMKdCz7ItqXqYWw9ir9QQHnoxT+gTFnbw1eU4JHKW2mFRde69S8btNXRwkc7Pbxv/Q5/e4VyYNr+y7JVx86X2lr5+0EFik6ia9dmYmfiZj2Qsex0o+IvyiHauEFaMpUlGz7gcrcAYOBdthlUnIWzbvV6RqTRv75o9XM8HUKwRiMjbKbCeKu8L+u5BP2CEA2aZcDQUEiVIaRFtLUv9p5uFzYPE7rysZhjYaFSv5IQCbpqdQBfeEw7K7aB+j9gktIABW6dY3XXHg3uC4DwFkO2PAb+uS/EJbR0Ea9J1pbGeudkywtrWBIZqEiosD3Z67Xojr4rJk9BvF+ed0LhnRRFYjWePDWCUjHAUPwOwbVmnuCfo56M3pf4Il+8X9ksSUis3AuBF7DdTNeNEdzYkEdJQcC6Ae3RoqJnCBtMHTJs+qQcApQxWl3DRIusao7jnKqQXVvVUCUk/MZf4ZBIMSvQGmcNoCszg9wuN8G9BAcgCKuE5BLaDhvc6KeuuEpXAabnXVM5bw9eqbGQORC+ZvkRUwKmkNNvswNCv7xkHKuiwPnNa1C8G2mq4RpXlmAeDfItcCdBwDRjGbEx/w7iX9gsj6iicp1BN2d9huv9fFokO2YwEHBYUshJ03JF9qzX8HUsc1a9tBFvd4QYTqHnVZu5IJiOOidzdccOcngcnFFPa5qJYBaRxUgTUs8ZA0s7ucsxmmA4bMxfk6DVWLNFT48kO5SqIjYmMWbcISgXosexFeSZ2aFSbQ8St/u5sBym+ywVn7YEPXj1t8vA3J1CvTH8xZYintyzZpzNtSyQxq1zIuM0qxPmMeWoTYaKSb7fV1yFVL25pkDX02ll7s3vYMSrFRFPsCYtsHunnDHPvk8THOP8YVbZFA39QQt1rgL/yitwg3nqE1Hj4hgYEQEDyl0YMENNo6OTBlGDzsTbwCWR8DSzMPWrBDdrzyKCtOzOWHSkR4fDQnPa4vnqZbA2HzEPQgjyUAvQmzXpaUpkv2AlnvEJL8i8xH2v72L2R5OANlwufLcYULKM2J/d3Hg6mf8A/SHaiJJCKs3SiM0w9fbJ5RXDAPnV4K21VsUIijx3tvWx7+IARBAevjGC8fHN9ZBSpHKo3X/JA8BY8HXWVlYfqSDmFKOgvAikdCnQZQT7x6lbSakZjIyEm9m7CLCzmzN4+u9MniG2ij/0l6gsN4aHNzkIZJ99u+ePgJByBuUxK43yitH5OfD20TLWVqeVW17TxMxt+P/21TJtcnFlUKKO96bCG4vl1/Y+a+KoRaAVCJZxUg1pXe3CNIj5I0P1Hncrmub52KG0pSyQQmwhuk8pBQudCFgr0pOV6AINoy/i2vbRxaIbU/LNLX9D06Fm6pqj68iCKWdT1rNUuGJ3TIhTCpqjncJIiEuLLy4w7vmAcms50mAKqEKcuuLgvOiXQUvaczUumexb6HvTLPhFZVY6hsvT654PYwYlDIK5fK817gjUJMwur5nPwvgEnIB/gcINd5DcKpihghrvE2ZJ2vcgbpF2N/jINf/fcgltVhqZ0rLxBj+eNt5awoukUjFPKR3Oy8chzwtebGKeJ60XL0NT69yb0ZJ/crQN0XFQ2oH5HvPm196WYW9HxDq7wPdq3Ng6fFeBx83aloWAcBVabi5XUTp/LB4UUsoufNc9DLW6a4BMuQZ9G9aVP6CEpy5seQ9PbarZZlkaRiRm/fYuffu+SsOMsCCNL5IxapjzuF/DZ4b7djmnpBkHDB2soLBKhcJm9+bHR8guNlcUVxi1WMnt+fFWHJ9IOBM4w2pcyyM+H7h/qfnVqxAEepBz8Wlaea27xvP2jkk7/6Wvi98MmFod6KzLG/GiyZk7N/d/2XwYyF7DrPCtstT48JpYhuwI7cQqNByb6e6XcaWLk7S5buYU2u9eMdJIelRhNI452vA6YRdO8vy5tgbyuDYYVsjr6ucMRZQJ4umbhY9pNkxVbaO5RA/O3vaHnA7SPaQFLPaW58t8DVft/VhEdNKlQYWPcvT7bszR7WrKQ+KL/fEph0x+6SzK+sglSgiooBZ/pAPxwL7s5PafN264kS/g3wpsvR5nSXpmkLZpC36keGcqEpH0rPgUZ731I+mlMphu1OJKz6BupEZdtQJKio0DBOjJ7iX+IsH07aVTlVKdNB7WnxnBZqo5V7KibQsU9dmaFJ/D82OFCFupidvsj0wVdLmt/k0Zkz63FAJl1deix09321xkErXYg6Q8U1qWjkPDPoTJG4NfgWEXgs/u89CrOuj8Wr9tS0OLooWhlC62hA+XsePpF5QFnL76mxSaH5mCR2TX9PCIDX6R1dPmwzAQ7wAJTQZUKGbvTYugy+NoBtNbU+2RXQrh+KQWlDmeNp6qaYWlYtO29tvMBtMnGQ9BTrf6NgGjQ/bsob2w+7Sb2kzyLzLH+PPd13n+TNg1a9ZQ8QcqmmjpKMFSOMOX5KWM15YEDLEUlDh9TNk+s4f2bXq1cDnmDnTc2i4NxMNYCHymPChkgKHw5QZs/DpGFq0E20lqin+X6MlddYcOFfLuAIqCTIgam49J/akutsu16QS1glwQtCVeuHfnwVJOzlKxPVQv8s99csR1rHWF9Pc/kIeDV5OKFAQWwGTT1iq+wRsHDu1FZTThnnWNVTdqsxgZbzj/jp9BhKWSuXV6CBHedGbt8yqsuZsa5Nk5l4EIzckdHPd24zRhSPIlwKndsmW1GoCDQDaNQpy7+RTjuN2XHB0Ggs2JYloAVMGG+8BjDRHY6ig2D8QYXDZqlnUPBmYp8lywYn8zcGHEVyk2AlXsSIRvJ1XxZbrM/goK0r+XiKj97raYzY3x+HiauSq6DaF1+V+c/1S3PoYzWvKIm8+YflWloNn9A1vky7lL3JlwzUauR/Bn1r6lTQRkj15luoOSUaxwTSipBO4r2jc5mcx+fJLJMGw8rXAhXtvw0N91pHpJ8EnkoIq96Y7IGBEeY7X/9R6nZ95iGC9oVckUz915rlwGe9x0MHWJQ1xoWu1vh7n0mPixrN35P0wm4mf7oNcCVoE+QgF4a5YDV2rvNeH1pCrd6ucSRPzCPB+tnolxiz00vGXWaYleUiPA8KW3a8b3sCicvBqC88F2KWOx3PZqujnW1hQpK6Hag8VYqJkII+4jJcVbFZQWRaZjRuCHeHu3UgggOYF6JcXD9PI2tHaArULebfkR3MBcWS9nQk2e6dmV24feFCMOYPcK6XZPHs0BBwCYKaJoK23gALle4zZuYMlYeCedftIfNkFFmOAFVebN9nkOOWFvn81JJ096v6gNf8Zb9SKQ2400L01OKfNW1yj1o+N/3AfCzMPsDBJqKqcX3i4YkogAsU2qV+4FoGpeSByypNeBgpGbkQb6kO+eByrywGweD6bsmqxUqU5ukJ/GtyDR7+0H0j73xCrT2+7xrA3KZLP+lJynKlQWDpUZ80yVLxZR7pYwxV7s78VdpHjOafEIvJ3LNTQWKHhW5TeD2FRz4eFvbzizQ5MR9x0OO86JZyiKzY/oGkY/HD5SzXTeyi1l/FO5Wu+WV0h0yoVUx9T0dSFVGCe4lTAFjrTUO5sGP6m6+BsP7cCb8ttfAVZP1LMpE/Hr0lJ3cRvFKoUfHclWF1sFbCiBb0clEvpOL4/Y79AXD0Y3UuEK1zZb86SB5AGdYgFlQrUoQTb+exC9k1xfRqJnt1lBEtnYmtHhBIeRp7HLBjVWIy0Ed93/1xDNW+to1+3ace9ea7m4NQ34YqVkaUutcOUiwPDSXx4U+CPYdsHBXzKaPzxAUyykaageo+3XriUABjLGm/HRe0G7/0ESqPt6bCiSH0A454S6iUkFinEZBV104udUGYiiwkc5mpIHc90Q2vHkTJv5n2yV8AaGHLbH5qPowsH/iqn5F68/AY7PIHs+w41m+UZYoUx1y/Oalptw6SVyh8ombll4eGK0x8N3qgkQkkE8RXHVTAUBA6d2ZIVwZk0BoJUtTib3qfcbJLvn5dTiFfOExMXvZvCpiMnIyHrquHLuNY+yVMnHa2a2jr3lIGoIazzZlhOpew2BwTcDsDtpS8qgXJehD3hk6Ce+XJ8Mom3NW5WG+70hvGZUhIUG6RBnMDw+0E58dgWr3krZPKrzl3/EKxNzhopp0rFGkms0f9VVFi3WgirzNJluKTKMdKngHhU2TdOJm37R5TrGgixfcuPDRrILDmcDhNrchIrEU5H0oJDNqmOqfbhmlfN1hn8ThQ39zkW02N6RwsvYmjqWt8TiEq/dloSj9tis9ZQl7J/K4zg+Uyu25vGuMmZKz6iC5f6dm00c9SObELw3W4pcmnjEVwKdqHF7aL8T9/dRPg9GYFkyOprbPOQZsqdGxOAbKkNaTgB7AWt42nrcB865EC586nZwYS/Ry+SlzZsvmg2E4uw3eUBYJvu2pxeXkg4CVVzGyVep5BOWi5D/NmKwet4Nt0v0VNeanK3WWImGDTSTOjgXW6lV5vyF+2zyDb7RsqPr+jwY8AmyVBlHvUIBvctiFZKVA20mBCTkWS0XAYpQuv7Hs0ZdHvqg96GNRR6StDeaFg9RMx0NmC3GxKwRZQsIWrXe/pQgEaOj7I6kQeDnfHBHGDOp7Qe3pQXqX24jIlh60YKhSau7cZ1pUbZfQQyp/UItq56tHcrWYM9NYr0tKta/czJWynMlVVSueE9F2gCUQCevAh8n02LBFq7LejshNkKHUPEJpX0FHwhkvixmaREaGhROMCyR3DBnctQQkPDG6FyDMsAwGq28lL2bLEoBm0o9gFpB82U+uz+TSkDOlSMlztiO6uMyHiKLnI684Y2JkrQcOt6gZbPx6/s0LnA3CZpYPQ4ULSUtvvnRzMhJ20w0HEu+i0QWdnwJj84Jxs04Jhxj9508lBy3J+cdn/FT4yo5VsI8OnQ9+EaTNT7b+sI/DqB8uO0M8uLCDrOCem949UMzyR/Wz4T3jUy3xlYCechuICaSg8xbW8Lh4I7kL4RUiEnPdnE4hmeX+1ccOzHvjyMn4nk+XVA/e5i0l7kyqNXEsG3thez9qIN6rT2Q3sKXnk0JJxx9kJ+pEJh+gvqR+eyyHQSDuTTxbjoaHm2NrsG/vT6sFS8udo2POAkVeDtO0S5wVtyOO8a8jyuUbVcjXREZu0MHYyORCDgJ+Aea1eD7duD4d6Gd2tkje/zmTElRFDxYhWEuLX8RC2Eb9ACryLxO2WECa6TOiblXTAqY0bOB2smppcyRSYgugUCrvOnn0tLwhjP9SlS2k005zL0B+30ql+PEtjvuFKsBQJgX1JA6KwOm2kzEsvKONMuALBg3FGvN8I+2BDIW3zxEL3AUh17ZMVmlULgliKWMQ+0hgzTs5+hZ+B1VeMY8wRYSbSwKFDiPoCVVguvad3tJHun24EavM/a6GUUpJXbJFe8FywgZO8n/uVmCF+RyRqjTWd7462+LVXPuqEnfEw3uF9lXpqTOJJsyZUxbgPHPkZgsG1YWTCCi0YC0ey6kS9u+AT8Q09EGODIXoBqcUhJL2yZI6KaKpCZQUdjwpxjKQwANThVAMmBlC1fkgWPhXYXpG+X/HD2EoDL4UB757aRhpc595tKpNrHzIUHNVmjw/+9rwqVpjUrvpE0gRScgnDw829l5Fie18Vlt+H1ns3lUxmJl0qpR5kE3fcf4M8nEzf+FqepzNfGkl4z+lRq0yESnsYmczyb2P4D6pO1YStHt4IMnCxd0iO7uuqZWLAyZPDptzwaCSV63RuCtUJkUQP4bP6jHiXf6HJ0OQUKiGLNojvj4YlIZ/4QViJnofi/WMmOoVegLBQYi91V+/rr7vFdbudS+gY28uLxYcLomLhbtOYGp6dUb0wQW8zsJTO7CzvEL4aUbm4TnppYk+qS4BFm/Qh61b54z88xuWPNOE386kgcdZqIozs3kUvHfLDNCLeysWTn0t/p8sKqTeTZaqorwz7wow+31tHzI8JgyCjbpA2reESy3nh3D8qpIhDy1J+//MnHn63hE5PYroo1pSnObK+IF3ElxFuSs9T1LJixaYkVqWDVzH3P8Q/5TuEwAb5ZIqPhUFBCPXE/5h3G/rrn26MkBwSv35rCYkJSeHy4A72rGCqnbpIyGLKK6RUKF3Lo2tVAMBR35SkInC3KvbG9AbRNoTaLDR21vemnhzXkrCSf2FJ2Y4z7QaTrGC0IvIffYa5OYNuCWpIpeOziht5eXCEJ2kgsMz3mrDfkYKtmefq7xyF1jsMUJtkK/ta46VelsaBvx+caNpGHoTnFczNtnt0TiZOn2SkzTYXC/hhQWtQKi4+JUI/f1CRRnCmijjbi5Zh/1OPEbtm08+6sHcaxC9C7Ny42PJF3K056A8mW9zHwnBPaMbJgobUXd9xkN/uwuZoSWCnFgpL5HaLBoJoL1eAL4TnUi+CciRsiZsezrICqB6TZ5U83RZIQ0UsNfVhL5NZekVuZmVV+MDpZpU581+rvk+1Mtggqwsrl9d0FPCgPTdDNd/NPQOj7QKcWGzFNtlAz/jMytQHM+oqaLeEjuLszflc4aN/pZw9Nbnu/LzqbcUOwvhuA51WKbn/wW/YUPghbwkPAR4xI5i924xs7I5vT1Lg4j82/7lPjYsW7N5cwyxYnByGH9wHNjMq4JfHGkwZeArDhUKVXVMF2BVAjVpNWT09zQOHhMpv+AKm2rODyOzrL77XZ34daFX60aMGkoOe8IeaRVM5vxXi3oGtDRiIba5UJSROuF7hI84CtMChAkE5darNhfzVcaVNosAgU3oORNBLJL98h51kXf2+f/NYmIMg4HDQwNVDTYfHfwO4BGLXa2R0KjS5IbuOWnW4Suyk8RitBqGlHmGD2PLPR7fKgvilnBygGP4qRTs7Ql2njociZBwk8XnprW+5+mZB182EVp5LldHziGYxQ4UVAgj1UsjYui4ilPJ8qpOQ99WKUpqAlz1h4WyRiRSUcRQ/64GtfqvDmYES4Hsojh4h6Lk0J3p9XXwkm0Zri7JNdBZwcdEgvgN9mlriO+KqoFxIWxX+bYz1no0PA22tV764LHId2ktRVGTN8/UGHDkj1yZz2O6hpm0ZcB5Yf+Jl29i6RpHvQ6YJ3kyQNceOhLsqWaCC9QjWTQ3vZpFb04bV7afgTy3ZcBVY8wAgVpUO7bKBbVsxutc/Q8Z4FuM+0+60UYKXNAM46wPSVA+0XfeCLgxtWJDfjUirlOD5XaUGK+701zBVZ01sKOL+FlJAk+zA8T3Hi3A7DE45qPKte0H8Pg1z1JkhDDwGVHNiMtIbdoAZCflq++ArLtSTLkQox7Xn4tURMCaDF3Gcu0B7/9AmstS7nRUwKxmbVUkew9WGriC/k5uu0xaTLGoSxrhJ9G6/smxn6GelKT6bvA8oEqxreObl8M8kjmWckt5caen76AljVh1KkbB6PJkJgGUX4R/dInFwNkO4g6keJapO6qPBSL5qfp+93LzDCXpvl2GSISWP8NeYBEcjYWKQH+y90Xvs/M/QjYk/uU3vXGbUOESR9QpFTKaNJ9BErCInXjMVSamzh9Mrd9Q4b1C2iAbZVX+TqSkIVqCgxcQoJDyl4P/cBqA7C9A9DZzkjsnLi+iejFuZIiyWZ0VcLRnekfndYl7wHmBASF5M2guQnMncAXSj7sAdWOGzzltgSRNqykHoOdMstfayB/+RjsQL6bszSDDmR5Me1/KYPLQb2iUZ4yB7+9sXhtNudTFDu/XBA5kGun63dxxShfBycPl36jrQcKp5EElTovX8dqJ8u7H8BEeVdu4d1mnKmMDvmFct5AKWzKuqdIqKPiLpuCi7shKL7VyMHvT+iA91ZPKYrulHOEQdvWhSj9L6P82DEKOUUSD+8QKUIVRgL233wbuyYu1WVP2jN80H/J8Vl5PCY2JBCBLWCpgm6S7QyvI9fucFjjCj5A5XuDiy9ZUVjf4UHfPzICXhlRrrDv0f2CV1R7zWe7R4k2wOXSthzNhK0UhAqsguav9+ZCd0QVS6R0B98N1Dq1pxSFLqFg7tst1v6wB92B3fkSjDUNVnSnPnNWJvLzg1teE+5VmQiDGtxsU/3XoyGP74sqpiIyxgNbP32ujPGpwtAopZJxlFMklQL0nTiN9vKJ4A0wCGpDDu+6FG5v3Gp62S9vTmeGdsxSdXitlEMqjzutJ2Ph+4yn4IKH3CDVd4Pz/A/PaEWOF/8AhJGrVbX9o+W/ak0JcKnsSH+qx7QVfX5f2DDa734rZKgA46YwpAYiy80e0mvW0W8rG39xxjdBtmSWvFxNKT17DbnayTo1cH9k0W/Nvs01JkOogtbS5/9AOxzp/g82ntQI2fx1qUSX4Sl0TAVFJIzjsX7f51vvRx0HQJMK16WucLBodXI/n9Dmt2cDKGgJexMWAKqwN1k8erY9K9EejYm7UeZmrfkw6RWtihceLJTqKNr0tgTololpOpPKgqtqH0N7O9dj2WHMgEpJ2/PiHTbl190/bIj2mlZ2xNLh48/wiWoLVTFblezOg8ZA4VQO1Nmdw6LP8xKxgN5p0N4yQCQa1pfslav3qiVtajvHmQJBrCGbLGiFw88lMHAkmMnb0IlHgHZ3YzC1f1nIPaJDhxcKtQawEHwekgSlkGWsmMQED3wD3u/KM0Oju2FQfoRZxehRSe+3ffFe0k5rxWlgz2xja6EDxSE9qVXt8YfqEDATSx/k52b8rL6utxVjBUMMf0VmVrCJqcMXJqLmvZjiT3HNsgjnAiHZei5bvYrTOi66jVmXdqKvVAmke6hhzhj4sdIAaxCkQk3Rtsos8n95YKbDym/ZZ13RHT2l33jzhzh5u3dXBjoodpoV1dLUU6FDRuJPrmHDhZg3KTgACVfmtjwlP9IJo6GHI61lKqMtAQdjA8ZtFnqsP8+SLavnShD8kvav9imm1QKmi+sJqb0n3WuNgUuufrPZ4SvJ049iKTpHqi++MX5YZlMW154i0p6QksGFbIg82e7753PR1GZsNnRrPlT7f+N20SDwJtNmVUu91QkJkjoIb3Z5I1L7YRAhnGMN0puboHXo7kyjrzdh4L/Zgv5w18jie0Thvo3GJtdo/DYkTUPyQuXNHcW7pVFoCoJjgP5suZlcl0gS/2h3jON5acnK6wNJVFlH99DjDdgycAC5jAXSIhlFDuNp5ilGRHxdxFZ9DcFnZ3+puDgvTaJr5CPSf9QpkyAxmmOwZI3dKtmasxMM6YcEiMH3qjGo3BYFUKf9xZoltKg3FBkM/YlQleQ6eCTNzUWdMBI/yEF8kpk1P+VpydbqaulUFzO6FOPFG4U+/Y88fnXDq/581QIFUhQ/lAnbKUPvoFUkTyY+/5UZvjyRTZtcC8cA6RQDcY0rxvVSCcdm8nMKjzqLX0QNlB1cfqNmMDsL0jBKZjLJUz0Ums3N8HStWIL8D/V+xqMVxjQ0rCo+aYIj89D1nILhV8nlvmGU8AIzX2LBlhI42+43PgKEgjm7xZwsZXmHgxApuFzYJquhXySCwOgGQNaSfhSyrvGqx/cESpb+p/C1bgDEu+DSneY04IONAXdkcdcV37KIopn97cv1AYiu1kvrq1jnevMjH12i/JaYX2RYE7dOYYRJzKuS3ElqUM1MP0+GUNSOj1nrUX7UN0H/I2jJqSMLqYdVWYLlLc+aUzmMjdoGvgAsYCmUw5e/3vQVPqQLDgarXar8tTl8nX6c4KJvxMFVCMxLlHoL0Awa8inL8wpFZv15b/0P53Nr75pORq0cI2HFs26XuxeptLUVyuqwdca8/CNXoLIIJ6mK00l3mN2UauQ2Msfe0N84o4L0yEixBNhtQ4FnNaxpYn0nTlA7aRZkr6nrR7qCfivcNtSCXfmERnaKzAhjqm71MxNGcQO/cKF2WqBp0sOYJEYiwQToesU30d06fm0MczDOK4MnoUtsY92vrbJmVal1pYI0ahhEVpRDhZHR3DcIl0AoNWJJvjqdjT8oQdLyrhVVQBL7wwalLZ18KqC1pdmVMqeW4K7rPk9ZYaEUZvHxxyQMG09sVaivbPTIHsYVw+y3RFmffyMUyelb9GFAtkPdang77TyPnzl3WXVDv0ABzfWHC4DmVlo896hh58MkGJ/ZUurVR5LBim9uyqZSRSxXy4vlsU+cnc7eBMz9H6vzbgTDXfDPhft9uIa0ECMxNHPG/hrDz1RECO5ysCWT8BYBTelgHnPX5ta9nv7jQJgLn9jQJ+wBeKmJrMtjLtUanJkWZsShuQY8UxlNqFxOdsmc//eUcPWThal5YPDY9HaUTa4XXonm+KdxR8hGC2IZpKCTJhR2qgqF7H/kT2BDy55jronmxOU+w5bSARwUjQO+fKa8knKBZiamUTKysTk19YyZ9SUfF2xacv9wvqdKdO1wyL4ySEqb/0T4ahBwF1ugIOGEXWXgselMvPSe3foXuBpQNS28vNuXnD2mmRWN1EIfh+jkFRa4WmvmqTLhYuW4YdA3RduGwe8tD6/Uau1sPZwFo0O6PzY7wo0SFaX9YxsICcTuZOkLV+fgs57WhkRzJte5aOn8sQX+NMYOt5LzlKD9DcsmyBJc6gLHBooFiXC33eczgpGINvxYP8TVOfO4YSettn0zfd/teaViBDt2x3dG2JQgzNS/YMJIH98eTSV4to/fwitcGRKlNpWKCmGxwgZUOPxhsYA8M0dBOVULIvKhquzIiKIyScdIBdfP++x2qTck6uwOaDfKz8S7NMLNEvBT3qHqfzQY6Mj5ydUlDLZRS9RKSg+xm1a9L4cwvGI1oB8Z8PtHrvdZI5oUq18JZjD6rTBDtYVGwwT8uexjGbE3iNFLZafTw+WpYEPtFm07AAjITgzKVXoxYHkcdunCpzDfvkbjXbO2Vgej4G3vA+Cq0QsOoz4F6fPvB9dLz6tMfyOSclWEzl2DwY0I4j8ZZ+2i3LQsz0zNAiSl0FNmEOx7AGgz02V4NoayD2XjGD2I+aUvT+bKPkdlXVsrdmEaHJkJNVBTg57JMO60QcU4Ae2h0D3INczypu7CBczX60COglnuilQ98vZDF7UzsNAZvJ775EcH8ET7TY4l6EQ0J8PsYqwA/b3qBXY+unxwcJCo77A3Q6cY667Kb++ZybiQpfJTSo32cCQJWM0q7EJm5+lbKXAP6kZjq9L80fHejkknN+7/9pB9TZpj+Jr2T6zYu1D+LfhOHXIrJ6A1tceXBRWE4juw6rcSVVdpiWpIPse/XnYqeoCPmhUvhNDCo7y5PMtNNmVaELqLf6g7jHfjQ/4ioS991d5lC+mLEJSk4xojDXg15Iw+AS5ZZyFJPVDNRUmRlPA4CkYJoRQaILQcdVgAjn5lSXcQTb3eF/+m4vtZ2puZCV+EFLNNzwQGbLxLXzKGSDQxBinTAKLYZtsIBWRszzkxSVMNRoR8DPQpaKvl+SRa8xEXlnQ6WSv0J4jgdku2wk6K8ufJx44C589aW5RtAnLb2kLT4IXViuaT8tosRu76n2Bem4kKnrefi/naxlMrvaJQMDsVtprMXDBGOs5G5a02ClpAOfo+3XwnNfTIEODxlpCuZ21yIV+e7OFr5FlSkL4cdIfSBF9WWwPmzJ18d3QNjFUUIIvGIM0mtsFqUh28YimpxB/rt1JIjx5bBMgJ/I/wFjG7iAWkvUpDRaKYCKFkyrNgvqmf5kNfcMqwVgA2gB18oL5iGaTU3UA5nugR/WqWgtkLOPXRG2vpwtwrzwadoNKLqqRTa6Ds//Zc7+5EkccOnY1AVOQTaE+HoLjHAnfa4rzYB7lL0Y8Ot3t1WPvk3mf6VBp/8TTfH/dR4WVv7OsecJYDWqnTOsq77NSC6g5mFd1fYUdyz4pWvPjvX+nWaS5xWtHlpRbm0j+tL5I4CwbrRFkuUJkxXuxDDbsf0HShfJleXffz8q+s+UhujgATpXFRgh0A0gkNKPuhXgO95+soJh3iHyIKR5SIlYTLewdoe29zCLzjhVnTQG4H8TBwkTM5fjOro6EksITA/orreSNHb94rJM3g6F4oVbvngCUI53ZWqk6KPst9Cs2mrTU4/cAxrnK4Gp6ubnR2D38mJFO3eWliSg41WTUyv/fNGPEJIr9/FEFWAOXLvhrufhAUYWFMAFtqcoiaejA3du3nLSpqLlVHKiirremA4eT8LS8pavPoagSS+wMXqdELn5yqGvxjEJwwFaE93f11fJaGaYoSrWKChDeZkIjQHWFd5rVboor0Q+rXhtwEQP2hGrlO5fy5SMh1vRQ2mxy/cKXB4f+u1//u/I+UHg28wcTuggS6wE+gmIRUHM36k0WH1l3uBLy9qHrRlZtEv/XRBRZvlp0qi2succ+NJqi3eB6Bupbn4ZYe6lZjL8caGmTgdXLE/VN9xC9CqE0m2Ve6OYoRz4pYsRh1pYQ4EJzsst2rulsCmWdpr687dSg1btqyuiTx2OoheM4u+RjBNKDLPrf97kgccPo5OXN8WHn6u5IeKAPPOxY0Ah6JwEtSc8itcySuwtikvp+jyLWuaKzADVDjPgyFZn17IVKJESKMneFDFVwqkFC23INJK8bNjjx+1IIiL/Mc3sHjbEE30jkWzsvwN8p01IaCeOd4mhJKtmCr0thr15GyR07WIAJF/D28x68WF7F8ZQVD6kD3tuN2EdEwxB8szrsOvRn2PQKmIwcoiMyV3W4Wj2Z94+cF9yHFg4WuE2c97AoKT84tqDLrY/WKBd5MFLyrYxF+Xsq1C72gQm6uey2mdQoCM5yM80JlQ34ji8kcnbe73xOFO8lMth+RgvNmM3B82rAA3ckP3MkSUxZQV2bo5S1zPS82h3z2p+GLy0/Gls0OtYsT+VNlGYeTqbzeP6VGZ3CpWGuT38J/IRgaqWF/3Pe9jwodxu9gfLnkIHMCUN3VhseCmCxT/e227CXAGZJKVR0UBV6zpWpyirmdkj6PCpJLEMD0WTFuCWvr6mAxV0lERlNsA8ddAn2sldyBCs0wBew48Deok1m3i3z/vrSCT8J/f45WnVb1T3gRwAjtkZM+cG1cmlQtAT1ZhoDWZcIJMdV6HETm0rhzKLxzvI+SPnEBUb/mF+1cfWRzrZEh1+5us0ipPi8BbWXoKw24v9EIxZkQLN1yW2hhdHU2ns1qfnO3UTZ92wSXHYWr6Pw7fRY5re9RKLTJfeCE7F+5+KS+6uhgI2CLq8NHb7GxOLwbtEyN/uqS3p5giWg2Dt49crEtXnRNnQQeS4ww8dTm5qzVXTnTLetAmB7Q7KYmjTF9LkzQssaE03+Cw5es5Q1Q1qJOUN3DfBw5rx+kewJSrRnP0oBJiHEBJ9J671xI2ejktRv7QMITiVK60Lgn3tfEPTCQsBK5RsJIRhBldh6aboYPK1wRMzAsHperMM4yejxlOYJjr91dLGPUz3RqxHSCaIQ66h+TLDw1O2FwTgfcirFsV70v7MXaN4JGmFaeSbNu4l1DMOtfTRzIIaFUXcEc2XvS29BHxxh+FnZvTwPjaoXv3XW/qf8/l6CqzUwqBolENQvqoFjlIu9rCU56IPv02pFln7YJNqxFt3Nvtwm3nsquOQbWsVlgB/RgPIbhb+1RGOhYbKGSxFePEXp4PDc3d05oZzHAxdXXi/E1w7OhhfYKptHGDcVKP/4T3HC9eNCJQQXlJMVQt1JnG33/J1CiESwfuqSM4ejbWKhZS8vR0nVsNSLbRaOACS5lVQ6gPRRwpoqoovRvKwE6TyOO+9i9058Q0P4vHxecpFKn7ZmVY1QavWWlnOKwdPiRTMJ73QRn8jKI5xXIO7LYK4vGz6KQMFC/xJ3n66zo/AkbOkA4bK976spG/us8nidrHIYSAJA1x4UoLtozG3mlH33BXUKZYVKka+hQ35DCDfj7b0HiU6aZ9rch7p3oAR2FmB8txM3mNFgeyjZHGg/E49pbt6ThOO3RO6DIwaHDJEwwJ+ob7MsLWioRLkraTQepFh/5xOeCjW4mq6Lu2m9na+ormC62OJwmT5Ve8SL2cnGGfPvL9dzZfGHN+KCZJXfNB4S0TxczHQyaq4j1B3u2tz4hklh+cRZscx0kZlWtHuoGDCBBA3LYfcG7Z1PP/jT/25AxyqXhA8Ej4CO8EJtUj4CJp6fDfE8L3BHR6+dYU6uum1NLzUnhstHmb+hPIZ7s88oQ/10l0DPb1/FFoKkyvLfE/PbKR3nZpT/HRbycVHQiNiPFVbWmvIBwIiE0Q6NSJIKDgNRLgj0ip42byCBZ1+nIy2ZmnPip1R43HlVKONx8FQPDbL9Guuc5hG6ggRydajS1qpqjQPWNlbkPszeMkaAibHobPUMM/feePNFOBKbMfXuAWM0rU8dsW/nua1B6Au5vYT3SfIplGdaghwCIqHb6YunW8wLmPDaw3ZlTHaIz5Ez5WIO7azUCayx6Qym5V2aIOfiSHGqB/BwaSZUdI9f3f1HRuhz64Afu3ufQcDmOv1VjKOE2EyM0p5MOaRCrsijF6bQvBF7NGkPcd7Xi37/pI5H7iZ0j2O9p/IPh3xhgjyvmAT3cHJjqBxQBQ+8f0gIXXC+yU9ORSlWIEt6IsyH27+W3UmVz2emVA7/+tsBHKdlOlsPod84oBohuKgD5D3H3/JpPjuFRebRQeyqdOSDWiwFexK4drw7IRdPFEAFVO+71gLN8FdIVIgVtaIN6rz91JEeOP1vh2DlIdVYD0EcZC/VeMpCvBM0/iufM3iTOt2GfSH5ZeO3JyLYyp2ukfnCWsbGMxndkB/FIouMxflu7sqDXExURTYngRTWyJfx4In4gg6P5XaMfi8sJVA0RilZY6GlKGYU198c/HBVryY7o4JGT/oCHiZigGvtWapx2uhjPbk5sWnUR6DQuat5P1LsH6xvsxZ6yMgrGLTrpU+1qdF3X+P1clCQ/H0eHwsATDsG42pjPqajMZ4wK6sK7/g5dqqEGhjhSASe5OpEk/rPaDhOR7bBmjbQaTABTGK4Sp5yq4YBcoH41t7ZX/H+wRAHO0eCt2PVVPWVok6WCp0ZNecr7XPfa7SiOig/CgPkEQUjrvsahK6eHbaGfEO/ebH3ADcHFagSXOQZlJzj5ywkXtaXsfkqXuHn1a0ouKLEgDCyVRC/fbCV5ObKbnv/cwzAe3FAAp16A73PaKHK+ko5blDz+bBtXxarngTlz1srl7vJ0vcsZt0/3+RWNjCirZTvKe0rYAQfsigDCi1c6EPiqC7UmvN9lN21kzpH7wdieW2HfWllF7smuP7dm3/JfZdzKTMlqJe/M3DB8UsAmXDYCKkRcoN8th8HTwzb092IQLhXzO2KJS1aWIxN2OvfiH+5ebTuxGaGVNgXGKrY/PvT58WZEhnh8Px1dQGyMFS13dxFBROBcWOEJTA92BG5/r1N+9JU1n8xE+mrqNq/wTvnuJteqZUj/9OFn7yP7ZbuFssyxBjViw/jSE2WXZP/uFL5d6b0SzaUQdXZwiyp+TowJA1zxUn5NOMiSZ/AVomboVvT9iaq8HFzoaiOpNNjLcuKqMVGpNa06L757ZjJDif1YpGbM7VUnghF1LotyMlTJN4nD7i+JyTrNSP4QZEzEeVR6wijei9W/LUzMyZdqJ/F3irWBJpkt9BgnnTKZ0jHoRaK9oYvmSb6uJLKukT3T9X9dS+MDAemCkK538OaBzkRdRTHvndddQzxPUPuZf687/qPFeP5vw37dOnhzz/fIrDYHNcX3FjGBACblgUkTyQWO6hHpPZ9tReaZEXYV6Txfzml/CaGQYnZ7WFCASbkbCEGtNmR8xT3P9nwVueGhLM9e62dZD1XkY3QLj8D6XaFsTBXCgSwMm9Rqr+XSKR+JfFbV9y2xVrvVbP0n1d3PGlUv1n9oIlMeW2VGoBltf4CKjQNwExK3obvBW79dFauu4O25xD9DO/ZDG7/IeArHrtioR+oRRdyIXNaLPPzPg506gOp4TO4dtzGSHXtVAtEznUPN1liG1emgmB6JGE0XXcnm6yK8SUp8r8pMTdIzjY3KkocZH53bkdf+7ZuSzsIiVUVn+BX2l77FLqYnSLNcnGt8fEf3EI66HySuWdHbDP+sEOcsOa2Z3WUFeYUDTV6ZnTnzd9KMnWYMw99eafjMZI66i6U647NUwQvgyJubDkzTx87ar9jPGAU6/juBdGH3OW0vGVVUEKbGfwroVMjAcCpindpRl25As15zYUNV7g3g9o8ZEd3GNyG8rcYASsPelRSGEy6iOqyA7qAJjlLEhhh/91vUQLS5Z7lnoGSWhlYpaE6dDah6mZYWqens1anULmfPazyzMKJyM1AT3OV3ZxQKxtVBTyyNESYM7yPCC3HI26JcMTbtJNPGOzSt5IAKkDDuAngqlIdeerVXVym9RN11RO9R2SZfsAWYknvHs3UiEscFmZMRdVUyMBto1+Vna6xX87OupeO8sn53OdnrnfVrcvbnJYfabvOoyAQqUTR+g5xe3/+x1ecGbfOlPee51g+hpHNaK653OkNubpHMec7IimFO8AmNhakDCG1x8x0zwaK9JYhUwRfjAX1dw8SRommtzKu3NcU2d3DfUgmqL8meGN+Lskt1luRANKqXVZJ8fb5lheWR71pI4QxdW/hKGcoSegW/gqNyQyry7dNmW4bvSoCxC9MwjGzBGONQPmCEbrYIxSzhmOZpy0vZ1+CHj9HceEWBBvju0tPp6P6I8Tg5J8FECCcIc+VdBf2GIhHrznDh2AnUrgq4GSWGR6lpdfcRW2czcF2utPBgyaK1LGWParmVWEbaVTt21YWL4Rulz5sDfPz6J9yoRLwQZagXbJLnf5l1Hdi5k6TGEY+RekqskStpP2wlQD2D9F7v4tpacADhsIs8A7j5VY6560d08urj2bTCoCgCZmo5hcFguhAEkKGUUxcFC6KxHQXe33z4x5DsWagoHxMGUACIP5fS1tUdyzJ4FeaW4o49W3SES66Js+/23NmlcFfW5JU3s6VXnAr1BkC92tf+GsQZNd5+i49GI3cyiEET0HmIvlSV8WjDJdWZrhn1IvnvURejfY3mnwou1pyIBQS2A6MboSQwjdZIGUaaslZ4VjHz73ki7PH3H1n5/ZTTcldcVlSH7jD8bWjl5uEaKFedR2QNbp7522N6FqK6vbr+JUPd9MM/Yno2d+rxeCqf2SwpJ9kY8rYPmv4itVm3BkBLXMXNihhNdj09HWK5UbM5avb8RP0Ns2+uC7T5HvNA2HIWG+dmTU+SjUkkayf4eNKOUvRaxl56RO+VlxX9Tj8ufQiOgcD8GfOC9pRKdBQViTioZCEcQKjSnzUWITxQlIVqqxdoDIoxI7UqJiylhvkBaHUbcy5RZCeTyUxjVeWdS0OdRt+ijSU7o/Y+P6nQHutSljAXVTsYVnAASlGW2qsHLLy4um56wdAE1q55CywhlFm1Rip3kiodCR1LvikVorh/c8CGRl4B1KcWRJ4X9KYYsR9KtFNysoreQGJNgeesAXlgcOwLrzBdke90o1pMIE8dIQfzLdQq4N5HPgAIO/3IJ6BQftMC4tvzSBir6NPihLR56hwfPhsJJTGRTlOK0EaVqO1+WH2HQ/sDI1M6Gvqq0HpbhgdMzySofBRM9gbWB2EN2qIwitruRSyjfIpBH9mWAR1CkakLy+9wxyvSshTrB46gPpk2U0TuAkkUGXr+5M6u8/Ij38rYh931FU2WJWvx1MK8MzgjT/srkul96Kufak6o1Naz28RnhjnLUlKsDwix9wV9rlM3tXVOrB4ZvzxAfwYSOS3+2fFwNeMGMj3aYdymOYsEeASLJDKszmOrVE4gc9ZSQnXFEP6NnzxXU4+rwbum+G8mRMzc3kLF79jClX4Jr6wN/qspLRCHVxTwLTkI2q5wxo2enOjCWlKM0RqKHawdaL2T6I5xsHg1+ijM31CWOQMRondlz5C+LUT8q7qgNCMJXSdzN4kqDxGb/E27Ev+YZKrPwziwMhXW2k2XdhfR7rDG7ITvhuJ2Oa4OmzyCKhmGlV951ollhw42SGE//K+Kf9k3KZsvKO+vtebtfjUg/7UeViMPIEqX6aJ5z+DRnuccCGFpZIya2hj2ApyvTIvbITFkhuQ4gjVYj7DCpFrWZKra5D2UbnnFiwlg+S2NqaFfgFEjdDuktZ+8/7vt03DNnjWb3lfXg2dsYVGAAENXANlruv7dGoKmrxJjcgV4GNpgW2zNEKn9LQZomjiapQXfR475Ah70/c6MLyU77Ktig69zE/HEdeUCNa7u7GkAxh8bnxmEEojPCP1nHjVtXctPhw4nS7xvOexQsoonjIDwpySmBl66izXAzbZlOGtBlW++0zx1VfGaHjpYYlSet69iy5GX/0/JfWF5j0BJF8Of4oNEVmw2MWQNoev24THa9Yn7DCP7PCe4TW2xVAX07TZJO7mnSdfb7Kh3oixWTyh7sQFyTYJHCwZGH+R5DcCbM9yU995kefH49mJI/3mCTM0FShitu4sScsIkeqYzf5w1RdipIJOUUKU87+6mOVFnz8r7R/MKD+D4T13myqbKJpu7vtZAt2P51jDovjhNzdRGbqsuZz9MTUSLkjSJMxrXPTn35c6NF6gUiNbTqt4dLKJsfodi7UBvCCpgIlbNEwBDouI4sH52VUKBCb/HJI5i1tPmyDd/DGFrFNC84Z4OvwhBrn9SQUetM8+UygdOCi/yuoSMxvgWmSWDg065ZzcHmqeojqV+0jF7j3ZdcYmosoAs8QHihQqCSyPxAA+Qn4VJf5AUAX3eDz/dm3zQq7dMKwGiWPlAIoTO7UPeNEZobudC3fcESs9UmhWkXwvPWp+qfO3eRcPiXVAi8A7zzt/fxUT0L6PTTrTmSoKxEJyGN2BaxkqBJToJuWYrUbd2g+6pAcWUBcuRr0r4IbbwlEuWIbiTVBFFzmY5r3fBFbEbRpXtJ7rnIt8zPDetwE1U5Yx0qdyKc4X9H7iCMLWUt39OQJVk7ir9MSTlUs5t7+ehgG2S2ObAyEC8/ZuboS1BgDXc9HwP7WZj2GWtDBIuYd8PDjX+5PFya0UA3Bkn9SvRd3RDHq9WbWFPmx8qTS2Tuo3DqzlsCGE73QD+yk++yxvAfoqYIxuZpBveRYy9hqAhtsugZAFQlNOWy+WZg8J1xskSX2S+02spyAeWoUgj7mRWCMwm4fLrq8HUUJUzXTY0Tr19aZNjt57U28faZl6grw00NxbMQppJzelCrq6Sdf+DKibdyZAXxBMtMkc/Ow278MGbQq3MxyeIUMLjZAbzUvHRh833QUXqAhsBcSOAAgRNglGz5s54pykxFoGySqdyEewP1rRadFCutuYAm5KHvoEm4jWW2BtMhoQFaUC7E51bVx5CxsRJ3EzPJBe4x1TftrtCwW9klmYf9jKrc+wCVg+cuee3aDOFzn9FaB9EZhn70UM8gOnmxScih7PV2sGDAvv3yY/ec79plwV48Sx3yFFSlkAZ5pbQLbN3y3Ki4lijJ80Ex+JZ7maoFQ+vS8Myy0m3kNjZSLZiU/0TeWp9oK9iX2G4Xxhe6BvGZmelvKdEXTh0yiAGUVAX8pENSIA89QlbPYbKK4xQBDK0siG+xuN9cGht22oaulkFIhhOEfv+5KX0npit61qY/jxg5/IOSUrWJHEOmooJS6NE4XsnO7eFLb8V1DNRCL0kzxqJBoFXndgCaXm2QTbHsXG2I//qcThcvrSJjg+1mZXfnzZ9Hy4XnjQyMN2DKpQXq/Lpw9Kzo4398YECRWhOKbWYL7aGd+2cIWmwSCgHEeffvUlGonKlreE23oAk5yG28nBtT1MrcjESM/+uNIsVGGOafoxIYUzLN805fpkOgpjZbkhJw19VCcrpK4SJyiTpomBtXnGLUkUfhpH7GzQENihPeoEU1qLS0o28UI8tDHiyZVVtsW7jKYbukWdf8NKS8QL95cIG6c4utj5vyCRsF2VpNVaEL3jxkTsaH5ZuiUgyXATSZQ7pXuNA/qp2pMkcT1H+upFM6oQMdQXFbObCrOJbzyLHfRJEXAWxAN9sW3FwzIRQJ+eUMJZ5K8ZgVxJmyBKm9IW4FGGFI3/QkhStJNECrMtc6bqNb4/ET4+KjIEmnf4w617hX0shId3PE7+38w9ud+IyEcZ03LgDmG3SyRmnqRa2KkRgV++6QY2Ovs76nF+TjlMD/lx65ZL0lU/4rbEypMnVBszugd00NDg0FbtaFRG/cRbvnR6HC9Bitegs6/VKBYqWl01UBFNNvn9ihUsOHitP+QkMzqP/ebwNeWs5C992t/1tdeMquhWQLuyad5xEj6/VAih956Qi9T2My9cnPKvzckMxEtWjbeRG+ESktmSDemwFO400p+73aa1gBjcwFO1dhNUbTywyg2ab+Wo0rYgq38hyJl4AosDnfqCM5f4A/92/OCOP3hvy0zN4+eFAoQRtG65GlReW0YOE/OFGq+4i5QOdHUv7EoUmq5Ws/+DWiioAb94hwPFwZRFBoDUd+8Y8XI+1k9gjAYmz5kR3IyzI3n0SES4kpCO2ODi96m4j4XEuBeIDrKNWaSlMzJRvKRUBnmG9OnqK5uhC8eB/NG3QBPR8/o5mO3J17Fy/s2RIoJK6bIIMwZE5pxc+6LXX71xGocFirbK2xvfD8Os3ByRenj/G5TM9+/mIlIF3usMRcibwcWtCVoh2LC+S/VejGwWzmH/6u+MsVccGcQ5DYwzyqLK9P8oUXLvTur5wF8XfEU/TQti88k82j9tOxLuKy0gndUjnOZlsi5yVmz5x5+UAYvH/WcaSXFoykFsMwR0GiPfUqX2W7odfwGnXOybMxTRE9oeBW7n0Un2Bm1lL2mb/2fy65vRZspeLBr3OOD/1R50qMSbVnEtaWq9TeUzbQU4Ays5kljoZA38LU5wfv7CG0xK1Sh1R11kIOscZPlmVqHeLnUSDlCG4oPWD6kk8iLRlYx+xPYX+y4+JYo9XnIhl4FS4ZdoQJbfWw2YQZ9ziyIaw3clfNhn5svv/eeR7vMYJ6e47TrCs955kxaGlfYiYU3DwONyWgPsyBUqnpFV+Tq0lP8Ew7RhrmlUdw2oXpW3NAWMuj7B2tDkHgGfxU4nQcl2RqG4SAZeypA0dvZGFul4Gxpo+bvT2BX+ZrIAuXYsN0ElsMNDa7P8X+H8XV5yQyV7yyihRlllaMoKcrgWm2v7C8ozfOYP9WmQXAnbuZWJOV8R6oZHmgYDnUdkckT2bJSazT+HmjAxJYPVNUD5RNQdxfWIDc/srzTpKTSFhn32VPyoq1Eq5WqkoXT/czcuvdpIhYBRGd3PMQBHTl6jne05i+dnDXjYpiOKgVLpXgFTe1pxd4DJkpsNxRjmQvFPJDdrsapblcb/31to2KgRsqXjfjZYz+gWP0CVXqmZwo7ksXTNiOOWyVAk+KRzQ4WBDxmBbl9A5mVhzGPV6UJzm6HamW5BahGx1umpN1cJsIayjWf3hJvj377YYXVm8w7iiypGlB9JL9000Va3hDiXwO4icg8ZLPfQlyUouFsJzL6NYroG7KZIjwcBrOoze1jOFkp1Eo80euda5vEImyx1yfti79RBioxX4hzpksU7IrYCki/rEZINC8vtW834J1v29bW9WWT1kCv2AwQchmVGq++vhQFnSYgfey8cWNnD32GJWssQfCJkmNZwTQSDNqvWTGYpniNldlw8t8t+CJab9m9WDDGl2Iy5j6LkS/pE0etlyr2koAkCiRlv1WRKrsrOq1O8nCVZ1IiY8iUJcz9LFf3aK3nL3gC02FriIGFnmZpRtzU+JflHMXk/m7gCBWNGPY8ISJfDjahoVTHu0abBAeP+F/k1s9z+3qQFX1lOuj1PcCrU8Xo3TIOh8xleZn9GA7qxONq6MLnUpvhl5ZU7B3S9zdg57o3ehSuRN3F1o6xtpYv+V1LFOZxKGubv2v0mnBjw7/JSoaEkdqYacpovS332fi2URHwKSKXlqZI1yFNmHofqBbdp9tmKgdBlb6wi86LTrn8bDE5Is9cp4srecRWsaXL30ABK2fX8PAFsgJnFX43IQSmHKYiWdoXKaO0UcOlpt/+lwZEoI2HdXvptEUUNGLtoae9taAZQ75/JQJYT4nUiN8bGC1kL5e+BDVgTtyD//YC2qFHsMbfQnpRsu4U0mjcdqoRtRh+uwdwHwxa9Ik91JTaF0XTOmLY9kYm5YchjIQ7697C/IggxCM5knMvv+FEgfKMk5cO2vBLA39UJc6N7qYGpGElVUDmFIy91/0TvI1INDLmK1Ec2reygKSPHXUsN6G24q2ILW2FYuYATY1BwplP53e/j+p0j0ZCusGrqyST3oxxboaXif6lDqc2CuVmjvLIpCkro8DkQThv5m3naTYwUKge5t/nheIG/oeV9wGqYC286kpQqN8+Rnxo2EJAEICyMUe+0PM5AAmVtAZzfKoq8nuGmfvgzlBGP9y2Tm+Yy1RPSN8tk0EJhsMZDJbfluQ1AeqMp5vrBIGBF2Qu1C+naQw/c/2BfYMqCGEUnOj/KLbHTdjS9wGiGVO5Hq2OInK93gRs9LnXoYJjfMWSOj3zTYn9/pB5t3aK54WNdyWeqLErp/Yt/UILTeMyGktkDHK29AW0siYWRM83blj3TbEnTHJdXG3gAYE+dC+NFlCrjznbrmh7zuJbEg1w4pBsgIF3NTtASG4wbheJZfFQ7YU++lD6UIQX3UY1y7Xi9wBuO+xSmq7wq5KKRedq8bCmLkGRSmc1dCJWGn+6co86embFCfBGCOKUQmxEilxIJdIeOMrw1e4wNZhQFo29WHHkFMpHihCUWNR2IeKUDfiBcKs9pPchUMc+gcyXuY8EYmOLuMNoiR9sfKBJvkeIS7JntYwD6iiQOt5YJZbWMTGtMLOA1rv98qRHZcPh4Z1XBvDnrXqqMo6g2Mt+2Ir/4UESFbHiicx/fdOHOjBVgQa1251hhPZq1N8RE7nnRA0vAgRvi+AKMXOKm4Yt8gMPW3SabYEhhRlypUvf/5PAnYEizDYCaoBKvxFYERQ7InMuoVGSg8SIB18dS0gNZuJZt2J4uLEnS0VXFJizVFbJoWsp1PXX8bHEPzXvu6lEfx5VUruY2httVnXtIGnk7ppY+WjuKbFNqA/226yZQYjeksLNBFjOVx5VaIf2B6C995OMtkKgIQM4IBwHzHLEMIfYHvUfgt0eplXkRBUHgn+z6bZMDG187CnBCxhAP1B50JH+/L4NpsSRsraswFASHSXrWnBCLNNa9kAAiXonRe/1uTduyafCEW4VwVBprpyQcJ42St7KRwPnzheLytrrM4HlSt4oy9BrZmVpSfvBV15g9g5MpPxby7FugoDMQBxaHDNK6Zx081aGnX6v/Ks84ptqHJxsBbDO4XST8LZGl50L4M46ZM6KSSibp4qTj0OFUeWoIsXaJcTNimmqERJvQinTJo7835Jv2RzEDkcjM+ejyOdhzH3o3ingsj35se+g2hALkn8I5Pk6GfCWZAISUoINixbiBRLPIyNRJjwNPW2EqK/ltcJXQ2BSU/43pRIRrp3mCWoA6W42W/uhmFCa0tYG1L5A4DS5vwgepbhA14L1SW8rALZObc0WIDY8334myz08GQmSF6FgTTCfdPXdaIhrGFVLgbh8qref7sYkXPu4AHnDGflTL5Hi7FDEfsegMtgjHynnJ6BEJX4yYra5p7FN2/iiEuN1t3jymZN0NPe38cSShC6czW8MhzAePpzK7Fm+Tx3G0tWiwdUzJ75dv7jBWTzzjwfDbUSaiStyvKiFsIbgKJGpl7nQ1RjUBi36t3HoWnL/qIVOfgv06ufKoIzawk3SjZI04hi4sKZB0+XLyhou6l6tX9kR+HhnDILNU06u3OlZNh26XdfIKQeg+c/BAAEo7SQXDVg4/hZC+iU1EyH0+ICsMzOInqb8UCrwkfBCzs+KC9eIyDtBaZXp9nbcj6FGTjedvFoKSGsO3D1rR3p9ubKZmkXtOny5KLJLHzDJ2Fyg6aV/D0Zb6LqGTxUvXoEJQHE2le2ac0UI0KOXFoLTInPO+fqbwKltCsEVw2EXHz6ouuqM5DuEVIhpeiEWEQIXh1SDN7dD5H/8l0wpBsoniyj8Ssu6QJsitm6zBqi+uOeaOY4RHrzJ+wEp/QJQntdLYDqbzSLJniPH2yKLiMkUXfC4ADpdttkw5vem75K7ddKPUyIztVe9qF5KHSk2Yyy8bDOM984Ezu4BefDuiEc+dS6U82CL/uxzI24GySu0iZSeNZhcZVwhYxH//bF9Da7WXDWicG0Xrkz8OYsGEGSileOvnxda6/WhS5e2jACEAt/8gmQwtOHpCwgNs+DPzc7shTbKUffzc4h4c5WQr/qt0vgw93Jdqdx052DX0iD2qXB28D236uoGdRflveHyBLghR7hXDtxrwLoDwytSKabx6xzWCP8VIRJ16H/n7bLR21zCHa6ktg1/1RSYiFieElvFeVGIWRIkn7vv/Pid3Ssi8/aFptHQJVn9DGZ0IaX6GNUYGnZcfY/WsCitdD8xyjWrZ4q3PPNuVWLdRfkC9xLrZdFXL/V1W8ybK9m8GcxrZKB3+/rJZSIlTU3fFJaukiI26XyPvopoF54LyZ//WrCOT+GRqNKBR9tdNUpCPXq7RjOjpfKvU80UFwkuf+qopOVRZ1TzzcH2AFvsDejOALbMIL+TUuvnjW8mJVitXbZ7rGpGkePwHfnuixKtjoahoPRPhcX59VALKEIXWqJCk0i/p8mv/DQKrDaEdqGElx/EYIinbuWypZwLB5EuVk0WUdV9Gdb7jSj65NFS68Pws+QWNUeegJEex4N2dHWRIugxBDDqdlbHdV+oOMqV2CzMOdrIQZDD7cpdZYZXHyoASlgr1vH7Ir6akYCPZVtLYFQBUAiQaXM6zDJ9JU9W+CR+dUjzieudN0ngCxJKiKfieu2dbjP9W8ciLR08hGJgGat7SD/T9i2U0jSNy7dSV8VjjO4XZqFdUapQylQIbQx4B/Boa9yyQgBn275QbZ6ExMHDyCvaf7UXF8WNwMN95SZQd/TKJnK91MEmW3bVqHORwPajJ9+UHP7eu5hRyYXB6P+N+jVt6a6tmCS/Wih4qTcsIxO2A0dbI9c4XCmX/6aJjbr4WYDcDjFD1tP0nC8WrZkOFM60ZjPmyMtqEJxe84CoPQ5Y+KX8LCBvmOOwv43pOlHpR0Gq69Z+SxRT555w1RixbZSG/JJCEOjhnRvy9hebW08fRCXeLiAcgalQuJ3uDZRjZOlE+v1VS9T/tuykN7mcS1IMvkxkWbypWpLKn5hdEYjX0T5mlE2UARRSFJl463cNhO2G++NbjxABf5YXgKzOtWpic/r5gtJtx3P2HmtamwTA2rOWjqVg8kDK+dPLAA0CrK35XurB3iKSGBro1UnWULmiAE+Lpdkn5PRstBfgY+FaumCR1lHiRXSKEtCdzI59Ddzgs5b4N7YapXXV373j8W8BWARI2ml+b4wbyl5sxWfZnOPYvIxuL+l7CHVPRJo1sYXLMZ+LW7z1j7CNIqE/lYob6M7j7mx9D00FPehqOS5gWyC0CM37WQXJ0WNSoVYT9T8ggMlXE6I96ZuFVeG/Hw5xOI0zyzMSVWT4I36ew3NQNuSbb3lsW8/xGY4OWqe+iT4RpZwfxrWnNc5J06yTAtcUz091O2yl1CxXfpFI5cc7E5qA8r4yp6SnPe+izGF7MNrUU8sSw64om2Jp8SiXcCWQZdVvE2NX6p5LTlNn+uenCjIEWM8JRbouiE8timu9s7aQXhNm1QrHtHiAPJt0u69fuet7+AquiAJE+XnbIUAdF6zaWs4YhbdKxNfhjnUkr/x80v/OX0GQkq6ZqZJKt3r8OQrye5UYE46we/GQw9T7buZCluUmsxbHsp4mNJpJ1ezyXkEI0ANdl3gT2IvzQ+9w03f8BxFZNeLwVPBVivUjXNoCnjCT6OJWlouANJn29N0uZLGuO2lj24SwmTfLaUjOOGoIvqbApp95OIRnxC+BFR0UOo1Fmk9mbFv+RmSx6JUND+1DyCH/AZaZ+dY1PoacOSRO9FO8Dqyu97jdaCjtknhkFqos6Hlpy56bfEkvZ5MskVRgLM0qBHpgVwI0otLL2Mys8MKB4HpqA4Eia0f7gHLY0BPdxCRgeEtufKat9DtkKZT7xMc91ChBRON+RHlglndmdKIWCYPtXTQPKyvCWpWFfGt+gxgzlq83WdAqXIZ94h594c4iFhiv6RgqLSAj+uOoX1sZwZyl1drlxiffFdn/+32ahzp8igLe2NdeCHrCReJVOGay4L/knu9o8fCqysUOL4/QhE1lbT4GkXccYBDybj1KosdRjhj2whJnTZDHnynqCLgKRAKUqimDDM4lqjuYQQIGE/1NzuU6qpEgWsCT+E/V09BN+4EvfXhEk/Ke+y/iU5/ZemgH8Xi8wVFKdkN0jPCdsI2RmgV4CrFbedwjJimO45vFIB7Xk+9fYItzb3SpUf4dsYb6KNtHqaKUqvL8DmnlauBRVszruoSyCjGlS/rjVdK/yBSunSlmmTbNNKuZTZL7d+fGxB+iYa0E86lmQDwBWhPA7LAZa1+PKw7jmmPLHPXXuryke1SZwEoXblyE6J9mHKZaf71pbmGMOf6qlsnh4ETym6C+eI+hK02fJ4XCHz5vGQ0rxjRRqux4g3wjBAHOUmbgKx+wdk8a59dRT+C4Wa/Uy/OX4/VOJuTIZrvhRt/MZOg3uNBqmJ65TBs5O+JbSjaCghxG7sS5SL3PLEl1rslp5jRDeZ9SASnpsACY0J8FeqURe+UaLree6yjcFJ/zOxIbRYXXFQ6ME/MC7PN7Ycg90PT2SCpI63Z1z+HciBjF93unBmgPnGvXXAdfX/1RaZF7xrJNxifJYcoyDYRMPLwwAH3GfoBhfpvmoFvB+Tt0RNkrMjdXhHDFORyEaE4okpdeN7aOcUpfHL0ed3CXdpBl/pgqGaUTIhnMYg8FL1mUxo7Qp6HrrsWIzCFvajGKq0d1ix/9glXlNi+5QJVtZkgLJy7vLArwiMo/DRyO1Q3XVBH4m6LLjqXCgL9MK6XsF+pVUklQmBZZ0fKUMJjLPGDQ74KO2/MuklWrOhJWs418w6i33DbbxWzzt79Int6aFFKGr0tX8xgMqCVf2Z8dztEh4aaKDXayI1fic8ZEXTneVpNxsbHU47Lmln+tyrWVN2a3pC5raZubXfaHMNGCP09VfreZiexk7sJ6PktQIwfQ3gwl05emCx4QYUm+igl49nE3Mn+70nfkCgtRj+n5diZBGxfjX97frs+8x/UBN4aKV6OFCXctWb8AF9yxsX+mwWZO35EPZael0wseVw+ZPwg7Z8tkbkgVZv+wekhB03Mggyu2ZMncZVtZKZUi5YUUo+I2DXvpgHn/mRjuXVJ0jfD5akUo7A2nzxIRrE/cYEzUlZaGWIX9sxEttF5LKQzbZQ+87ptWGTDuwCUCjxJDUg5Hbwi9KousFj8lp5yemF/Ap326Bz9p0bqPmjZ47PwKTPu4GnKQQ7cmE8nKzjsIukRc5+JYXaS45lsVw/hF8A+chwjzC9GVtSefXKTIwxRa82fLQM/UrfkbgbBAjqtxKByXMoqNCjxLUaIn/PgWSsOtEBtlMcVYa3RY53PZxDdlgj1JTs38Ni5MupjKIAdsWo7S5kQCIjjX2QLETU4pXTV/k2m/7f7ayHuojiT3Ge80ZKfnpHnx3Kzobx3OPmZttnzp5mQqvj2Ts67gIcPSpmMtsp8gKzjvrdTr4eBk4+Bak9cElMb2pR38xZCmJcdkBkQ2N23Z9I93AsEzYr1Os6TTyil09c9ykC83TTiOxtyy3UXqmNnBu207Wn7sOp1b24ny1LDV7bqybq8gDmrAAQNOxsEtkh0ARpMSGleyPIXj2g0OOy3cg5dUdaARUnbMk9Mdiw8KJWey7msU7p1M9Z2Ze9DaTryC4TzgyeNUwzMCLpNttgsJoUrlteCe2TVmSo0MbTQ9bLoKZbNiwnNQgqOVQK5JxEssiV6tJR2FVtAPa7+h+QV4WhXboGvHXcGPsD6C7pX4t+PQzxpleVnv6JXq3bPhzU6B1SgsOCZQkUunGGsKj7OvZ9AQKxduxRoa7nE0lnBq35wEuJKCEAk5I/qqGOwr2uT33E+M500B4H+p2SuhT/pwt75+moSY5U2GtiX3CZb+mMgj43Bizchew936CiyP6KwNBwHMWdU1zxL9N/lOIhUen/hS835rBdgNRTRrqKeAkLqHeMn+5vE0LN1Y2A/nwKOyxi3hel35jkAABaybZr9s1DNviNIJYvlACMjIPkv7Oty+4avL+TiHsS0iTiaU8pbxdwRQ6PvKDCEyQjYzOSzAe5epXQKFtP0jjKHLrweiDvX9Qx/Ip69yuk0M5z2v0MdZLZ9pnEqFIh6vLQfTrHqvUNsxlngMm+PL77m4addNcg/AuLT+wF82KZ9AsYttTI2cUh/H5vsfzPnKHiOb1iqIaGiiULDHQoS5D7IAgQWYsohXGzgvwkvw1rkaBqXzxXzblX5GvFi5CDIRYxyDxW0an26/2tpy6TRFqqN8Rt7AU1oQOl/2/E6B3GYLpVzWETsWlmCpL6y1LCjhMS+1Gr/Ejbjs2+dydIo0zYE6UGq8NMiB7Yt8zuHG4Pnly/bHAe71IseNUd3F8qQ7Mag20jBpHapp5BnunB9nwLmKxTRysSdM30FYjHXoHMqK0Rps+g3rs7Xhl8e6Yhd8uH9A1Ho63V6Dujmcg3897MlXqnYIbfmYJx5ElHwLlKor1rkERkkN44uaa2NTTlCggqGyMhZKDD5q1wcSf6K8N0IM5DdkmiEJMkbwY5g76/qkHuO1OxuUOGe85qN+qiAZPoQW0POVA+9O5/wWFZ25zDDk/zpxP0qM/6vlgzcuzQ/Z4qF7xbkmCza4zsjzKHBHhcoknGElURVBa8jY3PxIaihRx8tO+VCUJP5ILwi+7uFjEfn2aCVaER7jQh4lzIaJ5zAAbhuSI6oid0j9ulH6DD9vyFi0W7cuhsoHwlvM+JYCx/yJpd6eOqhQ9iNYm3hkGk/ym+PBuzx4oN8UxJOaDT+TPaGMrbumCe40X67I2AbPkdcITuWcPrGGzpqSfGlyci0MX4OfPgQL++xGo0sF1ofN827R7ZS6knYs9uWposlvQTHORnklbn+GMbeIALhDQ3ar7fkNgHBZvLeVXa+3vbFwgKcCA2hCb197dWaM+l8DOt5TbKLvRBocDd/mANZcJ5AeWaSngsrrAAAhSzRgXsvraelnnx5SIEu+BWcCXmxPyvfPtisLKfXumH86yaHZsiXH8RxPHJUw4SwH7VSRXTMwklC+WYPLnvbcJf/KiX6RQddRmBTQLT1NDSnkv+11eHggtrWxie/CoPFzqi/DfH/+GpPWO5vesnWghDNUxRjEvUG6oJbjr32X/AFQJl2LJxegmRQ/ZqSnLdFFpML2GKrjeiw8xOU0UUxq7j5GfcpQATyF4uDVE2lSS26aeNDVlJisLyLmlwzcQeNrg+vWo71MeePCNtRp273YtMdAmS2LJBrUUwFqE1zmEgA+92kea+4GXQYu42WlmxwzwmHWc2kIDzpv1E+ZGT9cpQODMQDJTU9vSWC4XZymaKFqHeJbI/gGVKsxl27JQmqGtR4sCWtYnD+0KnaRjeYFDiiqt0Jvxx8ucbs+56wK2MGb2ppqzYLNwkosJ/H4tcmWsGIbCoqpo8Mzmd67PDcCTXmckFyeLz+3EIRmNSjAC9bOoK7d83jnRrYoajdFzkJSu1jv77HGUAMZgIgTaQGRHdUmytvS5NmeKYTDA5kdXVfAUusKIRcnH5w8ofqn8SGsuvHBwTP3xFMhkQdpVBhtWXh1uNoZ2vSuVnFOjKwDmAI33ljLsQHSImqWw2QLzfm+umW4zK9G4wCRcCQ3ZlR8B2rabeALucc+LSvLAxQ0NjwB/d9IlVjTjoiKev1EH9eoedo2UcJ/7gnUblo3rFHz+MMPv8ucWUJ9ji2dXAla4FmlieZgXppXHc9GQLB0A3sM2e0Fbw6xqTmPepLiSwLIIWsV1HbQ/pr3rRUgRsDOmb4wd9exsY4uH6eo12G8JwYwLsmg09OrUEhJOPGqoA8MaTJHsvey+HOxwyJ8xmgZndSv1DDQSmxWiPI61y7XXB9E6HAH/qvI59bq6oe3RdlpFODXLCfS+Qo51uLWpNLRKE3bAhlJbsyX9veRHFDV4/nmeqPRgZjLYmMQWx8v4oe0qT74wob12qAzhLl96d8zkmeBZBESVuV78KOnL+dFeG5HDiRVfwOHckc/9KuWDC/sfgsX7ScLz9dvJdZU/KN2P5pSc/2AZaR7HtY/l5uFJOZwzN9mRIBXmZMzM7yOu4+Yd4yqB5mBZXJXWaVylS/SGhyJoyD3XCmfbzJgfAo+XqJcQbFnOQvRLmfd3BTV693HqGWGXJKFDKO68V5Bs76M365pGjcJ98L4XFcdhB6YXTuSkY8jN7d87zO8dPK8HBJP+HvOssDMzp6zjIdza0EXAoRZBfMwYXbsu/6MjskxOnVZHYtBPWAYpve+ObKvEJVJP+FF4UCZ34qUOAVT4U05f5HHZqXivxTNmXVaf582O1MGQNQ+R8LPjd9g3SjKxChUWP1D6aKauXBIi+k496/C5zvsctnPK87XcIiQI/czRLCrbObflyI+5vmbIIgGKdXTlzb3FzW5mBukQz2lSTWIgtkpqAAAnQMOOC2D+9YMqMz17iGyJWBrOP384Wv9tK2BQdi5hLsUrxhLB4p4pABpUZkFz3DFOzj9QYQB7UdSeE8B2WiM+dXR7aBnQsBETWrusxAkWJ9SHcVBOOABi7C+/C2X/U3acLRTKQ1uc5ca7VEhgAfV/0eBfTpLW4NInzKl6n4Eztu9ykl7Xqo/+yyFVxKfnGsoYhNr2pXs/s1l1An7MEMSWHsCCJw7NppWB71gN9fna8W0mEoIkre6dHOxuLJ0NzCL6BQQOWBkLbPJyDx+6q3bDxpkxV4VTQIkRk/vuOoL9BLwjBNSlSiaqS6c1oeay4OwPdCqxRJbAjLedQTK7BdVt5NFDrDnMzDPHTg+onUtqPYAMG2MY6ZZKh1YiGpQoAA9zMIqhszPahgVEYlbsJx/GVmFJtQatuQCse26LHPFXY0y5Ecbo9HcYXGQhLxK6qWilkA/uuCiVfHtEzt9SfdJsK2m+kCZoXLaSow9Vnqyi16o/z+yvuP/A7V2FHU0SiTJwNAQInWRFsN8UmO2HTNwCEcNIfutQijoBTK/WHdwd5qRziK0xJJnADsDjabTO8PXhke6mEGA8SPgf/7rc0MTm6F3hbNJzrFfDQpReFndcErKnGi3V0WycCpSoIgb1tKFaGrVPGFwX8c0PIe9WG3BCg5cxEfgFvmgxFe+g1JFoHuDjv0DrGolUuBw8jFsQp6RrumQkWt1MLc1fmZPiegz49nBP15nOU/52zjkNisVXSoal8HSXgis2yF56P1z62N2yLrQpRxQQIt7hV5rSL4ByYH+bD0o9UlVBwWNrNMhMnShtoTaz4Qp+k7OYcVmVthpAnlFLSKVJt3q1CAj9i7AFM8mxVR2k3XIye5km6EPOJWEmM0N+FSSHpFgNjrEhyTp1+uTxZAAXjn4cvuSUiIG2hrLccQP0ze6rtOiiOXIw/wBGmGLK+yOYY73BwAnJYeDeCCZHU6dL4PRC4neSqAHD9bwiDgvkd3WcCCXEU2KTwrA+d99/5Weq6gHWlIUXt/94QHNNpfT/ljf3ltM66pweNnmDTY+sMl7J0Na6r+iiFYzzaMD9HyEEAXrVdVpRuhetPM5WKXTE/zuhOAJE3C5AFOHEOciOWHlsGriLkp+MN+KJLWNO2ET3epOzGJ2Ptmce5nwmDR++BlAyX5NHBE5/MLb1hmISquLctz3q4GTqbzrzNKYZTi0BID+33bGYWE4QL8i9Clx0xLbagC+iDmSA/TyGYGTyz8DNNAKHfbneQ2Vc+tA30wGGrVoBcZEfhGlk/UK6ckZ+XjmfxDiWIMUIVmwNqWZCZETNGYwP6gaLRwkbYT0kuVao1OETl5C92y4CERoq8420SokammmYWHYPl9FgBaUCwT4UFdYV4FGVghwzXUhbc7GE6vmoSzMSuCN6HSW/qxo6COiTLjsLFpHpqhE3yMHVi/lymbO0SPtIvsG6odS7d97vVDNeb9Vl9afnEks60KQ8prMc+rfINmw/CSx3SumMhZJJ95hVeXscmLn2vUgV05dhTLVRqolBQ7nrOufPQzYzivcYLj+Z8Vo1WUkNdfFGeJy7GNQBdOHde/R8k8B+HPvcUPptTWbowXwedZUruktl//Y//PMIifGuA2VanEW3MNYryeU0EMAtzSSDdHNpX46B0d+lrT0e9kPJM+KiTKvSQklpp3Fe4f2AliQW5z0FFGajCAT0xXK3nmdSwP0Z13stA+48rMQijVYCmKf5jsib3xqbXWnP2ZmJbfcwxi75shnZ57ywCo9uKsiO64hd/QLzIB065Fmsz56OniigOE47RFIlowyzzPxjvIOXI/lGd7MbjiAxI3yJSUZsztkSxn3vUeOp1fBZJxw2X4q14yTlNR6iYYlxQiKGxpQ2ypY3ZtfEp1IV2MrCdhPNGx0TVCiuVL/2oOhfAbpaeibfruObD0c2pK0ZcQubWaVRs1fY9WmjOIDataCk+Z65IHsEkayn4ogqPhqvvXsE7IsY5q/BsRxHA5QQUBMuV1HV5A8zdChK8OXov4eelKRcBtCUcAHztOWzsf/y12sZPrfEyGjVNDQnqN36NigUkMHJpAmHkQpyuV45YpUoIC/q8R3wyGF/FgOODeHv3knb+H2OzRwvrM7ZueVrHQyIgUX6GYwhA843eVbFgysT+aN2OFoF/7sl5HsG8ibP1XwCvo1n/9QBpIdxzIkG1qdBjpRfsqqPzBfJqet2CX8b+s2nPhjAOZYqREPo/ALyfx1jWZXSc/2X3ORYnv2CXpdij/2uThNdgLLmFX4TgOgBgB/L9vwh9S4mnXwUvi/Tu9p8YEKsuq5kr9G7e+qS5h22DyPGBv4gv9Q7KH8r4Jwuoyh5o6FCanLSk/OlAatBV8cPBZeHbuPBWi/axwR6ADRgP0yV3C2Q1TgEpLmsLF3VKHZcvch3zJMfrJJoVC56+k3kYZFUF5h7uynayjOUM96g4EtR60ar9UweEpVGMRiMiY59Jrbjn/H77/OxCnI2bqMdcv7J0Aza7J97hDpMiYg/gzWdTu/BQkEcqMbe+cXEeHG6+faHZrZ47evjCogUgaH7SIPqMoUHEb4dCKTmEfxD5oThMUgT8+BN3lpGsIP9JYZpwhabeFNdqdCuxE2Qdy5wdRNDIxjwlG0Iz08zHjSjvFkV/yMHRB6t/nPc4JNplc3FopFdPlYPuQNyls3WNQqpLMKteZtXKCX5GfK7Bw63vcg9J3rS60UnCMgXo48BEdZrvA4bkonBTMO3T+vBgWwcyYPvKe53UHgzO5uAtX0o0VHwynh3m4T23bjK4XFnrr99VbDlIdztahsHkx4clRrqpYONWovWYfh4eUR0NngR/qW5Rmg2nSbiVVSWVFYR5FR04DQepAqNmy5jP1jWR1b7P5GoyFUKapFh/Qei+eldl5ZvWttBgweXjwIjnprmbufCsTCUwGVMgwYQurc/9+5qaReL2FhXyPADzhw2ZDeVzx6HmfWG0PIFTFyPGKwNAATsf01trEOaUaRPbnfnizsbw9breowrdHkeAyq6Ow+E6C8X7V17Z8ekY1dMVMISl9n2Nk9Pwcs4+8wYeDEmvnvQICDckoJcW64CcjNH8mPhEZSol5mplNpyczcfTTFV38UHZQZcTUkbGgVJlD4Dy1+MJ9gCF5clC/NRo/ldmljr/es+GB12h/ULbc9PQ8eUlcDb0EX7LW/Zx5I0ZQfyXYSIQPMmnExJUHI206AUTRKzgFg/nR/eOdKFPTVRDbHxePlXHBmI6ugOZYZH61TcXdliyE0wwufUERfyz0vjLRCVLlgGcJa175l8cif8dakHlbCXaM8dHPz8i2vBAkBy71FGe+YeD/bF/+aI6vjaa9Th2ZL9+kl7deB9Xw50R8zeF592+n65geXmguWmJA/Buco8H/IFGx3Dyy93uAAC1lowUZo4PDKLx8LN2QUtD17w87Yc1x1EuEOR5xdyiczlXMfPjE5qL3+3x8L03IBa22lyQ4qviQN1+7bl6eTLcAS9M+wKFhcqPKIZRR3ovslgZWzXp43TLicrBwXE9jW6psYiSsj8sVnk2LBKCRGHq50oXMrzO+HDNT6yjKzuLzRrEog1aDLx8HD2iHRE5W82/S87bW6ld3PcJO3hRZH5GRtoknh33kKTIlNF1bUrBWrzo23mtKWBeUYzmpXvOEsW9TL1cqw4LJjNjtCkOPlvyMNjSF1zC6icRSn2dAJkbcgOzjBZy6GnWAp3TAHEQ944yMGfzvfBwUxe7p3S3Sdq4guXKDoX9Mo0QD+/yD4gjX96/BulO+zDVhYkXAexWFejZngNmn44LcRQBMIaaG3ByGL2FzYPCdaeLaSJXiFTFrksdDoXvPMOJHd85T4+Cs5T+ndB1vrvjAkDEAW4d88uon5NpjjhX4bRTCYyiTOASRTKcFGRuDEE6D/TB4Ffua/HaOvBoFL0JqKRL+S1W/ZJgbk0smGqBFj0gHLa+o5319vJ30tlU2O1lJ7EBSR8hU2DS+9rb3+Rjez3Z2Yry58rR5K/p4KXdsoigXrKzqQ9y9CvKAWIJN36G+y0aLZM+O9lTjD0hrmiRtEwzHOKILc/9dgDuAnyJYZr+XYELMen3Dx2ovUDFRJfFEIBGjeynxkZ0HKr9ju/WuKqO+qMvXpd8APxdoJkT7dpr2KYMZ+OW0vGiVNuhIgwS1Pk+n4O20nW7eetMUaBrKB07Jb2nkYVd433lzBTdT8NtZzfV3JxsCQ9eD2QnkdVn9BAgNrfW2eB5ovUlbyyydaTNVvKV+BvzdJTKPVKmDlOL+uaZxESG5sFXXF2ft3xStkolfUU7DTqiWZlFsgbjza6C0SWuFiefzzk1HawaG2SzKT/ac2oaZGZvgyDAZQjzlE2lwFhXFZC5tA7NIbXHh8PkcmVfpEKJYnqmknzmdnrp+UaoOvJXZR/rx9nR5VpfCfl8TcD3AV0XFRPggnSW0eZP/hw2lOZROIvynu5GUpZJs5aAZQ5W5PkpzqvXxZpDfc3ryMXXElyOMd+Su/hjU5QV4+OJEZQ3v+TaFEDZ9Q+mQNDkli6Zwq5kp3FC15rAHkBBTmmcePSU3GGlTz1274vZE2qIgP0fEhB7Dln2sBcenUWkFfIpoUJX7Fa+wrIiuy3uexlhgEEVrIe+L6IihY6LE0U/6akJjegjwZKOFOHkAI+zR0RRp0bKi2SgmT2TGHC2qID6MTRn0+d5r7MgjyBwyk3ruEHUqc/p8B4ZnKqVV6sMfzdvDHXKpuI6NsVSJHY8dWfWNqeyzA7wnj4niwEwwZ0PHpDRttuVC9qRNEA1VZCJ0QcaVSJEBVyrIvU6jwU48rlMND8IOmWILruObPYqgH7/jtyciAx2p3p11ezBgTGC3ZozQst0SE7/G6mS7/f1oo1CEAi6pFj0tBL9rwfn4U74EWk1wN5dYQPmK7Yj7x2sJc7wMrZ82+OwKEpiLpH7om2Lb2vxS8r0knhyoxPY8LffSbsRyvS27z/kgQIwAfiisXa/l5rGNOKpfqNxAuIM+f7WrPcvLIFG/qhEThc8PCYoJP7h4zq/UZ/bz4HanJoz3Iei1oBtYofSaBJ/EgoUgs9HwBa/0GFi3TAC7cQJfPtJt+mxxCtjoaDO0aQcbRIwej+X9D0bH3UK69H7cmxiPxddgxnusM5LSyt5kUO/wW65Vsh4Uroaj/WsqzL+rIKwCpPDeEaxQi0JhqxUWb0VVAs5Vpls0kLhx5zh+4VRsTfx8sRjRqk8UMElGyrOfkfnANd4SztNQ/vMtUMAUbgSWA4qyYqSwcoPufamti/XTP2vDVRHEh4thjMdzjut9dCaCcr9N5O8LWdvjTnw29zwIzLbTqxShiSqcK9miSJYqrDg4mZHrrNqrvpH7YbFBtn4+zNUlsCZqw1I/wWe7DvJTjYqlQLzlO+vkIumRSzQd1pTRJICz9w7/XV78Ahp49p8IGICyNtGJUjbn9WJ7xcQBAWrnAlBmmdkrJ6pf353jB0uWwaKjJsdPOWSmZAc3i/wy3d+Pit960Cx9+KUiQax3TY0vkreCSRf5KyJBLjSVTmj57uwf9CmyJTt3IVX5NCjLlG7uN+9F5HEYOgs8I9t4kTFpxEcEp20RAv8NB+U+1va8XrDUajwbxbmviT5t6x4RzBvGZWcY+ewyIOI6SHcAoYn6f1Mqrh4t3uWppuNhpe1k2sQrc6BZwrBZqTwkW1Kwc7HiaOhg/23UxTGO1Q3pySjxYFGQ8k/0uU+uzcK4h0H8PT3ayB4eFeTpyhmF4NQY75MhnbB2owUyOhzN//juvE56l6FMaV2ZKjo3schNgwcfCH24C4v85dDhkAoOuOyH/iePoNvx4pUFoWm1BidFVZ9mWdTCD8115j7CZn23x+rLu5zn2JdGJ7QQMJ3gJfpPbSY87zWybWZCv5Um88nBcIRgb7MzI8eEKvtifYkW1Fa+4SkzK84TpssKPgRxk8NEtMwRkxTsXRE4yqgqwDWNiip7OjI64FEZY2wuv3DdHH0b1rba01c+VEkCG7kexlVXi7od+axZoBo1YHMwdj2Uhocs25f4cyeVEbRPZOl8NfValdN287O5wg23ZbHWq6bvpgUhCPsf8ZZ9xy+BopeaFgkXL9sX5a9cNukXDdYUxL2E4YYor+aUR3npVsZWdnpnB70RnRlTTPQfoqec+93IAMWs7qiK6WblRubCeeZwVdwUUsQ8qtwepobCYPoawCSUb+6fC2vCBFEuuKBM1XcQkWr3NLFzL4c/HR8BoROI637zvxUVcgIePeMeDfbB7C0Xkgr8TQIGLJKgpneByPFvs4y276bOumGwTQiZqCX6CGQSRFqG8jjV3prd+Pzi8K/u9RYL9Q7KSd3gLTmz6zON8wTjrtzLkoS+xMG+Ur3q519umzHoBz7JdeuCW5b98gARGrURXCYYZh6FC2qbNWEtfS+CM9qPrav98C7ZcsRk0cwlblJm7ivHP3MhJhiPiI7dYzBsMrIasuyYla+5CP4epwpg25MR+m93JEyzvEz7MvYqiVrtorNFR506AWXDJNLFChSbvHl9GpRW1ByvwdYNI5N+uB+C7MAR0hN7O7hwjRLWrdQ8czgUb8hA/9zJBPeN3uRrZS1Trz7dYpUJ7zC2mvivXleZRgaMjT4OST466taZJvXeIRrPNO4xoHI4y8KlOzQD+Vcoj+9UOGUfQc9MDQHJKOqR+YNcr8JNiMToDaEOJ6nzG7yZrQjNZvixixkN5snWL8CsdkEBkIG3/uZgxMmg8feWU1XvL39XUYjkRZ/Wp7ap6niSF6CSUfRUnaLfpelzeIfYNVhc0pnWAmvd/4dJYR2EAaWYAANBF1eA+GETH+P+oCTMkVQRijfJhaCCdWpPIxl6pV29s1nOOxnNC+V3n7OXf2GSGNJwOvEi7oS0le6uWDYIY1hjU+AaRHCix6k5YTyazNFYY31g8Gsaa6dtV5bpfIio4jAbQFi+NK4EDGdOHYyPv6fVyNy0wH2vyHfzv823UN/oFnigBtnZ9EqCR8YP1dEQ9cI9KEZUVtfZfPNa0noTw4trtG/PZ8U9CZ79KhP6pudx+NsX0h/Kr6kz7NQ7Mqd+mrGjDRDbKzkN2aJq4iyN3nA5Q2VmZtJfCYd6EaF4wnDnMcx34saDYnZbw9lMRPeZzo7ZNVJ6XgVcPNawBAieGf8I1aGjCzmZEbPaMwU/gtSAL6MtInU8vD62JIhQ3d8ohLM3uXGtlJKzrrd8R+ag+MGs72FHpLaD0wWIurLScRrhRNddzdWcebT/vpfr/6K17IMqcAAbJPxEl3m3Xn2iXVap9b5YfdSWOSFbM7XTYxor8WYlAelyOKqvZPRoCl7R+2+rXakwihRhb8B4NikBd4/UCSXEyzKGYphm4ACaZ99y7xcqIx4ImDeXpBHNfLPY0uf5L5tQc7SYaWf1Su3gluVWmQ5yS1Yqu4GUoAAZ+y2jcvW30UADzME6MTuhTXJkLfhy1L0iyo7vMVNBcueDpPaXq5Z+rZb+yqVzzmbo4B1GJz0IvrRWJONmQ/0sa1MSkYz53aKdQmoSgbrhcnrK9fptVjz3mcd8q5JwEs+Rvs774UMzTxV35Th8lXElGkqa9UCU+e747HM7+nmisGQtp6MFwHdn6KfeOQTz7J3MsIkqX04/hGBeejM2It/cxL4sJc9Ur2gAm5T+pl7S87sHF7bLRomwUIlRYeYxsxdHjqa5ulS/SIXI9XI+uzemkUVWee176xkWzpC0Xmu9VSJUJluzmRSaEJqmoeFeQzAPKRF7r5PBtkWpwmZXWftuNztvJZJNNIS7dtChbKFOhnc3kkM0kcLoMLWts2X8q1mm0WxWaHzR0p1CqrclyXZ4cob6WnmXF+r7i2+1JnOOotQzthGgymizhlz1qZKtkTaOo8YK9siPhI16TYHBYjmAVySt4ZPlL/WflUXOnJYsA60M7bPyv5so3EI3dAKMtzZzek1NWRiJQGYFHkdsgCC4ZXEMnCKD040YJJBgRnI8DZN7WBchg+oqMuCF67bcrZhprWR/f2dhW+M8Ge5Si/nIXZnU/+KECLdtTGiF6/51h/SIS+cEZajln+3JgvhJabKv2F0NMqw+Sju8u76e/ilMqJTq+g2OB07Bvp1+0EcyKXOgmIAfjglJNTP5idrMWCpIHQvba5S8eVGhpHWgdJGbpbyM6dU+lRjNnfpRwc1yCaCAGZ9cQG2kBY7co+MVpJHJa6jkBqtSJ0QErhX8fTuvPsYpG7ZSX5gKJz4EA7GuyxAhRunaHIJJWcKPtykxq272jBmfUEhofkz5htEI+NOSdT93tRLz1R/lfRKM8x0nokF3bAbnrK6Aze4D3PXLuiMzFzhydCe33X7fvxTn1J52abnstFuTF/IGZU/mfXrYxAk7fmZqeeImIL3SAUkEDBvFUwi5ev3PoOuCX14wCQKGk67w/e3b2iP35v2bM2639CzqjQeZN2QC9Oe4VWiiwB1PiCASrH+bxp8mpgDWtokSdWMxV8aDTQxpBX6llZ15l3Lb9qootxBKsUjGheM3whY+mLpQsgunHXf7nrefGp/mZ2pRJ8tvL2G/R8RXjUtKkDHDfZpOn4HYzJhFmPOFFWgBFgn6kDuLxndJlvmiXW8tIWv/3PDuaHNz3I7d76wjqgrtwn+IDzo2DWUEICZpZEiZIUR+DqgzvYswNg1OXciC1fwQ/5ys1OxkInR7WeLHlr9vEKbCUJXy1xLbYePxhbfaLb6N4ECa4ka46noGVnJr21lipb92hJzZhN8hnASzl3E2SM0gqiAYc3lKMWZ1mu6nhNsiToHcnb83rMevnZAE2Yw5xOOUXt0pZeTwWQVdPbk0tHZKGE7pBYdJ9VENPBa6LwVdCBJnJJ7FmJK29FzIf61W1cQKLUQRvRH+iLl4z9KSeU2o3cbHJlMNAWf7UnGd+NGDIW0n0KFW9DX0p5vZ1IzYynScXkcRAC1uFLkom3b1YT1fn7RhD6MgmgS8PTyYiJw9QgIC+EB5shCtpsfl5N6uvCecYFOeHwarWHH8pe4BTbKkW72/KzGB2F3VxkiMuw/iZvCWMl1lkyw5hClB7zm52VltqIKOnU6iq8lNXyVmNYE2ssqkky5y3/zcBmIVBbENcz7ubvVwRwdKvBJflIt3C2npWL6L2RfICHFHKO3iGZaQicFfNx8q1mvLQJvJ8IpEa0fi8+qpf5WlAm6CiNjbMYFPE1WwsQyfsVFP/pqSQHq2/omLQgtrzDRL4DupavPdi/gwImQyrBkjO1QK5xZmcAF4lRxIYZHOR4YWkR/hyYIaP5MBOuqZX3MbZLMs6SdgyjRLQ+AxIHIA1nBbZP2MTmt0lObQOsuhFbM6brtyJsqk8guQkbJpIu24t0ulqrImYAxvSr4oPDv5JD8D/Kag5WmsSZwSSqjWJJ7WaZKRtsvfBh3x43FlwihakH/MeBPR63mHAJDMtr8olSu//NWHbmBGWZlicylYT73lRUsJcBXJhcKWg/jIPFrflvSfkPXrQDkrFljPF3mRIrsAqUBwPgCfM+dQN8NiVDzDTk7O/djkzeevGy9zDTjySHiFv04Sqrxgc9TgAu6w0hlLqK2dCQsHIm/Ldlli+0WJY6GQwA7Yrdyr0G/l2FduO6YYca2KKOuEiQVzyWt6OFbkvwuas+zrrWJZzD/539UVim2Grt9Z663EGMxcy39pBxAhUwm5e/T85sfRa3K208AGa/TVX/E6mOuAgfEZn8G7VSRm9iWSrowD57G75/uhzsiMu7By3PBNrQe/Ta/zBHGbnqpObgEvGI31MzXnnBTtwmMAsGN6Gy6lwZaUg8pjc0RSiXP2j0bYAoHjNLRgZzGbzKuaesdyH6yiFDK/tibOFZZwgXOgI39K8sH59pRfu3j7rj2Bmixlr9Ya2scsiePI3MEUyDdienW5e6njjrRAc9w6IaYLXkTZqfDpyhEqjwT/hLeC6LsjKO07y09v5WtNtOLOJ3rVsIcqiQZZzLawrnwpJ+qWnX+WCGxle+WOld4f2M/MiD71X5rdYvbA5HM/ohpchEtSJL5ZQXTKnzJn+zYLekaaIsdssKC03kWz0CDe0FrFolL7MjftC7y+L5qUbXUGw8steIHvLSdC+c2hsWTMoRUmuuC3Ut5axFFQXDBTMuMscuRM0sNMmF9YPYKkBLiocQTLBnrJadyqagL380vzhUNQ922pdD/YLYLZVeT6Obu7kLdozB089dC2pLaJRRzhAIGD+poOffMPoaUgINDQLvCVex7WedRbmi4shGKLeKk/RQIFq9LKFqr0quu6p5uAwY/qwR3DTO7IsPgDMGID27GiKH0UWJhnirQnfsPZ/1E4QkrABDUnyaOjoAi9pyCtRTSJfgWTGtTEUD2QOv+Kd7AGCmWaZb6Gh0k3jSwV9q6PL64QlikkPpGlMr97hmS5c265JXnIGQqyw+y9smmm5biO5dtDB5K6fdE2K2yjnkAjqR0hsWFoE/xuNd2c5CqU/FpTHiU570Y3PIeqLveMqaP/v2C2e+Q7GPte/QTqaFgMs1VQkcRBbbQnThWyWUm/05vSPsUENEXSyueUBjEDbpM8g/dws/6LiAFgWABiNmNMPXp416wkLrWV8ijbQ6DJYYliVbEodJAHe+zKwz9naOuDPG7GsBNVb0fHZiKfMrD5F0JYBKvmVgXzyGsAf+ay1dz1JXI0d7F4OkrvBVvBaVt9JV7rFl0k+MG2I6Y639GI+pgE7NEV5FMC5X5KK686Vg8oqvx05uGdqste3uv+mTMDGv8H7xlJTJckCENPbgdD6Y/w6eXlwdkNm4l8PMqCpszXiWY28ZLTEmn873w0mPRSLZ1EY7MqUZqpMEI316a6lAu7sKh6HkbbaQMXuLrq33LhBzBaiy9tjwh9sPi28ne+sKcluoLQZBzAxz+EMWW8w3S1NVkdnlTjCVI1MDIFdToC7DMuhMM6DndgXGuRiqzl76DER3kZcEky5Bhira5pUI+PvbYa+lAbnse2r13hdsIiPXoBaaqLylfMHMMflFG3kJXxMVXpMaFZ49kfSe0hikpckrDYC/ezpxGAiFj7WLNIlcRT/RDDECGtYVGuKOve2v9c9EsUHjBavBmjCMfzWepf11wyanFDFaVaOX7TcXOhgqwV2QSr03vU/3Zpn+FwglTIzuPmdnfhzHzVocV47FNvX23Ok61W5SkLqkoWWc/R2LpAL0pUylI1GLaDzva/bCZKE/kPggbfOxLZyMhbjsGIkV/OBC1EwgCqBUfUOA26kBc99riL9/7ftAKDrKz1zSrX6p1pI/xetd7RHq2RDVKBsWG/fC0JFl81lRIE/UQEGZdaQuVjCgwt7SIClzf+bcfCL3zEh3POdle57nWhIzl4MvDZmE9bk7jwOEXVh5t1XDCrg8j7RD7P4t92CWcgsE1+BsOd5CCCW2qtj/bsua34Fj1rfWVEGBHmrX/exYEt6Y4/c88zTg9xJZL1+vMMNyyGjI357sj8X01zv81RyFF0nTEjYMlYYjh7BY7X00Ug9lq5c9mJG2hQLljVVWhx42V+6senT8qQFwNY4fvwTRE4/OcfrqLqadytNN5OKZ98xz1HmaP9BHy8sD5/SIkljmQyflqnUqfat+ELCsGrFHig+sxqb2xmGn+bhgd85DVLPu58ylgXm/DuFJFu3RNcxBqFn9zGQNnxmQwg6ziB161iDtQ1S8skd5rORA1tAeSrBSJWJjLRTl1KTLEWVhdyBWWDGWpvPh2KGYQYakopyM0XgyjGVA3wmmMUsCl/DJJSdhPHI3QwCA1LUPpBN+/bnSnET/CGaQga8mVxF9rGwGRrShddsaJ5nXjknZzsm5qR+yFm/agZx+Dug2VbLVs5Oapfhm5Ouvvz9rQ07Na0zlim6RdtwZWVnd3WnyoHgqWszCDcOpwwvrvZ7Ta+2WNa88IU6tj444FJb/KwdqkGLJ11/4FJcDfSYHdPePt+hYLUu04piXv7KqmE/cJ79Fg7ZYvFxPJKQZ+sqk8URMruEix66u4WzMujBkqr5iea3ie7SvLnx3zE1hDoOz3HEBsAo1VSfE7rjtEvVnoG0d461Wb8SZsXkQS+Idv4/Hb9b/7dhcMvwzz8MRBPxfavpJmeEFQk42PCySQ0UL2ORJeM5DGnwAbCFO9e1Pn04gs420Ytyr5RrSMh3hGdex3l2gRFs/NDh5vGhWdntH0uX3cc9LtsyRozd/nipe1Bov+4iaXeMo+SweCtd/eHBzFvUMM42SZbLqzxruh1vgpkRGlkD/JZmeZXbVpqgQQPyP8z3yOSWfAzLZSCKjaa/o9c8SRRP9VYEHn4OEHcigtHpcJIYxB8+xcMw+H2S2wS79IKaXa/wMVI4zL+LnFiFq+JnDEOfgca12XhzyiOXpBUoa7AE1Wd5OvEVTLaoHzEutlFtWnY5vdLbURCWewDq9wHmNh6WwgKgN6P5lYoSu/yZ7yb8zd3JBzvpd8kFj0tpRQNjtpUsNGeYg11q5dN6u9SD7NBbeWCbNSDl/cQoRZG3S6Hrs0a/lyL7rnN3HlGclTOXs3f7jT0ZmIO6TYez7sCdZR1iJLfoR7jD9rxEijNX7ulMGqRyuzRPFNp8wgn5BTMniH4Elujpwp5wOBHsHCwgM8PrqLLat7SO9+Gshe0gL5N7rkYWDgZokJkCvJpama8P7nbljTQCHhVyhxnaiw8+ppTH2TAkwTUdWMkzefqlFb9sieDNwsDdtz/jsdQ4kt5UY/qi8/kJCwT7Y+W9zypMpk/vZdyxPesCKKo6V8rvz8Lc0QmaeLmC1dyFZ/DE/m58/yD5NlmaEUuoqU2yXLnxYtywLDrev5dVriyHWMywAkNkK/p3wXd2+8HNViCN7k6IpHy9cRcFtWs/uGWCEkVHJLqUl2QdKc5aKTES0uEm8rFWJ6He9VKSK4k6WTjiHz5qYbdJh2tKhVSUguY9adskJYvvrFCJAT2uu5JGAca5dn7UsK6K1XxLfB/mLd7dnTprY7IHDdd8dZY5HCz3e4v53+4fCk2GkYgx4RmT2uU77OalImc1NSlUcENJ5a40lNz5Bg7GdrT/NpDIYXBK/74WKwO+mKRL+ONplFBk0kScGPgwinNZ+UyhPwKnrNdVHmRp69wqtKO2ovp9gjsSZDgrHF4ReVMRyN+aXZ3oEhI5W1vbZI4nPGYJjXbrTexBZ6CrVH8Gajo39SbtaAQENaiUTC73OpW+kRCjSUwjn6wuwFY9jRrU/wfs5EfB3tIA1+R2nkDumqoUGvJ7ZQFkGEJAP/DpL3Qm6pnpujb3fGQeEtQPU5x95Lo4qoHl6H6A+7Z1GIgLQfWMIwJwAc7RIyQCRaqbxUNwcESospRwhFFGOLvbSWbxR6FHStw0U5r/Z03feuI+Nk6LgXHn95N40o3dQ8oiitF358SeyGeRIgZFQvfeOiU/Ht4PbpRYOQSbYo7csKzuCAjXOXF0oeGej/wSGWj9oc8P8mdGxmddMAy41IW78sTIM+SNnkgCUiV4NgT+JIPWuvWiOW1jeL98fJvqONb6MSQ0Iz4i7ntapjR3PezkGmrbx7hptcPak5uP/qsEk+y4KkOb/dqFJj4j6EBzJcXAi0Fq9BHllW0++2WPl9XKGlQuo3C/NPdmJV6yeiTJiN9DcxdjK5CQ/Q1u7+fcMR9oc2PkWKeOUrnSUR7Gtz57spYU8EaYmEl8eBRU1JJ/ZfCzWMmJds2M74UByeW/cE3HqPmgB/LryN6SHvzBZtlLRq7AdRxUXa+ZjXb4uoV1BDBs+NBdQGgZC1E914gglBNXHETdHQ+PpU94iiqGf/Kfk+B3PDA1I2RzUDkQfhwWL0uC8PbjNopvifQXBtZ08RIiwjGUMZJIMkVXBpj74Ry8dB7d688Yoqv4bCGGfEoUoSL5BvyHA8crUoC6k0a7py6ok914Rn9w2LFFnVi8X9rpzN+jCKXG8HRpsGWR5VeqRaSdA8irPlI/41i8No6CQZepDR0T3TnAh6+73R5s+y9vvfzMAPKBKcoBErx2ubOwU1/ix/JwWDOvD4vsjuGrDvWNyBd8g/+ORczjCphcoqrW5ch/qzJFaiLDH2ifXP39w6kdnFszrwV/+oGdW81+nMccUKl/XhjFffOGKVI6EghpvBR5mwtJgQ8na0430n+ezDorZVwaEuW5rjNgOkfvyWKVh5lkEeGdGhRADkapM6h8EtIkzHoGSfBKBQ2gfgK/eb6Uyspq2F2m/T0tLVNNMIwM2V4ri540QEJYTi7WqTwER9uRQueorROt51CFlgvGAmg42VwmRf0NMaglaEER8P4Cgrm+F2ugP7QR+JJXk2XfduWTUs6FCjSOplxSxQMW2v8o8sQHdQe+51O0Y2QuenZUiGnXEukz+a5zqEAWrk4AW5jeC9AKRvunWdhQtkfUOC+4u+f/eQxGBlzHwLE+2xuqsk3KO4Xfc+ktxJiBB1CllyLfYajUoictoL20R6vtJjLQLWX9tvONssk/OzhywFU78pbyEFdNZr+5XIWvWLZeIw61N2OtBP9LYo48lObZQtqQoOByuBcC/v5uRO29XuiutjYT6B4XTqXAJZdiycx+SEo5/JNDqYm7MzBGuJpKTMSBYtklJTyY9DfV8+QJIrHYdLBlqcCJxoYybeD0cSlBJ/WFBONLnFza4Nqs4I3YE1QgxRXFr1DCC87KiHJ6jaiopDi8/t9dJ/bFpXT83ki2QmhbiqpRetNF4x08cg4H93dsNGfIpfgnZY9WETIEOv2hShPQU+QQvbLaf9JVUW3BWjUB/31UbchL1rdxi9evd2SU/NNCYOM18p0Jgcgmo+vGvBeoi0DwMjOcz41vgp0n2kzjo3ETwVwbPThYtA8slOgaePDEkPwpyGtgz31VGlegjAQcfC3vcHmEWzpFlYeYE4QIXpkXWXY4QSOQAU08386LP6VKHF4EUnkmSr/epTqgQsvtXk+DIOI1TVmWe2ORUKX550e07dThTDcKrJnN7isIdekUehGHVIW7tacQDJS+WvU0q4XqDXEtqXmk3Pmcm1OKkk8Z//GqbPF7aVeQEic2TA5hI3h09UFlLzj66PzQ725LCrl4EYMJROE9VCmv3VebzHobreQaDJqGHDitUNZRbJeQslBAebHjHCQsGV+63Tk7taoBm1Mlnz3WmSio4h8ugtgpHRMoja5uV5V6yCwaLsnlIhRHFZNUWqWb9BHBC4aOonotKxLkZ6iH+QPCCqhu6SzvDmoi13DQell9wpG3rOO8Bvh3UfkrUObblwQkqW9kbiyThARStUImUIPiaVXVrIuMy7U7y7cAayozwC1SX0MtcQj+k6/Fd48MgIx5sfFzu0kMLBl4jDd0qZc3N5XcN2K4QjW+Xhdfxpj2dMh/z+CkW4nCbEXHfw98BTCpslpwMd+Fd6hWJQnTsbwHi/eJO0143VKFAxykv+emkS9Vrt0MjL73ftdGK1de0feCWgtWQoCfS7U/jGKfutUaKOo49SUMKSVMOKUVkTCUTglZNS9oW/gH2RlNXFjslCwVpNeicQh9bQ0Gg/WOpi9YkeiMBH83ZMWgU5Unp+9NDLglkcpq2+91lxhN5ZOJL/RslrXLh56FM6k8UlNeonxVG5ZrX+9VAHjkaMoFXP3hF4WRJwDQAJKiTEHGznpXLTlXXbwq4kusspsfxNc2RQj0CM2ED2s0kKBl15AG7Pn2amnMUmktOrQsuzeO2VV8Pfojzf/FWDjBf6FjFkt5FbMwYPcVLPQGywD4ugh6q8ONX193IAD1t+V1drAfMP5MJZbRynAtvDDYldc+CQytBA4EU9SCimrh0HnDy7YyZDQH/WlMAWaqGW6tgxkSzC0HCr0Vdc6n4PU/tpTObenWI7819qiTN4N0l+x4PMEYQkdVajC7/lhCpX02FIf3P7iyWpTg8IlzaOQW4g1FbFIbRiFj/mTAkoLl4W5sgXHk9DAwzMwBGBGpK/jqhh3VM05OblP2HrmbO58V9zE2TBqbo/WXRbf9/zBYjQfsyTz+M10tfvJSlpHDpy7yy1Qu8KYDbVHL7gUb5xTztohzmFcYSyqVJKQPLIWwf9po+de+D1bM6LmbjlzKMafXZdA5vT1WhKmnITCKfYmfIWbm05Kn+1ois3ZkOc0smx4Xbm4Ef8FnyHDD8DASh8zf6d3O2BaVEtBWXksdt/D3jlqNJuG8kM8yt1TgbWQIjOjqE5WI8lMrjBGS2w5W/I+WhuyxMDaLr3Jdtf9U4TEHhmtYedXexU2IXbdLVFsWMpLFfQ4mjrdHNSjW/U0dCFiD3rYZ4lzHeBcltK/TlrZtkiPJnvQTKE1UuDIF5np0QnU4rxU1N6S9UnUORJ9hWYJ/USN3tkk1cmjot4ylgqTUm2wMQYBATapBQCcxF0yJ0idR9m+X7xcMfG9M+1A2/8rNmF/52cgHag5tOUNQoCFCz+bevXurS89q4SBMwB1LHKgEgBt114KNXgJ7sPpBBDfPsYRnezyejhKVJVKctgFdd/0cnHa58fkH2NWfsyECgHkR4krhImWo7c6vbFshSkFuY71/HBQh2fBCOE9f5p3UFGKFLV+Xl+301q6tRlIMmPAOoxpxXLz9iOU152CC8wubpkZEUr/fKYOECu5xtOhVexcmEhpRRoiSgSyEvJcphKCBXOl+V3R6RjzdIl8pONCzDJrgU35FABEXaWw/VfsYv2y6I0ItwtPZVS7OON7vWkK681NRk763AQB6Jp/gp8nVUOqBL+mgyVweMjagltazmINBKGwVcgxxBxpiSgc/W0U5IU+N9Y5BBHhkTz0+HOy3GxbPdQGEIRX50hj23raOVLBFYsdXk+a8ZcHs2L1LX/XsLJdEmO56dtfzuk6rgJ9hft7+rmOoiCE4X+Y5KZmaHSa83wG9YG5jTGfwERnPUYhv1BHdc8AbWutLw0P61fqVgETrl0nUC0YJyrEjPFFzjjd6CS5gIN+2ch0VEhtIZ2KiSI1ejAv/d/JK64KsHGFDa22mNr6/MAckVtECO0xzDEvihq4E/947pVHd2qfoZdi3OZHllJNwjQ0xqGb+8XwTuEAYc4+5nQTZtb6ruWRmZPdWcLbEIun4HtQVz1v6i3z6OB0ZtEkZKhzGB3ZlcTywITfrBssC6AV3iiZJqCFtFTNx3C3G3/ZY6Q3zR9IWiQvY9jKI/97bKGPh3JifP+tJgdyeq6GY5OMLu5cKrtfN0r3+/l4kN/Q5mCVCfmuhq04bV6S8FsHjBADvPNfNselIVjozkF+pj4z8T+I/ghe8X6zfsOKMusG6Aj5Pcpt+7gXIRGC775x82K/erKZk3IBHI3pLXpClEQ4dG9XM8LoxfXWC3ogvRws+3wLbxj0H5y19DnvMR+Yf1RNebjY5SitFnV+iON6Ow3pVv/VpY1JfqafTwFxhen+4YzG0HZt2iPIO+KG8I/ZAbYUfkVWFfqoux6IFoaxGAcCRQBDy8DqOEulDX2hBd6wD1rwDfgtC8ughzt82qwV4USIJ6za2or0AnEcidEiWeL6y0PoCf4mq8Cp0in5FxfNMvHUrdQWgnfkPBoZP/EWrcZcWnVHZHt8+7Q5oR3HXVfiVb8wfOP+3SpcQVm+GZBp7VmOWj/FaFjG8iywOwCobLrjuqfSaWLESUZ6WYgPBcwFd1SGUrxrcwSUUyZwEIBz9YckRzjg5dIxiv5mrmGX83glYmp2IRs0WuXW47l6wyA4zggA+KknkYPS9VAdgvamTFgMhH8SF8T2CFi5yeovlRqbxBqQWs+UxGhTg6Ow3Sv4OkUBMOmxfvh/Qut8VirQS954cEbttXnpb0G9yDLVa5zIN5uRn2Uzr2gT6reKEsYMBF9RDknWb3Y6cqd+x4+ykTVX8kfRj5PJeX5aPVSNLCNqfTmniQ+fae0iaLrQjpUMl0OMO83bAyQmFtG/nM7UKl+xKibtcOQvaRHsIS+pHM1ZQ0Ko07PSo6OiUyymaMBFPFLGeMkRO8hAwnAZiJMckgDYUBZYYBdFYmNogceEV6I4So09ni9HfixCCGhf1Ur6fl+1HPFwycCqImFXnOms+Orzq5lUa7AhrsRSK2r1q7uWXfBHTY+e1DjG80ESM4uHww3nrVdog7OBzy0SqxNyjlTbyXjVxixflzDgtviISpaPcSJelRMwU9q/thfCPr2lVNtVIURQlaaeszrpSSrVq0KLBjIeYYaGUUgBmTw2c1qrZgPw2j+5Y4qyPNEWBqtlR+UY4MQdQ5gqn8z8uh5zRxKLsdhjCcSJfk1xG3LX/ckA8ttTnZLMymIisOIDaPa/FtKEgo1KnLEzGG7Up3afp+qySiDrxKGTncIWCL7AETi7zDoZZKjmo2zQeYA+TFF4Pl5MUGbzJHgVV22ARphf8vKsh7StDmg+zRt7LVRJYtTGrpsF9CrXaQazpTu8jChrV8v2ygbbXOQyLdUnG5N2OZ2Ni9z2VnzH4ll7sQcHFPMpAseAPygH1mE6qto9awv6pNwlLwW7VTRWBIgB2I0MVHSOICfUmlmifWtgB5TiYPwg/HnXWNLEn/ZLTOWfuCecrKVNLwlTtGArXUIZRGFKkKdmVUJnDfiHoYW1orGflBf8WPCEx0xRP1j71J9+mJChMNXyVqqBhiXTi8RSxbMXi/sZ+SDK8flVBn64pSTAnGf0h+gG7dBzxv2fQYc8OmO+Gay9z+sOApoIIw4Th7h86tT34widXmIXoexCY7zqTfEKgSUzTHTCyWGNhuu45DiH84J+wp4d05anQk1KL9y1wX4WnqOO7yQYL+SLnuFp6CZk1o1TZc88+QeZnmI1qJrq5sdqS/3LA0PWxfoCM4zWwg3Xbd2+cgrsqCeGgFWb6Yv1ySyrl1TZ1ktljM1Jqcz5l79JmcQpfe730KuAw9oryAMPvcekiylxfT/svNShifNTvJERXiNeWaV33C+zISgTbr0+SMUy4gDJ1bQ8thywnTe+f5ITmdx76T5eM2IuqRuUsjaMSLJeHL6NK4+ScqMoOPWpKChjqdvr/xGJFSUyQyXSDd7Oxa7iXTDpNKEj2uBMAwt/d8O2nme0pcuUFu0O7Bl/vEAVPqBr8QUy2EzjXtbYn2kNLzksKEJqre4/M2j0jC3vaOTE22Umdc0vw9ZmkuMyS5d+oI4Ty3Yo5epUF7JHVd/xD4zOkeGorNImRZdZMXFfR5BRjeJ8BpOaVxO50F6A1PKf4hL7+860em8lF4i2vzdBEIGNqQmLAvljHmv+f8kCMLf82MCe/ScmQ0aCkWYpjKvyzuGnQycGV8Orhw/t33uV2HZnUJGFr3ZCqdNpVOfHxGL0Ulzy4mJgLTVACDJrp+nL9/LFytVWENHWXA5zuK41t9ozdFbjZv3BswZ32ZymLmZVTi1qyig9x4rs1k1xYw94MyovktDVeGVHWPFG2kQMobKsYyuiNOyXWhiKfqSFL5MxkMULEm+odfNW+JhEL5sI7115lJ96SzVoV0Pf7hZhKknz8HH4JCSaRwADp6iUEln2fEDH4M/fLoVUPQFf0XhMtSGOc4GFuge0RlEAKTvlmvgMvFh28Y0pDvNEpsM7BknluaXyO2BBbSDZv0v0JYuvwV7aO9NykX1urH8yNI7ki1gLJRvSRdSIn6vhDoEnY/EXr8/CaJRh5E/h+a6tsI9pxg/rwwdszxIrmfHHqn737S0PkyX/kqFw+GSR+JxAlRb4gkxRcsE+Y8w9vlqLDLo85X7LOJ1h85AafrunQXiMbNXVAptKoyhXehD6wqnK2vpOCAVzgrICtaVT/TgHhpD8mokXYyWyQCdP1gyMU8u1KlI5T2BB6FzEZ/ZBlSXiY7+YA1LKgnltZHYora8i0S2XFktnUnbdG4xFTxsCtWOiI2wPgtXjcvY54j+4RnqO4ktiTx5lPMiB9AQ/tMhvVKAJKVQ7zy3vhyZSsQQocPglJ5nVzd1wH3MJqURZlgHdxg+Rq680XZSh+9x3aYlYvPlMZf8cKAV/ipGfrkA4ZETOFddawhDMrkLlSzs8JFv3K2Rht/BKuYbXBqsGPZ5BL84GZkiZkpaUozXj47eKQzt/mOo3uEcDccrkigBhqEI6RHvn5gP00SCPAg5EYBcGBhQ9+XWHdPQHwhotaXjDbsgmldwX97j47QfhPxMa573O7zExa12GclD8IYaYRRqGPl7utZkuF+sRamwt+VPhjaNWDv0LBGZ7DPOPyikRJSqrBJ9TuRDicfLFZM6NORnatiLWlsvhRXqAVnmdhPdrGSxcoDcjTEgtHarMx9rm32vPqS7WxvWsXd9SSVyWviVWIm7TVimN2vU7dEQ3xr/kHv9ZBK8PXQSZZdjOznbZM83SmpnL5GmVQKyzVi1E8d+DZHfs7NtcVIieUS8mSVKW+q/+8x3B41w4hDAmT5zqPjo4hSD+U1kk3YZgvymINxGo/b7QtOf0jyH3OyuY+hcgDLGu5xDS/YCnKTzlYpZjRYrVkLzR6i3FT852wM7T5ziyiGbgBQQO8Yleg+1/7TfG2GRekeU90dKj/G7cGeI9pSDb30SY3+8f6J/+63lFj81EVBTXpqxwdbNFsxDUfUgP/Zl57shr8GzRkF4jEVX4sHuKgSGLE3EIG6jDj8HA1PjpZuIhegE1FWrWk5PHWQ0rVcJWo74P49x6YMB3LGOqEWqGBiTzlHBvAvH9ewASHb3IROQDEPWzHkcgs6gvKLd9sNGjAkgx2lJBRszwT5u+8y3gOKRPtm21HzOO8a6V5qtQwkxdqJciAxgLLsROg25cel6CWv9e3Iq4fVv0UHOp9uNQoGnPgE2AFG4ZK6oLj78BeQG/81Bl2IpYkg0ygK05Z3aWpxaR/WbD6crL1uvDpAfs2ZShCmI8JbKDl7KZrLfDRmvGwK5Y5z8WpR2MBYKRtvVbMLybDoRbNIOQy5V4vAKHHCg0mgPG0tTKGXHbBDxpbkwRiv4zUwgoQocJg/elFL/hyuCalGby9SEo8Uj5Vu/l+5VNoStLcnObONwpNWxKsX5Ex6e8gw0VS32ZnRWIxtt50X3fDZYRu38fwxaA1Mh6js6Bfc6Tp8sByBOfstrX+SPLQFJTk3cS7LtOZuW4AXisLcqbGkn84sWhSAyuv1KrrqgyJMhz3Fv3+6Seh4G4RrpKW80zlrzKI8NoDIUud711GVfdXuGlJaGazfqKgRXNwgypBpnolhpa31Dw2vi4ecSXhxKhRIjN0XvLNOeBTg5v9k+Narrt7dpHsUfa+de91rgusvyNSQiZDmVYUqbHJH/LwtXmbDO5rIkjt3Cvd21xlSAHt370bQkIXzXTzCxhq4j8wyocLjqPrnHNxBPkyWenuP/ZN++bVOnWD8GrcAi1TCqTOku70YZ3/SVbf5q6yLHDEifpCqy9ODbSwmE4N2BHny8yBvLDorpaAQSKqkBt1eC8wql/0uCluvqNAt54xEaa9LlLIEnvZszbmb4F1zhUXgzMOYA0BR1S6SLCn3IF6q7MsTdOo/PH/aR6crUKUHLL2fqUNPLa8iBoe8T2ptu4uSdtrnb2+nP25Xdy9gJVfoEb7q7CdaB0uarkALMInk0sHHwse1NnULv46ZMQ87OyUZenJri6tMI/EClooIr9mfFKFUdPRTVaW1cmTOvNHPAsMt8EwdOF/x4rGoB4xSroHXI639ZrsvTKiOe1dEthhUnoC8v6ndAvY4H7Kkr4m1atXm5YpNU9JtKwYI2OB4+pHq4p08B9jAOuIE3b3p4TpB3lQSYCu/px1IzVhCLPCjzdBzcJJAOiOkeY14kb/0YS/fqHZeshe2OEOoZ2FXOH2iKBt3i4EwGozscozofHBS5e0W2bKziQTp2/eKPKcQiZboPHIST6r2d/MKY0dHjifznZU61Z1mQLH5a4j02huMMm5VcgUMqcYegHIegL+W8SeFhSudIqTowOmpOaiV7VtxfJJn8dULeSEF2DWxuJzU0pvd4oOV34dx5QVLx3qRFlDh57bpcc/ecTqEp3IPFNGTdqsoJNHeQ/mWFLrT9mkqnv86HuFoVdUk55/tMOrxaJ2WEeQkz483gwIbodoY+5yg04xqw7479hLwGpUt1ahS4XsmbG6IYISZ7yFjfF8A/e6eT/juedso7MrLKqXQVV4ZYwWuIiknIokU25OsJc0Q7NIxPoPfKm14J/qzu9ePV639ieBgz/JE18CFHgKWh6k4589tELIKIWCM0AcI2yw+7TQzoKtr1HK0rNLeR3n6dECXXU35wAZCnWhPvMNFvPW5t0PzWgXNHPCo3KwCqF+R1W+rFSdqA23/Aho45I3/OjNvpyjO10nIXHzYqprGsnV/4vxQ+SnQY2sB9yUNCJUNRqNbAxiiMVwwE8ceJXj1MchpgeqA/VvLq5kBzLOWeNn9cE+mrfChMlbHJrRgbjRn75z52CM0DPxwqZcTAtuYOMVgEYuNr11yBRSnVDYOKqh4JSBv3EtD2vjlre2jYd7/KqvVQIfr64Ys2MgKkAOlg2RSUx6Dvd0AndsqWjElHdbF69c/ayDS9Ctuo1NV7rZxFvcBuAI2rlwQAL2LB1pT7Fn6OqVUwZlyCsSu2Foa5vin9RG4jRmNSaQOlEywUCT9vRJuyhX67/Fw1193ipVVQ9Mxyejq0isZAre3CzGPmxhhuucUtwE8AvxS3pHYksJXcq2496qlKnt/ZcKZDNBE9q2MuQqePdKKdWmaG5A3m1K/LMJrAW5zixjlRaViJ8bqeOiKecF3TKkYqY4d7g495E9gb3umgRVz0hlqfPk4rgMgNJLd8Y7FjIVeGAHI5ZeUgYMaOgf9/yd7CyMqGVebW0qnfNdguXvmefMhWcaOnp2BvYGOPGDibCzCZcFyVgbxaXmU6V89ZMqCylzLYBxah6CyH7WviMINZOc80TI7mljzuwmt0WJHSm3s3X4jUiWKfPg6ZSSqNOAFbaBHsTslVICqcA6Q6q0A6VPhHOUDEDbVFbS9+rIncc47qc8i3oPZ3zjM8YFFqaLApmfcD3xFPvH+4GJjqSALsNe05EBiEu/DtPneHVFuNM49ToNYNVEP+32qr+plSnaVy/YBKwcNAsWZbvJDAz2FUwjlCKyP6qLYJtYcLUmnwO68P9lRDNLZSFTJT4RV2I43x66yVsX/oKaGSQs3Sen5rq46ress4IJY6wusypdSVSXxtVjsoGlSS256NB0FmGVlM5KRy5O1VZUTTggPGgkj7eqmSnnGfTRmoOhWxOQjaaTUugFAzbI5x6JW1OitoMNN1TMRhGQ97Flr9/WzsS55TAZPtcvATzPloQX8pxpcE4H7AkUouI+q/MeptWlXhu4N46bbG9t3h3VdfDgZqO//4/YoZOzIWdMsfNY6NTa32knL577Y4lsbenIcnRIeP7oo4tkcVHsXQVtpV/lhysTOtrWXaaMx4uDD5m+vd4WpejYEhYSnDdcYZR5HFtu9bwLNmoNtHdFzMUb/ULjXYL1zfjWBkr45yFtznz1IXSbx9I0zwBPwoL1kAnjgmcqyxDHhIq8PFpRC6KfUvtR2nYU9hP7zNCcBpoHDBY0s6EswhPpvw3SUPI57ZQFpKCXBnBUZBJOv8LwtMxo6DNB8muzywg1jCBZjlQwsbYQuS0SR6PH6JLch7cQ+56oQBEQ0bgqpewqK7NqS2QbckaQZznkzq+OqWahSF+r9JqztdLtiyzQHrgXMs3Uu1h8A+VEDvy3Uu1raSZSsoSevVTA1k7dW8KzZaZuildm1lH2hjrsuff/QcZ5ordOoyVSl2SdaXdcmOXOwiWJpBEMctRH5Sg5Et1JPpQNXEMPFejuPMqMqMWp9c6l6U3re9NOjvtrkk8uPAe5hX/trCICZQ/PurCRavDH+A9Mk0XVYnaPZhCxlTdsqqxVyB4Q93vbB2I9CC3lpGuDIEjp6h4bt7h/O9fZ6PRNQyXb3Xkma4jgMPKl/8mvdxLJN6u2Bn6ji2XUYb0mslPrYNQNcyLwh5koC1URiKTsOxbHqVsZ5raO9JH6VdRxII6aWCeB/Quv4MnhmOHYutkKdnvXqYQS/e3KVaXiMbRvqibtBRrshPaVG/bAs6V3RE+aSIbNKM5EJgVguyL6IfIoxrbOCQxtPf6AhobtfZNw1gI+LektyljWNt4z8UQcKNweDT2aAXwGg0ChEcfdvp1BAAf0vCyuKvda2OoIV7mCbXNLNtAnMlIMGQcC584ODWQWbOzKhAy4g/C/6LQVtglOlxK1gcjKqhhR9SDFMSxz0uquNJHA7nmGhYYwExCXUQ3zCp4n41Y0+0cYtZEmXOUb/D4cDwG75YgGb2VWkn1yPFs7ViZacDx/fULvHCmJNtczpD0NBiRP0Oo0IzdYM/bDBRf3mxgFMr1qHItbo8vIlL2fr/3/si97JbNDxLDgzsE7s3NVHoQsLfvOE5s8eYQzO49iS5ai7M2IY0paTMnt6wv0bCv+I+dKmt6747Wpu3bLN984RLE5pFt5eUssV+/fPVTqpUwfp1vDtuIQ0yCT4w/USZTxyO1Q0YKpdn6U1ip2fE1HcqhB9Nb/d/kUAsg+YOeIhSZKNtBZoTce1+kcY/c8nV/lzTjZvCNtSgXoORLbkSShQ4yWW3j7HiwGwviuGABhmm4jK4RY9FPsaDO7CoaNX++f2dtA/4z8i1oOsrU1VAJoJJPrAyptNu7JmEeVX6g+97cv3BEjzpZyIHEc+dHZcM3nU20+5SgoCRu8mmU34Vlh4wYdCWj6Zss0yQipllYs/RdHZ3v6OY7d4rqr8JnCs+NtV9trPJxwj+vuRWSXh10uLtn8WTzkkaIzyHFHB2QDR+zKUjUU21KH5pJPnuz48Xp0TBSr8KgPO5duu/r1CIp1MznrNMYdbO/LIJz8Ab+QegZbPmKTzF/BJ/ANAynyUlzcm1058OfM0OIZ4L7+3vtx4zRtE+dGJ2EY4NoycRuIzBgDSvLN0AUnOB2kEr2RBhNxp5N5JBMr7wymEqjK1vdJl2zNlkB/lc7/oFrt8RVECeHNtDLpLicdR2IeT/cjJivCbllQB5rDGUopzLhj97mbEZBwTy2ZAbS7mgkxni0SAlgoajSqZZxxUikSZQ/iRYknhYLUGcCV6md+ZVrWMo1JxKokzErwGXUkjn0jjsJEL4pForGX9xLNarsvOBr5k3A4xmq5LnaSqEvS+ZYc8BnwgQadltxKI36/QMUX1rA5Mj6syzVqdn49zyF0azXct0jXmi0EETOdAe/F+b6qvblhF+27NOV2BPSCrKYPkhatkv9X41Y9f4yfOrtlVjhIsiS+ZeoCNbjxPLgHkKWfiA4mUInf0gcwrlecdQK9jCo6tX362Ph3lG4Zj3ru5QkbonacT57EZ5VlGXtgVh5QeZ/iy6q0TmfTadkZCB37OnzCiQBKOqQxnVypEdTKTs0m5lDn9Dw5pxz3v9fLmi1za+/x8LwmEteGHY95K3ALk1mAf/Te/sAAtWTGDbQ+MCWIHV4WxY+Neh8BG90d8mA7SyRt5KuoVQzw5ep33McqjXrd1votRwr0AB08nLBQUOykaOEFVozld/i9LoVH6yr2gz65DwwS4fPA/gbBiKdY4Ji+AVmh4J+I+XDyqrDfFr4AMScS0j3LqUYPj3kpzkpn5p1k1p+oY32+DWLmsCiWr1rQkVybr0dkZPiNgDuPf/PyYH8gT85tE2nYK6WhaRHf/aYC0El1bAWu3i7/SSodRvZZ9Vp6Qn3Gi4dAgUTFVHkCK6N7qAAAS0QV95SWnF4Q915Rp1itiiBYFVv7Ld4+p8ONKsy/VdF9wYrHetuJ/T7LmotTX0iS7HJD7gHQrHqcHThX2lr5rxV58EwGId59YKOv3goPNCMkrkxW0B3aLiud320wwIS2YBI0piSQXwsLfCWfDsBHZz0F7yGnPNjgy1szsu3XlcD897HghN0e9ANB8fdf8Ds1u4kK7zAP+0BlRchj6Y4arFekRjp/AMxBnpAsj92rJvPPLp+kbTi5zrjKvJva2Ia8iplECnqAiFptWTCO+DkdygZujgfDzkuzwL5jo5nCi2UOgLXbcYpmKh+amEqw+UPwYc5YRBQMVWtFYDkd/HyRDSjQuFjR8kSm7Xa7Obko4wQy8xLVcCf3Bt0PfgKA2RO9RSSMtul9Hth4fGWyl1uIZc3UjIuNVdVR5mOwr4FubNAPBhqEgpe2hM7iR7gbuZZRRyxDM9X/NZYrb/H8s5RbxnkjSh7EgeQgQ+hFBaoQXHKk5G8/6W0Lgq/TnOVuiUYc1HSKygHO5TgVjcAk9AT+DX4sT+aVKRm5Fv05hH9xDJIwfoctIY8VmR/0L2bRkpU3Vpq4ZOH1Q7jTnmo4yPO92X9NjWSP/Mw4VV/ET+xHUzc/Hp9zPIn92vIGCbF+/1xT51+qz5YxfdlWhpdPp+o1fmbCvN1yhn2NGcaz7wFG9+Bo8054aNrbJofigHPFpl2GzIdYcuVC6PQ7dsZIC5HLQ4C3CedFd9pQK5R/ahgKgml1QRSmNyQuOju3J4pNy6dt3H0QQvlZc/fpqJdrI38/PNdTcdsMDWiG+C0JvoWNlY2LCl0JwApKlEpBYqkkt5F7WEUR0ZhrrxpY7wJx8+lAXbSuGyjhi3/8FBMThpiC2AQh2EoaLAQ1iAfaEdaPgfT0yreFtGuYwRFC2UDMbvikfovAKH0qJ5fhivZKrAyNl+EGG0ln2MG4vWxAXJWJECDLJprxB07Su2XszHUli1M0Q4D6c6hXIEQAIX07XzzRYn1paarDmLLcOwxkp9xPDHGBhvmwNpr9qQl0io7hPtLh/sbi86IN2UWUYcGph7OFZhYzA6cByNYXBfqckpMw8tO5ftUHkaHlUYtHKIy/n+UU+zoyFwWsKbv4pe00YXxHxHsol9ubQkfUKCafkmwCsMFqc+KW74FEs56kMxnNU8LkVYd2Am9g9OhYCUyyGPkBYTunTatzkJAhebnU5A3THXawPJsunjqR1pXFhqEGN8v04Oglz4yT5KROMT/NL+jAeYyIoaaj4RxweRYr1ydP5Rnogdp4U9I9OGiOqacj9UbsW92fqd3pC231zHQP8NxFzea82I44mQABRpGZU0EOrvG1QLV4EMm5rHkIwV+ApXrK+BVCgI86Fe71tA9hAeHkC+xBOyRm0mq3+Ac+7ZdtCri/DRrPwcEz5qPVV8yXMkg/S2Drv5kzuQvh3KD9iq/ucRgFzMmsp6WQLQN3LsNdzIKLpk4w2ufuD1fkNmPk8ZXyBBfuCRe00rsQf3piy7gpaTJdBWw+dFizJtuOiU52jUGUDGVcn7omleDFjR8VXnsbseou3piPvjj/AL163aZTHi5OxLSEve5PbdNqsAhpjad728e5Z8CzlSYKBlNbEAYOaNsyjn7PqGSn8REwXv3PA1R+LkcHws9yu8mK3xpdWcVbIUxJCvmyneEH4GB82Lc1sI07zAiJfax2em7jNQPOemwVqcqioMMYQFJrr3x5izxYDwL29pm4Xs9xD4Dxo9GKea+kfOmp6D3ukQrKem9KJB3BciAm//Xbl5oIwgXNlU+EYwlekoNRF6Tfbw2J7FAp4J2zRfUlbCm1s4dtAPr914kVWutM00dk099T4eKzWxRJ1gzgXUWcVUml4mm8twfBkAYpVHEfiidsSoYEm3YzmYo/s+sOiRvB0vxw7McM7HxNRk4JBMWQYSIvVV2HMEeuGNdfDBZsejXbfhIDtx2+crM4re9BZ9QX1Jt3iDw4C56+4hZ2MeIo4kIqDf+mQgPx1cs2F8zreDtDS1EzwwCcqDGzTgDI9pMyPR6NQx5VBqVoyLS/JxP+achUDquGC1aXpHc0g9PLROQGsRatZfOsmziSozNNrkI69wLsBgnfi6MHO+J5MzqWTRyHJWaH3LiDmtg44axugWX8ijTwYiBnSa4qWoXyCBov9IVGPaxn5gBamcWscQ6DaF/x/DvPbRcTWTHVKxi4XYARTR7pj7bXC0DNw6w1o2PiIRhHexCGE+IR7ocDM4CY3HLomlbpBoQQJwkYBL3/E9JQL0C1nD2kT2uVSlPcAMIwouxfBFB853TvsvJXulzuoHITpDt1/9GeoAeWk9Ak3vC7qmqAMS8ultwEDKS9k6mfFoUKsd0Bni1qd4GQOj+3+5Xvt5A/7Ku6MyMTFymRwNwQ8MJ53W9TulOnOM11iWecUpUdQ/RTzpROPRvgeBbd+hAeNg1j7xv0c2FsV6qXpGjtdge7aHUsl6q/8oOoGujg7wMVqv4qBy9WutqjVazSr+eZNSNX+CMc7s9+ZLMlEYRyswYFzJPTrEjZVgXh7VoHaaUYEHSECwUWMnVzv6aQggFWddDP5ySJl5BEaiHDpeMSbmVl3ZeW88UIgJacssIlYDc8cRlVoJwPWtObikTimhv2/5qxjhnfRL3q1wJ2h+2Rx62hYvodQ61HAvYZ8l2WuZHhOV2nmbgWQNM/eMyONsoZ1BLDdVnhtKoC+kMd1VD13B7r+XgpBqPar8VDf0HaQ3dxcglZhZ9Go4Z5/BWCu/hIx/7PCpv6vJKEe2ymiMnTB31g96jsVAXgGrgduPGo0lZok52Tq86trMgit11BZpQwRIkUaQTev8Jf30PDeJZZSEU87ceSJ2mtne9vNnqW7K9t0gJnZG1pfoIV8upccNOAoxcpGAtlN51SrX0Lyg9Br0Ko1/1jiCcIEG9k8/d7tOKfNmjg6rooECzFPxaVAKEVc09EcOD83VRHoReHBwBUh68BofrBUkn9tXQ9y9tsRAUvBQPNXPxStO9PYWMVOeE9fU015hgww40AappMZaop6spqKEQxM0gIFZVj8xsTXj2VPqF+ByuS02Vc4IzklAL2CYj83X6EO/MveougB/1BRrG7yMlQOA1L2TcEgrQawXeX+vP1ubVCVEzHb+XBResE/G65D4QvJTVtUP9BLWR095GxyP21kwp/nBPk/0JzqhdfweYwYpNu2nfL/KjuhBkG9HVK+2U0XPKGtLzmWynUA45YgXnQqUiclv4028l7ucmuO1Qg7Ii8cSRxZMQQdrKsW89qdJUNG4O0GY7VtiRaeFNcn4zrSUwNeVocp4Zztu/ZnRU+0Rkwpunzn4Izs7sjZyyyFVczJKvx6OnN7n9dNRpiFJVJWZJT3iYWrgLaYp5eBPGmk9F6fdykyPHQDsCV5HAV03xHLoEyXbGNHerbcLFo0+NIG+8tVHKLJWiDu5bxZVhZV9hqDrPBUhFVbTXCenjG8HhO4OvEAyoNJnV0aFOdCCM2NXuK63JbZHSKFAbEHVydQkb6xG76kdQC3eJOUWffNBjbSxbny3LRlUXBzPceuYxbEhOlSoxoEPud4+n8FLc+xPSNpMKh6/sM1nNSloo2P5AFr/jQe0C0J/QrVWi7xF8sNeqt77XAgHLOY65+CRu607a3goX85l4KN43iTRrF8TBjwk541Gpbnmw27Xd/G9KHdhBYueE5B8kl6oAUzIDr1/eAePPpNUjWTmTiF2zVRtgNiebhSuiwbx70pHDNm8dpjVF8WgkeVpv1znPD60URP6K9n7vwRga1dhWbkuQ4sPqRS1tcLSTlsRBPuNkyXBSdOgNpnqQ0WW8hCbG8E5QCq9nDbv8bUJQXdr96lB96dGgHU4aWgErZP9E+Aocubca9BogAm7xLlh1bYLwWZrdqY0bCRjXvmebfPRX/tax6off19U/KQWwd8DMo1w8cCifMyS2qPu8lrW8tEL18q0ZzYG5Aw+5jQM1eS+srXuCqs5ZjezA27H5wkykjz3Xge+o5v3bdtvMXDxkwGwX2xvhfy7tLO/129R/+uz/FMqPLH+N7d9pcuy455k9FavxYhO8wbRTf9Bb5Nk0MHVabEj0xsWiSnSat+P5Hmv9uIlO89CvbkgkGClmD+BMfxmjZAwmFSjCHb9fQu26297m20/z06kYkVO3UDB1mMsupYUj76qwdVur9Z1hwh+WQ5g2BfJTQ6Plas46udDytZMbzxWduZBXSZe1C3ZF8upN8kyYCCcyEWEdZSMBc2EwAgXI72DKqki83Edbv98NDzNac265S/xYLIIaeFpWzbGJXTeFSSkWO+IoD49tmhTQyQbnkZsdDHHBP19m/iwkXdcLTh2mYDIsBMoB41qBDrDnRbbVY5qvezqHoFlNtUc55k968XJbqr+FKii70m553UvLQHZxTfqt+p2l7ZTVPachdA9Z/SUj28rS6reWnnatn/joaQ6eXPuHGH1GuOsrwXABl1GRoHDOO6gk1iqPwhvhfl/z/AdelWU7lJ1/bmkCB4D2IDZ1i78BBFcIjw5TQ5MRaIB2CEK9SEqhK3fu9HL4jNWk0pPgwlZHMvsg+Rx9SHs+onzELAbgDiF6F0WO4/540+isWckMxAKCzhcb2JLktE8uFK7LB6D3l9ZWMHzd8PSZ9lyDLiR+cOnGHxpuAUaqaPPYHhmcqqPq5XYB5hoPTzVhq1GfTVr+lbE/I21DJ7UyT6muAt8mzBUZJxc1gqmGxoCll2esXHawofxZur8Ae/r6tW1LSk4lzoswJ2o+2qFcIW0G/jgJIlyWfSolWUD8TLqnwG8lfUPV8ncVpnYIfx3BVFLnEeUsfPhjjHXAWgIunOemDMYi/CMNa14FGJOL1th1QTdPbzngAO91DaefrJSR+uQt5UA3S3sF3INAlJaJYe4Quvcx4jT0wotvWeEeiqvCrPIaby4rbaWhJE3A08jdAB1PPIdTAHg4rTSo2BhUIeWVNjNWYDhB35u+IoMeLSkgJgXVoXXKsSOP9Cj4YSTWvxMHlMaFtCUG4paK1NZym2BL9mikXCpqc47e/iSdcEGmF0pcQEExEaOJDygawmgacAegahdbyETv9abbBFlXKMtJCGUvXSXPXMD5oclgLSePqPUSozfhWP+qoXgbpkX/G76I4eRW/J1SwIJL6afn6JVZa96EhNQBzYmVeimuBiavRaPbf2XvmOo/eeYNLlRl20p3CWPqrH+gi76qUXAI8ohUGcYZ0TOvbUkOPhw3lVbozF31N7VFi1KbpNb0pc+Zf0e+9PukInPR6BX1hoj0AVpQJsnIUwyoeLzle0oH3p6oOQD6JuMbPn/GouuRwu6NbP9UrHxKDowN1MG/oWRNzs+0HVNxFDGNwkcHHtbFR0fBSFZkPuPdR5HMqZs1BdoyHPWkgxDvRnhRwFvLXoLF+k1OVsYN6KRW1MSwT3SCKNm9RlwQ0D6l3Szx7qz5HQEFBdWHxgEHddbAc+8/6zx8Qyt7piZV5W4C7V5fpkELuuAK7Uu4h2P5gOx2EoVblAfXhuM5Fvj/k4lYp06zsDYIm6JuJKjVxf5UmpBG4+1UDFgw0RUEdBGZ+LcpPcK7Ljrit3B9zPpxeWjHd/K0v89+hdJiIUZRqEx17rak0sK7IvwXK0KiqzXp0PQJ3znV+JTtQtH9Ehnb25GxrLdvhzEyzb0S7Wf/3calRWHjWL/azo9PE84jbX8c3i5DgeLKsU29aJ8fYr4dUKEcEm0kJstv1lxsMcsIuH2qaq+M9EmjzJnc++qFQNW3ZK1jebiLXhnZcw3ue6mkHnEsI2b+Ayl5MYJUDJhc0VZwb8ohFboJaUYJV9xigB1TYsjafP0QGr1b9nFvv3/ROGZafgJAriQGoidSS0DJGhHNZgfyFC8ZBAR2V7ydTFO/91K2gktOIE6Z/zO7oF/NoGNg74HuE0j64mdZMPPZmr3OPV+d683Y5adSUYwVaqY4phyQv8mWKCRWNFbrs77J5HwNc2SxnDqPo+VPB4fKbHwecruRW6QwCABQs+uIyW2y8CylmIXQSMoaHqtHxixiJFFZxb+C+9ZDoqIfVFW/vRCjAJ3CjVnXn3UnfkKJd8HRwq+M3nyLf4pkBsOH5+NzulLo88rj7xouLAn4+69xUvvulzXxFja7ktIT91mP4CnIQiVK8sTxh+W+kOFllivy9zG4X7H6vzgFfmE0jgxRfXNOssw/2n4OTPIsgb3AMARI9sJdtdj06LiUz5dnSey5PQr2DROAjvrqo80HxZAFjiw4GKhw6izV+lXVTjHGGOqPbkcniAFOnlgmOzmqkE0g5ysPvbfLoEeBSAtOj/lYRucVMgmtiV8gfdtXZEa9fq76T/yJNi9OIBM+YEjA2psxSCtYjnaOiLEnUF2N/puHDkcpyQT3dmeaAblaF+Rsh5pHNzbbB8i54bltWtOnEKuWcatSDUAL1FA1jDUalxGRE9W0wI5ZInHNxriRwpn2R/aMJEFptKCYteASr/g+61hevd1X+8COkHeqPWtpsRtJhk7X08i0mtsbRW9wpajLYm18iBvcnr4pD7ymHZzdhSWZrcUsmRu1hEgv3aGYyb733W1GjynhitlI6G4T7maZJhIw9Gq58l0Nt178+soT08nukbBNj2VyN/Q1rvRlHYVAIfogBykXt8gc3imisCtIucUt/CsBLD7o1bOfHvKnJjVtmqCntvBfAu2S+rUX2W159KQkwjfTyrynCqtiyDTXcGud9R+y37dWC27UOVUywKAR278biRkV1yoXTFW8wv+QKw7v7e3jljyQLzq8pRpFezNgGXMO74xlJfyzT3AdmlIPAos9leZPql39KHMLarpCKoKZFvvQ0CNlEsIjJQ0zMg6/+jkznJZmT4AC+4fEJxoO5BTmApegW2qwFUz5Jmmr9QYwYrDcgAY6VjRjA5ONCAUs02xsp1LSLZYtxYrILCR9ZE71E1sKCaPPi/v7iFIhWFRpPWPxvJoe+CnuHIK43rBrUtmztwaMrX97E/XquR1f3U4o3WSB5+rRc+l+sXCBdkbVjLZFRiETWhATZZPrc5+nHB3yYY2VAD2Hd2wxNtXoVcHO5uXHrNPWeLaOMyYoi3UVgdBl8fZUjRgvV7knpeOaq7eVL/jQIah3MA53l13V4G47FjgEcJUrF2Dj+H+gtCg6Z0V8tD6KiP5+2DhR94N54KU1SLanYMJJ1QZg16pocOCy5X61uhbOVd6T1OaKLvs7urhMcGr4jo+wH4LsWdZrdUburrESrI1O+Dd/V+j1ud0+GG0ZgfnNkKTHDK/zXiMZicGOOfU1JaDkxh3iuNZgbxPf4nPFoPZgdZ3yZwdsiSCoib1t817fGzHn+tCEacP9+awIhU7s0VuS2o3Cm3PljrdQrF+mXHEHZl3GaRAHpI+XIWw2ysHfa500ZrW7JhBlyMbkijHzWSZnMqyRre6Dwpt3feOSEOuty4MIIbppKPrKL8KDL5GEdIOeiFOqPqaSs7mG98EOPDDYTZL/ZY66EI3ZUW7/CrpP9cWdeB5rh3n/DUP8xhgNOD8XEMcW8wUD6rEgKlcsoud3WoUlAMzxkCNdhkhzhNtlQPyANwcxMZ0SDPb8UJG053vg+5bgQeTwkOBkHO+vr/BePoKPSYPq/q6gIf4NFZMEwN6p5vyY4kWRQu07k6XcyJMhQQpnB/XapQ2Lq6EcQxn75DNJj7VjMOaxYmijpTTAqXqEqsMubNg5F80jnKTmisWPmJgYNKndtHoHi/dp6aifmct4RRV93GAb/fnoGpn9mjJGFN6YEGbG7Zg7ag7w0Vlh2NpCZW8d28VORcBDMVCyu3vTn3o2GPe2bcPJv4GjNqi0jBz5XSzHAdZoqo4vbBFuMW8YNptnaZez947SI7A1Ye96tXSjbcmLWEnzFufw34OTdrH9ZajsmHFvSdfkcWhSTYuQnYPZVcjumnNkEUJ166hOk455ITSD6RbxxPN93xtUB7P+l5OaCRCLgt9Pffvzuz1vGISqbtTmEGZWmgFsNmQBymwjYlYtaGSUjtbvSKYEOEDdvL9PtE9AhRBOoSKyzWF06P3vQ5DhQvXjLfXxQ4ou1EifF4hy8ZnCgocDu6t4Ofxiw1rZ/10W0MnjlNlnYb1MIzmpJkMZGStN32Bags41GveMgRSwYPXy0LOC3xJG5s71hrJjfjz0y4K8+mpOcSexfJDRJLL9DmdZSnyCiqDfEQva3WE7qykEoGimuGejvoE18ti6Ii1qjR+Wymabs0I2X4tJOkzfNVUE7PS+QVj4ruuoyoTBKRsXWgIm0wv9PdC602vWynEHJVgioTSCIezMwLRpRNjaDzs3+5FvN3wCbmRIKp4RB2s0D+yR8hdURTuD+6jSbpCYDcm/dTi8kkAw+VGxV9UlNMe8By3L9x44px4X1r9Mlo1aTuAugkJoRS9O6TjAwq6G+RILad6MF2y5M16M5Qh58erbEApPvBTk6IHx1syaDSRALsOdUoQSg1CYjsK+/4TcMLtX/7cDuL2cF4lKddwUEFRWe3bHcfHG7EDWeP/ittw3Ht1C+phZln9Fs6TrR8FjTz9ojtB5zsVvmdn0tBtSJq7jnfRtNuzlQi3NLNvy9nFhRa/Z0ILxRxW0w63d3JWxKvzM9Ne/Ul6lKilx6sG4CkJ/KYcjWJ8ST7QGBGzjUWYwglgu0go44AGoJudDXdU53ujtikFjCd0yreFpYC65avLQpjdli9BxIADeX7xyfgVCWbF7JR1wkhrYRl8ldjRH6fx/JQkqYNTkxf377dFRmdszb2ipu/g4S1alvmcVqMgqAzS1JhC3vkgcqy8q2r4yHRo5xx1jf0ZKC7MLVQTPIv2IwupN+SUnGD+wXFmPs1JTMCmFO2kZzGLfdykceU0AU2SdEnVqMi1FZMa/REbj/qV0fF+/g38kh9/wUmK7a5nLprAGMgS0EUIu9hBEmSsv1pnNzdOV48aqkUEYc8pZl6rB1jxlJz4flEPVA6KVR+0VxTOmLOrLgDiwkew7PgyfC8cjmBxLaaOQYo2NVi8zMLEaIlFSXm818+XksvDJc2Q/vVsAYsq3pG6XfyBtKkuGSV9KPxlIbWlSxTZYuvJKyP4WCq0oL+tgUoQLIu33PfxZzVSe/0U7mnsQ5MgiTblYAahcnWalGzXIrFVCJQvZCp3r4WK+Silp/Zy3Kf06nAbNDG2d3vh4ga6D1x0sJMUufLA7P4sn2tVTo7qd59qpUrqXmCTxSVKkub6R+rn+8LXI6qzo88OChdvRn4gIQhpVgYNEUN4nz/xXmumato2zFToISFMSBTwJDJjsamRnrnE/ThO4MVZW5rfxVxeJo/9xHl9plE/ya0ogXvXlkIEF49B+vSO8nEllaraNXuqPFpIYiK6VINWR2C1f/CTC1P3HWR/R2wLif9d7JcpwcyAclUPgbEuMbYENJ8j7vpucQOi9vdW3kpqQO5YkjhzFJSReYPmZLfDX9H+u77lmT+/8w1f+MWNvNJp+zq8N19UuqNocbSF1Tdm8Fs8aDen+fl20Thu3Vy2H7yMWN/c0jFRCxEXXkEgeb+j3W6mwHx9tf0wLCLDNCicWDUYmemRcbRXQ9Dgw0xmUoSy0ZroK//6IyF1akIY88gRqj+SNeXaavmzIiCTedL2f8J72fkpSnMKS50Dc3P9NpH6hfYiAqk59bRWGeoo9aaOwMC4aMp9oFxTb89Fe/M3n33F0Q+ySVCvroCBwZ6o1ImMMFpC9qKtFx2HvX6IR0Qcn9DQAw7B2Fn8mgi7iVaKFvIaQlhynuRvUWa6qQyBA4MG9VT36CWhFfz92nXe+noglu8Eea814pgCmte0GoLUoX1IRRdDauBG3ix894AGNiQaMw8/HAC3abhQLv1D7uba0GP06eFURwhV+pOhVV9RY9CGY+lROm9S5DVUL4x4K/IJndeTRM0x3FQYW7hhouLalqvoux7nIv+Omkmjvvk5i9/ViGzEa3ACO6zwbGLlFsAXshiJOuqQ4LtJ5EOJLGZRLPX8PgUVrFxCjN+4GQe4Z+c9sQE0OGQacv+mbcspOmH5JHDWgLfV7bX7vhZRQtdzJPq75rF4bIi4xiXCxp7dMAtjm3tadAIdDWCQF9hDU96KtMMosEFoWwFuBGxZBEAr2kEkCLw8MjnzI50shOSuZnN2N6lAZZq5IQCEOkxBx0L+0vjKTL+CQFQzKRHHD7j45T4EjtxzaICESQ7VeGxFqQRWKlijHDYB803gYZPHknAq0eA1ATTRhSc46NyTBNc7WbbIpauSVQROdbU30Fq+Cdm6WfuK9vXB5bOaOFq12pnyqKGoJpSELOzMk9Ft8Ik5G/Jpoak+q0MSvp2CNIVbXirfD1PjIleBKGoO5HruEPmH3YTN7En1haKlTnprdryFv7Auh8gOkWm/uCBKtGw046ZJpgqxx53hGQ5H8RlesrgktHZGuK2UBl1l2EyNLTVj+CAolCPMWfBR5MNAZnO3UEiPNB/1O7ns/f8fQavpYWzdFztqNkfj3yf7R2NF/Lc1EtLTrzhJIPPpJDnJRFZj8hortNALSVHcKZf5SzVH4ceVi4/QvridtA8zTlacc58x0rmOCI7LWCsCpyyBefpPCQkKahmOwAiG+e5juQJ0Lu9KydfGQufD0M8xfTkCL0R6W0dqUokDIk5N70trxdQWruHMyu+eJkc2GbunUomstzvl1XqUnpgtqXc+7sLLnkhB9A7bV/Cd5F0oBS3Ft4f+hzsf0fsdd9ODUtnvO97Qw8OCyhR7J0ipD0GfQSHa04SIEw+/LRr0GMtbWOvXVD1Plf9s5Z40qx3nOc/QK46eiwHqjqa4iHhzyJ/M3ObAP7S60RyNV+bNU+U0yvbq/juLA7kWiOk3Jv8eP2XlBW/D43migNXj52ZDKUrJ/j1GGSapsYg/dwMI5864d34fBUomxtJDeIeKyg9FcfM8baX4klTUbmqVrCebz0aNW8L8tafhYSqdV0zrSQ2X4jRobeEsbpkOfgOKHZNC28zC31ExL256+O5sMmUkluJYeHzphAN2HZz5bRt8igtigBJl6fxNhvLT3f3OJiZ7gT3j1fdNDUbupT7WWHuXpc9S2echIEe+g0uKTLZZA9jQCb7Hnn1CEQrMclp+ybviizE0z6d1y620ll2zScRm0M+1IiTqHpxoexQVq8ensslG0dRclJYpSHfDEN1zD1LFI4tbtGkK5L3nhOxNsUfzgKBiR/1msUQgqX5D0G1xi7Jsmp4msovW/74xgGpvoIc2Igv6iTdlB3egoJ7OQXfcf9XZ4TxLVkwo2474tdf/6NZW4jmNTyA9wU+D3alMlw+CaGwYO9yLt3S8WuslE4Y0awnBgVWgj0pInMc3MkDgCXkBZ4g3GRpXG8n6lcVGdZnD5exK6Y4v7TUWJDNwGDatZrVpaLDUvfiPWzggnz9OGjePbGYffqX4QD6wNMLMbKXY0/lygqQwCZyuAyw1JiZgXipKIyDpsAh9lS6ImZxCXewTwwAEMM18p+Xa2j9UjcCwEQDyHpSD0wjaHfTHvZUP0Tvhws9hlaajhmORFJUNHSTsLxjZRAtwxqYdR3luAkoSAz8Jrh3nq7TvHFqMjqZ2wD8SEvmA+gUNF9EiK/91aFNHTLCrH0OOY0Sj4TTwL+6aO43olGzsJvlPyXkaNBYySb/BYbUU/RZFX611DAcEYmtEQfACJI4wYmLihaPGa5Bmx61H69jmiS6Yor7AWJy4ASikszs8iE/FzMN2QZ6+3X0ijNK4dIg7/hRDc/ZCdhTgEqUlLCPiE00uUgZrfz75WI3DXe7QLD5UwvNmGbL4xT3wEOEJtJYdPOzzMp8f/UjWT3xI4VR2krMTJ1yTfOmlHVKJ74Mk6KZcTF2qckj3WWRYMfb0MS7t70alQ5nLZZDOv4QigSlMnQB/kVO++q6HUmLtqXJVP1XRk+sHHXODvSpsli9lvwu9TFlVClOrGp/nPe3P5OhFSFWhbxgi2D6yv4WP3R/Uu+XrsU2KHtFCnmUO0Yl35FznWHC4BUt8UKHjTVEkr7DpCv3I7exXj+9cJUnuEaMnsdOtk9h4DUh7T+0Hy/tB4fJUsOnPwRTuszCVj80pYm5ypm/agfoJN5S/z7A/Z9S18zCZ2mUkjagol1AZHOoIoSBN2llEwPuS4DGizQNanryQCKas9PqVFBF0fHQJg5s32IJcdWvqf4jILIfIPp6m41vyjzeiJtcvxwg3U2U4RSqiXvwdjIg8SPyiulR8WwpnDvHUCEIunP7lQZCs66fm9s1b8miEA0SxL2KlctYzWED4uQSdfb43k+RBJ1aJnheP/HHVPsXSIIe3S3bivwbuI+fqAgVUU2EAapXHZQVRJnHJR0J4dUQinsnYFLMLY+FDqnWwojzEKnSYI3xZAISv1sXd244NJCAFQEo/SIUGJHIlJTNgNG/dY1OQh41ZI0467nQEnG68mt93pRXp3qOqFypgCaO53gVi5AdzT6J7+uYPGvwXxP0JI0oStxTQKPV4JgOsh7TIRuNVjFtZxhVN2ACq+LEj3aGLKkeV0BCWCj+14XrPmvPy60PW675S876HyGtAo5ToK9KCvZXjVZXj+VJU/URE4O93apZvy5WuOPMAcIEsPsNamOb2F2/bH+bzoimCsJ2H/AGKgEsdNiJNmtOZJHy1ka46D8SZ27w0+rzvsQmzJ/A4H2+eKFleM3hx2QYnMWV9CKwcwwhYZVjglieRxP6OAZc7icqVLrEjxg+SddlMX0mhGRItyPA0o+iXDln1JiPf5iL9Bk2zP6j3IHyNKSxEcBfjRsvsx4Z/pb8+foK066yuIDk8yqMtB4bYka8ikbkTcYoiYnHNW8djGUl7oMeKGzS63YSkR80UMmrGyirr64G/ndLFblCodMhHpGuZ8ZTOHxY2AlrERrGkP8CoCd7lQK76eZkgXr5sdnJbYOq5sLzs7qvm9zF8abhh7RPI/wkcYHiJdUNRaQm2s52DPFmfUSE/19NZ9VfEStNGK7MurdOMBxD+UPdtOQbUlkMQfwZ9/F2w8B3ED7qX5N3ftIZ87u8f1+DCLIlBeSZ7wSHU5l9r8b3APPdGl6oGGElqqkTQWQ+2fyrjiw5upJSV/3N+4xmi0/U+iTZxDHI/g+PrIBjNnsIJTTwHgZ8JMpihiTD77iTfvKiNi0jQq8/EeQ6eESv2py4HCssfy1C509L5flnvQFBkN39eMOuDzyiicxg43znOQNu3krkjuS14ygAEuHjFk3lgCg6rk86uKl9Vm9OOD9faS5wiromz5t5wHSKF+WIhFxbhlWrcslY4M7VLzTWsVG3hcpdw0K4hXD0jHei1IWeVjTzikYn6j448Pb/qrNQv3QuqJoCWXS+W4IMtG5bowySWUUv3mJ2bKC1FXQ/uwd2OWCEASWwJ7+VgGBmnVLtFshXDm0Q/Erjzc5YCwG/ZBC18SadNvKphEFkSW9LlgCYfokWTK5cUumZE1JhUzu15hJSHT8toPWdwlnWluqlhH3izISTiybne5GeWNYE4vZMfQD6rLTomJp9VCMzhWcPgbcPSiq3yd/S9U/ZD4VXzV5cMn2/XnFyGFEcTcr1MLEZMtpf22aeP4SJFvM6wYmw0SeLZpoKv9lLtfsuYSo2o3QA16XKA+s94lSDI+bb2zCBYeqgsaCx+FHKZZujnHgVRaebrAr0WIR7nSYxkbglz4FdakxlqEQsYm9+g20EfEIuMl1sdbBv/E7Y2CfL8C2k+sL2bQ855vXge9fBLuOjTCuaz4LXdDe3AzxTwB5AjSkZAg78+nV+RzzyDxt3PdDa1mDTS9deX9//Dz4bevA71vWRdgd2YczHhBEVlgyQrxA3XufDMtcTh23bIvJJDnNCrwA0hqMYlY+OhBUvYvwyV01IM1psfMFPKdhqPtQef4vRm7/+3R4Kc9yqG6eY/mUeXbe/H5MDU3a5gioIvT1V3WP5KDRVYZdAYvSkE3nrAXoUQ4ADU5XXnivLTaD4Jq+BbLdqOthrZBEGmzEZot0022p+u3UWu65Hpq/9rCyjeL9zP3/ozHW6DavnkutuChmYJngKUeDYrRwFD2yHmO7XV7q6Tu9k7kC4htr5weSGNxfF7EWKFwJa2ogEEy0bqhEtJ8G1g2U+/WztZioLlTfgzaTllh+tZxThgzBBRXKrcoBJJ8hOOuOrfa+zdhNnMYrsBHWVuHc/z8m6IYzayzwBfwP229+U7thfpWuvbzjA/ctC2kT1KWn4G7t0j7EUJWkpRuMpwc+DCrerePB+65u2ojvIOdnSG0RhI3wjMI7QcelJN5p5+wieuAmJbbUGTu9McwxvRk2CtLcKmmi/fmt73ahC6JFwEV05wLoYMwi9s+h+Td5vAZrfzmWJ++rgPLusdsBgdVcyCJkSnt4yYVhD4wzap9mM/NPU1m0JxUwncv7f3DOgA6Un9UqjOMijUE+4ylZ4eAo4pLyktVHDd5QR8TkGH/DVmJKAxzZ0UZbUQ5L6C/C/bls3mWQnbSWEDyOgy74Zvhn3onyOWR9Vv3kwx3qi4OowRSPMsMKMJegCMw2El8FUuJT7cUszlbX+09dq+wBSnLjgHiWnNTqF/OTHKXg2DF3RLk3jF5yEohaLiq/iNjlJZfYPuYVICPi2oAkjX4utkDdPWeYHLXcEAwJCr7vsnYAjI7+OS4bGHI8CdaRHycFCRedczi/fGAyGl5JCphH6wCegkE4hVzcDSwIIOjCyXYEr/1VDtZMLfND3GnfIqovSx9DJZAukTjk3exf3IfEhoF2XS8N1rcH7AT0qkh6I3BmNeoF6BI509JKq1pCLaoWSHLXz53pvVdZX6tLEZ81/tLpSrd4Xp9ClzefTfES88fxARtuIRyWl8tX+hXEXwH1MdwiqLtaZaRp5Vx0J3l7dXzOjykqOHciHtXlAajf2lKIwxO77DY7znUCXQDsbJhzPNymotlge4r3SiYUT+rog2FfZ2X2B0/gM2G6vnLzJyGrUJY0uAGcpc/d0uJ2NO2pBLYHzIt5MxQds+MxIhCoJ3T62NmkPZzpiWnAMOInQzsez8/7+p2T0niXBAPnucp/F/QSXv3QYA5XCJmgXK+n/5W9mP0TfgQ3ZMmLtOnMAWS9qNWTjHfCLbrW/A5ASFH2dF6QWxl/lA4KAiFzwLRnfHNP19FheQ+JDWZ7QXL1XgdSeC224oGMPN/KqixqywgtEhU/Rj0OKWkZbPvWc9J37WvNeWTKyiEclR6xjhZ8H6wXyYTaLKJK4HMMiIFrDbXUz9jyv5foACYjQPNcCmhP1pIJbTAat5w6ERgWniXKvPmUBvEslgkpHRxEqd6Bt9h84mGvuaozpxk0WDh7bVpJGhhJb8nd6+kY2MhF+HqpzcMhQZx/FyX5hPKiuxG5Lc0cwbTUKAX+n1LGhfJ1DiORsZfgrFhirLDCt8/QqMXg9EN/qwdQSlDtTmJrAUB8MUx1ycL6P1EiZV114B0afbETD6Uf6gFBjGJHYnbHMZsw66r3TuV+YhgPPjHBzxkqG6gb7vm/VtLBEraLZH/GaYMMCwfQELfd7p+ZG9IHhG2aasFnC2xkgyCy0WPqHq4n5egdHg1yjemU4GiMrj0L3ASMb+IWh+HBN1OkATcwHFXQhtT7rjR7yoveo+OTFAlHGdnsSLr473sJCRloksA/1xnvKpJQr+prUWZQkSQZusq9BNUjm2sdsEvAYRIrENyfoOM4mL+JUPOCrO3JDPswPJdtEdHC94khGYkf8vIH211XVLggJW2wFl39QdBGL2/Anjqbq3/IYgcD8H7kCVZYCXy1z55ddJ9VEDG1ljv9wvSZm+VwSLx/vemZt+8ijtrSs0Cuw+HFBCu9cF7RIfrxG9strOia4N6xLzcEu/3vfsReUPHfzWQLnvTqZT3nKo7xTCjM/WuGlX4trb5+/QQ1YOcQiAud3MsKfC6QE1PvMqlsZhjyqLyhmOLDEdHV4kmlYUzp/KQ69eqVawu8Wtn5ujj8Eup7I72VD9TVBYmTxt9Q55HBIhmd2t9BnqTqsTw46Q2W2UsUWTSSHh816QoftZxvAXZETQxL21chCGEReGwdFilkNCDI8lCAylHwVp2LGZ1wI0joQEsloGCPTDykYMMXl6pRfpaVtZjwAmx9bLdWgAFucG1YFn0FrvfSd6O1vhZvyddJzFWL0yLQgEpaQWEisxajvj0zW3v33GMsg1RfX/niqBqz4Xe+ZMev9P/Y3M1QN1KUz6m0m+zNIs/b2xH/AqqOKTw5UHT+JNDRIYz229yDG0Afb0Mznt05xa7i6fzKoqaycaYNHRtLY1cYo4hviCBXnNOPNMLLJ0BnrNH9kwQkycQ6o9ZJR2aQF7T4JZLDJ/lS34DnRFf/gNJeqCMUe4OCn0k69nQ3AoNiVLT7nlqHg0keneUNDwi2uYWxQ44LWctc4FMsjyNTXysPUZii21qwXqLyl2zcmTKjOB4ve0bhDZlXQyIsX5gHqD6nV74G1dtmu/qhs8lhlcLOgwcu2FbkPgCfkhcUh1EcTwrbjbFqfswCrt15Hjf8jkijBx/ccPc3Fkh8w4DBrWGX+JdVfyqkJT+Y3Cix8IRhkh7jJEzJOHAH+QJ5EfzPJaC+5jyfbCFrWl2BSvGx//ZD+fe2/+NXqMTvxYcs8S7FaQAD0FzQyGDD9Pmx2lQs54A6P/DWCGk+MDWtKfh3kFJjY/mq9Ez4pmm3JM+O9GpVqitVZnc/U2dFXtJtPds+IywciNP3EIEOpMm6l2eXPYTAWPOs7ylzmhgWxTuTatXRQfeWNoQcSckjfy+qpBlilwjm0GqNZzytITE7QK7GGQQXGUqCKoPqjLbuyYZs0dI0stPLmDheMrsM4UyPdNyHNxGgl/eigKaX2vFk+L47Wg6gzJI57wY91fSCPewrRGrmzpZIJxyc/DUwHOJxwRIAxklh1qfIv/rcsoR7qFR5IxZWOJNqri1pE2t82NlOtktkgT+/x7dPUIF5xsXVCxEkN0aTFWD9MEhANcCpd5MYW2L5JPPMh0wdFz5FH47iIe7DQ5dqlpIEd21/Fx4JFaKtTuGykXjxlQ+oI13UpWX6uJGVJxKaiV9ofswqCybnCR+/wbXVHIfKmxn+tn4wgYdYtpRMZ/U5DZg14JMlMrj8alvKw3qHd6luqLe+bnoCbq1m631M6LskpoRGDjukFHAUS06AvZdZmQ6bi8r9tr+JskMm5CgkA3buEKutrwiK7Yo2XXr4+5zDqHlmATuClc4Y43HsFo03ey1aoEyNpGeYeWg8Iqx6XuPZtfQt8HShsxYo4u2TSgSfUiWrS4kZX1SO8pK0EEWlaLtJAVJo7Sp12mL3KimAriBS18+us1MwF+UzADhUKGW86lcyPZacS2dWQzrP70b0VM7y8EvPXeZg4X5KQANtg0B9wFfxlTg2DGinsYXnDQxzkV9j2xTh1CBcqHKuJcnCp0dRcVTfG0TtbeGVGBg9W1PQX3KqaffyzrpzAvfjdHoDvVl8apOEHZrxSHl0GgkbrbaRZn64SSu11pWYc4jda0IKa/X2CZ9p7xPH0CTstnHSwZ9+7302nO6NTKgMRuU5GGbZ/HAwLp/vGGTzOOUCqX7zmsm87rNtKq1AeXvnjZ8kzT2bb78A8oTkxAN/psx6CqfUj30WRA8vHgbQYFfSV7ZHFoe1sHsQoVqf+OACTB68fDmTNOZ2TiWHciqCTbRUL/eQoirgGZaTcnvnQmyntyj+AkJ8JoOOQdjEjLgJZV54q8HihrxyeklaBodsY3jNQ51QmqCLe+H/5Nn+VLkSPWBc5pETSOaopniKnbHVwMKwBJ6jfL3lgweyAach7/eVmCKet9DEwVNbWEudHnsY7uxNXDLNg0xdExArtOecXjSxivYfLx7d3/Ed8N5j/WM1VQKetlx9dZNkGjLYhnNOkIPNMkRhjmu0KdH1ilen1/wEjYz2wjOx+RM6itjYWQbabmzkv39W0kxCIs/t+3kGYFHa7Shg5ws56JFAkyRi50zqsnrHBw3KzdZf03hKfZGC6qaf55FlGWN3gEV5oy2uOw/Wh+dl89mLZuUg33CTTfKmEBp5ysIBJZU9v76aFEC0KxqdM+EK51xGVjcNAgmlmxkONOP1nB4kXrVFsk8uop8rxGjNA3ixnwcN7TXQLws8uFF3ojHAYsfjg4kOiF6eVRnmXym+a8wJWpuLSGVJvuOl3KTG/re9/8bTctWg+eZZURFtcnaHeyANNupSCdPRZw6k14sbnDauP3GNCnVI0gvdYjORXHKM/TvgKpq/FysKF+7OII8Pb0salWLBg17r1be6hFV8wcKPamNBrILPW0S6t9p4ZD2nsGTJAeNtO8ZfXZKZaBOTvBGoOtySPi27a/q8llVwHqq5/0CYiLGTIc8dddGdsG+Vi6bZBQOiHoH0uySGtZk0c7gxFEpyqNSncrCGdTLFUjWxhzmAnhKJrxTSlC6UAo7lvqKwwWpKyylAPt1+F4GWOQ/YF8FpDsIs+dXPK2fd1ppeAErk5o4vUr/N0sXJbDIL2W1E0xmcyXbFhqW2/BstnNI3xpQ433R43gKq6TOUbXlNO7MbNZcj5hlynzioW1rmUcerDeGZspsdMWYMGe+tLjYwVPZ0Yaqr4wAIIQZxQ5EyOxQz5/x1bbm9fn2cQITkyOw+7n4gZY9zi8KZhvGDrpkDs5bCpNTbZ6ZqYtBPxYWphL0EwDBEY6ySOZbpeWu7FHnYNIvSeI2V7fHsodsAxgY1FWsOhxTM7+D23UtneL1bdC9T9SH9Zy3XqtCgjIfmBCKB7AW7qV1vniRzQ0oQPsMnU5b+3K5RZQRgONvFTs4QrBdk0w6p4N0nHDthEdKYZtvsTtOWsAGKryh7ZWfIwoOtMxPoS54pAOCnU8o3q8nB2OiY9C3kWlRFw892PjjpCApz39a59L3eej7JOvFz+I16RjbWAsH8wCDNjkXCofCnZPa6nAhFNAfUVfQpMVsHfhSmaWZJFcXAIKCfm9C4B+2JOWfl1g15oaWf0y5pQWkhloH6uJcs8jIeyGFk/I3q4zdSiiV+kca3ekAWzPfqfs9kk9k+IwV9KftLQ3NznRFvFzjhN/2wAMKpGSvMhhvTIUUD2lcdji5rchpOOgIYyztfnm0joGn6+z35VHTK4H3rBPTE5Zhujhfo3kcn7cwbbFWid7OK0K8hbaTb2D6EfeUJjJxOwIJWx1MwamGjvCAUD8wxYW3RrQWTKOeFRNvbFDC++EZNCb/vClp8nS3/mrBAomZt3x/hhvHSjB0bH80QDmC+23IDVbGYraATrPx3szLkrryW11jwVFXcbuWn7ec3LamrtbKxdl6kibORf4PUQ27M62hrJet0b5Pt4WOZSA2Ch5Glptksu3E0sLAHDufXW+7HHXih9LUUspX30ylNy0aJZwar7HSek+cZBpSfAZWWKjbKvFLvRvmqBnLwqqwYARimNJTQ0GT2wqi7rdv1i15GVr9BeRrFI0PQTGfD022rq8m0sILrLCstiTj0yWVIE71UvvmkT8uQKWVNNaEomcgxgZPQcp+OcGgNxstTtLyxuIYHJuo2GXbnkKLipWfABcI93chcHqhYD73VgpWLV7U5RZhlpIymmD7Fy3XMbvWgN5RRgn4EqhCAw2WE+ZzR//v/gwXPWx6U6nAfZfElrTcqxnfCP8aZNnjx60xMiCsx7c+rZckI10ovsf5vmwPikRj58+GhosRVYJ3IM8JGa7cmEUzQUnnfs4kR4an10IY0MOo4SMdeKGGZhto1X6/PrMGi4lAztBEna54LuR4xFjGFXBmNV/1PC3JwFpE3z+RSqJUaUT75S7a9dETESapuG3TE1TecwxzmkddLQHjE94s23tZ76BiuQSOHAmJhYzBVTXQF7WxV8qrVJdPKgnWg+CxwbV6ZcCNX5vDExG1MXrKjOpmmVbyPjaeAG00IRRMd4OVes9Y1hu16GvEQ/U965Dtk1N3LUNi8c0+YTfpeXdqFUs9Dym0VZ+jXz72Z2CeUYoVpPY7zijGZU5mEgowW3056RhMvF2uMEK4cpicH/N3fRxSKvcHND2qq+OURPE4Lvec55G8iugDH57AsYszEsYaiLZ2Kau6FyhdKTpeJZsfCWSIWv9jyLPHFCUdc+o815AS9nF7hYV5zPp5KxnOigUq44lxCbIMpxOi8Q7G/yBPqZToj977MxdWjf8RMPDxNkJ7pvjSdmRSE6rYtqBJDxazkzEMUc6j7OF26abFnIZn49viX0Rynytx/R72M1Bhxz3Vl4ZXSjRrEsIxB2obOE8fsm80dBBSbu+uD3FXnEhglew6cnZ1ALxMcnCv7jQgqA+mu2gb7jyfEq0hoNLTHO1F2PfKtLZhhBeL5E9yluJp+cO6Oj/ZCHax1pbuDCIizVHfScLN51CiMBZsf6n0fBqn0dag7Zy+aJlGcqWN1IkgFWLexZvKcVonDu/HWKGYVMzf9knibGOa+hFm589Mk8EGTsBlamsPdKbYuQL8cC117Xa9/KwvICQmFhPpirhdJZOEAEvpHKVEri5jRyXZREKZ5wrVmjSOMfeh8FYQZk/BNeKtDX7/SrSVKDnhTVOvXaSCPzQC+E2cya66uEe6BdwTN3XzfwcLdAb5OpnbBA/M8C0O5Zebx/53foZt0s9gBr4YP7etTzG4UEEAbAt8fc0hkbD1Jel0djRdcxqJg1Wn9K0MKpbokLVG613crGFkUDrQXzPd0KId7dnepb3sKD4MP28VVL/6uFf4ifnk6xrFUfoCFaAB0RG9ntCSRMsCcD9XBqADhJ01SDwFxfLc2LfEpUY4XWjgPEI8d80BOoZBbLXT/M0a8x5exxnuBJPgyxvY5WAo53eDJfKqu/SmPeE+ILcxXkGS/NNPKl0clh6LU8+SkdDAsQwPqKOR0N3/pkOECs5KYMdcNgYoZNkzp1UPQoLhCp3yveQCjs0yJp3JxkKdhEcipOu/vmJRBJMPglgbGk4gBoSl5SC3B1pyK95WOD/xFc70KeAUUrAa+ZJTdHxJzfj6p/vOiiVZlDTEkGkefyFDABGqTO944pyCEDb4iZTcbaoDPL0Rx1oqF9Vn+vdRxdRFH3V6dX4DxqO4fAdFeSMl5UtZ+O4FkDhP1zS3QXTpRjpjcbzDEHDdtX20s5KMDQxkYFUY4w6xM1pK5+KK3KIuZQhBe+OxlnAGltXGmRPi1x7KJ6cevzEW8SSnVSDjrGqzPIdg9zeZChKfBoSGr+sbdHD4AkRYKWyOH5iafEtVr+t0z/o6CuYerWlD7HdtgsqkAoCpKlWy7CDvgLWVH4oTSvb87B66SAina5/SVNdzVgjgwn86+zw0TuBcuzWoPiVRA1P7xnM5aOve+puM6ooqsUbuuFpVwi7jJjEHPXPbzshTzDnLnzfGxePEBiy5kVkByBkTGOkjOQ/99YDZrw4TPpLFU6Ow4bYkFB8yFPVHNfefsFqBQ9WYuJQDNeUxFBmMLNXBf7KznGEpr8YUS7RAJpCu1jtOUjYmEeIJ8pnSehMe3bI7o7rQBjEHU0pKtyb1bdLWv8ovsg8XybsdkxtoKWs0Q7re9MeQ/h6GTiShbOMzwsp2unVI2hfaJZZI0/9KM+GL0Dl/hLiUkWqOSFRu3FkpUKpclUOa8FF68Lw78nJ5toB48puNjV/J6fVmtfL+OKbj+mka1xj6JGWhKeozxd3b37ma39Z06CLa9WntRfHWTrMPwT2Zb/DC6T107RB8ExI9oa1IDsZdRGhiyARU7Uhr1oYq153jDcuLtMqLwcFkpGVxdIMlMxftcPtXKpV8tAgSpIN7voL9rPiFDK1UqUv2Qd0/JAfD+fOoZ8m2SU0n16aPhIP97zQxAqGtVLuuhPsE0vpokGYTv7h3/wfNfdUDsZFxkO0lw/NG3dQtOltfeSW+L4Y7KVzPmXiVgysTdxe62NzZDiDx65oQh6z1OrzOUqaJkLTtaFWkMIZrURq34KUAEoypbhVXRp6aRwUK/SDYoyg5QTgRbnMSquuQZ3qh1prBJSWznDOKt5XMsSwiBNp7NIw09D6xzzVYsPxGxvK6y8BsHBpJdxlak3Rj9YpYMI8GkW/ikp5k00G8knAUSbKGSjS+W5Bm16LoQ9ni9St8K7W9hFgyJxRnkQagS955MICLlNSaIafWJYxWVdt0OtkWTN2VPVXJmdGpDT2iAv6iOMGxTr2Qv+SE56XK1tOxSq3GsAMftNYdsEzlSQCac/EHzeBp101iaRza+OtmwHoWfjjgmxOg0Co17vhGC63muUzgqP8E7fRlc8LUPmqP86wmp8OTK4tV+X6SycbiC0CYrLxxztZUYJV00TLy7n3LBQf+9yT37wO6ZSO42Snxa6KQdYICOrMd+4N7qN6pAhn3FV3oYh+87hzRB4DrFtVyK2BO474G+JpWlCIpqrL32aVrYRiTPTGJOhf0mj4sm5xkNpw5P5K/m0MfMSSCXrgxWB0gmNANTKocXs/qKRuJY0sup+X7u5qA2ep8AstaRGX/cbmtlCYFThuuzm1P6yU0IhWJEzrtjaIuY2udr/6YAsCHi/1UgNzyme7cqerEjxoWj6pziSKwGHTheGiQx35NgmWD8v9Jq/yQRnNCXLEdLxQJIhHYIpAGwVW5xScnTHsD47+s43XiA7d4mOSP9PrnfO0PwKklVRmHSzQMrzF44IZlKTvEy8wxDeklhuGvfCzP38PV4lVwMRGRQrod3JabxLA3KxU6YJlnWR7yaLwmME+saGo4mFHVV03w6JRvt8zw2Sg0XuGUgKcLDb/J34FQaN25QWO0hiX8/tmzUJCQzEsiVa3iUwrQkf9I8/ypvaLI2YnfUF4WntN8lhrV9tPJl2SJ9BGzJefkroLHxsJCZqbWdLI98oFndA2ZylD2CiKhI1a/hqrtTQCJMhyxB3CuVmrgVhw5AGZ1fcQ8AablIpwnB/CJ3/89O84xHkuNzTdvCsBQaalfqVP6wvrMTkU6U+5+dqZR09ak7GvrwTinvTUt+14shLfPy6JW1Am8JpLpxD97M3tIASlYViZbNQ5dS0IXlmIYJauPD78cFSAUvQaGSvwXmUhrKNWjcSmcMv3b2gaIpeg0UTz0G6qOY1CxamHeKUJmiEbH5rtpiuDQSflRwGmjnYlURlikPS6CuuW++2AzUtiIeaBoaWVVaWMZbhOD/JCb2Pf/Wvcnkxk616shmmInTQP7Yd9ER3kNRzthFWLQtLmIFhh3l3CYDX+3b1DzysPJ434+KbpMy+640/z2GzKYP9YH4EcrBpVIt8wVvMSe2IqC9qzS1+ntufLlEWsVfBX/tc8OeSS+NmetwEz/EMZkVTWiFLXa/YwC8TYJJ1AhkKx19ExsRlQ3PukDzEvCCNlxyirN5CSIsYHYUHb9Fc6I/Tr53D29cXw/0epzbtoFMGgCT0leHbc+8BIJOijdw3ftzFZtTjQYmCTwkH9ggp1r8CHLdZQV/AbT+GnLTufGLbkjCwREPU0uCLeCGe2Uz2mT6BgFviu5Ku/T4KJxYsdYyERQTpCXUTqX7+3RCSMTk8GIRCIFYNCXmnmjUjFSrLJqCUrJyWn9puLU2GudJ/5dNRvUQwmnDN9mUBCIDjXy/nomuGFt2HUYzUZ63KyclWvYCtjFuFBHbY+PKayrW0rKeiI/edNYE63XcEzW9GnMKrSfzkpsQq385a45SIfLMnBF71Cs1jxAbRCm6P36Kyqw2hoTpcjRL3smfQn9zytkPZFX8DuoVjp3rLUtQmZhtg54acrZCbHkBvAMA9wLVmbGIw01gIXlGXHoCqYtWjvHWoXoV9ob4Hbe8S2cLiiudgWM2VY4PrAhQiXQbLthkvd6wtOfaEJAXdRXJ28krWEpdx/VEF7RBr2JtsbJwOBQfM6MsbHjdOzeAZVVSf3RalWsLe4ZwHu+9aT1sGu5FbBnRAaO5vE30v03Mdi3Pl2kMYGd92JJhLvatvrYj53MgVfr50wuKBlxNJW3BB9j0Q8dwUpnWiEeUSlUl0nGKyqY8O9ob7Xo4jh/VZ9Zo0f8oOtrdfEzKzOPLngQRFfZ4c3XGEunXhv+d27lNF/P1eOOMabeMkOsP2SuclIck7k73euQP6mdxx+zUO2NgwBXDonwVMPUz/O23KUsMrLMU4HWxAYb8S47rcpbEIgqKaCy/6418fLQHGzmoytCOS/WeW4QwOFrz6W2IjwI35tOxKa78lQ7UkUib8bq1tPq7b7pIhPfMdlOA9mRfz4RHd5gROsKEeDUKTtiGFxcT1QJLue/mVAc0BJh7vDitrd5xmML47DjhywvpTNf4U30DOj2J3054IlEENiRIzco6TvADPFsq/YrJFNvSIavb0kvkf3EbcKPkmAmv5spcF7SOPq8oDYOm/yGV2Zsr2ky9+Xb44TOAwNGMzbSjHvE5asyWIZLVAWc8gSFsc/uLulwbf2PbwXVevfnSCDdIEVUq/emkAHAW+nXf2aKAEf5QUgUmpoYKOymfIjwSGyAOl527Og2rBip2v0l8SjyxCy9TaRgPEfjOhx3EPpWlODkVKQTGEnr4ziq5z1PVivM1+Ie1C7c0TF7KCrkTchPwEKJOYrgqioLL3gRmZMf+wLJSsQpMIafKQIQzvwCm09TG2So0Ubp9ACEt1Mb6I9Z/Q0WxwUyxgiVjsezLCCg3IRtbTuWX/5renm3X/8W1G7kjH0P+jh3tVG4AA7L6s6fsIy0aBIWsa6YmOMoVTa0Dx9qbSR9ccxMMYf6IoXMxgha7oaDgqvOMk6QLOieoBmp+vRgUbzuQscg4U6VJYetBD7BV7MOEEEsSh5VF1D4G3mLLQ8h+G5gxCaAMjOVcMeN21oX9x18w1UDt6G78LXuyWopPkXdhWBw/ebYEeBbXddNr7Tmmc9T/28s9DP4nw2m5JfByLbGKD9Vd37jaje+V0pG0vDP0WFgF4J7H5byPCfeSkFmwNFWexsGsTlNOxfuNelEw/R/eBUIA1fcfIjv7Kq/DYeOWMeVY+cTGp2pjb2T4eTHuuWlr8K/yzylsjSxJLi50brvGI2uiWqYSJnvuv6edMPuOl5RcBmwpfEpaNMELvKcIctnZuRCITd0NKIIn40XrG5IDwyjRMaLSx+Ozu3CZxhPvNYHuJtbgbHxylxrSd847yUHm4sgt0L+2p8hxTgSE7WZcgqiWA3rQNCIfY1qBBZwRVBfHWmPDycjDIObZ3pN/mrhaKr9p9bPaFoQUo1fUvIejF1j3CnZiQYnrGY+jKGrCuv0FQpUwNQDqmD3GyXFcelbbpmcuD3PyO/5XzyB4CwanbxfGaXElSuBFCCAoDTHj2R2I7nd7ZuGSZkQE8oDSTEKU66ohoyL7ZQMOuKwJ8jpWOhZcSTlcEIbjVZgdaYogXq7DERrOxhjzdvUghvToVYuetaf+qRbGgrDb0kqMq0NQysN/7V1EzkP4jsW94CgXiDjAiGbDNe42HzEtDLRA795RGVhmGkTr+ZDxiXHCUE/JtHX9SzbdVHEaDt2CAhgDUf9daBxHTOzmICY3600uNZh/21ilqNwFuur4uXUQNwpDMHCXmlVFYIQx/J+hFrT+6B8cGhNr3cnf/JfISU9RGfKL6bEOXbTmseg2IeZ7tfyzRl11xZ+Ro6hTLeYvfAAsyIR0prk99+00pvm5G6CWHtZexpQGJM/IZwTrREmCgnYZjoTXWq/giXQUWFP9G8tT93wLrwkwttlnm20xIFjERLHL53jvmSCCmZ1OLB2WHmEcpn0YAw/487HXK6cT1qxOcL7WeII5j0e8NIR+q/a+gaLZ6LET2kZXxm8P9s+8hHhceFovCFCEvb2smJUfyMdWQmKkQYAF2Vn1KB+IS9kzSw4RlpoX1ZT0v2rZutR6c+vmIDzfVOnbjbt1sxUGNYDhT/P2RRplCI/QKLAYz23tUTnxkgHc0oACDv6C8vzUN6zeyJXi7FrB4omjaHoTpWrXWpWa1KncYoti+cbfu25vl/OELl+FteQjvsACDSI9MFwelEZnLdkKskqIy1psMmBztKE0cL+Hd0o7NqDTtHFs8Q2Nnp/YjNjos4xrMM+lbySRhh8BuXngTmO2o86A4qhAM1+bS2wC9+bcIFjqWaVAr2xZva5YPmVadV/1h4ALWUGVIto7bNbQBqyHConOrg0NAXN/h4XvN4N89Y88nDFmP0ihB76q4obeUoUD2vgyCZMppFTxZETdNukt1EhbW3HYudJGrlo4C1cFeYFai9J+lKUDDligETaIfdqUJlv7bJGlpcXXi+gg85hnHc1pKauVlPGnnaMX7or/qNHlH+NKS2Ep7/ulXvLBfRdPq5k3FyEmj/rQb4zHA8arf2hu/ypogGZe1aWIu2IIV/1BKTzBeA9j/GBLFtFF7ZJN2RGz7mZdIWRS463m01DBjVAjeB/6oNtzGweRrq4PPf8a5Ovf46w0NlrVIbQJOVIl/q3nJ+bhTCu7Z3lftClhjUnezLnRw1J9Eo42SB2uxrs4y7nJ9UR4NBytzDMachLfn0RIx1pg+GZZfXQj8uZMy+ff3eHz8DqifHFcRGEwMaGagx6Yae20lXHMWB2fbd4tyc86QdVrbEqeFz7tJf4UcBZYzRB1cYDD3qvh56Fe+xnUzxp011m3rFPYnMNycjkfTdARAP1Im5Lb36ZmPxXGbyk/ntIt3Aep/UGOpJMtw1I9ax1tr598zBfegqhzh9e7Ie4ewJG5CRZAn1CLx2khZu7SrDceSmX39FCWsM21Lak11vKkp8//UTlYk4vXBdQejO/oxev3p3W/ms3oWbP2h82MOYp86rE6rhT0TovE87PUwoEcBh/fDeBKPnxxn7YHl33R1ycUPaUqU0sZrSknctNvLkTdCtanxZOWs8o0f4Ug6LalzhhJtOiuj3jHQZG1ztC79EfSQaHlqjPcvO4VagU3TmYllbjDgtEfAxGdaM9+vddH11uhAOuaIoCqWaYIWwrZ5W0EkQ86WNBJEhRnQRWp74TFWl2f85+6jVk934gNMEgu/Kce8Nj24bMr63FOjejnLxAPHgAkhdFI2kynd0Z+tN/p9l5UNqANT9MTaNrVQX6CQV2RNWhfAcKgLJfADW9PaWXz1kD9SSVSP8sJ8IFuLDKSEMrnUcsP7MoRp4ALZ4WuYmYHoiRFDBnVYvRr8m/u/YM/0xaHA5/o3NYkBk25a58TchHZgLFhXW7yKJtBJTxtYYYSJYGjmjVwiqex8bZ8AbdWdzOC/3BvW0uPvpbOgsEtiuk5d1zK9ptPov52Pnb5g3Pd4CpOt/5yiykmXXIdyq+zrtXh9U2nVmiUFMiAMGF4omDgI/CI5ymBkcEwfPcR4JmSqbl/5zNw4SWjpCZuC7oABI+/J9HBggacroZBuWzz95oZitEzlInM4mp9PZDoA/l4ibnaIjsLiC2I6ucSxwrlKb5GPlLlxBOK1rzX6Ff9Z5gpUsh0dxyP0crflEzXrC6Qoy16e7z8Hn5Rv7Y+zUTIPXGWZVjfYdYviwk2WxbypddM2iWjqriWsxRvcwfKL/3EFCmLXmK4sXJKU+LusYJQKPHvwt42R9ZJujsYzpAw5NEgO0Q9lCyss4fZuuoktZy5DH7vL0AbgHiDIgp+XU5Q0dsNu7hpokxsle3c9zD1Jep4vdqyhoJJ7sLsF3MmM9bddtRM6rV4SP34OcNfOa8wu87VsH4g+tQrgS1ifPVYLSHEqULYzm1hYQufb1TtVR1l53nAGXhm2csjUkx/8pNT5yvny3ncGgaU7X0wFrIU6Ssn2xNfbUPLJbKruKEVdCEVCWNFozev8HDy0ebq+7BNyOGvzCgt7gsk51UK/HbsHJc77Aa2ruYChgTLrQTYKCMBdK7NoCHl/ecZlNnPqtdCj5vWmxGNLWsb76eD0km1UdiWwzNBMivIsohODZtGA6dyJCE0ywYcy3gpsRGvPLRD9TCJrJifhjnjrMzAwo5HlVXPXSRneti+uLcFXYSR2Mh8WgeqDzK0CYYc+llgQVyS6iFTHZUXhq+RQArQhrxDuyg73IpqN5rkHxbL9ZA0x/MDCGIMbHGixs2FtVRlU2/jDwNO03Ah5g/Bj134CidGRyPZncp/9WSecKnb5yfIWQ72N4d22rjtqpzP3Sqs1gmqHfuHRMnc1jR2slEXL3x0DuimiFcH1RZuLOHTRp9rPuXTO3YzuOUPgpd1U+DYbJIfl1VJW82xJT/Fm4o/IoR/nafhT2VvjQj18ox8izqEIdCsdN/X+b1BDF+scKukDQlA/qdA/PnHbdi16HvRjtemKUXy8yeIxKZSWCK/yKFXClAuJNtrFYRE8ECtm+qf2vfw8eY7mN88oGdwAr21SvPCmh9g36r+biPt3ifPYbQQ5Y+p4w1RXB9Ladv8ItWHyCARvtIkXLhsn8UAtfflOrWIOvsrAMArBhvgsmKfK869yOb3qanJt+fK9K4o2S3wDJspNyQfw+6gkUgoHoej85FGhT79t3Y9InzKdTD5dQIVjUYxfnyEZ2+3RAFqnLQQq9rorw3lB1ULtcvmY4jTVkWv/b47PKaMITahH0J4G5ypADOrHOhrBZYZpo/AqfhCyubFrujXuq4vx1kior0jG2QW8/8uJvrPjls6KD9hXapdcDLlSOjB6zbXAyMbSqpkO9fQIYRWpH7YwOzNC/97ox4ulhCLgwWgSxGlkM+k4cQP5CoDUq6DfcbbeNtyW4Peaxj0IqGGif4QepJQHbPew9XPJFJuW1M1gV+HcOKEkFLgQSXv7umUHiWcE6ZVtruVl6BNnIO9zeIDq3kwQ51CmGPWdfyu0s3p/vs/oKvcgEToRpuFKfVkvLMhFD0RHYobTlN0qPZDNGcu72qQ0VDXcc/FLwjIXA85/RGwSD5m2meRS0GcqQaEk9Jo2IiGzJonSOMj+DDnpzS+x2wXNTcXtxlR73qL1uyTA+vRKgT/xcUBmHVZDwmrBPDyyGDzYfsL7siPIwH1zst0G+i+d9TV/QzISTPt993sqOJeEpYGS2o3w3TWFCAvoOKdzFXz/g0GDMzpHpq0xZF2UaJsZy059QK8g1y6DPqJC0nvGdY4PMeN4V9Ew8P2xZKdZOHM6LTdgN3eMt7Ugho2YtUokklGDh4LekdftuVmuA1PWgWd/Ts4wuLPl+U3IKRsmFmFnWLaGBVF26qz/3oQANc+E0wtqvPqOD5TaKBxbd+s/IYSiGWalC/k9Z+/q+n8deDEYHwiLPWVa4scKloS1eH3BAqD9FgSXfmvm+UDNezHijwBpOSFtl+/zYtF1/zkgWTATWVorgL+4lb9AJpdtwkcixlKybgnlA9xycHlPoZfPTlxIe1xFp+9bpTYzoVoNYm6eDbxomXcIhmY6D/jKPpDYbKomedYIEyTa58oSjUyfcI475rMZl/b4pOvt4euANEguuyZfTQakvn92nFJE8Re7FkUlxkwX4YurDU5I/LxdYpFZDFtL0uRyO7QsPNyv8B7/hw4A86WdqXalQzTqUFPwnUex08pMGTFheaJS/MC2o8uOiDX5ajHMfUghhZE2FwhBS2USKwFLXv+D4yc5UIq/XCWp89q852QZ7WUGor0wvH4NAb7FCKYpm4LKJR2ofeFFA8UvxqDWGACXBVIpVCFIk/399U4GFkmH5yyHg1QRJ1mGB59Q/4P/Qr/uFztrsYKN1/6XZIxg/ULl+LAgjuD82nzO0K+3rkGMfBrFbqGzYtg4sR8EELoG0bVzSuiyIUeNONG1N5eyTBkCp+gvd6Qh8LHttbg4uNTb1AquxNhmkokxmKnBT4ht5z+55alMANH2TiMwpT4BLT653D9ps+2a14kmwJIML+mgG4reUyM5GHegEwstk9YlNo9qQYHKBIRRFRyq/vaKr6DjwvwjSY03U7ffTT8+4POwi6KrLwj5NrTeH6gOPjx9yopBJu5njoUWjg73JHa4AhHHoyiDz7NccMGRD6Zzb12b/ShvyaY2oVk4t1dfeHCVZHyNCJ8xHkfK9lnkjWln0M6MORfG6DSz8KidRKDZaZbvBBzoQk1oRL2dS0JhqqOI/ETESWt10FmINCVWz5c5OiAHsevFKdLWpZGU2i0FyaEKL3Iv9OX8yhJrml9Pk7X2SQFvVUedcNIpZOGEta99Y/SWq9jgs9hadPry1VLlJMGTl06gAUyWw+JwuStXLdQZ1eo+LWoRaFHEnpHKqwiFjNPqy7V89vYJiAnTR3wKmQkIkM8F483AsUwfM2LqALGQkPjX+hWIBCgtH3bjbPDnPRwCatatee31f/0I44R1s7+pG6vMo/l2oVGzXl3A3SrMf02hNNihFOpU/KvFxAyQjEeSVgMxzkrJhXaAbL13d/wIuivhuTgAI8dzIhnbpVUF1VEUcNLysd9KH29gWDAGax7kPtLYqo0q/yBYcWMda4QTyXb+seNNW++ABg4zwTldI9QuieJs4Ntrv4H0Axbdwic/ygvyY1GY6Qjh9CwP0A5cXGPOdLLcPSi0cHkKsxRGxXyuJbaYMeRmNLwYB9V/1OPGbmCd2ivc9PNejq+WQNyq8KY4dkEt+P/9w5j907WgEpaV5VSJQEmX3DZj747j2EYumuKT/71dcoaQVUNTtKT3WWCLr5MZoQ45VS5B9a8caG6qEAz22KquhjiRiEpLUJGykkpFankayKoQbev9AciEvlK9zjhF2kRziMENx/rnhsTy50k0RjigkuNuCzG/k1C+l50l6hiLWQTqFBK24nlMsan3hOzbW2xqyqOOsj6TT17kozy7kXDdqBGTTP1iwpa4SsFwLNTNPPDvtFidC4u4RTk20n70mb77kI+3+M2axUki0uDjJ/D+cvaSR0ecduLjmyvCQVM5JdckbGzTEY0tXGeiH9zJ6HhZaS4u7LZIkmbwLaSZm++5LFluryXLacEauVmPVOGFRbZ2CQ3r3WOo3yXntiogDS6CruDDWDEZ9Zm2dGoY2xbnM5AOLnLUybHLGuizHPFfEXthxxdsQv5ey+bMjLTAFviiTYjTPjz+PaxrdjGODoPLfRfFSEiUvCeqyG+H2di+/ux/gcoetC8hmlEZ+O6WH+7wB03+DvQJutx24tyOmSeyPLZrIXT88oHV8420U6kmSboQGA4yzgarrzpixE/rjtJyaCFVH7aB3t1McvGXyzRgucWbx8Np96k4ht1fjWTwrKlaiDQ5u2pvZ4SZJVEf1P7lriMW8p8xWaYLsF9tqcEMa9djlc0POwEeWaG4xjaRpqIza1mB0zUXAVh4EpnyG1vJnt/AGSpciD8cFIyLuu35cYZSFuphRiRmcsMEcv6B+F/dd23c5wUCSc16henOilhcV3H9IRAE7JlrvEkjzL35CUddp6QAUacTUHOD7CyGgrn0ke0TJyvvBxBK7BqH+9meZuytWc/0laB0cMw2CR6ypAvR2Yn2vLrgw5oke2kqTIc4VoThFOUWRQ86QTKCZPxoeIeG7cu8Iy4T3W4SyP98iw4F5kDlrgrbIykqoNttGAdx55vtYmZDjg/kRnvOkk4PfNzgh7slfRahbkLfYCwsdnnKM7PBcOhq8ksSxY4tnnYu0ST2gF+EqlH1lAHna3YdtpAULKBuscOWTRBXThhAtV1zDsCYTT/hP5IzZj9iNHSBQ4HmuyRrruKtLg/VriEN5L272vlDkwx34U7pZPXGUQcFA3w0bNw8nKCNz8CG6Wb5p05fYDCf/nSZLexWyUUOjAmau/eFtKvj6IWC2AMoCfaUQwsQdkuuqjMsO4TX7QLZiNcqLJqR1hF1c2FF4t3L1jeH3JVuAVzXDt/Kggoff7/Mo05QF+CCE9CsyDBA4nozwcJvlOnGX0VDd7mjexXStbTsDc+Zz4CuF7/+bPt/o/WJ1OCmcnHuRZkvhXdwCW+NcxM0CiSf6dArpIE4q9WtDD7qEPGv78cmvjwW3hs4D09I3R6+o7iy1t0RbCNe3BWjptyKBcQq3Rz9dQFHV2HGZUXJNZQXFHY+YQmOpwUa2/EVGogodcK/ZbAZpC8zZgWaAfKMjSeAK96R7oNQCApbDa5loRgyGIc+k8xPmNq2WrGROi5zuPltb/KpVn8wRqEb+HDDCZ4kXZGTU5ZJAFZpfBXZ2mTkWmHl4JAxTyfQK3smoKk8vkqOK9cAt7dLuZPk+YwX2vIzUj3MVRc1f9OFnk70alA65S6vEiSHcrqWrUO8+pmFRLJ3V4fLUc1nMSj+Vv/+m724gSQwJgTA1Ev4qqYJmiXRVa8I+r6Wxp6jQT+sl5C8xKwiRnfR1Dl8dtYUBrLUCPsmZSAJkM76QGNLdgp3WuqQEWNIBb5UVHcxF7GxLeSxB+u1MSeh3LCkfr29NAgd6/Zy6ba/NN9gbJMCGEu2T5DiBnWlaQVTcuo6N6dgcqcxv6eciXr4Qe1V3fyVbENXxh3sqfBSuwVkVUuL+31STcYCDUBSed3c//ZmrzFfRNKM3XdpcxKuf/Xu6a9T9k4c+H9wbDNq3uMnSVALIzXzBIWAZ4GtOEV/B/NbcPPEOAwaaHvZm8/HFsbvXroNhMNZPVR3p3mF1s0fEpgAEBZIxin2cugqbvbC6UENjHwt+8ccmKP41h2bicL7BFqVfodGWmhbzLxVtzK1rf7GsCwaXmBCc5wjnJ8rG03oQFv4aYO2IZpFTYjDsRm9wH6s9y6dL3ltRArBUvdT8A3K20fmftEhi/YqmYMTQziqngGsfrhXqz6lcKmq4PIzF4eeVcZBZvSu8VMgPOdC8IRX2x8eA86qX1cBIVPb20adU5wY/18OLcN3OIt1r8Sn9QiDaHvOC5oFRwqUchHJG4gBD2LK0P3XaORerIIDtQbVKhZs2Z3/35tqoB3j0ArFbSTE0aPPTlFlo9JWYGht35VCRoYTsdCteW4+/uMRthfsw/unViwsSEyGWLqH7LCsXlDoQpdlu08LGUkmLV7wu2sRmHDZpy1/oRUbV7F+MIzuFBDZjjAPy31FRezdPjoKkA5hpsG8WPNFb4IOXDhnXB0NSTvoFuNF+dTQ/VTuTZiV4mmV7HoWLVRW4x5qQ8kvkMwdH/FAjvpmpN6tbJffj9dULOKI+zIDw6hbzbSTC8XNmOhuCDioHGgMyVWGKs6r+zX7R4DS2wnRh/BkrmxZzkSPEzTEfblaUC2b0PQdf3o2PJh0Kqzd7Nn0P62b+T3w64FFJ4CwCP8W5OlwzB1k3ghseMcT7Y80vILq7FBoxMf3f2x4QDz3Ltm3oNYgiu8awwgxeGLya7xOsYs3vnSy9mplL3wxri7IYxOCP4THsIPHsWk/XVWeimZ+whhQDo1oNChj/V+OyHjzki0R50+mBSpWrRrMXZJFvLmeRgBMM+ORIRT+yuFsE13UHYcqK3zzbaRilSzrkNcSsk17vN1t8c7uGB8an89fudwr7WlNA5hqz8JgJwTdmpc3Us5BUgE7QzSPUwaN9YF1zqPv8B6/cgeg8WzjegALQF7lcanzH2LFaKqLXoKA0cokGmxuCHPqorlL9568XEW0P0BFy/5VIxu53YxIYOjk29yjQ2BXd2aCticu3enWrDtbl+/dGQ0wusFpZI6ApCfhV9E7E+B6TSaUYuymgWe6zT90Fm3gEBPhAkehSrJygk/S4Kb6qNx7K/p1rraSajA5Afd35G5OmCzon5k36EWx95SNZo/9cTH6HqdCjjoah3IxYPvsdi+z0f1SShJv/Vz+h1noJHzMpFfBmlrw9yeTdCDiFpMvAMTvSdQT0mFX3tokRDieXkiJbAoNGSqIEHoislp+eHe3DUSbzOPFibnw+owmKSbuBQ3j0UimHVVhvoAonQMlKHoLKKfiF9h9iIRtQg6LAKNgjoNrBvdyIfc+1IzKKbZTxCe5pCG2QlnzAMLI55JFEAvXNUGfjCAgYtgd141TqiJWZiy6dsWtv0NooGm7Kt1agdEuY6uYKNVBDRmCQxc9csB1sPXlYn4FFT0HR12w9aqb/mGK0GwTvWkgN0VNs8YO805vzkcBSXJxtXd6WFSQRu+uq6g/D13dD6ONgUlSRCrwvJMqCGbSsQ/aYOHbWKifMIh7Wl48+MLwLAE8UO28H1NT3Xc0RfdR3pPNHDhYdqe2sGSfJ7kicfBfk/Z1jXnRcOD9T1obyE0i+HFxNDwDezXJbQeEkFyVRZ6EFKCGdImVCsS0e5QsXHTAbr1nOX5BSp40xxKTDF/dMh4/bqILM655KZiZbURkMTsHDstxxKtKMbK0J4Zl+gJOCX9NVfICINDMZ5zKB4/Yj5NF7zGAaNZ1OA99ZtGUQnX2pjbeQ8KMzLP9nGSIY3chm0LATvI2qibb0pmhZFoZaZDcgYiAMo0v6Otp4b5sK2QNDfzwxRUtUi08jNoEdMxhCPRGcBkNrJlqGc+n70uiSEwV3g67X0WwWd/872YohYpuUDgrBkTjAOINjQHXflm96otlJYpCIgmf+/qQ9WRzjkcehrVjWmMvOY1fYD/sPQoq9UyxJwPK/Jx5/Wfpx0hqjX2EwoW0QOGSJonL177NQCwEhE9+4yUPjHblszb6xhgYWh/LoS343Le/j3+QDYvrnQdN9kOh5n+2oOJJ8FkFUHhqAXwkQzKs+cPA5WvwoVEP42mlnmKJTO4+GP2Xr66iHSfXWeYkChqC1XvRGvTJ0xaqtD2i4KPCU4yZC2xxfi+v4m+Kkg+Luj3qwbV4guxVxxpPIc8ztcJizZWqBG+sdhQPuWTEQUvKeuRQw9ISIqqWLOcOsNO2pheFaiX2pl5jeuIaByPMvXw0b8HuOBT1oqAFHM6Rze+7x9zfmxhnulFK9qDQUzw1/mn6nHP0OjnMwG/6GMl1lXN85rjnr2DxXezXNFbjjdcDFgp8k+eYH0dEZ/3cnmQQ4efHt/WAUo38yTbHRx2Bq4ZZTB7TKZVqvg7HFkyxal8pA292x5S9vvk9uQPv3Qgk+/wsDmNyrXeMCbjxGhYzdryAudnXy6Xufs9KMS0deJOCwyuhzlHGsfmr4tVQTtLR7bW6XuvELt1AnMHUn6dcqSbFS7caCXDrHkQdKm/gHeb7ZakTRTetdTohOLkusAB2yt1n5Awr6uNhseEF4OsbpzQFiaTVipJxK2K+klzh+2OYswdDnifnP2/YLDe3sPn5nTGez1hVbxinP6/XT40laWLZOlgMFWjbd5n/RUxAUvpCoKvMSMnmZEdp0bAW0w7AhdGvWzDiC9TGIKK6AgqqikUcNyYmHS7ycaPAGJZTcbLaaeaP4dyV6ts/jN/qEXoGyx756UHSLvBd+vTZ3S7PnOgvV2l8kHS43bOAXYEfG4rHFKDdGsziJWicn85cl/MZtNa+wgXK+216KY/IJbm3W2HF0T/koCmLwLp+wFlT+TLFOd9UFLRPvhDpmyOE3zFKuItavv0y81yAaLEZqcKn0TJdizVrk35UAJy9BiNtfkPtttpwOGlU3ydrNgDRNpX11TzyCMLNlF5854NDcxA4HTFVpSAI1gB27ZODgUwMw3oGFWv6i2V+G7YQs0Y0oDEW/8F74Mc78O4JxeqzrDlNfZsaLdLFB8QjzzcyrB+t/BrvLH009jtsWUNb33sopxIbtuPfjPG6ow5MlFMz1aUwITqXEPajYaRsnjUEP7Tm0iU3FiU9BM8qg1qmVAkd+b4TJ4EOfSRMCNDWy+j+xjaDF8ma8HOAj1JBVif1gDG3AlZpXfiNJeggHGCO4OQzbm6O8kdu2S4KsDpW1UIz5YJoGtNDpJJUXJpyCS97WLx2ZItJ0PmussnsmJJwXUskBEqxcJQem4KF0BCAvPjkDQ3H1peQe9PVE87zO26I2GZfe+dhFkUTaI+nyWaYTaKl/MrtIgR1LlfGXmE87rDH3L+H0WgCDju9t3cjk7kap7Afa5GAsianiH3Ov1ZEOyVOPPLwjjnNuAypbTt18lHAXFa9NBKYBdrfqVOMy3NpFXyMngTDqT/9Sga6sMlsnQ9GrqLKb0bge9XW0riTnMD2rHygLIVhu64YOQl4pE72DLZ0AjApCipk4+1TCZbtY2Ff4eSBgMA1pwJi+1rvKrmxv3jhk+gMuoHZJIYGovtJKNFCim/oNja00dufIyb8KE2txRj0O2BERzFXSOinNUlcPVdMhhwNVCW8FB20DbwI4bJP/KespvYMxPvJLnevRfZS53NJeE//Jz8m//tztrRfPYDkVrJ+/35i8aaN0iWUi8a/QneL2lT7x8zWc90ByjDdu/8pvIVXJfpSI+nlp/E8ucE8KWQ9p169eopIh3OST1N8l4jEyjbHoR4Uz+Na1tkrbD1RJMIXwA6j4KxpaLTjEGtSsD/KJCUBoZZq8HqAm0VXylaAHKgPangvYDAk4B/MLbZrrbpj1V2cyJFqbc8xd6wiBBwRb0aXvcBfR1LiMR+kHnMAKxtIhvGnfYmLYArzDUcOM1bdAltomp6ZQ8DO+Ves8DG73sqDvM7TEbg0USUQ1ntshC5T+lyB6qLV9t9NW8u5C6mlsOgTgWNRwwpdRzK99VvsrFiIQR1qJCNHshsrQ3YQR6DTwqqNwiIkn2yTqZOs5pu+hA+PQqXWGZlQVV5ZIKo9YqMt6NA1oyglFulB7v5SCc0Qho0IDv2jZMIvBXXFw81woTB8HtTzmzXYQwgTvj5CkLbLYdAjX9WnZUY02dVUf+EDxRNE9TPUSnjzAH50QDCWE4mMytUagr3JoWTNHcQK+u2/925QtMwaQQ3yUSln/Wm+sNYrTLxp3GqwAISTW2jwTUyel+RpUy3v5cfci5qgYh3+S95pfYWW7VlK+eWz9PsdV4bf4VzXMa45qGS20lh1hbsYMYSit0aVt+Hi5srDb0Q2jc2gsu81NrBZVplk8Lk635ht8E73h1AaVeE7R6QLVptIqV0yh3k7hb3ZbWkZQY71d0b+8hPwXQF9erMyK2/iLAKQ0QLB3IHUX+ZHGPeDDdW5mX1y65ExUfXgrNYHhtpLYH1JLO8mLlMTZVCVaNU12S3qCITjBXrDnV0FGNaFJEX0FLPGRh7qHJAmxAqPr6nmkJNeGDvHTrJt28vD0/yHLLTMWsPSccO0UgAchqMvACDFTGqkmuzc3QlBOMCv8NrzV+YnpSlcQkGQJF+ppOIf1KY83JJQbUmYxFKwSsWu1h3F+NIkW2UQuN0qFCaSJSqEJSoUWJLqXzB3ngwFGnsQ1fHb0yqOkCoTlLDbEmZq3djOqroqM8jeAu995twyr/H262Y43ZKRo98ReHYc5kcDDU3JyQuUwrJzIWYBXLSkeUE6XAqdfF2UD3gEkUMay/O/jdN3Woe9ppkrOoWX238vzD4Pfr0QcOXYnyzuK8qVc4kWMYFAf9t5wcYQLuYYWumeiDxlYAUdykHAVcE3ks+XgvvmUm5WNE7+kO4f9nVCQ0QPZ1CJwWUbQT/FxWx48zB+GHUPKFCi5JoTmQ4CldM0eSyhBqotm/VGWPj3izD7py3dYhQ5JdB+AnvJL8+Mlrs1J5pnvTsdSlmZ5IHiq2ut9/ov7nBbnDebMn10rEtQASFl5vrrZJb5L6jEn0BqrNvkGz2wbUDMsn0zWOtK7heRhYOgnQXmU69ONx8IG9a3UWqhvdek8DZIuE+WqTqisy+ueW7hjp4afJWt2IaFmN8Bk45iuoNDljpulmNfv3Lbzl1sV3GpTOS2ZV4Uk0q31vnecVJsu5i2lPdrHxNcCvkOO+E04HXhLbl7Qn7CuXp54qV8A4hh9IE2uRHP1hDvPTejU0pF5e11aQt9DtfCAHTuw95CfVPd9ZcvL18/qqXwyXE817UBDqudbTnOpGKQYF2Gx+XbsYcCG8X0vw/LNzMjqGFrwXoi4niaIlSOPEWipeBadxTsRAQoPobkhDXOdo0VRr/EByDNjnCjUwzl1cT+HyTzxPesPFSJ3GXpkHhu+/EoNqyTJ1JmV43BvsR0kZp95QBsB8d8Q2brrSqjAPgWBmvxCNsMbo9O+rbIEeGaXFJlnHfqLpS/A42GBnTqByIflCQgN5PLRSG7gPcD4RonejqrRGnFbA8eEB9CO+FbCRHygohwaiGD645WjRIxwS3J4/g73mgGkkb/M9DVKrkeGDKo9UVgllRKJOK65b3h99bOWkZp3IQLBkVfXMXOw/5AV2aG8uAlwr+EUHm+qGePR7PH5Fapx7n06vNrKTEE833teaXn/mq7CbOQze7FSU+uVuHv2IgaiR8OwLn5LHNlZ2//Qqtjzj4fcdqQAPaKW2XQXfSGH8EA9I29MQ3LBb+SaXHtDe/Z+ZPWcOeEVYdh5e5glryEp9A86JmM9kWM6ID4EH6u7Yn5oH4PNityvDei8b8a7p09cwLFzFHtU+7DscNom//mEnidRXJuDJ3eRgit6TQfPEXvnzU0Pk3l20wcuaW4Nrm0ODvC1ivwokSQfoidjVggXWbDwdVJLClQNyHWI+0xeEcXzpNLgLOPBg9dJ+gGUkZhCcZVYArfbAcJngKiBnB/L3f6emlGsfuaLtsuJ53jCd8vAq+pNoN3oIoieA22uokRWclDcVgqm2WTYI4As83/bQktL4WlHuQTTZoRC8uxZ62xz+G3jUAgiNFdwTtaRxaIfeh7kdP3e2GJ6RWKquZQ6a6hwuzNNX8kaWsYRYUC7/PCJVC72dq9SQLGfxJPgcJ1VTyeWL87Af72MmQnyRmFvejEJ4P0Rd7VEd4pG+EJbtvywlhCpi+0+uAUAlSqdbdCQjc52IGTjie+CjGqXgn7dDaqXLLc7yQxdlazXQETr5DnxiZEt4DEAzsWLcGjdZgQN1W0BVACdzVrqztQQvSlboZtxm2Z+ZbTtyXf3YFSKS0KXlB+mVW95sR5SxPHoNXKzWYBZVQIlkQ5s677TBfhtWIiuId1W4CKradO6GKPZZFywqZyXzCRbLc2Ca1X01FRYjnAfD45/dQ55/66LcYnd89Kzs8gp0yAbw4nHzwtXQkA1SKW9NFqI06hXcKGCMnS7vwH1TS59XEnztgZrUTOtw8r0gR2qKP8LMmlRKtO2AuqJKrZoHEiapFZHNDtZ6GXZ+rh9JlBgnBUzNjY8hvycuf42ZIW2OmHQK6VvqVBaoObUf5uDCE01CoPnGtZzMPM+Rs14wq6QI4M3TfOAf6qF5zlq0ttmLuqPANC+eVYNMQXAFPIkJN5xBbeXVBF28WyNinEoRUKvM1FUh8NmfpEsHiEmb3PxAtNkd71DkO6B8MVISDy+pErVrl6OjPUn5QTia4rDDTYC4HJPmtVKm3Ptc6XO72ctPb+FP2GS8GckNGBCoVnWmO7cyZHBVKEjY0S3m/rg9laSSt8B68SME5QrdnMrpDqpSun3InoAOHFGRWyjJGpX/238oo+k3LkGT/WfhKW3aRhSNf0pTS0A05o/fh9FOJusmwVzxmKS0TjfuZ9r6UXQ7IkqxHncEyAAlsfb6vyrLFvhvwdHAB+cGo9SA2/dUErFlWVNPeFAipvxVbM6Ur9kTt9m+keyKdbbq5g9bnJYXBoTpkDPeHF/j+4cdurNYHySxVJ2hSljg/3f+quPirkBbPBakeqwuc/EIguE6QvcvG19hjszU8XJmVcqcipbU2J/KASAnz/aCZRhOYyjtw4XqTHKbOnFMurbMQcqO6C9Os7FP5ziwf9n6qwx08X2PyzVKGaN0H1JepAg99zui959AQ5yf5/wsyFVzedwGCPE9yAKmGDVRQEvPYf65HBfLVndQ6BJcVGP6kyrbNakX/LThq6CCJjIsVgauxg1mYsYTNiJ9QJ6GZXbPor1gZvzwSWHKHu3TBg8zcNmJkB5wPIELNGOQLiBbh+G4Ho5kiJhGqPsXvWVXcS8jfvZEmKyFLXvWITY0rGWlGQ9OmCwICowSyJzymaXi/0grG4vO1o3wXLn9C7tdS4Q/dDO/m5LaK+Gvb64YbgJOkGBL6slrLMEMJOBybXxoPXUkAbvkmJB4z0228TjmywMsv71Ro8KmTe99dK5ACyrFztCx2xERTixQifb+yFFn8ZfGvTB2hXKFh0C6J16Upj9ZscxrLN14gE3C2ecbg/jWLvQhateSwx6cI7cPtSeXEsSGwGxOLp4R8sAawVWVvPCkbEK3kVCpUkze9AMgWQ84NzAy/gIslLlDiO9xS/h6HHj83c0FiPQG2ZyAKdehZyu5mRFkZn2+pVh8AjTn2GQRbKl2dQyMGxynR6Ob3iHkibzI0aEUAsdmyYKAm3z/Y90XJhktsnyxxwPSXY83bVVwHrY6SD+eiqEGTIvPwLPEeeWDyIXw/9ZmBQR0UIR0JlgkWJHHYZwvY60jlY01BWGJBrzFXDOk9AUdqPAv7IbKOa0I8bzZPvglyEAMKMCz0fgCkPM04PT0JqhpvcobXW5szsvs5s7slI0xgAz4gqdxvB51eSsrWn50ksFqBi26B4uTce1LMcRSFh618jqZBtCMq3w3F2nLSmUxJJJfDdSyfC+P30g5bpOsoWkJOp7PUBSSPG6FJ1FZ1mKW/hn+eejMKfJNPccoEw5R9VpP9NIDmu15Kk6aleU87lH9kmufQeWp646qFsNjUyhr589k6m3Za92FObM5lj37GvGPvhknI+BWBV3fIDmUNgVxBBzqXpuMGHvKGcFHges3z/xJbi69V3zMLytCSyPde6phgcmYF2vrumhWzCzBEO4bouR/2xF/tHGKt6/ARTuNoyjYLIfaw9FJxWovQ7A2uV6spxc9EtequwQQ9CHp6VzsinvxRslUsLJhe8N+f5VWJu8CIIiHfb5cpBLzlVsB7L/QySBdi/xHPXmoP9tOSW/2TmGp+GHu7Z94MA+dkrIxHcn+8Suvh3v7v5lQUiXcV2UEFqJhQhzwPl5wyE7rjsugWeEY+QKdas3j0UeHuurFhHF19COL68xr17FuLwS+o1uBCHW4Oi49l80RSjZJ1xpiAAJFNPnSl12EY2E84juWB6iwSp4r7wH4p6P2yYI45jKLJ5nvn/eLDq5sRJdjqplAW0x0adwAeGmEEQjcaKE1OAA8wx7e4pzZ1iqKgw3FCXXiDpjKoUquCUW1iRi44xc6oD0eCxU03m5QSJNoY2BecpIrDLn1IYriEtz2qhRG6J3wTlUWq0HYDBlBcyypW6nFMnQgPhB6nLh5mkr7nFASZCeyXuL0V4Woafe9VbAFHSr7RcDK3B3TlNgQ9jtQRb6XflOjE8NGIyvAkXj6Cqj+DAlgPEiteoKA1OGJLUvotEkC66S0+QO7an2RJ/5eXP2SqK+V+k1KbvmLO2C+WneicrERnD3f+mUVDwGjCJ5H73rnaBLnaVaxGHD9ODZgVz8OwjvA6jfFLjGEGHyZSpWjX+kxOX0FPXhbor0F0hOQNYHY/bO+IVgNL3fPxO0ApTRZNUguHiuNkY3fdHMzz5bvMby9Ud0b5OGaZb4EEl1bfGs7I2BcX60M1nLAnYgfsb3nd1gi1KWqotVZe7JTZm8dbvzTdt+9J46vlMgnjfu2DR/yY954LBsc5h65btdLLv0or0qTQUQ2FnvsRkvd6V9uyLOgg0dF4k7XwH1hu+hezRnCiH2/1kzdpdeWdh2W4acxNjD6XjP5PkF7tbbaX/jUnuFZOvihgeAihEd6dAXf+8B/K5PG2rBHgYUWXseBV498JHKRLj5L66eJbn4sEXC/ksKk6wA9U3CjtkhXvwF1whup9Hk/dAdSG1mNtVp+8eGMTuJtKJQLn+qbQYpYcChGw3Zal+Ar6Di34ZQXAlXeVdiwII0bhteVXCNwxNhwAV2ONJq1SFrhcweelEn6wkJUO23gYleKmUwbnnvYObGNY4dyxjcQSeMMyzTaAed5GFIpK9ZyTa3Tm1XhohHzm+CbhQuLv9vzS0FznTw951FQhiQcoSSWxV7srG+qjGyFYmIf9DC1rue6LV0PouXcxjeEeIELREeUTvPOdLfkIAWK4z+f6HuuMYTsNVpvpdLyzSJnnaJBKfMBfY/Kq0JTVArfzQBsx0YVXldL/Uujld5Ndhq6BDVLg8mVgzB/3T0F6g9s0KLh9SnAQGTVlNLXLDPHYOEa4hYFJmMdHF0qX7MsT+4Wp6i0QYNmlN1pAN7uukZGyZ+yznOP4rATnYd/4PpYQ0mAWxVoGEalTxbWdJlEe7NPCjZMkNMaLKGgMtiRVejsp5Qgfn/ot+g5EqKViDCW7o7n365SwpR/XydquCqfi3uxszeY1ip0oV9N3gw2Gi7oneaACJnk7ktLmSsZw0bqB3UL3klrPfsDSZSRiNFKdWnD91caEtIk2dr+emnEa90VHKWOVcjRiGPgnpqWhpKxH92vSor6PCDFS2mPGbMkimdOu810iTv+yBWDdh7rHTXWTHuc7bFm3ywsLgBMllkDUfhCW/Wpldz+ttB+TuW9LlZITDSikm9xkL0Uva9FUadcP4R68dC+UD2uocE2Xb0z+U+XYEjtVb9l6tLHfk3GM8Xl5xQlph2vWJ6RB2otREZcpC9/XPvepZRipmxGqdx4p9vsHFroZZGago/CcgPpvH6oYDoUb6Wk003cROwJZH4Y/SfvXcEJrfnqnX+AbyR7bZXN9o+ZVUUf9xIQUxPtNd/0gRC2sHLgL5Gnu5IkjUkCfhGPDNndxZkwR8ETXxAlkf5B73YMKllSysUX0c446SXTrfy1EuVEfoa0VOG+FJuGH8EVWHzWr40gLFRNKviT8vbFhjD71mUMMW2xpBBmeYxpQMDzbGDNGs7mkXbv1ZDYEDXdz1eK5nPZk76cUV+/vG/qMmCJl47d0wcq8p8ztNPjay379RX67QWSL0FrEl39YxIXyk4k453nuubiZzbgKz98GrCSvvmCGwgaHZVrfKw4eDZMuofizDGL3hwWcrWD1oGzsOwO1NS3sFIvKULyVOUtWa4iTocnuaR7mjE6+aPdI2aWCSgVDxTpjrnaZ/FfhegI7UF4EwEcSbCmrkq/vpIFX8BoosKtr97fXYDTLfZIHipSqDw+fIZTuj6upWEoceKEs+97ClkbEIbDMC524FkPPW8ZILEp6xjFNuWMLkClDDl66Aa4Wqj7vMGknZZd7fTTDj+L3mMVe/YN9imUA+S+ScEpBF0Qv1tEabZRU1Enjh+WKq1zq30gglhYIIBFnsbnMaK9l2BN19zv67fSI3Ta5FMRQjRE+DRMbB+nZoYrqE6L27BJe77KYIoloiIrJAvzNRA+Pzy1TzaeUpY+CjFdk3FNUN5AoP/yPVqljdhnoWgYC4CLWeKpRPNaX0opo2q/Mp7ciJU8jG8sXgoTfOdzI99RFtvEu/Lk8Y4umSMLe3L427hfJGDqN3xZWoNNsw/QcqDWJquqE/FhYfT6l30ux8XQ7QGqpo+ay627pxd96klMR6pDuBEfl2cIDPo1/pa/FIkgDvdumTbWsRXGPobACjF5E8hwAQ0kInydBBr64bZUiCgJyvJl3unMGyVvooSMznBZ09eeQtMPLQ6BI01QWpV18lQ8IxjSfn14SOAnPL27Eu2Lde5jlITGuTyMT9fKt55qilr0gGqJ09wZ8mF/wdIpGxIyhro4xyU8wqcZG/wDG898k/pU1kRdsq/HBqcqHvrAsMhIuAQXOkRJJ7VPT5GKY44YXMhYe/ziPTUdsYhjH45Temr0Wb6Kctf8qPYf9uZTy1GSSZE7tkmO55qhGo+bD9nauTUqMbLsjo/msZHFkyZPPC7OS4aWAkVm9mFf3CaqHlyVSCuzk0u+bebafA7ZD9uQ5bOQqyndH9hUIANDYVXhkUy8ngq87WYoJWA2r/Z2d+cQVJOXAKx2WMwn1gJEQW59KxnSo0sY3/IdPhPnitAs/5dcZ6KClz7gPnLrAeDKZS1qYRFfOA4U4uY6NspMofw5w1OSnAZ4nZpvaviks2UIEzzp44WxldxlgGAN68nH1craSPQg6yLr6dbo3fuTMoX0BawwK+dBzhQS2JBAt+UhEmsUtKuXwMmZLeGHSorPULGyOOiVK8zLw/tYsuS+HF34icJj438eW20r3VQc1VDaT7QoszpAWdFF8/RjN5tA3jVKUFuR00tAkHJOHr5v/12/DvEC7nzR4TtI0c3JCeHCCQTik0LvFuFxBeX7W/Q7locwcuKcXtOsvTplBqABHZc9aUdz3e4/KDideYZbJPkrW2tr+rdqUOmsDKBaBzPF2vbKQlQnoicY63fp364zcsM+jxOfo2lrcnZ2VfcTB4jU4p9/eigulm62NqVICld7WBPgXixRCU+sQuiNaHQ6d7k0irKX+CX1bx8nNgPH8+uzAIfdCXeTIQ4QcC7R7HIbJWdi+cXwDR/qcO7XNR4fSwkW4AFm6QnCOK0ymgmMfvr/eNbouHayuVZz+NmKdC+rDtQyzW4dtuArM4DLth/19alWtYqCmUMt51V8BWq2hTvrWw3MAaTsIz8hXfSfarfRDB4cfZqn9ZmTli08VusOHtD2J4VD+GjSetoDsLfCuUSN2J6T8YMNRlpebPGTBVfZSfo51uUNteDyB0Bstk0aE8V5FEEYEQjB5kkICAVwpKrZtKgkjtDdmhWdAWDeRSeVzT4CBQmSVSasfCTgSDx+hw4xdLzLTaHc46O9A6INUaJNQ/poiP29a6duaPwUp44Njsi55w9Dmw4YSVd7SL4bdAj9SJRjK9Ue/jrDEZuoRhuqakNo5fPAaehHWRrG0T6R3vjnXS3HpWbWOoOvksRJSkGBC1IVS8jt8s5wY0R8NXE1Um2f0x+l3VPTWSK4o4+aLnTqspJ9PxnJ0mMJNQpiPrePgV3EVI0DMyxjemaRVMNv33hfsD7RxFlAJxWTa4Akw1arfcao8s6/u2xuJIYnE3v++hB7m5riG9686uZI860z3BfiafGRKOECLQCpZ0UcWjJX8NDYtbbZrdKWcrxazY9JAchOhoU2zILWLxo2SjbzacxjebOodTKPsKn2Bseou4+SEMySaOy5X5HpQPq6OyHW0IOAEpUyiCdGG8ZhHB0eMhvJFrW5nhwFviE0cMhMLNTaLfuc8X9KYYQ4R1eXZEOtjYh83ivREVV3IQOBzxCPhckJ3qVdhbYSAmza/xJGXcadtySujvo0Xume4S3JtjoxLNAz+iA+r7CF7LRZswKtb5Y6cF15WbxNYZ4ZQGK805GiLWw8eKpIoRMWv7/CQEWTvXUiE8ILpPBqGw2V+cZAaefrKbHJC/+ANXggA/9xAAIEBKBVgxiABjvyTZY3LgCtHl6WZFI2JHcAot5aulL/mmxu88sHeMWEMLPlW6VTb20VljNPp0Qqjj6ZbON07tX7ewxR4sIrl0CQmlD41knEOvU0eeMQ1+V/6lG9r4ofnfddTZJyaQ+FTVo2DXtJxK8SB8FWeCupuQf1/98J9wF5ORXwpVMVWvyRr6xNhFywQ7uJfj7kb9mFrEQM4FfdzvNnZT2/37xA9uijFYt+n9AM1jCW48gkAUvpPqhCVi7YF1mXyzgsu72Xl1Nqxi12f64Ah7lapsO+1z2pBBYNcQsRP4JzS7WGf+8R+MTXrLPbr9mssTShc7jfINxy8uDmSpZGBPGUbHR4FEGveE6eo87yX517p55gQl6gNJVajjD1FKhPvCyckrbaIHJaceDL5os/pEEIlgS8DcD1mjeLg6JERvWnl+VIb02LcmyueqcqnaJLaTwqntXxPX8o0Atrf3hojtXIPW1GAYGbkfWQRjfXwGHf8U6qvN6xw1s+5Phvu6003Kwr06YkSKRddGEcmatiS1TpFkHVLLYXbjxjw7XFk8AaplJvcRPU2iL883MT0Y06zHrQgacW4IrcINHtQXWIGQ/rlDrUAyPQQrn1SxDnEXimGzWQKUFgQNUfoIKOmXzCjYrwK+F3N9hDjOj187IPGJTJV1XCvS2Ysi0kNYcymjeVx1SGl4HESwAc6cuFhei9QOdw6clqZdreWrIrbd56cTrAMky2xE3Dt1qmKOceKW/Kfpy6LsdtSlhW79qq+QHyYwYh05+QLaftWLViqhNpSWiUftPUhAsvN1939mh/KkYeDbp3Fc6j+vf/rbDlOoxm93FF9TlzCd5fkpDEBTAqb3slakR/CZPiScqKwp58ifTfDyTWRNHgOeJht9TCStggEbWu0BRFAFT8DOhlBP/Yid8ZsYHbhDeVUsfeM6rEyK8B4J1JxjonuVRPdhWdlS6FuKMAZVcJx7JyOimlJvwIKqlW+tgTOmHc2V2OVKVXfxkXrfG58Rdiza4ic5RSkOX3W5b8KtHAMyk8hLy8XD9dJlIeo9FDj2kcKt8Q9FJFPuS8WR0calAjJHHW0gzyIsTJrv5Ufj5z7Ea3/BBSonA4033/nVU4REiy+HxZ2UbYbUwZWzn6Kn7MKj7AC3/uEysknlnK5dhsqpPHhvSXqBKKiwFBLnj5yhXeUyp9W0LSfXqPla14p7hjS4bIblTanW2j72l6QuDgF/7Rf2AD86ztJpyN7mvTSp4YCPfRB66Q1cGEs1S6outdQ3y/elBJ8XQOwWmgwlrHMdrc1UbNGaFwXkDD2eLMVFvK3VcqH8Byjc8LgUnnWJjnCbUzFvu9Cl+hhpviO8o5P2SXbgO0mWvmRrkcTAocMMaksO2xn9JNUg7TOqvGeHc6K0/9eS2gST/UsSBJhJaJ6UeN524zEjWt+qhN2xO3Rv9UXTQVff2n8F11AJlzNCihxA3U2WnPwAjuN6CuNcS44bJiC9emiOEkrkEtn68T2Jl8pBIWwGlVw0IxCY+hglZyODlkqxGD6drg/FkilK79MDH56gVcYgJj9+nNcj/VvUbcFi15G1xZfpvCohBPAtV0RpR6B0GncOuL1ZaIp81daAC1oGQj39kbd/ORE+F08cso4mYNfy3ismC8cIJq3ZL4pw7CwAiSJfK3YlwIiUrHdIhLPzaFztkGmhBHr0Mcqt3ZgbB2Hp9C80cadb/z6iqac2qyLQvw6A0J17LoesjlpOGFGvnIWwpKUV0k94S/W1LZmYhqJ0Gnyuc5LC33mmlk1irkV9xlCQdOORqrBDPjPHqgqZJDRDQ55vnl4pUKyWqCRqzQyMZY/OOT2UnHliiirac6gwfw6t0aN2FC1kIn8L28YnRJgzfjrhmpXXVAuRPTwVyIgNHrGXQi8k70CWdQCWnq4D9MHg/8C/inaHl1d3WkucqxZmLhWYU3r+XZqJ12PKzpaQXGyD2e9PAVT7lyjo+cRzHjvsyW9ynnYnQ06xYTD1O6lxyslh+ArD/76H5jnrl7v6tgK/DLeUrg8vxeXKnIxCn8yFJfmpnp50hsgt+byn2ZFpRNs8xuI9xWbJChcFUMQ5a2GRgGqaZmxp4XTEGamOGjp3gLhN0kU1wZki/DbxpwpiqAyOjs51QodRU2r+4qdSqv9LMzg5+xHMFKzNJp7werS7F5+lkIqV+QKSfqdwh8sd5bf0MJ2Kkbhy0SGxelz8mpTRkkxYR6yl3UuMeC2z+sUmzs3feNpKFrcMbv7qRYUAwHmNmB8EiTc+ZMUQlEV5kdclGYujt8E6LGm7/SpxzlMk6ZpbldSwEnAko9uyujtSFDe97JsFsG1NkSBSGLaCGxUyrL6PTgNZJ7t8e9mI6xRWrRZfMon0WbFl5d4EDupfTRRKvb17v32q2miVUAZsvwQ3facvGfE1SFprJxpsfSrMxO+8oR4iuaE3jkT7Tld8k7sBexKiDE27i8QsF6H7Qsnb9HWbrfJ/MqKuWWI/687ZEhD9opsHH/0QsJGLWVxr4Ki+jQcuDZcXGsbcw+DM4+okq4+reL8B1opA7sqw/BusFFbXlV31BvpgXD1rPfr0Qe1tEFVUd32jmvgNlWHmyOyJOLfVQMNzdWIyNgRdeXpHy89QWItfFnheBqg65zQjSWdLfbkTHYpCKJ+PT6sm6kHV1B4Kt1w8WqAaL3wnubENuLkknnui3+8+BxYdoBeTs+vLkqib2PKTtP6kR/2BPUaZ9se5GASOW+yz1dN80WLq/GUam9qgFNDmtcFuwPyYmxm2oulqFAAxODwIny+swXFeu/wBLC1nhWn5rdD/DAE/Tz493ubWVa5EeCgFyhkbLv5prQKnCOklBK7mu+jGk64GwbOp7bLXfbUi9Pp9vJOjrPD9B6dys2TndbYmpbTAcEG+RsujEygcNbl+GbXyMMIntLFvgv1cmYLX2Tzg27MnOD7NgMvgj32VCPpCjIPgzn9Un82zIFG4qPUWHXMq390462ABU++5p0qEvMDghT5gEPRsciRvn60F1XLV720ulJDxRqmgYyOwv5TqchRUTbKrfyAOBc/6ZNGneGxItEz034gIokKqya5lcFFw2e4MEh+Mw4FVxQ8441lZnpRYoFQWJaSPyfRjB1xQZak9Pf0JJSLWqspEUYMgcqanEU17NnL4Xt7JEbWLL+buVeFVjgF4gDTPCGouDbcWf/LRJ8odNu1v0EKXfO9eljUu7kQhFsg/06ErscZx4YqW1qZHo54uHXPcYWtJhloKxgenrZqbF8jzhVvvqG1xJi9me+TdQkrjpc5GSzzRjFF5VxYSBbTxY+WDgmXYWaNhJmiOJPyHKkK6+gEAIC4og+2eyNaX1NJQCSjXX6gXzPgbRLGMcQIlpWYDeJPeJyqhiF0ZC3vCx+7CHMDujwhDQH4UTPwQoGL3BTNjL3IBToVTo7FHZ+1gvl6sW6/RnRPJiNMH9fqBbYMez9Vh2LjMjn6VoGQOBeYEJXH4TSbVG339UZKRlDOaJWmqWErKVdg/RP9+pF2NN1d5BCLcC6zbrMPdI7TlIB93c/DKpHwCYv41FWmynE1/t2vjHXf2D5RYC1ONF1G814aHED2HM+zSqc2LzK8AKu3vuCntls/wVGbjkg/0TvbIBrX3wD/sSeJNKuTYngl3AoMRSeRJEI/U7QmuG9B7Q3j+NfbGK6kM4J1SENb/Ywt8Uchf60inmARDDOcza+SOXhCxxy6o6t60l3C8dJF+JxVnM/8Ws04L5/szunPtjIATZ9PHO5U/lpRQnYpw3RYlXLHz9Qf8fOdRJSTkOJCZYyyH0oiy572TSI9AuKxndMF0xaOVnCCJJSC67PMzyFpaS0SjaQWyH4fRL9ruo1ejR9yoS5FLuFlkv/s3A/qA3cclQmD4zHUt8sp8cEkF390tMPvTjDwmUDgyxaheAMPjSFPCgSxbjP5H3scp7ZrpxVTpmiZxuC1WMBiqfyf7NfojprSF4ff1BqrvGzoOFbFhM5yJd4Eh85yb0XBwBlW1sw6QZ/PRNU38lYvq0kpcYiwL4HqZkDuumLCKt4hKPKk/jEv219nw/Ou6Qx2fi/rwr51f7pO12f7DJWAC/cf7a9m4adejGWnQCr+ug5NAZUgLwaOHJUkhKaP9lMlYasgd+SKeokrWV12xLBFre+Y+ct7i3p5IVucLuxyDbjgCn15cJDylQJGj4RKJxqdSwIUhmqFR8eg8eVAXcqhPQlDqoVACRqjhXkPwbt1Vy57mu0XjTKisAuHJKn26XE8pkeueXMqzLOLHKx2zyGfDhYj72Hu2PTuuwxL2NCU/aS5aaa6wWdnlClfo63xT2BMUWbw7/E1Mk1BT3fULKyUlLmXtxod0PNK8uZfu/9DjeQhJUokIMaZ5LGbPUgQ5TOL5LasgZ5tPnbCUDl1cbQEqDzGHaBO4IJfwCueHxBNs2dTZP7Ka9RMj8ubfSUux47MnE2vVPR1H/66HOSJyE8LkQvsSUzGVGAEBB7wI94A3J4usR5S75U1K79wjldAf2gR6+wZH/j/YVrADPXWoq9zcEuBQ6x3ZbF0f5OUNaAHLq7cwq5kEZaIOIbLLeuGpuobubi6+MZZM4r8R9HVrYPU1tQllapMTW32fxt/3XZii4z7+tj4rvmEGLJ3xG4R3AqODLRxa6LwpAJuWUaB0LFhSfKESPqD9UwQzKztiRrVArgeA1u2oKNvoe69xkeyG89SpmGUu/E9wc7nmchYqwIKCCwF1R5JLYN4yI5MbuC9PVaXwHZJxp5YIcSvYtXfog8WvVY6knjOx+t7XizUyl8aZUeyB1NByfSJf7UDGcQRasFP7zAV34Et0MFjjoroyRbyBMNPxmkuhgGjC5WQnhhcxbVZft15jMgYV6FzTocgHnXxliCVzN9xJx+pEEVgTtXGCwhGQxy4zV85GAfFkl7EmS1Xg+VsH3w7rPISvyx9D3acrxtNcXezdQBrEfBDTJwKVaUSVXP/SujZCYdwBcM2SmiAn8Urj2sJZ0dBAhxOtVtql/LKSlZG8pqEd/TkS17wPpaoHNOzlQRLKc7IeV6CYdjnmpQsQtkRL/0XPcmQPCCp1Ky8/lHggpYaoNh2pl+DYjtuwTUo3/JfYko23FXURejRCm6tecfAAZBVAp1p0sLbIVQAeODYm6wy7NbOkzS2Ou3oDExhSgb7lITy30jgifGu1RP7uAcubdPbPhDiQYmJzPtDKHRliZHLi8veEtybbY6+tA5FsUCg9OgiUUZ7NL7ILntMRajqjbBbRoVtP9YqeTe0OjX19RUYiu3iDjcvcr3MDuKpI2goZU/buhDW5xMw2zaKMSrLXMohSwS+dcvA+N/z2PE4a+ifFqjRnqLBefezxf2KK+GGKM9JPCIWTv7ecSQNnRLNB2tqzLTzrCP1KUe8OhvGkESdqg9yFpoHdcFlmZ6lg6ZR+cY1nVFo4VkMS5Q3W04mKa7kRoFkjUYC3DDNXUn7hk5KP3QuvsEYoCNUmCZiXmwpdDPU5El2rcNn38+PIlFY0px3StsO6bO2ekxH0TMDMHwfbUVQyVD3lIUqP8nQdY8riutsWatspzm7SWUYZ4wfAyCNgAlsnC0tgNe0BHWi2oQTfXDjOYxcwNIEwn2agjYtT7NVWbGzb2tlspmE7RE763X3xrAlhplEA8hJzCSjZH0eV0KrT/PexeMJHDCUjYPf6/FP7OG3Vd9fC35sHEWj0gZ97bG5fvZiw0DAvCJ5iwBCO2BYAW7ca5SHjP0QJvihtU7NjB5MeWCMokmtNuMJQhsRKkQIay0+4ARuWOHvXt56JFyzEPfABr4dOMtZdvvdXHJXAWkdi149aA0ZN2PUcRz1G28PN0gNA1Em+lrIFeBqsPP5i21xYuTx3w9sNt0nDwYEtb2iFdQ9tRpLCBbxE9EljcHDLNJVMueW0zsUnzwRMNPuVS69o7DulahqlnQbQH4TpnEwg8p5lfcDtzl5+p8FWv3k8FYWeFKVfKpkm3ule8OMUca0PZNExXd3hyx4jpPKpi/x15kQiXsQXqSNV1Cy3OccvZ1yGos+XjXvGQb2YzebR7l+AsC4HiVmi7vL9DFfEBBWGg5qjj9FkSmDElMXanqRLPRLufXjwbb/6YrTt6zH5LZPwgkee5krjl6riWXut0MiSpJy7myx+WXRscZYZVVcEsz4axLT5nmy3K7tEpLIww3kldVtOa59y1fhe+koRdygTLly6hKQjv9rcFJ9zDS8pe5/4Epxvu2rfyeqtd3spey4f0YCj4g12/uEUC1hY1ZebvKfTGoC2SbdcN07er+iKHV/NRI0VxEGk04XGiFJmSocl+7Xa+M9VCcHgu9hGI2ngg4JUBNxyc+xs4A9JOSiOCXgNXyojxGr2JTDASYoPl/kdMsVugVYC43YkQcvf6WMo2bY26m2z991C/qrw1SRlNWRy+44TzKuJfJ8IapqYfLcNJYP5RjQcJSEJeQ/+JTjqVjovfZ23rbH01bHgQPe6FOIZW6zxIQUgcKdMfLzWQCQ8hFwLeARBsHLIhKpAVhB+HF3bAt1sThSBkk6OXxgZ5KcpzSQlNIJX5wl2kjSJUd0Hr2jHGuITq+Oq3EmWbAJkuMpbWUIhMtkr2VcIfJw45Uw1DFlyN2BNNjZ3ZshdIajs00FKWY71gs84mOR7QYTn9WpNnTdti9DXT2nCoVEvcf27o5QtASIaqytrT4I/pqDVQR2B0LqC/GxuQfTo83yk8UBxtY6ZbXWJfuewegXiBOKSpAmCpwom7MheVigWQ4GXqmYIASn4jclB9yxbogMzdm9T2fhp9X6X7OGf89k3jyQ3gU/XLcaZcFls54LQav5cI+Y323vKqv9mXNpDTeo+9TwD0EEpt+qLyg3Rr/1gANfYpMhUFKxouWTNWpb3qazC8pqSA3K9f6HnckWUgqoSh7pka/TkwKTHzhPk9mghyS69bwcRK03FdEVYw0H95TwB9I8giIqHXYvpfcv2BYXoWmbDFFhN4GU2gstr6KpwOIeh8EKl1y0Bw+a2Tz460CI355th+IZ61Ax+kkEVyIfn0u6l6bJP4cYzEyslLCpq9F5RlN3/26Yo+LXexhoo5VdU92lbF70KpTM6HuX65XvvhBhSJSEgJChZRf+mjmJ6P3fmGTFPg2PqgjWTjoxf645yMOqtthFXuf804FSHRFPxhSTRXRywB3+koULwaZxNrTYF/E1ySLvDDmwcbhoLrwutEkbn0Xjb0T/xs+tVtMuOs/kqRESxKvxgQXgdln+jT5YKflItTdgBLW+m9EA5kHH2sg2x7JN4eG10+RSVijpPKAIFimJ2SmXj2wqeHI+RpbgFgB5qk37BEKgNMkXWgAbc4FtfeaQBUi844nb+h0JFtYEpfVf/fOkaDtH3SUblczPsBdUaWx+IVtkBEHFuU551HifmpCfSUxlUqnXIB19zALX3rA4FoCbHwnOioRo94lU4r8yzGsYDC+T1F6Q1UnjB0i2ngeMkVula7+7Y7+q6MqNPew+s5TXNVP8Ca9kwKVU0GEDE4nGeEJS/Y/YOl3U+YA0Zpsda8WfFMf2XvOjQ8ivgz5w8kLQSJjCuX4U9XxG3jlzjnaxD5S7IOkGpkWd18KZtHD39wurEEVTw16vgWxw6NMCtUK7DWEvvrtshHlue2xZ7Wbc0OTIB+pRjnQmHd3ogrAo+uBh+UkRfttXSZtUSVVe5YvFbZtwMlt4dhqepjLnU/i0suNhOOAyHsWgACAQos2zMHodNNq67TXzRrNQ3D5sdSB0Szg8+7cmrTN9XJqT2nLSJy/FXXEHOWeFryIYRAAqkHMTwFPPigTz9cDtitaCXnIvZ5Zsgc3xoUipwyu9kLYUEkpzyb3ve8bLr8J/a0rVU0FxvKNvgNZdM1YP5no5i9kvGvV4GYyxm2GabIyhI5QQrHR3T1SpKAsCZoNB8/hCLmYhuFCFWsam2HwQwNuSipmTWq/hYiyB34wSc90iIthXOaBgWPUmLy46ciRaqQFO1o/F+jfYTwjvSlmfzKieCnl+j8tUulrORZ4qtXEANfV1v1APUkc+kB9R9E6hte2H69CXdKLyeDXwS7Accviciu6qafXDbHk454LobZTs293aXwrua2GEdrIrUDkAOUxQT3gHyZwacuUhQNtSI8LQ0NpOpgFBJ9zOrTQ78YJAG2PPp5BEQP1qRN04m53Md5D0iDg3XRFep1Cah5+KEfQpr5U8I4xrfOaW5uGC3YAbaishYSxvK4PgLKXhvBogfROv4IAYHH8l9dmklNiOChEawQ8XRb2RC9m2DsuawNmRUpTPRGFG+0sH7Di/SOPkjdzbZoJVmwcjXLGRwIQI+0HwbDsujoLYOre+srz23Ni5or1dxciHx7t3uK1Y0P0NmzXKmb6QFipAAHyRqUPohtJLhP2lxSGgZ8VF5fkbut/sR410RX07j9m//ovLisDEGaPMdeB64RlBPLVPYr6XxlaittCgzCOXXS1RGxQNjL0PPeHNIWE9vIPK6zRXXIAuI6hqbFbwmRkd1Ue/y2ciw/32XyFZi/4KDKR8iwnXRSf70aRs2EdND9D4UUrAjFJfzzhu8vqLkwYbit4qOVqiSGqv4hyJ2iq1ezKXPIOi3bTLPh/cm8VhBYreX6S2NZaKU1rK+oxxountE1yczWoBECWDQ+ligXku2ER1L8Fh/n2zrv8oqFMKy+t7SXrU0XmIopqtkaprxbkpBFEfiUDbnPRhafPCpNHTGDH3hKBLTlDheoMF+f3itldDNZMUHVk2s4p5P/16Ct9MJc3GyPioZl+Wv3H6LtBzdDEjW3xOV7JJZYCsELYgwI4P8ziGEdHhvLe1eRzSQjaii4i7A/9FTBQeac+Se5a74Q/QOfyet6AkwMj5aaeGbg/W6GWe60d7zclRpcAuZgeDfMr7t2TFD7zBM8X+ahDlEhbQDJ9+KHmUIwQpyjfKtFUkkvvrJmIE0lQ/AGv6LoVELJXPYNDTTUOWdhGU7gARsIRDCF56+ktfJsgV+CjoJthRaRTfCgj3yfyBdcr57uqKsYsi4zf/4zpGWL01S/J0+2gEnBHxgc36FKXTWQetA9pZH4Y0R6dnhJEU7a9hc+GyvxPyvWCsI1q6nu5sjrnD+XKh/bJmREvYLo35Hd9fBvZNLWx4R3FCQA4P8vE52xTJf61v0U7mPHruBysH6mvd9uBlwkRE8twotopidNp0bsGHqKNgjqJrksWfzkJ/fZlOAYzjilRAGv9Ku5Z2KpIDZQimrQ3ERDl73Z9tNC26r1k9p4+HubIQFFl3IrFLbkFk7T3gECxfSnHrWggiP7eMFQOgbsn2TAbCHVYPgVxgURGPC7cvife3E8J8QavO8rJdxmjbhBOfHelRhJ/cgAOBM7TXAn7ak1xlNCJf547f20oUpHNXC/tCvyY0Y2aUuHCsxqZlS4TxLYdiHAPUgBlORAszt4PIkLGXlm/GUl3CHtlZND6dOsEtiWO0kzVL6qgAh0R8hX//x5x53LqrGrB0nhBn5R/9KoDJjPnY/BYQwCGWFPtIzRp1vAMyguXD4WcKmbBb6BdrRsd3plVRXEB8CUVi0duxDAHnq2fYaE57v6yY7WDSPt3/RgoSy5vzB1XRuXtlLQ5JNOtokLkxmpeoK0IJ4Skh88+ZHut0kf3vh2B1XSENyJK2oAtGf1A4ZwYP8c2mYe/oR+jFnZ/iBiEfHSd38hUSCm3rIWju29pM6SmovShRK+/qUVdE6OEIkPErj85YaTEw2TC7q2yIKhosaFHwiH72Gp7c370tMs+tI5LUKo5u2RrafEsIbkhXVSSMYup6wyUWKGNaEU872E9eCzh3mtA6h8EmUU3zGN49mSzVxf+raYpQQIZP6Eb+zaW0q7f/Uhp2USA6Cp18zU49RPI6tK9surnRuLH7VQW4INYeyX4BYsr4zMou/N2MWs1ZW/uonxJlJYmxz0mk1TKHq40xSiBkF3ZLR2gz4Vfxh2gp6Mkl1nnu57NvvsJ7viI/uj2D89e7xCq715e1X+Z7Mq5PafqDe43X7+55v/id2eRHcMh2YsXLczT0Lm/NvcT0kW/mBoANumbzWLaVl8NLXsDlGBdRH72IjSAjGUw2VQeqybd3aZSnxzeR77vJyuiYF4wcb0Zu0G215T2bJBrcs7g4DkTVqgf8WvLNngzYv3bBgqMWl8PLtYWzmkD9/c0NCdtrLxVjYIcAQgnlupH5YqjjkHhwSzHeJ2mkPKhGFQk0B7oFZVrLeSPUff8fmCmrPZa/Rk86/H5f/z5qrGCnsnyvEIXaLkoiAWyHry6IN/jeQ6cYHWduK2uBBmkf613c16O0PoE7gDwZutpNdAdzGTQLmg4jzlQ85i+Xjf+T1orvJYLYsbLFSnnSwZ2u1tK6YJy111qwdBELNo9wlqLD1i1iN39cez2UYERSdWDUV35GK04Zvn5JK7HD8wbXrKsoDIOTz1ER+yPtvi7m0NfiPnf4yg909v4gSlPOORBggK0m9KUJ7jrPMd9VdbzGIR7BmIJBKj8ZbrqVys92QDYj2NzV3uFaSrXXRrqFygoJ5xEJZ1unYOn+sxQ09EjNhDY8xJDNp9/iOm2UQATDFeDQjsRN05zoman3q0x3/eBUjMJQsMfGdugyQAV5i+ag2kzzyuKpEqHwjBRuVw3s3UxFs5PC38s7UXsHTMJz/6ualIIVJ/ekQRJV/40yHYO5mYYoP/j8JSJB7J4RkiNgFtqXiA4VjOBhq7cDIzOWmVwQYs/V8fouMIM9cvRBa+25yLoqg4L44JpGnW3JfpdiWAwoRxP/7Kax44b2Ez+7c32ECV93lEz8mdsVtb1E0eAYIBUuj4QBDJrnanEq7n0wFRR+l+RboLGciVeWCpBUFddUoA6ZUwpoioI+3YDTJGsQoD4FJvlOSrpN3DC5ZzEjYGls8mKfJDGmFmYV7YwKoN+Q9Sr8M2Mg1C8yRiuTQADSwo49cXr7Kx59kr/fOlXGZ4GtKbLkc0Pt3ioQ/Votz+Emhf1VmzZdv5HtEvyD6C2NEqRB5BOxpnt7Cr9UmAZH9Gv9PexdVHrvABkfOKVPqfxtySKCt1HCuWt4WqtXE4Zr/RzZd18VgXCzTOsicIbudyE/MpDdaFE1VSkZ3SX5xVks4VjtxTYRwOk3QT4hRKDz/a1PJNaAq+KxmERGsfp8Cae/LVjzqVoOX6Sp5qecoEktKb4E7R/Pm+KE/cq+JhWZdtwOt00nFu/nZ96J9HTXFVhe+wfRID3nHQmjpZ1l2i8sYMBI6L087D7eQLHthQ/A9sylav7gbBGfJJ/T9DU9begkSYV0WO3eB8a4nX3mXzkjlmsaCYbZ/wN2aTDKNrzkPGfOaLBdMOoFi3Uzh9o5JkNOqgj2HMbcB+Yk+Da1Dw3ifPyA9z0QN90bVT1eJGDb5gysJurQ4Wy2xayoR9/MBJKcXsYylqVKaMOZgkwaNugtf3ecoAA/Ot7oABVpp2oWmyBScNpCud4r3B6ym2wx4ZaQuMUu4MbGWVUNKxDW/rGhJjl9h9tKGoyBPB7Gw6/RpTXXdp4/U/2CAzoyNj0ySOrGvJ+c2H9MRN+oSXJpJ3dq7eafFY8Cg3jsVMVibIYFWuoip+owmJU5GYvHbeLWMhXEoehsEthdh+Erxzv5qMwRtwKrLdlUTHiKi+r1s5iuuykPzHYLSGzxc+OP9t7Qb4TfX34ZITXmzfBxax7qpiw/5zNLnaN51/QjXt03roTsTYpGylf56JYf2OfCBPSVe7xEFqGJS8M/BPzh6Yj+1fXKzSlW5gaeFJ3Z7VVbDw88w+JR/qyyE+6M1XuY+s1PoE/zzpxHRaoo53DBK+DzX7aDyE20IyPc4Gc483hB0SwdNeQrnOby/cz3CkDXmxSoo3PbRvq77KUdSt7dWzOdFSu6TP2Q/WAJ1FtIpFmAvzfNtBmwixunxi4YJ8wf4+h3/dUOWe/jPKNaiZPsgHwxDGyCsNfNb0UCE5xspDEC0Wn2aWn9g7cSGxb64A0cq6E5g3Bh1XmgcZNdwfndmyzxgtTvc8fqXRUj7K4RrFGB1t/Xbp+v49QqFb9QW87on/gkjqyKThxNAiCb3Kb53P6UY6P7z/8exyfDfiSU9/FZUNJM1Fmk7wBzDtQQSx/ygmwTO1GAXGyUw1Zpocw3cKZzcqxKekITAvrzPNzseRCDkzRBlvwMgrmvzEDmq9yaPnzdR6Ma6Robvg8ogdOf2XyvGAbRiemQN1lE6Z7z8D8bnm0YOkuHkBX6dc2/zD2aCMyE6Wfs444JuYlLrpQB5jZS/mVtiMnP/OQ/018zsjpMYWRGMmXgt7lIBLj09jrABqWR+KWzYmGsnM24LVQv0qWbQ215gL/k2NGpQRqXBXKf07SH1uS6dfCOqvodl/Ip9lbZmuavMMtEZMXYu6Q4kcEaQqRGARolmr/nte4OTZBkVNVLNFgGSr4E44zKuKTEsxT+Q9qErp1iQC7LSTUDNii1FxDkrf31kByBC8h2Tqazdm75sH3OXCbT7dxA0w41//Zj9cgp4FtFFaEbz8AmTIJdezRuXTnglyPnJfR9blnV5XLL4tpAsAvrS+9BqoRgBEi9V/aKuWqq8fWjyMB7xrjSusMUAn1Vs1RvnHe3ZuVqfyLHxCXK5Yb8i5kZZdj2pfBYSmbz4uIGIhtL1R4CMuVY/vtkkxYGR84w3+9XQ88PZxB6rmYFgTyGwIffQu1tX6DjtGImb6T+yZ98kUxLq6MTpkw+0rTY3op4OqacMghvgHKxUCqtQlP0aCYTrkz62isbVWD7ReK3juclmTXgS75LHZ+NKgbaIDq9Pu2cb2Thi6lLwjy7pcKXLMHvsozC+r2+voaL8u5g8HXYFsuXvw769lsAKHySNQQHfmTf6HSiJky4sOH3U1g1ETNEfXPnMVeBb/aZ2xi7EuZ9zlhCBG8R9lFMoeAOgXIsJNM6hZB1DzXQiMGJ4mbjVxKUW1ZwT3ZIr+20jNJYaFodPy22npGJKhfHMEjnqNnFqFsR6DwZ3qWynXMQJcwwzoqQwyrXecCzXrTJjhNucspaCkMoRtKaW8vXyKgjDWMGY/SqMprr6wrdCyhJQaZOdTa0j8ZEnvRj/q6XsV7EXHEtG3rGGPvGFq2dLVR5JYj5DbycccLo1CJiI1bBPY6FSBNI9f4t/3iufexKr8SUwPEavSHAXO4tzTbUizP8M9OZ7fSf58UZpBGfeBmv2YebkZV2JbHHB42aUpCrBPF+EiIkmrNwI9gEoRpUGEgDZYiEMAdUo3GhptI1oIgIEjwibKcEMH9UTTwrBGdE/U5PO6Igh5Z0ZM/tl6ds9VIBjFXvZJwpfcAadgTQU+ALClgQqHB5giUTt7CinqeGwz/CtYwuWKbg5sOxkJcjGjsmEjYQNRKOfCoMlxN2FHzGRtKGSqv6BYs+QR6GhhVCSB56fVI+wLdu52d06YbL0/cqS+Myapyv/krhNWd4BqC/ljqTYDsfx/JLypcJsvi8lvnBAK/HNdyX0g1U0U/CULzGVmdy+y8f2RQzFGRrn8vK6TxaiPWDQJjDm/6ytBjjOg/dMuOC9+nswUP45fZorO8lynQnKmCeW2aP6CMQ9BUvkvKdUogm+Q9MMarEzocgd9TJXQnJnDtI/4Oy9c1hKGJlr3cKOuCSyoY5rcS9Nsdkvle7+AmgIkTHBn6kJcrtinJDy05V40RRYwOJFgQ98UTxs3mP4TnYc9Yuc5kOAWCmc5jCqk9PsuhzNNH4juGsgJUYiMUainhOtTlVdHw2LWkt/HqJQg9JtcY7WQ8be1IJWLiOgqy8YsvxBCt4AcHi1flGtrXflYigINzphRfFeY2bUVO+ORdpTAI5c4PbFlInTFT+/U9M6aGailkqFn995MO0oTX847bK8g3wNL4qd7Jjt4VvWW197e2oWjZunT7kMLMqGIWqIrF3T4gdmNuvzQyekn9IJGcXYKi5TlR2LDKdp6NDhRIUzA+/hLF3eeQBks0XAlQRHe9W0SKt9GNNaT+t2cOEFYl9QgoI749Lzv39/9fAe6kNwp0MmnupxS4h9XeVWbo2zoW9hI/nspstBWJaYebm4UkKCO9iWJcZwKmhAou3zbo6EjCpLG4GEjhb+zDPy85kanIYibMGADR7obJhTEQgItPsC+VrHbbft+iqNxJkN4Xt59iH0pgtE9OTUD2ap3HkF2J1pAbybah+NzjjNKkzbM6lz3HmwjFAUtuz0Pd/I+eptEEMr678PHAmVrw3ZgtrkC/ZSrYjJPLJShXcbR1hFNZwFFYld1SGsn284d0UH2niymZmgoXd9puBpJP1FvCSkpoSNczyP6hHpIWlFu/W77F4O1+H2Wt2Zigkt3i0wzjrLkIXVBSxXdhyKq2BTmxALx0IKaCkT+MZShhupbRsGOTpB3WwTG6e9DRwAPFdiMneDnwf6f5vz8tilfLI9+mvWobM4Fu1qJk/7ZlfwgFhjt8zlSsE6nqlBDoHMv/KpyogUyiBNgd5bnGmZ9BN7eZood5+Ou6UGs7GKQN3qEscZDd/sTPQ53+6D18cPxGoKESDwAbYa2x3+/fp1ASr/sy/blrqp5Y9wGURQqeQrsCYoCxl1QUmOaqicKNy/xrBCHCHVv8Us7caZojX6CyEGi/etc7+WtMxIYoLY91eSmKxNd8Mcenm2tt0LreOZpXeW24vqlJvkWm/us5+rDVjAGYW0FnSNfazj9gu4jYf1SCE2fVO1EBD37Lokl4aB4Jm7BTXIwkKBoIJNY+WGcA/el89BO6LCedfxVy1P+mbZb+wh4xqn8i6Aj7D4x+M2yhA1nabomILVMUZGPGe2OTqvc0RTYRJCToUTn6YT74XnIGAqbwOkp63zJuIUW5Sy9gY/ykAtvrnkqUq4bP6u/8bGHQqmdSE/ZU2EesX3U5bQNJd783ikIo9XqaB6SC1aq3ITzdpOlb7mCI/KVZiwi7x00mA5sHMwkjK5xbQMxnvhaxp7c8iSFjWRpxBk2voOdwhE5fem9pxMtfkUtigx0gE9ATQPi5B5t/l7YOvEYY4MPW02M6gVgSVpFdWJqLlcT8rJl0b9jY8AdbsO8Egg+GUCN8hZcgaFh/2DVIn1tc8GUjcdbQktwsBsRCb6TBCpOGoJ/i9ZPwu2ixV+fJCPDUPVb3XX0BW1NqE8rOc4W+PoK0ZDaC+fR9zxJs4qmCWEHO9THErfN2RgWhXZlP7ttNUl/mVz8lwRRluRwDAvpfQdILbIdvBFkVGNPim6BhYImIUX2008iCDfWow1k02w9oRoW2Uxy9b1FcP8r4yX2dy48AkSIB6WkJ+eJwE6HfbCy3/CkJpYqJkMU0h/ve+cm7ABIIbXjGU1qL/CABj+HqxRZ6AmuVIOIJQS3tEJmIC82d97jPVLOcO/5flf8e0FadNxnEdaam4VmYQf8eEqWf4EKuVsWE7jtGwsEjkX9aUQPk2mtYTlOlBO8CMzISMdvBvuSFLwFMzbbA3/JLKtTiP9iJTh04F/AvpIwlkXYAokOTTcI3nwnEZ8ehFhV0NN4BTQPwK9wHmLwe3n/3cI0aoIM9hy/OXHeR2U8j3ok4oCvqQw2sYMtDp02xa0i/KrqFwY3H2OwW5PLQ9TiES3qYOBh5mWdmwwu6xclzucSPz6ZLVoVpTCH+wcAHR/3TRaeiIAT5zZXFfgFpLFyz8rhfHS6k9zDqy+WoqpKkiXh/1xQc5yaUf6oC6qq/Jb4Hc7ixibXyv7r6zmK4O/1qOiek/SEnQZEDv7XTR/SGreWR9M8NjhDVupyHjVgUp2B8kz+YbOMXgpvPLh4LOofsNW+rnMkpG596BFoWFotHdegUHhSFr++bmhVzZP24+UjDUnMPQ0q9bt1K5YhT7X0lsKKfRKQTkA5FozmHqWkLpQKSyA4uJtDYEW/OuDGA7s9NGglNP3sOfewKX7DE840SEtvTE8e48SHAwxSNWs3EDcNO+kHudw6gm/6HS+qILzfE/RcQpftxlLxHybdjq1GTQH6X3dcDif/8rMildAaTpZoD+HKKb6ksR0hd/PPvQ811ihriyBwEeIzSvIDPk3lRe80Q8eASFBV7YhvEyQkkozaZ0FIpXcRDAts1UwQbSAQj0jRYHJF4XxuNksdLMaqlBeFg+I1lAf72++yhqHkkrT5CAw0/wMTEHHG0BMxmumhCFj1VQ/hIv43RSn17yKizjl7uvCW41BtBpAEbQgLvwOhwwMDSK9bkIht3jrnjpsYSDmHTT7OuVJVpYnW8oeOQng5UUpFWXjSEzapOkB6q4NMXXluuOIUgi05wmHV/fyKC36ctnYk5eQ4Lhs/VytHTPxs/f0vOXqTjpmVsGNGPa+Zx3A6HrLwEeiwr1emWsWsGop2bP0JvWCVT8SjMnEzqp10DNgvxqoEiHd2ij6byhYNbCDXCfzFhJf9INRU+arVvq5mIBZLWLqXUZLH0AYeFN1ZeNL26BFPkaZnlQnnZAy+QspSPZHNGwQFrf/4qDGySOGnpY/NnWFrX/9GYC/7R1WCQMX24Lyeaxh69IPQkGt3JsGJ4rivi9zdbVpiqZvorfg3Bl1ijlR6sqWfzon5sJ1pCR6r26GKDj0pcfGbe24XQR5CFxfsbqqVxoQlCnmzWl4FNTWAWvkD+kJ/YmogsZZmXIaMZyIshvFcz1oeC+Xz9ysCwdFSmf6w7X+IAj7FSANuSuTc/q88tyP+tLLha6RweZvf463kqBPwfYiT70e3PXJnZL0IRf0yWO9Hye/MQAkuixmmfoL57GUqldLEWTAlGyIRJgx416Z+xZhC4HGmi01ZgJgNMjLiRGoiuxUiSKbMNdMwBI9qb7xoSXs2BJ4W2Fz8poXYmRxeLpAHtpdBYTEqqrrv3BOaLsaC5xdNGwS/IMjffNCFLr7tcZm18UXq8ISpCW+3A8V//IzSifNcZd+xx6iXg70+mFY5tQBgCYshu3jusbPsBd4GducBmkCdGImBedHxxKbMxocDeaxJqJui4wOYFlIvC/Tl/V9yd3bUPoOWTVw02XUlsK4C0YmpZqJkJFn39uIc6pJsh/sDc0jRxHWQOBXtbGO18CSXQChOHb00+Umh2XgD4KPN7hTmRUgIW5vFujS2dihQy95o6OMcTrHvclRQyuJN2bOvFyw6k3hUOGulV4RtkBNBZrXnfiZJ9eQg0TKjKYFQ6AraCAjnRctkBRz4S2wYCgLrdYU4Swewl+Uz4rsNqdGhz4bgQieOf6v5K7Ozfc/d5S0atALTzkQrmdCWFAKhmhO0NmmpS89hQ7XXubH3s/+nagYt9JKxuWg9M3c3NC62ToOJa+PlJN5Fy7ismcaVmu2RePdl5EGhL/ivMEQbMsfYInrchKgd9Nshjfwe2GPSH2dZFg/8vRD7pRdWeSVisCoxXcQqUmKMjJx0zURbLNZ4c7hFsttUisdkkDdd8cAtorLmZe5Z5QLH/66l+D2hMpLcqiLo2zwdLedtAea5qVrX8tdqlv5AA/tXrDQzDy5Nw1nBFIJq1S8bSWZen8ZIpYM8uLHtLDZdMffcIObI2NvSU6QnY26nAlgCfF/ZXrUki+YximgCwlVckhi1pUKc6G0RrTtRfietxCpJwApCFyP48a0HmZXvjtOSRv24DwxsyOVWRsvW+qIPzl8k5BV6+DwQtiS6PB3aQZmt4XVYWsrmhFjqUuedLX7uB2pPUdWA0NYbQPzpbl42vpDMINUEYNFwKHOofjnD871iHGQBDlA67hflaszvmlpj6mtjoDlWRzQqzJvGXPPZnR+i4risboNPyg1omdY4ZukBzTgA/ITpEXPEy4NfhX/v4hXU9CArLQ8FCeLLm3ubMcGkEyDP16Fh3QWxbVz56XyRmEAsg17oCJawrrK1mW+YeaUlGzKoBprezO2qlr/6J/c0uu7PCgLXarSTtqXekdbsNOqLTCMq/VPuoOjiHADUvBabWtpn/to/EegV6jy6smDmTMoO35ThKAVhb4e3NyCEwR6ca7NYnOntPLodyBJoUnIAO+GVZ7nOdkmm4OOEPZkLbMCUsLwqIzSrjDiZah+O+yKN47TuW0xQ4L6rhoAPuwcH5cbDCT/u36TDK0UOorvZ5CYHlb7HQ8vVKmGus+/JsjNG+D3B/s13LXhXTmW/FYtFJQ4Jwgiy/8ZLrczf/0u1YM3Tzj7WKu6G6pHb/BPF+geEV6M4ipJ7ummixPRQe0j37E3sDnvLr0Wy3qrq2kWx899ucYbm/pedMU9NqDD4VxjwxBQpxSL5KYgVYFYh/YEZ1rXx3CpvQ5vbEEvAXXIxWRnR9x86g8r1CB8R6eoqE5KS5fQfZzb8l0+qXn2FbxJvIvhhyQHqbROH3cDz++yMRyu1hk4TFohAjvJkpWFx22C8L7aSsIYGUneKoh+rkue1EWpx55GHI31nE73wTcWSWtwDKkr2gseZjzkY5XE10BQ6M2XlhJ7AhHlVXjBqvtCWWFErjAbBEOZYzxoRbaA9wHhK7aAaiwUBliAP0J1GpM1onk0LUPy71QvH8f3ZKoftWsHOP7SVTifCgs228hWEtxEzt4tsabemn+2iGKyAURtW8S5R8uwhVTvBNQTD/oAhmCIotv+LXge8lN16rH73Vm0Hnq3Pm2+zh4CE8FiqI1Di5hsrFeT6HGuLRgyt5SfB7O9qCUe2G0A0M9xj2baRboaUAU+rT+WDoidTQBrLurV8JViz+A3rhCdvH4amVAvZYQqjnmyiUcrv6eBsj7qAdacASCzUa3fk/UH0/xBrWtahFanj+k8u+kl0F5mnJEwpvzU4/X7QXPkYba1efgtX+tHw/eGovHoNkQ8Uk6ZhkFX69VMEhB6Xs33MeB5CJu1KIXHLwJafK+2aQNSCYalS2+50y1vbghjU0rwfYdg3epAyIBxMW0oZEH2vNmuGRMbLAIQVoaAye8oyBRW/roO6f7+B6HhfzWTXBsD7CKV1BLak7KMmykWVNiwHW9jByuaru5YC29v2yswZl4ZI4I2ODAG/ItjsjhB6oAtOYBe5IQIxLb64IxGzhdiHLHtDj+swkpJU7aLumVcPtNbc9B6yCKdVmAXGJV7Xh7sThARKAIQBFGQE9l0KgNW9+0VIHnFL4AnuBiLiZJliY+G6X0lwG/e2qI4cWa5+wct7r4athur79jkbyVVBxopior3DViEAzf41ZPtTrhkkycsk7QSTSnPjH0utzYETEaGSXsLzslhUiz2wLCM6b/6Ohsa85xDaQGtuWwFR3QrYPmXfN8n+pzTMakRBcV4iPUG69BnPRFb1UKn5fhPndrYGi9hInlbe/kqz3tM+1QV7DexnLyYt60a/37b5IRzQSr/AUefpGOxHBhsPRwXxmDCekQgWIXcomsr39RZhusknwe16jNupaK3PfKCVv+L/afehIkPeB7thsv/xkd7yxaT1EaTiAt1ug7iLnBV06DH987IAg5Xd2r5i2hNaV6zADpB8OEJlZtnPYCme/ONg4PseoCBn19gXqG6b3pNicPwRB+ZA9mJwRP/l14EdD19hTD4L594Q4kWzQRuGbamj5k77bMsvuJItoojShMXoBLlQ88G0ScoMJKFvSDed9kCNXvSyEbMmoCVGbkWldhUK/hlySqcpGzE2OeZ10Ihju2y95pIFpYeBfUhkv6SDoWcNjS61l2owOP7q6oEPL+NL485TDMpgbWekCR4IUq3Cxkt2TIXXHw6ANEbYqoQNsMNq4MoVj1TjSZKCfpjn0zsdxiFGaoSUfGwNbeXc3R70fHfIqGzcLnpnSs6pkjXCa9NTijp1M/YXaYzHagT9s8BSodOn0eYK7ttTFVf+mpUhwBRGb2B0zvCqKYw2Q1dL0BggbFxyZBatON1+usf4dtGwqsxu7gvWBfT8Nn+TsFnTOD+ZLUhSCWLH3Qk8LvBpYUhtma13zBW6w+mVpoKZxIl/RND2GAGEigOr3sGcMZ9342axtgXIyAZj+e7vgKizY14wv9/1XLZcThgtoKriZpVZAV94462jVLjMbDYtqAb9e5boOBqQui7rMXyybOXRSDL4sgyZDILBSzZkoBUfvRnbjAiHWVCP11YzZk/tbeUV3PbrCvdvUGzwaB3XnMcwDmnNrWICShYJ8c5dtCvgAGn268T4B8T5t1CBtMzDe3L9mbb1LU8OkQQSUglAU+/mpiyR/Uiewy9UaHVdT7XyH7OepmUHn37Gy/aKf23RyePlf+lv6vOKSCbTG2Keyjr4sViFID5V8Ye+2LkmhwlcrrAWCW4uSBE0xRm0J1c7AEuXrOXQz5QOF9sDJ28AVSTvgrC/xd/V1kqaOPa7C32Kkxvwcaio3tBRi4+X4R7N+72gEPj4UYkfEcwlAnkATvjnq2iEWAfoqvTWQUJY+EcdghwSODSaBuIJWJGrqA7MQ+ifvp9JnFfVYpoBO9CWVJml1YNtTzb30GDAGf/X87zf6Z/iGWa00W1X4bReSBUfxVxPcu4gXme6TMMYhr/i550YVUBLqOcpVH9cg/jIV+GfGOyOaWH7oobe9+fqdoDCC7w/8njwgKNPPtwL+qiHbSCXbu7BxSLY/W4BiKf6Wf37ab8N0n7g9Ci+hVh87xQe8exNPGKwCJXWM7ue+bakSyUyKeI1VbS+4wuIvgmOhrYtIQM/Wy9/cMu21vnwDdL9nZN0e3Yl8oCDJhy8kKfQLtdEfLvVUfy5SLjcNpIlFZXwpbp2Df6SX745ODxr9QifemhgqEkyslZSp/wDpd/1Lbzv2WlQd4uN6xf/QPtI31ZJTbqr00BLQIq/CS2VtJEeWngD6gxq1dHmekKEQY720wLcVtSa0n2ycUBtFElBZsxwcpZE/ZDt4YNjAjr35KJ4sT4uiDQr1+BDaGxIoklqz1Z5+9n4NOfm6dyfhF0NMZND6z6RBpwNxXf1nAUMsZhXVZrEnpgwf8QUZEwz0P+S4XVGXoxkdb9QyRmKuOAaOssV/fZ5UWCnI7C1KngbQAte/vLw4vhHlGeUhHVzRPM3S5Y0ZYSAdf0wqCKPy5YAtOLWXmhVcg48ss+5pQPY6tQFsaknswrt/gwGsW/l13tzTCzR+GgS+zTtp9EkpdUqA5uswBsH5+HLxIKeNh8wGm5peSKeiqHt/ok67wMVa3zNR12/Ga4NMH20kc0qd8A4BskLYA6fN+Sk3Bpi1gVua9hroU64JQa/qzn/YqGZ0yKX8y+kkz9mCXnNOuZArwomzwUwh7m+95GMSoEJ4kaohhNd7Rn25Rx7pqh2xCKrsjM4BFjk4k5qmrKe8bnijFwk0J7dfjlipSBsWa4kyf2F78JWacHsohTsDPfbuwcSzIasZfLxXJuCYaioWuNQ0oDcYiqsbQvq8yP2DMYoQXfl3eaqysE4B0kFEkNDMzK028OtTjaE9wWg4uv/iDTDpwt9zmCNrNuUADcJqloyCf94jwYQXRLktu9J1q4tls3ILNSjsJGzCYLPR4C/W8IR2Md8/hP+K4kZ4VAgnZ0j7Llll/vcp1+rsiWnl2KRdOZ/HQvLEw8JDwZdv7Mq7/MLAZKmcR6dyea28cSpdNYqRhTdhqd/vfm7uG9SgkkkSiy6B4N3jPsohoQ/gHBv4LgR1eupq7gaLXAPc6muLeLsTl+pggrs0T2Ln9W+lObcWFkwMyGErOFVsB3XGuTu/lnxyto6m5Qu7eBq1QTlNEhHRbw/AifpG1EFBpJytvuz0bmZJ9W9UrDWWnqDwYcWdB0fAedvlr1lXg2lo6M6hV90pHoC9Rc24ha4ZqueqBw5zPYJPxZDC/b9TLSSokxpBtDs9d7ZypL3eu3pbczpbsldnMJrdbM56RXkGTNV5tsWb+GTfNVpyjHW3eo3rUmVt5iWTBmSgI8wM4/m9NcR9/mRfad/dLyOBtGlhYq5QJTkxkJ7ErlmAbmVAviGzo8lNY7MG9gKD88Tmlo7Jyj6H5sZsFgiaJCoUb2Y/xoxEfK8Mn5UL1D+vavv+c3FO9FlgMiPKjxJvIReakXRq3NFOy6gv8OzXnvMNrXV0t4637KfKYCmZ1QwI/Ss+KYL0lv8CKs5hT2bOOfBy+j/wqhn7okU32+5oUB7C+JCiUrm6SBWSgOSH1QFQYxgFyWCSaKiFRIzasaMOLAXu1ODwL6kOlmdZC8UUVD4auFn7gpZDNNpcPG+vggrBsiKu+gzsWpuPxjGKTJyYBZD5wwo3K14OsiEkBrwITqxbRTa3HjD9v9n3NSCQIubey9OtHOfWGcIJ32z8aIiEK+TU4nqrfCioBDP9YjIdcr8lhcc03wwcECElIIfmwWXHPi7NOFHVZVxd0Xxqfw1wXM2K+0H1l/R7j/f8YyoqbM/9qD5RbAHvaNkTmhqS50sr30P6SWHu6EI073jsozoQK5Z7UsMt1HE0J5+RFgxpbzmVS9H3VQnuU3zoaqDb+HU1zh4jlO77ZLon7SCpesMq423ErFg//WsVJS7nqbTZm0FMLezY0PIIKAGQ9qRZgH2l1U4ETYS/crntG6Xuu1ZPrN3Ahv7xVMWZxIMgIspvCu/Tb46BxEvhvsHiyyhQPt5v8IWU3EijXHTA8xgXqJT1/XiyoJO68ZwtIe7+McFlfVX/n6iiKRJgU46hcQBvuC8zzqZmgJbIaR/GQ3UdwwEuidqwHP3HsIWuCZBhLaoZgjRVlB5r2qFjZd3dnjqI25EF+lYNKTQd0KXF+nJrpbFwTXOz/Th1iSLKmYqxQ73Ic22bYu9ZpUBAJlRg+sqRzGC1PDR4BlA0t+U0jdPajxc0rrzcTwbHDybpSPuwpGD6a2S7k4kJ9JBLmKb76qNJJ0WbeUkcUOHabbOVyb2QCbKAv7tl4lb3GuRoGQOLcQG/pNtl22S3IPY15jB3OLbyoVtFH2uW29CsiZEEv+R1NVnxnV3gsyGEG3+PFvs0AuCsUi/3oa0v+MeWEy5TZGvIFEt8eQ2l0fiWwFuMsKy97NGVrsp+qjA5/ZkhJkWRwi3Xbs6y6CXOJqt1WTfjbN99KQWwuIGZetXGm//9faYxwDCZaNoGRJMZss/inTGiy98hPQwk5WzScQ2mLi0Myk5X7xuiYwV4+YgjmFtFSADhKZxKhSjbPvkTljos8LwmiCmyjAgt6PKm4c3Y936hf1kkwAQG5GUOLayTH99C/RO+kiP8MKsvNdFj5a+1iPAOju3SKa6N12rPqSTyinIK52PRQ5LCU+7XIN6cDGqbOtqjp6w0iQ36/ntR6Ne9A4XjaTxXEtUt+i2aWxTiRG74zpiHjQJkhlnvJC9z25Zd082LCfRYxBbQmrJ2KdX7C+eq4gq0woOe2YT72SqoEneF/dANhS2uMm7SjmwrvRaacr192xqI8gB0VG+ltgxMA9lfUohG0boeltUgjoNDwPo6LiZsGBhm2z2g5i2XAk5tKLnN8yVdvQFzziw4YpnmPJiexgkHnE1Yhpk5Ybf1GITnjBTERSSZCiFQv6ZUVTfAn8xUcIXAwFC2+H2dBY88ZOT502QD7M2LyDyLBQCooGg9YhxIjKIPTuEVqC2FbtS4qHeDmOM9W3ouAFgjaYz/JxoAHtKkkXQiafV7pID5uBVEeOayoo0CfeCGhSZWZueefmIi77KUvdjUcXVjXRGc9zJmfgP32osulhhX0y0BC+sOZrabuyt+WOu6JNvoSCr5IngQz58GEhF3uui1zuDx8ZBxD3L5nX1BM5Kt1NeN0kYoVTZapnB09Hh1ao25pghJY6GZ30AkbWIyS1TMSt6pTkq3uPmj0bZsiRAh+6px7RiGo4DdRMBPgEKgNYwCuyWw4QDC4CXVdjwK3TGEiv5XqBkcdtK8aXAja/pTLwLE52w8rpopjqzYc44HT8K9uZQeYZKhMEMWbm4BsIL1jMjul1u88Ztf5hJbssdF461QvPnXFRiYw3ntabN03SYHAxS3emhmP/0UE4DESM3D2iKACzVBFoUm6dCTltyosR+oOy0Vg6n5mneSxvOZENO4USS/7cu9h4I6Ue8WHamy0f9KsX6BXUs3gSuqjOGEpNmQbNKObVgawjBq/foWdh0x7EWi4mEucDeH0+bnr8uBs3WbjIqeQnvWzejQo7F65DX3ZKgS7v0M7iB+YpSsQcaNc0UnLaGnKKDWe22OaP2rap2LvvRndXsTZ04Fl6WfHz/WDoorOO5M5fMdzyo+wVc1rOAA1l2XsAYdhg1E/eFyArCiEHMb2Pg9BuiUzDtM+/NNEQHnnon6J2w6CRInQ8RO8ws2DglZFL8WwjT/x8as+nvdxtWEmgCCsTM5qmXSEFulCWU7wDyp3q5sawR5G3JRaMO5Jo0ggjlzWO8SzagRzlNaGoKKj4LON3WWGz8HVy8La4Q0jcHTeDQ7WER3K0IZJ0vI/RO31yaJ6/oU+Yi5R57fJXNApBegJ7nd8IFSd7eq7xSwYFJPuaWiZzUSROiwmdrOE6MfScZumo6+x1FzieFkHy3cCeyOFoUDucf3BM/mIdXd8D2t7XiKON2teb/ahv2TkM1+RHuuy85yhBNGd16VicLw+Y8ytha9QVvXY3utdGHTItrJiA8O78TSs59rQa8ZFyUZv/HJ8C/uFIwm5nPN89EPyTL/CpRmdCqKbyzn2vcMsKyfUdCvLVwSGCG8UJ6seftjLb+O0X6ptfXOhMAqOx92EMyDP/aVpga7tMe07kJjVBS5pj3IXQXXrc0ZqxuXOJosGfI3nE6FBTDS2Gik1z1flkfJ6j92mqQROUZwzPCS64H4BEjGY4iTKjIzBOFx0983jZyV/MX4nhzSFysymK8mzzlGdKJCOv/eYOqCjzQDv6kXEQRQQ4jdEVPrCyy8qSZdT62mqNr7yKUsGEkSXyPy7wmn4M/JvxaC9shNY00xcxWP1J44I+jtaPdI0ssHnsbfYtn+tP7O+pkNP6qUTdRF7rOewfEA7b0kTC/7AO8UlEbUCg0If345w6OZ7PmgiSROG1FM1OUo8iKEoYEVxUhKWJi7wOoDr7K8c7QBNlxK9zzI3ZRDgCgrxr1izps+wt7FUIEj5UEWDPdLOypK0faPDHN/awXckJ7PCL2gdKyby6OJT9V/eiHe57MkXRIPE5MWL9nyMWQUmYAcXBm71Isp/6AUhMI1t9YjZGlBrCilf8aYpSByOSh8kX/NCbHeF2f66ImHYawe5r2eCO17vLHWGsHW07O1ZxO4EPIiSOneqAePPoZBqi/qKHIVZf4VCFSfCjGWevWh6s04NuIpTTXxMrdTZQIG+XeKItm+6Ce92vsjYKdBx+4hviZ81SSYgmuwkoG6Jc9hRCdkbAdiwU3tLshbnUdOkCssBzrDSLnsdgz7HxJZt11jBnG/uACMskmcyEYlsbZh8yXrfVMOy2hoKlArQVD+ZUxrChms7IZtSNM8U5yvg/hO2XhG6t1AAj/eMZ+EgNtCEmjAF35wb7eyPjUPyK6i/75lh1kwYEgu+Rez3UEJcAkWZFE723RulFSawigG6Ci1ijbKe/iKahoHtUYhDf1UfgtEHcwQbPK+2MZbLmVWW+T1pVizIRBUUXZ+n7pOov6/ZcfTtRVuc8KeccdOcX11r1A12yEJ6qddLlCC3bAMSibeTW6oA3XkdAxXBTPyPvSHHzQKDdCaEyAm86yB/PMG/y749eQ9i3ExDs4Avm/qOXWjtfkEe4MOd/MJQco/d/knXAwoVxyPXlnTc76oPyB/v7FIcev6YnSzF6V3oCKHOFzQuN7xzXiQEqw20L7tq03aj2W/sl0MqNRN0l9kSts7XwgyefcV03Ft7kCTJFOzNs/PeckK+jx1qFrA9AHuiRjQAtLFjs7DQpjbpZPFwJfN7JoUbBLS+i2/Lj2ZJBkrw9THz1U6OVZjqoc6XfBmIWY21Ab2gKlm6V6jNCZ9JvOpTofWwEdmG/gjdE1FEpHa5pmQND8XQi5i/1ACjnlDfXS3AcC6Xx+WwYnecBLbodh9or1OGRytwDPdGT/BQwhq1UI2YtAWGNuAMNCVyJCYT2s98WV8Vo4w1sSJYJUwwZkFxNUGdS4GpMhAY4taVZeevjnIMOi+rmAUyB8/AVJIw65UCWZAAk9I1q7nEWDyh/99cNX3sKn3YkVvy1Ccg317HL6ZV4pe0BCy4UrZRdsMn1Gb624fN9ETJHegv0PoeVm4NTDpMpfitonEP/xSbAH3GOUcYQ5+1oj0FtwQ0wPgf1WuRaF7tFkenevghMIy2Yrv4hZOENkA6mRLGH35ZVUCvn46v6fTAmhzY/zBYOi/CC0/ipssH/qSuIwyglDwAP6RZs4RtwxtjTyhCWOvnrtKCn2PKB7kQqeLCis8153pqTEG5UMwWXbmjzpW3cncM7LrvxuzwboayqqOT8JAWwSe4gZjAMwjS/2j+A5VPZo95XIZ/x0vRTAP7X/ma61SJFeQPX22yLtjWFarQBTtQy+O3nYh/soS6F+Pq4fWa1bagsGL24bCKjOegkS1ufYeGua2MECb4qbOxtADzfIrurbxMMC5dq6ymmWOnqisD6yAPkdt0F0ze+rsUpfu7HZwBWduGxMN2/XuF9g15XAGCBqwSG5ovLkCXBFR9OcU27OaDjXGD/Up16Z+DHgc81KaiYdehIgfv0slnORwI/6xIxIJYzbAWhxD5KeNi/sFKttva+fy9RQlwerC2tcucDNOmYoMniDq5ogM2eHtzubsDi9qceKxK3vqvfFCYuNfIybRUjtETq3hHlH0wcPnOYhbQIU6/LMcirVSwxwrMcT0aKCxRKZ+NtUu02WDrWv3s6JcZfJSIN1WSwPSOkBGwUUhEY/llghoOXAbPcfBYAZ7BlelgsrAkE7xYYbjZ+NQztvZds3CHu2B14qK1Furk4PELZ7c6imQ8KU6T8UqmnWVCxKxR2AV4POOM8QaMymioO3BSM50AZl1RGiw1hR16vowGvdSPNgl9R6U6Z7JQ9/muOYi+SXr6ZeSSjDFW1d1QVHcGV5uUDpRNYnZqnCXbchg5+/rwtQT56hufcMlhAwowXfFZWQXdXVZz3i4hW6QElj+WNZ50rKJawrVf3qegi/jU2q2QQbD0kseCGAiH0Vvae7UCkzh2esEg69pB2rPqjm5q+15/sM0ddq3wCR2P51A56f8U/5wCoH2ff/zg9YygQwZa4gyZWIVqV0mOcdTca79KbSuszl9O0rzvk6mnI8wOkB+TS+PBKZNw+7jiyZULf6J5cfiz4JMJfh7z23cy6iX3QhaBSI0tGjluNFuMD6Dilbqd456UmzFz5eBMBfpE1MU+7mpjpd3DLfCN+fGEaOwpsiQIQZf3YeHHIxEjBARWHfMezNUYmIt+nvyXkMNRUmBRF+03Mu2Riz9geTiSW7Etkp5zgVkvf0mc9Y0Wnr0VEGW3zu9rkpDFbn74j1ipfbGD15CevFismUTltM6BvquBmEBNi7RbBN30mUx2b7mH0P1VdC0ZfTGmEWbE4e9BcMUBP0keem5YwCWynJKRxv0ceHy5umLfFQYL9+JyJThT0RooyTA0bLvy+/lKp3bWSsGb6I2oPPEEWckJuD1sgh6WEXYIHV7cxX2Cf9+/rj/g1LPb9i9YbzYI3fB/f7nzH+tI2RJkZf4rchWkIvGi7O5hzWa0bbLs6oKOzxOE5C7N5O2pIXotU3EvIW6QJvrKPoUT5y86CtYC8qTGm0zAX0Qy4efBbTZ3ltHcGL1AOF8ACwRLwztuVbZKTfpOvCa1ikEonVqEw7GgHAB8Db+Wgbc6+RXAqI/YSmdKEAtzfhEb2SyOXcm81qS+ebGfH+Hbq31aUCVRUapdGGwH7TCtWVqiqWBp/mefC22kkyAng+5xurOEJURV2NHb1O8p3OAlRFjmf9sy3jySAFOWWEEulDL6PVcVQoElDFfV7AHSkn5g8ZPoVUd+hv6vf/iNJ0aqKCYBmU3FD5Moixl/AMSfVRGboXHDUzFZxJsRsi/eWFMGqEMUzIwiw4LHYbhJgZaWYQ3qGQZ41tyIwPX/YDTbleKpwgt1WfHeMlY/cU3wo0nsnbPPMLx2nn9fqNNZz9j6TManjkR3J5ZGN8vJG+srcU0unuBEyD7HL+lm0K/yIqOF4EpAyJBZSGzbGKdw1G8lWflSjt0xW4jQxdHfy4qOUazoFQJCu9qPTFis98PdpegmIJX1UNVcidWyF3F+I0luLE/Zi1f0f4haDSmFn48pv/50196abcWNAPpt585nd4AADTGILGdS/mNfQyZQ3bMj3o47Z0L5Fk5XSAgJhFfq1zAlSFN24/MyhDVKvdCnDkNCXTFrDGCZ7U+gS6r6EYqn5OTCW7l/1JBmmCOBn5m1Arx2HqXE8b5yvQQNgDmFDUZtxHxkSSrKg1S4WkrcUFJHbQ1lpuJfKAT1BvGcyBO/4Gvgoy0qOgsHO0pYtEFEqrHNRlmanvWDpIae1dVCG1JLJoJzhcvLs72TSdFD0VIYq6KSd2i8xiqSpPcwPVz8xVRGB8JdQBOl+/t9hhr/muQOa6HIprguLwSZPi4OqqYGD3YMmtyd4fWxOoOKTk2l0AEgj8iwA6d27JKmPmtv4YQQDbSw8ZwPf0Rp/Dh9hy4H/pDBznOl/6Axir193ua5gYyJHspz0dDK1DdRq7mSfFUAxsG1fQ/eLwyf5VTYWZGpr9si+SEpTdqQESBTPhtpX2BrnR2nTizzDKWedyUpOmSqkLXWjYq5LofcNKP5lS8L2ouMmrA22Ux9aUpl192GyP9DgNQYYlQHcmoKPxr8RxHBIY/Lb9rwoEPJ5xZ1sYgr09OxVyiJkaecKSfvqUOUmNUJ1qf5Q5L/1+hqwrDwOFBI0+wcgGVFGVWV9g4KWqwtIB1GviXxORTMNmRH6x24XJLiAQv+7G3Wuu3/u34sFFjnp/desEuVqhIIT4ZePTXZ5c/k04dlqyEW4lM2oAVo7DxJuVpyi3Or9m78aDLL1yKvJfB+MoqxaXNNImVogL1TjFGQM7Vi44kNBJ4ccRbZtltRIl0xorxYqcFgoZiYWP1eLMkDTFEjT4om+s4pqlXr9jPdiL06kXi/9n/4VlWx3+OS3i4FAf2IKTJQUpwJuxE7uQjoc9OPeVC5ItYOLM9Xc7x0IkkgXcdRwcqNUCabv6uQSBXYkn39bFDs5ju027znPdt26KCEJorA872WOTMi5prN/Ogl7b5V/7yNiF0DWJjdLFunnpXA0oDK7IWw5aQyEzRfwgiuwd4xSRN9QyBBwdzimbzTnsRBCD5qU73RDfHPqzu2RYdshxscDX5jngq1jkAVGHWlr7+r9NmaED4MFqV3SxeyPC63EFRXCBfI8MXLz5fwRAYYnY2/ZdmxEAkQ2BYjWcIKiRFRPN9KHHNmXKsxTlyeSTtgWtONo1yEoO0VI37EcUA1F3T/DOsnQJ5I532/1p+KJ/al7I26d/q6LYy83aXIceCs0VnlWhh6Ku+lGePSU3Yc+Fh5dJOY/96OTSTyCu+rBDhaKxOqAyH+L7H4NRi3F3aSMxDyN+V2hb4add8Uov6XSp+m15ShH65rPuiqgU8BjeKbXzrVgO8SVa71/g6qTc0U7MnrEtvDgL1nYFb41oKn/cZ6cMuGpd02AIGpgbKDrMa4aiaZ2Aa2wh47JMKZlU1emPqScS+tOSGOB16ozn3lSS+02k3EA0Gw1CGF7jgS3EoyCOpxwbGpK53pgHdLbkrryi5PFdOogDY+yG9N7E0GrJkQjABYH2sW21Hm9/vfN4yb+Ydbzf1ZAy+xDwt/bcPoA8MaRq4slSTpFnwkyafn3rcRHZx549LJk2/3RbwjKqJ3ZB4g03IUz5SoCkh96ZwhUrq+hvQnRa+CvOjTLxeFMvShBhIAKF7T0jmWWtd1LdHrDV4TA2yd9+RDBLjygu7UoLgQiF3l7Aug+QyY4f7y+85MfDGzl6DNmCp04h31h97seMvEu7b1HfIFBfV+wko20HMsGgynzrPkSzAAa4aCW/+Pf0KMcCjUIxR05u1A6g5gaDPn6fetTB6Ol5Nx+UaLR8ykf8K9fotkpqnOgjl/pZdE9iW1NMM/G7QVQ5Zzsz/2gVzFcjOfhXp6KVofgZUWzfBpyG0chIBZLNPeUbqHxbZLp61LdMoVmsDwixRcEhONCd8GG10ZEfluxta7gIBx1g3g3KciwCpnPxdyC7MknUvwWbf+wmnYlaRHvbpr0erprxfH7oXJnWAzZuPPx4lx03epD33/EKf24NNOc5p6glQy+805jeDW0QzdYp9dVg6UPp9iy71yUqTHDRl7IIWmF0bCTZhXMD51sykwSEuafmWGIXwXwNCnsQldoF2vBm5o5DgZRGMmv1ozEaZu0AQgObFEafP568DzrMYQdbzC0kVCOiDEBSsJy2tLGGuupsXDiPgC2S7MgkkejHttlpRjCvBGn+i0uZE0F2oq7D90C49x9BQ7U9s+kYz1kO+KYvctyuF+POh48oE/fnWOeFK5rYQg8hcuUUCRTc/YfAximjvTnse3F6jfF25VrUOxWNpy36PiDf6eAboF4UvfUH3mdT/aPcn5zlh9FM/YWjMKpfZv9kvfE4J4SvDdUaMy3XThA/ifXimdNId3r7jGWhOQjxazVzLQSY2oim92L8jayPQ8z2eue3Wfebfyb8/l07MdFpjC4IXBK7q63tKLIXdhil/c0YBGYXKOAfuOsIG6G56cdZI0XlUdBi+4UV56z8/Gqy2X1RveplCUh+uEismOcIubN1G5Q7owJKEXr98LLumVCdEuHPRl8xHZUBG+ioD9DMsq5PGEha7lg5f3NUfsfJTjkiYCQ21AKsMvrR73lRzHQfLhlSUPzD3LoZBBs4W9vGlBqpviSvF5VQii4LGMWLyPljTEthHTSxyAaev2usl5E/eclkwo+RF+acn6hb3MEy9lwd5RHjQ+lfFQs1wEuvQJmMz+71Yfl4MQMMikfTiyTJBaxUFepEbjF7+lqN+3Nq47rkj2OD6Pnq2Wh0qHdfEpYtgNBOwtPqfyBP4S46dp9Vaf5C8JHoq6bzQPXycAXFFWzmB17DX3laOHwhUHTsrp07nJ/yGlMxUvIkO/RnYIxqav1Uq/4o2mn5wMCvcD4CFR1t0NzK2973fLqqbv0OwggPsXWT0QDef8YeSD+OGUsCHkIKxr3zMXZm8h1w0uXrIuS2Mjg+BJmj44hAPWmBMQSCAe6w5B3XjA5cxMZcS1oMdaZIbEBIbtJuF76ezNrQB7aDkNY1itErE4qnsKKY9kK4Pg9RiHccyY/XKfLnrZZ1+G5Rfmg/a1ti8ieAJ/q8MeCrGMq6kZ3WRrd7hebkpX4XoAssHKOk01fIBtlTKFvsDUhMse0M20H/xPObqFzJp/zV2U590LYjPX70r/nZesz0QPTWefy8OCmX3Sx+2XcXu2ohfBodIcrlfIaMogMb/4hJoVG7msterz14dgcSuxXi3XgYZZGO7DiyyBA7W3iV7bbYunEYaU3Zq12r8ltMytcQLJqUsd5orHNe5s379RNaKkWtGGlh5yBwDSBWOB1jSWRE+2yc605KsNaTQBkPSI81iZq6UL/EU9iJS4YKxyknRTxpdqyyapzG7NE5qbXc0Y/V6NM4PZEYRp4AHDf1ZDECAAoinFohlPOuiTYflX+K2dvP/WNa9Zmbdrlt0dHy1m0euJe9nv7T36+72OsP27tlFhRHyQkM1nT0167D4fQ5oxSrrF4FCviHjj8wQ/pS9vqeQAnFohuJYPfDJpDK2eqx+9Rgpl+zNmE40sQB2c+OVRzN/DB+tAS0KiAspbTLHLr4sCU98kXrj6CF7b4tmc/uleRoVvOj9UXHkluSDv9PY0/c6JFtisOvL7gS82Qby1Ip1bGj/3L0jxxfohkBWunXQ9WVqJX0CnIrlggTRS6EvsQXQ0CKSTUNQ7avceX2qgA9G7KnvXX/jrtYqNndC+CPiuRUoxxN/839lLFjeuiOXgPHHcoMbO0puIoZfo2snddEdxej+KToFbVpKKtjyymkvXgD6WtjUEfz9NawobeqOYr1jgFA7I7v0Yw7tigQGhaeY6Rmo0TOyytS8g+jmmu6DqzzHskbEIdZDL3ig70gh2uaK41yFIZbSYrj7hSM9QEMJIi+r9SUKXw5w5tGXQVDBD/8Ywi6jvtod3Y/MyXJy+PhVN5NQzy3HF4t3Jjm7YLGxy80741f8pOa20j149oUQTg/SBGvwD1zmlMlcpxRIeJq5fsgvOJlwbLcHGhiEG1sQqNKsbOQFfBlnqD6Nyd75UoLqDSiHQxCYcqjsgU92RVVZdJNWCnLm0x9HalOZ0VP4kHLU1YYokG5dycKmvrHX9Vi1LFrQthyxjEj2kAHiPahcy7fFGOCGxr24goBeIirCvQpmlJ61J3Eg+mHMjaAy5OJG/JUGWYAP3G4qgn/VsNzMEX2sSecQxAugz8GzBXi7+2Ygdoh6NSiEZgjvXZSaFZOemJH75DnezU7NDtVEBMIpd4wBcyEpw+yChqPMYqWNy0h2a4caY5LbvVgL0RCUOPEObpYFfaRFpNlcGZ+VsLGzuXQK4kG16QIAt7vIClGiCI6l5/VtwKJyZsU7waF8e4a+WM7taP59ugiB4TNNqJ6oYCASInkPN9zfRI1RhG7ltfqrwZyRaZKwKmsRcinajATSYHGTD4/TlTwm0k3UxHQIVRQfCqPhEiqOYgmI/TUL64bISiEGInYqtdsWUlz/uMka+JATnf4GVcfTgQ0Dy3ZmzQkFboVWsbUrpDm6MrR5KoU8T98hVFd1ay+xehW8J1I1nL/unHsywg/SilF4uHgqMfxf5iVgfSbpFLx0jpOGdyACxQWiedNvrdpG0TfxwclF0NOFel0ZP+nZyO1e437TXdijJ0/dWAJyYAJ2vzgAxsCuO1vKmAfH+EHfT+1QfboQbdeZeDzaC3sjixpc1575ou4UjB0epnWAYgBtjq8ftQDyv+htlWxLMCkOMuMIlwW77waE2qkbEjYIvZyMyJX7OPfOgJJkfNbKd3RKdiT77v99CIL6xGGYmDaZD/izsWeZVTEgJYbRUT4mCTnNsDRxvv4z3QQfN7ZqwkIW0vR7w42tr/bbeANu/vyAF1ILSZlKnvLG6/dq/gN+pr0UdxJEugh6Lhd6raq5lslqUYy1+fD4RJ/I43VFqKVZy6F3wbhTs/UM7sq5NF5zjFnjU1ODFrOj8F2rIKoGBwGAInfpzgIvq86A5jM3d0aKuEqNIcfbJR/PWsK7WEHeGXUSfxiD1RXnjZ9EWpEE4Uke0L5/a8grzLCoqyPTRWHtOJ+Sm+53SX28emkPs9Xd5vJwQKY2MfF/0NjV4N/vYGUFksAZf1eTNlYjMeOuX6SauNT6symo0xRbw0UhBjcDpRGsqZg5D0qin+OHK+izBvmuWN7dmcFix3tC+cFnCGndp2a+H0QMA2vOipMJBTrGV+7ZNnARHfP1auQODCd2IsR4YWnTcpa2GdAJClq1XwZ1UrAD6Bm/lTOVW24yUq7VQpnAOYOh9tQd16fQsK6mtjCgHJZIT4NTHwY61QNE2DL1mL7//A9nl2avpf5g3JoiLTnKREAOa0CyWModZlCd2u2pO6gg7ye6h1AQb0B5yrntfu3bEZ5nhrd5Lav5FvziB+Os5dXS+tT6wibl+9/wPPfinvLUBs42S9opYPM1Tsg9hN6lQCL1xP5lR0oBW3hEKUSWN2QvJDHKTs+xcvxEWVsSs7AQS3Ua4jMHrsjIiVqaQmksh205FGSNeaicEjic5hZfgprXMYCVjtl7HQIm5qcyxcJd65K7WkW93qO+2QrK0vNJA1gr31g0WjXEgDyxukw4UoSBVItImYcdduwDlmw65lFE8aEStCs09L0IO2kgdnOOAmfbdg/sgVcD18uA7BkjR6uCsIpQauoQA7P4o97WD0OMUbT9iQPNMtJYBGptU34E84q+RG9Foo86wusj/98TP80KvJLmK3d9tSIEdLj+a2kB5+ne50c6JNTnqMMzm7Pg6zeXreVf2vPcQRyqJ2iU6S1PDoBJncNr2/M+THeU2zi75MtYxAAaamfDqb8CoJSy4y258mI6YSb8XAaB017j2INWT7WDIuaZdtJXqO2FnCyKdQOXU94A3c5rvdCZJq9kOqbeDuMG4o+giMor6a0f5P2UurZfR+MG5W7IAf6/QkO94UxEv2ZArS/NYOh6oX0YO8FMHIAHdfPF4yRBAHDKRLxfoDlTSv0/QTWe6jRuq5dZ2uXF62OZFKB0AefaueEdFicjDwebdgvGZMvowY3OLqnuNp/1yQaIk4vjqMVLXr9PuWOwTD/gHKt6yyrbqb+CyHBvxAM8jy8Ar/G0W3aEP5Kf1C/Hc7eCkji4wnS7EFIFdSNm+PxlXSepwqTaz57leGHuqXE3kTB2VH0OyeP3M3Wl/yMyjD/jIHtlpTPikH/xj/ENWhP2D4ViinC2Ci1zd1wAisoSynrezgqXZYg/RKTay+j3jTfXUuxqNA7LarIuydXhS8r0v0HgUBMmpkmcIoxhdyZIK2cTBFeHfKMCr69nCD0py2FynYIPxVGy8B6hNB0T7MUnFhgXm88vz+a8FUvuScD7jakruJg6PdtjeaOTYjtV8I+lYZ6EqCVMDDHT0MyHUTefD7drPKduyjBnV7sNg4Dgp7QS5cBR/qTYlbjpGctYtIjQ/5ZXCx2NOsUktMjNw55Itfr5LohOZxYWjvMt5m72AQxV5rpAPI/zDZAdjrg695oYEtgScnW/z7OZkjafUvmzL0dRT4qMEnzO5kwSqAWtcXIa9cqTZeMezBitnNdRgMEELtveOIme7lMcBwXWQYFisSbjpez1vr0ISZVxDqF5gUBa3qGrndJCikWzgYpivRRpMJlvJ8eR23ObHpYXhe0OfWU273yDRelYCI5ytrBVN2Yvlmhm03K9gjhVUfi4uUqx93vCeYt3myXiviS4u2W0eqKHupuKGFOSbviEmJ7YQ40jq8FbzXrghPpU9eSNef2VRbyB2XICjlYMZyNHf/TD7x9Vri5qs46rKsL1crHBjyzKDSb6J5th0VS6ARNhDUNAhZBzj2sGljQPQ15wd7vbvdb8hqt6u+4Vot2gqHI8pnHO/cdHnVjpFZEA4By07CgxYtIYscm0MnFU9lDO3pedeyp8PCuOoJbtlLCHbC8PGcjfK8Ph6F1WxlwfBa6pVvCzwrlyV7AA2gQgkowp9P6xDCZtpFEP7j4yKPj9CK5itDzd7OuLwPHjnXNVB4Dv9XSu40sSboAYmWls9hviLm5CgxoH0M/2TsPDhkXQvTUuuK4FZldkiHo7S8aMekecd5p/ydp2owa0XLPrx1wuw40yC4YNU+PNLNMbUZEJBu85Fhd1k3Du1fAzJ5LhjSHBHV+2vXntzl4cxBJTcxyfXXc/XoT3ql52/NVyJpR6Kxl0sqHaFgerhLxdjEKH3Fm+WmZKdGSue6523UrnJk3aTIm17QuOWovEftKl6pbGr4AjBK1FTJhSN9eKEk0+9ZPlQqotYljVgQpfRAMMd3QvtHmTBRpOUx+Z1ncVinnOQZlKe+iManLGtBsa0xu343wYFsO8w7RULAhXb9k0mJN2fYwIF4kDBlk34NkpwQzzwf9G4pj6DJ2dKQ4ZLP0jejB+bc5pOmQsVVZiNx8AcpAh6GH6f77KprtaRTKHxVt9dLSBj5BIVJYiLKftad54pplov7zZFVdX39ZMmEX71k0d78TQ/ojYFPK+Xb/pkY2k3v5q5hTeKol33dCYY9BpVMGs/Qzi4O0Rd0/KfOqklSXGq7r7sQwjD81sYntA6jP6A5Hz0k2K6WB9ZNmm2KjPnp5JFILgBc/8eIQUXC/ww+5ePiDekdmYA7Pk7nL/KZm4QdH/DoBTTq716r2HqwsrQP+wkgB7VFlAtg999Yt899KOXXRMShyDfNx9TWG0OXB/CHwQHIR77uYtTq/oXTbDZDAQInnMHzgPh5duZrWxi9OlN9lbOLMnkuD8vccl88fbEA3N05ENyo5FSs/JIHNR621pLd4SKmu0DYuumFLqUFxdwbJrY9m/fBssBrPsE095mkczWGvC0yf73L/Uf1gziR7qTIjouRwrZsbcLvZ+OD0deqprm90rHyW1KXBiuT3H/mLEjDG/y17T+y/s2H90hsy29gfu8VqxYQjKRSwuGoeDhz9lumJ4xTJw6C5zsvcc7DldwE0A4gwI/eQ7SRfGH1samgAKYawwALx+o5AYN+93JWne4IknsxqB+lL5usr9oLMAZkqeUaj5QOwWUnQOsTe0rv3Zp2hi86GFDjUvAydjh2fcX19IdXJQM7+4swueK4RUjSAhuxgPrf2C0O6ARfnHVOUqz0Oo7gPmUPUMgbWf2HdtNnIeD6ydhZ1FawhyJE/cZf26U6hrSYr2z+5PLzzblpLDtCKPvMZqPJ6vLdnocYBaZ+Xh3mMk9pjV3EtoEyY06RQfdZPiPkQVnc06SPsSOR4CevgKXuPDcFDvEu/My/6VlJNcn46vcHZW3xLX82gOdTKyb6P47MYn/vQ0dwsCLrSpQ/da3Dno1R2Wu/MMvPxUZo7fs3ByE78t0CDvngpuZShYqkZDkxU24InlNNl6Flk1ihrMU+0cfSsc2ja/SJDALx2e6wkjWPmNTV8Hb+IcwK6rWguUCbQWU8jH2/vtzu9P2yCCrRYSOy7VuxaiPIHEReYk+gwZOa8BrAVnEbKSrtpMfQhMTPdofZAESPojk6Yn9tihFrwyJI46/Zf0ztHZKbbdbuICO03Xd/9ymFa9K1M6Gw6Oi+V2fdUJRdzRC9vztNpiz4KfWCGBkQCDrofgYg6fx6fJGdkm2HU0ioUQPDJAcPXTUjVQ6ahJmcFSqhWXAEGUX/VYJgBObtzjXorGCHqtCpJAu5A4BYxAwdCl9pZJuyStO1ZuY0ZOB5BQAEQr7YYZwuXm7iT18fHRiHzdFuPdsVq0YOaFQkKI3Q2s65ZjPtEQqjr2EutCt7UuwRtcmtp29w9ihTuK6swxixJLGKbVtewEya+WOA03wH2v8bzcuuTLKa1B4D8TUZIk64cxCjKA3o8UMwqmu7pqlupavLA5l9Llr4uFwAXzc0pjYyrubZ3qoMFmCuRSrObolUB3iLABvtNSk9nqPdd7WyPRJlCCC7dh82ULcuHA2V9/V1nN7MaSBua/qJVyGvRmB5gq6iAi1fO+87KgLNKvvwEKLAHsyyFBVL9O1/V9vy42peYzYj0vAEwxGKhji3jwFj/d3WOGonZ9hKUvoF89Ij0moT56F1VcGMnvJsmmleGOB0Oe1yKCX4l6Qv5OHgp9U2oZA1A8Ofry1G7YF7SU31kAgfjaxcLdpG/XYzxjEUhj7GAHGHC5tHIdPx9joG7mwx6rA0l77nlhCbBJGcpPxI6FELmumHVtgvbj9Aah2KoQb4DRq1cpsWGLbqV3UBEme1uqlTERi7a1lNW5q5TFFNYR5LdnZ+/LkE7nnDWDcMSszYUld3U/Uc3turPzyoKcXz8ysgYJjVFeNDTs5+RDFSLz9SzApxtec3xAZXzxB/V4qCspB/cPtM2cSxPmiKSjwYcpW8B485h0LKOngSjk3tOqw9WpvFHN1cuJo35EUto7DfMV5Qu0hw19J3qo5FQQWIiFRGYgcrJFSMv8qpsQpc/T/JPGnupGvBMK5sM4uudZxEPfKI1kdH0ETYrViYpsrRuwLEV4l4FtHJt6QMWwXXGo7wp44f2EfxsdZaZfn2KFpILOTex2FSaf2mI1kAzQGWH6nozVPURxTZOnJwsXFDK6T4kLWmKUcDlUBWDo/dzQXA61k9kYhdqxE3aeKK/P9ckS4HSnUan/HP2sXwDxXnjOihVgrugEw/5BZXrwP4ZgPypc+Ifr/h3wEh6RfIllyWtlc7nI3JcRc7HqvAse/js1dZ7DmHCuUzPbXe9P8rcZ58B+W2rsqdVzoMrBRMlm9lbUjgO2UxLE7hWf0rs2/aRFg9+7oh3KR13pTymGzgLlTdhvqZ0u6HIh9xeBXD2PmxlnyxtWb/spDlRKXN58+NkLahpU5DyWzhd7ICmpen3el1XDaNe39tEGQemFRfKepZmSXecJz9PpzPgPFUGxqLFQkzUktRoX/WYOAjSkuPz7SbkzLord1aKbZYiQxXOpdYw5VGr3zbj1HDAFq+IHP3d2LE0SwAsXdwBTchDHwRM1XhXIDET67R2pGeUFGpAkSZu3rFRBDst/AKStm4L9/gbWdZCw77R0V5Aiq3NFkLnWIPsYCSVN1o4PNqiABmOc6HbFZQBdIgO9Cl9cGFlb6hRdbv+EcvxSLikYqB8NFpfqYryY/jjglTm7dBeXIGaPFNYtq2fKweKQE5EUmzWC+MRcA3KcCkVrcCO/st6vxXuSwzbc1k4eUQRBVzo6uq+U6Mk9XXiHgo89XwJESyNp9LfAnX8/hgcooFWCPXPa6p/v3B1fDSlmW3QDN8/cG+/F895aJiVN6zhCQ7DmoIJdvfsr3vz2wA8Czi6Sv0jmK6UrbMFTskyYAs9XXOZsjyvjQ21O6WamQtseZcnKbfPuEaFAueZHVCwSrNRKeAPPJ9aIIoCk13OeV5Nbwo9kHMltTapTSnxq+F0RmV5s9ILnq21tSGekILobp+01cIHhOTzSh3lbFOxrEcBuaxZorWzd5ETwD2+f7wwP69jSLnsz3bofqSK9ivsN9T++YQE9bmwNw2yvRxVCz/pFWIkKL9ROMa+nqpDaHz+5vmuIQHl8k3HKnoEDjmAChp3vlDSHMv/QTawdxw77KfiAOAFgYNhmNHz2St8L9sHlFUF2i0+HukMnSURB6ZbBF2G8mtibZ2ttjKpFBHjCVfBtKmw9oYT4Pr0foKOnQZNOyBWooONH3kGMRPLCGS2u7TtRzhwQNtK5NLtpxOqJPhHipNvfxNIIro3I1dtgD1rrUKeiPTduGYy/yWXVCsPgX6yURFfroPZ6mOfWWS1JkyI3kIpeT8L2rmvL8tkS2lS05FAlnIoOfQrMrocdTf1VNqIxngkWYWqPQf2s1V0vQh5DNtBWuI535VwD1qEIImsNHVwNaVmEIVWbIOx8MhGVTxsBpueGSezYIxmz/ecLtAf22wt3/Iws7iMPBKKae4FDexdjWg7teWYgv8BK9PH56VxNhsn0Pk+0O8vKUhvO8Gu82r7HkFe+Ofyvg2jXMhFzn9CCTfPdvh6ikWjqhBOgklsgolDqbr2TeZHx6zBbTKqyfWD5GGJUeT929EfwAzIvouz2k35H31zNRSgYXWTCwWDlUzaHnfPks3vGpJw5T9aPwL0bFKJKnwh11UG0ONK+D6/pvJAi0QiLKwC3yIlfqkokHX6tXkpiWzQ2O661lYELChfSsHXWeN4E9aXwUZ+I+C3e48SAddb1joQ0jXjUWW+Qx5Onyisbz/yFYj2e8VrAmLYK4Q+uFV+pcwRHpYPuXJdYTDBves07c4JoqQDZ/avtflKij+IyEjABy2VyV84zqxyttuiTT7ITsRgBF3lwHNtBTQtJCRCkbWV6EXqQb2Dc2zU1kU65LtLezPL193QcczQV0BpQEYXVKIXuUdbgLF5OQnJ35D9QAHiglHy5Kbd/7FrR9MPPRfAxe2kVv36mFzj+1lEIndMPFNzHFwnpU9pX3D2qPgPI/ItFEojEk2273NMgRAZDViULd84t+mAJ4mOSOvIOn6pkQEnOsWryVTP78/Oxmy8Qhl/11y0bV7+ejEhbPBpS0UiuDYM/nRRn1494GEEW73T7lMcelC1Ha84Z3N14MZouSYpMht2/6CkJdEbB7OqsdBr2pfuZCdfm2dmtRRaHzb2dZ9uXo7AhotYqGQxlyf0YjY8AI14yhhAM4ZaSTBaPDjjVLyplbTeDLmgt442s9Uqo621AUcDTfolGkNcu8k245S5YyZcX+3mL8u1z+6TNLW9Ut3T/6MGoa05vf1TTcUFNHO3t+sJJWPF929G4PsDTDVO/4iB3n7zGHh84CT8xFj3DgxlIzr8MHM4/yUV8ufFhvdLjfxH7llYGtALbr9yCjPTF7XjGneS+4Bk7bHDe9RiwotN3F/DM3aQly2LlTvhuFwBMcFIbzX5NtrcemgH0yJ5zqpnG5a2+U33zmpMQMcmsH/LDcCe3ZYK670GfiItj4LlRGqp6J7rtfzyeE6j8hBRFSmlNyjSHrM4FokrhJM/7AhfpC4DUhPKV5bOB50VUbDrtKzw7DJgYWd1kIRhqjP0R/pn/M/P7VNTmQc0i4QMGIIj5Sw112PTV/T0Fw+qqQoedqFo7d0lVTmfzw+X1tvncF+eDe6vn0b6x0Xk6H5NFkGxulnW1HMBldekoa+jfXRDjMDXZhVtCz1agJWpauGeqPm98X7uJ1o/IyceFbhUN83r6uC0lB3xRQxc+94VQluYRgyMtFOfw6pUFZoquVhKsbukOzT0NOuHObDXg7HZ5QWzYZmy20epSL61FCHaU58B5gUzhPFCFSv2l8yFNF1uYAt1PU76w9Bq+skXQwGz7MEqFnswRJRIT0VUUxujwLF5rTmlkA9wff9YAVE4lr9PHUFg43bxPEyfu4CZomk9hbMUQuRxTcyahWHgYt8ccS4ZNDwUzpRkxdSOwNeccbC0QwckjgdaTdpv6xiMv1UUsKLoPkOkDEpmi+Jw3lZST7ewHAuG6njFLYAYabu878zV7xC9Bm3Ipj1l3y121yS5eZq4xBN2QDECrSIDlxyShEnCXEJ6lWiLUOkhokFj1LLWdH70IpcIbI4SP+gCIlrg1+Qmd5JO1jjOciuuoTpfwjvY4sKlrbofsyPiWw3hXdP0lWOX38B4qc1eOL17LqrQh71+9zp2iaoESv0QR+zOErwPW9Tiwgby8/6rzPp70ByIpip0I7nmbC/U2clNhUKJascirYLFhTYKcDjqQ1FvWeJmrEhqms8j5sSI/Yjs3NZHE/qEZ2fCCn9AVxBJqEKz68GMxbY+YZLDFfpHqm7BtFXcfnJh7dmugjLpDMcInS9Zaea/IeoTlkSMA2EvIVfjkDjRMB55gq944YFmnkzObbD6i9XVgKoRcFPvAP6+1SigNuFUDmrDgbPC/K5s/N2q4LQ6OQspfQ+D+REAJLPuDe7/7z6ygIn/Trb9vgKrglEfM/2fgUZaICsPRp+XnUoeHIcs9fOz+K3Gee3tmQmZhaKXQw1hssAQnCv8JTQpbxx8x9fmpYZ78BIr2rvycWGgzz0Wnomv/HKWxXXt5fELdNTk0l5yNvBSBH5y2KdneCgoT9yJwcvmO8P8kagvYwanvc8mbBRtZU07xsXxBSQraSIzNGTss4pwDmm+4/HkI3zjr/PAGLcqS0xl/wqwJVstLeJkaL12JiI5jiBJaBfF5h5L3rgfCui/3C9M8Hpn8IwtbWXiNjb6se4v8XYfQz+eETa+6kzARWDpWMPWlOghrSKF7a79LyRQGSSWQQvLvBR08lnEk2bf81nVPtyR0a44ss/2CEvYLDFXtYF7qJ9LejFj6QsS93uQWUy/WKOkPRFVLOHk14j9NsvpHGLft4enbA/WbAwhdbWnuJO9HBRMcZiURMngKnYi8bcPpjV2M2PfdbPpOswEkuqXTWBImZP2TDITz4YeF69YyQUTAPbBKLXVOKK12DkUuiCLBFi8hdNEs+QiCNxqndc/KTygQGH16rKDRteI4uykBgeadBvWZgz+ClO0gQ27qKJP7NPJVF/5RNSJsbAoBucRJvZj5ZNCg/KXNLy5LcOY1c3X3mvRUhNs1GxUnc0J6Kx1/5lI0O/cX59Rq+MT68QF7tVZu+RCxGQULUPbgWUo85Fz9T+KOT0CCJaUPOeE+o4ynIurxwHS3q5Bk8OCgrN1xgTbEGV9tfuFmkci/cRb2j8+ap4d7FuueN6GC+4HNKLG/XiY9w4PPsOqD/U1Z15CnY3zEG4lA6gB6HUXsmtptl/Bygsy/M2QE7grdVnvPpQkoMrzYe1skgh8p71aF6pO8YPCVfYLFVWvqNm7cVbLHojCA/pgfoK20cTtg9IzgiaUc4LBIWEe73vgKqicbdhWBnuBvjgw003qMnRouS079VpIjZJxMuis8WarzERskX+uAxrnWroN31kAvmGJrzs+1JUyZRBuN1Y34MqacMKnPhKU6ggaBCQQ4XB8gNChkz0uChclI7AmDw+0D8XJ0Y1joJPFRme8womO6TCoNyn8wqmbP4+PZ43o/p1tWLfS5uhXC4L876AcbdIZA7TUcrGdd3XHNgqy/YJw9+CesoOwhv3hRFEo6DV8nZ2LP597XsMnkXsz8l4xCdvXwhGzWqb6iP4ehbLPvRq9MViT87wQp2o8z4cheNbH+YkFOf2Roh/R4UuoANdamOOze028bYTj6lqc/x3PKvlAyI0LEOuRIY9nJ5//rt5wp/tPo2nUoM620xBOKXyi+NVgddzLo2noHGez9g9psBHkLUnijHrbbjXO9bq13kle61j2AxehEIW9tZp4z0Kh1YGz/XC51WC4R+tDOVxe773n6whfFHi7nc9Fl6hphN+xkKBBIum4jJKmpQY3Q31ecrkRMGLcGxgWpa3aa6dPKHcpnE8h6B82pEYpfIKdT/9Vuw+uba6G5efkupL7oXBAQkFbHmTP5AwtvDswchmtIj3BA8gqgNsM7ZRDClc8BwVTB24sucB/tSI9GZR1V2je6fwiNVWaDZDXphQpPzReluYlqqOebpo5Ns9dtRL7Uq9Laq+MzQVFLf10SDEblzT/kIyEN2q9Oe3Znso9XU2quLBXHzZ/UhTEsfM8t6F0qEfxArAZQLl0rzGWfVL9EkwvJyGOBO0ZoTdbbOELvNcjTrI5PijH6fUlnrqaPN2kC8KgwUIhd++JLz+z3mizg8uXWfwH7/C+bGZdsbvk5Gx5Uqj3Vy7hxOodI8gJ5LbcXnse5jK0y3BrniPUUWzKN5O7+UA1kDwG0/dBsWi9H2oLY6Ej1g27p2tIGu4CeOm1CnJGJlGoPGynrBmlB0noLdInGvYr3zFj0DgaXcBFMzhxaryZ1nq2RZG7p5/f2bSM6WD79So4NEfcfOrzmVFbGswzk7T2vxvpXJYmjGkIRQxDm0n9/VQvyTH+CO5FrgDwL7xOlGf3I/WvXdCmkryzjKjjBByMTSSJ7Ss1FSmulyC92pNuz9oBI7Qes6g1YF6w2Tfn2+n/VVHxuNkFI3wQ2kdGjTVVI9mCXxq4rGj+Z6qstAiYj6UXePRu2D6JfwjHpT3hwO4xm+Jhu1OPfNPAiJG1mIwz5pFkgJ0fXF7LtyyopcMpACx0JbISjUn2EafVR/W31zccvZGkCOpVU+UYPZG3tl/xtXPjqfYWRiyFhuKV9nrp1IzHIEnIXdwqBknwLXLXgK2MOlrnEMgnPvk+dbRtbNkZlvLxBO8rmNrniJzD+KF895ptkaAnnbyVnf0rEJIfCc4TJNnaHEnZbhoFZfWKbwpJ1ZK+VBpZTRj7adiMNvmCqOcLxUILDm95LNv8UlhyQUhc43Hk55jmAG94e9Y5et6T3jM7lEYMOgz3cN62d5bM4bh/n4EaxHJgdOZwMhk4kox0ViET8H41+dDKcHf/kspnvJ+If4Gz55V72Coong6WTQ5pHB+2n2boHWTfioPelaqjtYKG77f2wCA13boyE9F9o6Xk1Bd6WXIXfTJwFzsO4GGEGtuFpz80KeweFAZB98PmBOLGY2loj0/1n4jSASAPXxnNW2ZWMlh0yPnmSfQk5qNjxufm8BuiOybQqJBZE4ccLbByXzvxQT+Zq2m8KYOrOGd3ylQYt+IIGjUWXo7iabbtyiIMwdFhyS1v0elUUJumdpOpBlExVbFiO9i4cV7QmKO1v29olSHimbJcIFKga3pTcKpWPD/zIMg/rsYLbSVxQ8j9ECXEdT4FMW4H5wAl4rF0K4sRYRfBhM1O8nutdgn4XAZaVwFKRJaWRieLHev+pNu9wYdPtEqb5TbLjYSkWDQUlFVLGlAoj1+BdHXLBkzlw+nOA0Wqy4vQT2c420anyGuJJdd5+PE/lXue8mwFZKxnRuLp7q9E+H44dRAzLjf4lFgbwfek7WkkjIOkDYFCVm1cXHLie8am07kMERl833x2Gzz9j/Cl+2Nea/YSW+nSkIW6drgMY8Xhep6cClz8VlyXXfH1LZQQcpLlXrhbbiSyOcPOb/e905ztOdc/QlkpsmsKk8A/k7zFrXE5QJGdvEWxwSCiod28akwXSN+VYWgQoqQCt3DTjb8UNUT4C4a7Ow++R9YE6C1dQ8qWfbxBemXS7vTM2in2iBlOqqCxl4LJE+8B00Bo1J0rJ7cF7ox+dJOLUVXYlet+oVd06Zm4qm54ApVF7ZgtrLRd7p//zmS7tYCLASSfn2fQ0BzYjzODnBNsiHOZbx2n4vPlIPZmWV3+eyotjhnrDQhLJdf4li+XRmw/W3yjDGFlSsmHk+UpxtO55npa3NtNeP/mFEOPc/a2GAXOicepo414Yvn3ab7hvlnHknAXR8IB7tdwXaRXiu9Bm5clW8qsLMHSdYF8Ge2+IktzfmAqP0eiaNHjA2KYFReLb4UaDv00pxZtmn3tUhC8CZ3KpDHtZsd6SfO5Ye9cWBsClDWsxdSEW2O6tOIL4cKcbWS1fOOPy0aMhd8/9/XH1bzkFsLMv0+mwj5+dX5IUXvNBNpdAZmjdie8SFIf8hJQI/4WXpO73Ototj/b9IW+elSNKpPlB6zL3csYauKmFOkA7pbLxYEZbMTFYOnrRoFUR9e5jgkQh3TAIc28H8Zy6+D/dECraVIwt5ZX2XXYrs1uYKMMgxhKEf97HUeCb7h3QyhPWhsS9pqtQda71bdi0xXkZagE+onBL99ZVdNGfgluR7TyyUYlYY0MOrBpHL0k8xUzEbqxYupHobw6QLD0ia74SwF9wCry3rApUisbmFg3j+1yDMgTLREj8wMdjL8xPLERf+LpWI6CmFu/Nv+Iq1Qndb+mLDuoHhehqdThL7/mHxSS+KkAkWARcxmdQI9DxjYl1Q01rLZOn2hA2vR1E+cS+IIk+p45vXuQLuN1s/VgyjfQh7IvtWh1EF+u8sHA5soFXWJINEwWL08asYXnp7O5I+YsHRPQ9bG+YaPw/q3pMNjFvnQ1x7Lkx+2nFCK8t8GB7pUd8xxBnUmLzEhQB2kPWZYDDMWRNW+t/ed0od1djVVYKru6iMmSWOJLjkMuQmlYstnzlrIyxNrYHbzLqhppvCqCe2dHtKgDhUVy065ySS6sn2YHXRAt4Up0DNsSenb9K7lOzBAQzhqijan1GnuM62PQ6TDhw7R6bfYlLi5yhVs82Aj3lxbVnAEAgoDDaICHNKAC915QpR4LAU4NLep5Y+FiEbjlb429pOfVa2erZZK9TuTyg86COeJ+7+fFrVZc2P4FvH9QiQVAfB4NPPHvJ2aoDvSURHN36j9M6CEqZ8DzZj8mBva7yJM1vx5zldualtqola5Eb6BYYdlTT8sfhCt2K7cH1kZSnTz0DOwXrTE2vRN4v7YAuXO/u8GSKnx3GNMcpzlIvYTiMNBqJQY7JZqtZ/PFUdSfUrHQfBPTpSINmFKjBeTbDmmtp0tjMhUccCdXSQJP0b2KFTsbR4b9JgqGqPEUOUTaQeORAjYnnflhUKN/FANUsbqBJGU/HC/3B3w7C+qHdxsyLdQgNZEd35AtkHyezxo++1u15+In46fwwN7DzU1Zv9riwUjKWwcnyiOzvc156HG23vnobECYM03bZJCFGwgOa09w0OLAzR5P8XUfyXwAlNxLs+p78wtS2zEleMAoUktyeTZ6h3ew2HJlWG/VxDBn3fSZkt2Czx2Vi7ge0pL8GwbmMpUIpZwDP03D0Vuld/RvJrBRLjTl/uUdunuGAh0CUWhwVOE4sho9srHlEz1KqEF76xQ5d4rWeLyQH6xv4cBi4oCSwwUs+K+QlvICxS6gZEwkdlqCFvoe9dndgFsql8LOAXIHN4EyZi4vW4lTOtQQ+gu0zQx5Hk2qoV8mFGdjDCmSAo6d4yYRoCHjfYmGJdgdTal4ZrvABpMTqqkuei4NTsuDBSWAIyT7s5AH/DkaX0/WyQ5BknomPtBi7OXX3sPottiz7EefMu1RJFgvRb/UK4ngjKHOz5eGGIEb5XUp6RHS2djp33hyc+J4FK8+YTlVneKWpoQG5w9YICBv8F20eRhuen51Mq/u+m+xZWsSCgi9UXau7NqZx5DdyvoXY0IdMcrpusjYlE3aq6tk+BQBHd3no3JvT+mr9PhnfKhGQrjPPk/KPK6kUE+C3kCFLWTA4hMbDx07KXqnXyKF+xeJvhqh7uTBSHdZ6Ybl0x3McAee+N+WCZqjUceg9jk4RNGNv6elGrjN1il0PC1VbxetLuz0g6tMDWjYGm0fCbAeFa0bp8SRSmCAvzGaHKRMhApUEIbaeVBOglje5vfrYM7gYm0jxWOvOSpGi6B7LY43Sx86H6OXReUw/wmKOKQSUnFl1qi8mUkirtdYLGeHcC3cr0qw4xDPs/virph/LWJ4oQumoxRSzvjcwLNGE2IJMKR8l5YwKl9Lkx6nqd8DX4dFK9n2z30lKhoeNApVxqEQ7bT3w+KMhYV8n4t53mhkz6Vk8AHeJJrbu3YcgmKCIvSMVD0lwqje2Yb/4y2WP4XiJbDvyBQmDWZvRZtoS55qOqoUWUcxvmWHDDPVIa+7Mm40BH6LiaNaDnyVpgqGQFtv48GM0FLhAurv4gjUI18CAtCEjtlj2yxFVrHVp7POmWOoYB47CgSO6H+rPndUVg6X6o3icNCJ7S0BZkxG3rGgyG7DgLhiYhqTKT6s46xzKBZfCsrG+fEulSgxxa7zokpkXCP7BbfzHqGcFXnnbT29vJiHOxBcbJLVk7v4c5uX8DVIPegU3KcO0I+afhCbxQb/OwhSJo2icshxx0m4DNKKjS82MIboiY7mP3jyjuHHDvAn+Vcu8uRYIttQK+MGMSGWiTaEd4zJEl9+puUN7qR13Xx0VvFOE6APyqKgU5rChzZnp7vBtBlyCHuSwOSAmR/DSnSsJsG04fge/IcX+wuZAZmGuWNDxcYTkNCVf8kPFn7+nQ6hb6Ns8fJP1hCNu8vYpZc07/fzmngkB73eiGz0ozQ3VQU86OdCueuyAYuOwyDiWL25hB7a9nvJJhYweiwB5iRTZz6ASs4WtXbwtzdDo74GK5cCr1l4CwepHiM6qQkoDvwRp48OU0zmm6FcwIc7q6MANnnmSNF6my0tEsD1R/CWiwj0KbLgJkIhfht91NvGf+YzIQ74TOZl/moYlZ/TFmzXrclbYdks6Hh4pHWRyvwZ+YjqYPN66UC0HLhmirN3dLQJufCKIPBuGnS1DPQN4JPar+3fDjRfo6CL0hyY1bQb/TDitZmcHbujr4YN8q3o81P5Cd7nguTsytedgX3kQCinpsoeqfT9PxeaiM6xfqUOtFTc04iEMBaLecnTNA4nO7+jQyHpS2bq9XZDDkZXmXR0fTqNQlSklzkEWGHfgIjtQX6lOOTdKW1MW3LMalacg2wb9lpnzBMrx/mgFiQEP4R1+CPTxZ9L7w7IyajcfB9b5TsDZ1WbpNQEBBwqhlEXyjswL/PL6RYdt6xN7NcS2qrjmRwwVFByf4U3hQ620wZDGlwIBu4A1OVaOkDUbympxiZ1oeO78NRmpcBOevw+L7vo79StTFZBuPWTkhcjB93Wr1h4TOkjsBYtLYp8/ac55Kt11e1PMLRBVAaUDmYwvzkeqYfc4em1ZySGTEez2erls1zBbUV3HwQ4f+lsnXlbS1LP2pvnUOb6BtIj2sNAF+GjZVhWnmK2USLPq030iwRsz329O5W+DViSLOyCRZMlXfRB9/rOGv+BRCkpWpt026AWPolv0ddiEO/FD6yEssTiomrsY4+1pu30jqZ8Y3HKQjkuqBsy/pSIuJtLU15Nv9J68G3PgJ11lCTPGxQ/z297ItbiKXpC/jQ3YdCcx5b4M/YiHB567CSarQQ9cjL9j8y1oSSX5za8ddxCnKUAwCoPh5Np71vbh1VPyVfis7HU2gRhDXBEyW1mDDs8eK+pRLKvR5SCFLMtNF2hBWyEDvAhIPcUOxm55d5Su96IPDkI+UlCjsUGTY2aHJAnv0Ss+GZpD1Y0P4VX+Nq3I4hpcVQHVexoHuP50Sa6WFPpTAsrgFmBByiU4Ur4kO2HwCZUgjxCKFIsWGiBEUz2vqFHbVlHBrh8xT72H2kP4W/BxZ0u2dzOLaslypcuJOzMXhMEY+vgbBTtb/qQdS7VPyPyiRk0zDCTTXTS4JwEibkzFHiJHCV3mczbU58kKEKFq3yeBB3pJ/c8y4sViIBVkqLZREZAf3SMq8hox9sd+1t1gC4ml9BJUgRb0QnLHU0GHej3A2JhRXng+cZtpK39s+Js0iDlGq4btGBAsY9rt8fX/QdwFEUtoTFf6Yl3Jo7mmNGbv72TfP45U8LmmsIrL5Ic6pO06qywVXncQXvcy+T38QQ/MwPKyrnBblD+KYOpVBOrz9aYQvDo2sQxZn9ME3qhpo27f5CMXQhDxGjX9rMHQ7vkZrR0402KiOSPAa0xIWavhBXa0v/MzpuIgc4j4602Jp/1KB09zGXQ8R4GZ2qGeqfU4EU0b0IJ5dJlJhAC7mE3oA9scO2IzQePeEyV83oYOMUnv17NjlYUcWAp1r3jJ3R1Yyz9pRIxTRau2ROS9FUJ+olzdlwuajftnT/qlRf9SxHZk6iL0TJtEfeSUqPujNx9OsgFeTM25RGXl0AXflw+9qVIKtBr+Q8eE3+hXxHNPKah0YtXmCR9ZiuFATnkeM0gQOS94pqmsEZ5m0ItBNpCpllED1griF+ecxdb0hN5coQywEMtjKCT0lrPNN0HIPR5Q901bN34xE0zg+r+MMXKx+9RaCvNd8Yge3pJvYyJWrtES832z0H2a5wOugmKDC8eKqFVlMrO9lNKGDIygrWiwdygSpyZS7x3OXy47qgrJ7mhghDDzs669UD4w5PSqIwBWSIxOl7TGS/Ud4Dw4uzSSkNnUSVtqVOFnzgSFkHh0mpzFEgd5PgjHxbJenNM2cqQl8LZlUcTpbM+nJqLOe6+1wXhDctLsQSCSTwahO+TbWPAvlezAm1WCU6H8JIip0/BxxhUbUvbqnwly5LzLnjJq/u2tyYqgZlLRqtzCpGfULjV0A0bA1/xjUt/VjMzAPLtBDIncnHEmKF3khCrmPYrsaRGhgpQVn5cDskc5BWq1LEmGDgA8IEzZwoKq3jfk6iK0WhTOGj2ubAfxfQ6USb17NMaPio2I9yl3y1VMt0wbuxo8khtBc3uPrkLD0QgOosmFbaUXmtkQkzmZYLcURqsskoRd41kxHsJZtvrEaBCE19dq7Fv/qdjqvCLBsHf8tZH5cD7uJ3dprT1gYnlXySs+t2Rhcbs6JnuawSihk975NViDTqUFySd9qCgy7w5xrXu5BAjBmeJYS06FMl46vfsJn+MR16uUtfeCbD3yj8ZHR8ObYqF6rp4P6VWchveOEA+uWADYAiXit7SHisOBI921CN9rubBRkV0n7Dx83hEKbIU1dVMI+ZTETYIw+dmu8dNw9SqU2UWR2iMz2Jr6XP1PkQEG3edjnUqnKJICfxSEaPaEPXJXnq2Pu9UetqIBlWO0KVZR5KvFZuSjqreFdG9Va8hsqrS+u8SxcKYROSkjh/tkycwk4r7PW1DwnPj8zXT9AGWxT+y0MJBkt0iRawZqhPS/QDLKAkxgfA9Yv+qESi417aOpI0Eq5qQph10+j+xhEg6m3k7Fk4lkkgwt+beJ989Hfr3GIBwJ7cLDqaFLyKbnNbKzjJaMBmWzc3uWIEIKT+r0EFW9TI4ypgcsmDV64iN3iuQGnmBSErnDMwdda/als/aKGTeNxHi73yvj/eGt4E0+ziZcDLl2rw8jLxs/JufHF/YIDhp+RuXmjEO8JWwLOz5/pr/xyiHFAlSol2RzvCh9HV13aYs4e5RhZ2g5MCFGKYFW1DHi8TvfbNWenoTsjOWzdPlxQTjhwgOpdr39vURslWGlQf40rll4CEVHkQcz9z0oKvps2G09GhZXGEjdI2NTNnASVyUi5BSXG+ZjAuMlLDCp2GUuGnqmV3PehDeaill+nCn3Kmyokf1I9ur7mGRP3c4uPbJeQznxrjntVi/k7iioERYQX9eiymZIc8f11oL5ipZgIVrq/T9/DEy75hbPMr3qMTTty4oxcI4nJLmIppus8dhOF5BZsVaekgjP8Qebb970hnNp0YmE4sTR43oRT+6dBiGvyP2Yao9/9ZhUXBzlyv9U3H+YcDkIxkTSw30UxogUeVenjmTVvlQnOpEGyLBBAlD67YNtKp1PuKkVtehwLcZQwmNmvMQf5k3EYxp9cPXxhkoGvViYqsYVacs1lf5T/1quF5ZAs9SyUTNTpXmBPXBJFUUErTVlqMV35ItcAGN6Wl4CE2nTiwlJVw+c3CAXvpV8HDaXOAIPbrRHxUqKPuy1+Ut20z8VXG3xJy5sdTuEWqym5XvkoN6VXJi0hBF5vyyOKfYoXriy6jTSujhgNTcupZYwHcSB9B7luJGBlUPMSdWQEX5g6SwoBC7Xify11gH4WVpEpV+lGFlXlWK3UGncOtdc6N7jMlv2AXkuABAWOst17cXB9nXtCDhE/KhS2rZfHST6bwOldl2TNt80GRxe0mYKZg6FX+/pbvgB8RT6BM92rH5IPLq0+mfdXDxIT/1hyjqYKVI+TiJfwQazuuc/iDGMoAkUDgaxbLHbkJq6kpcUfou4FaJ3Gz4aaQOMjYbjqWy7NhWuqarEnHyUJ50zUGvMDqqKlHiXTU+UkZlelP5/nR6IzQvLP7/oYr6Fawm1t3EnQm7ec9po1v2fzZ3jF/u9LQl/YLRJPEca1xYedovkpLwFg/Wa3pFmde54NUxb+v2XpP1SrKCXUYB0x1VTl4A1IpfBHtfKVX36DichIIIYLQdpqygVzC/TLWw2o/I1b59+n6OnrhwrAbloDrqhd48whXygbWWt8vrL4hkE/ZhPX67jR/gSJNxeISsb/uNcsLlhrQ0WXxhIEGsvNYvDvmVXqXW/n9aq4HZ3EbUrOSpPs9p6Oa1eTT4dP6ATvCH73GUSAJvAjaG0W+R+x9/XQUCQIGd901KOH+7hlJ6z64kKeb9tW0D9gcrtVMlAbn/JgGBBICHhZYfP9pZTcFK6+iEphMYkUIVCYry+kaD0n+4C5TdiYhkFKVnsiNBPMXBuA4AfxD61rghc/HVZtKHciqT/8278U5SoYkN4C+NOcg8CQBsRVRWjzZGGbhL5iiBZpOISe/Q8MnCmO4Iq8OcukBpZbC9PzfiINTIq0GMU3ps3OFyown83i95o8jmjhaDHBBbYeWjaT2J15b7zC2SYkSRzLMmV0zR9IjpJgDILiWvLw9oZg2zqZDovOsjH2KvGvJXgcF5af2eg0WmKp6M6WzOkJcnWOfGm9y3ZJalVHoZvbfL9KS3UbkpbPCw9ip1R19jFG4xabl40kfx3PHAmLI3kt0MZb3lC71EqKyPOVzAtw7FmjTwstDdWnWI64bLA7N51hl6C8YX0pdfPlp0pTycF5eI+OAdOfK/kzX4rxyCRaI8WEvbl14CliCDNQdWYF3M/8sWBM+Utw4PEuiCTnteSHET9YQYDM8jCIphGaj71xb89jb4fF5oFGK+oDqlpduR12L2M/+i0z05a3btL1yY9VgdFfrYeJ7RrTQomMc89xdJ90J9PzQiAjL6W8m+itooSs6Y9Pg8yf+g7cW9HuZ+IUbT4v8JEAok1ziaMQy4zX30PrlUCmMb4HX2LiUZtoEaqGbTQZpFNhr2l++gJFbo2+bS/u1cu+NpVJ10WG4FasakUkgj9MG1T4GFBoHsv2dcz2jdTQiP2VBs8bdlLlAiA3t5JCfoIZ800zVnQGRNdnGJBZsD9mJ29yGPTCk7xk/Lo/C2pM2wRu8rLbJszhnJvRtzovW/mNJ7FrJh0cjEfhggiV0jh5KJuir7u6AdE1sC1bLAYQyvGyySIpfyz/fB0p7DhIOudp70WXv+9nkt4r+3jyb6KJLttDNRYGMzq15SO9GdgzvT3Yv7JDNle1QNICHLwFmxTLk0mLYakcou+prFx6SbVjf3NIk7b13xvPN7gkO+jV9xFQOhLQXWeOEdV+3VCkRQgSEPNLysEiFBAGt47RmF2W9y9fHOEkmrUcytrIcMaRhh0vhyU12UWKfKNM6SIeJrxOhK0j/rUEF1s96siHJ2JhH3MHaLhYAEI+jR654FlEBItIMdl9MwHQ9Tz+XwtfTIlzjQsOk6jEpMLgJB+mNSEeNdpfK0hBJRL+eaGWDdgJUkitrckylN6i9tFGdYfoMW/xBCIDyPN/dJ1lh0nXeibWAu59KWf25vFXmcHAyoLbJcLWMwPuwl8F01w+cDPjX2sF1z03mrJq5YqjH6YauDKkvQcqsIwCdDYfzUmJrTtDmLY9VL99oG9yxPB9WX8KW3Lr428g/PUmWtvhlzQMNX5VCRAO4nKT48h3PI7+6L+a05qdrat028cSKFAIlciPQshK/XXB7rVMGnRYzjquFl0eK+7yZY/RrKnGCZcxOD8UzOZzHuGtFQxERZtCM8JzdI5Ftet0bBOHRziBNuviazthH8/r0MoqYVK1GHjv3Ft2VpMM8dU1oN9zrMfnJ+EV/7YOq6WJsJdOjfR77iH76bt9Frkm8PDeW6IZW2wP3HoQRPYqP35XgusaQnMOlnxC9oi4JhGG/IoSli+yQ6f6f+VJBTx90GD3FJC1L5nXWfdNb0E0DoHSHr2+hnajegA7Q0ZVaQVd39dIs21lFgy861CUU2dJpu0id4U338UhdPXwxOusQyhTL15V+GqEjPQQDWJ0HDKpMLlkIujcF/04r9o3k81eHuQaoqXJeQvmnAfMTDr7Fd7I0LH7kg/1vTJGB8eiOv1Aj4dniXnRLiioHpB17oIVREuQUUkD7f+gHuxI3XbMTHAO0dWmUDfV9MOD/4JXm0sP2iXBhw2bkzNKE6R92CZIYTsKnkw7ncE3FYDt8xdE9rlBGbEN9qxC9mBy6dVpGJoE8SOombGpRI/7sF6htz7FDxOQ3DEmW5h7o6VGDOSNWICVDFnXU45I8/fNfMRMV0rlY6aIQj1GfjE2svZWtmZgwo9cYvD69k0tZR5wCkDnVzPhALkYKHrn4TVfCTgCVU2Yq2rOmdgUBsOUhldQcR8znfkAInzEPCzVRvNQYQZLBPEOeH0nL1rX0ul6RxqaMi4ZRJRMSw8GfBWMJL71QV760ifwzVc92FuVGaXesyO27dsLopi1H28og7Tn5zpXftKELU8HnlYDjGZzkmSCwW/VkSS57TO+6U7ZVeGLIyrO3dArq3yWFMp55TxPGaWfpchpn9FmoMed1bGEzXWEzYQ3iTPEddEkmWHMHeQIk8R6WggScTPs1OVmVoXmpdidghD/wYdxRK9OQjvzREQTXQZmwmi7SzD3agHz4E4vXlpGo6wxGGLNhXce4+vLmA/T82/g6ZvFOxfyQAb/tKHNecTIPA/b9Ht1nmeyif1Clw+/zRUnPopOJscDrXq1X+JZGCjYMLS1/8BSUGIGjhj5FoKvIvN1ISGI4llPTB1MEQs512+eukWVN+WnhjTv0IMOVIWyVMNF9sbVbM299XTZwhqvFSyx5yqAik94odLIDkPmeIYLeQ0zHPDw6bfZs00Dqm3uSKBMlSCqQORV1txa5CTr2t10LUYQEJfVu4PbggqOU0IKmBIJlH3VGuhPBIFdjJupmIO6cqyV1a3eKV40WCvPxUGpkMzp+ssCyTruEkhX3p1CfzZDl4YdMbV3/tHLu8esA174fsQtZrEAkqFU53eXzB5a47sxDmL+JOKcGNQqD5aruiN56/rTys0uPxVo8yLuD3cv63r4MCusZxQzZ4DaGVJplMdB3dcXY+anbDMOfoGhEu9nUg3Cv8xzIcw//+STf0wu5RNhqBhKPgk63xoMP4RIRSK9fmdaxnDEjqYcSGyneSlvNYUGJ23ZrfCVYQFo5mX6CHUOp1ctbOVeKbwFiAzhpx4clrLB7vvGwhywbuI0G9t8rNOF1bhf0Lp5livCrfVQ2CLtRatV4HyjVk7KSkjYv35cEvNjou2MowLPjVpFJ2eaC5oQ2KUDlpfpO+yO4TZqxB6ID5aI3Sck34eCMwTPcL480+3Gw4XEnWJAei88preSO2PJoqxswH7onf+ChHS3cSy5wgzPUaAIaG/r6dYtnUIV+93AojMmuicsVjio7f/OQy3K5hu34pEthi9Aej7mgqv+soYEzc9QYMwiNn8Yjb4wUeCfuKFJsS0qAU2YzZYHqP3Gn8N/RDtm7h4DrPDIIYb1TUWcED0RLxt9+16ClEdor2WX/933BasDXuY+3R+iUqKB51JaY079IE+TYsV6ewQooJCN06ZDULvazz3ZA/5KIADn/DM778qWj3QmkhOSIrvnjX1BqC1PnVf93wi7ll9eKET6tuLvnpqSzmfaaJIxaFqeqlhJtjGD8QtLhm3MAk0pj0l7mJvqMMQ2BISwLwe/jTHN/LFgDYLtrpfVQ/MjkgOs65tGDE5Wt86QTfJZOuf8cBeN+uHCvCJGESh7X5Yy60079zdfSeSCkL5b27CqaQ2yz6wddn2k3WTPzjbLZGsrlaCo82/szNmtoIRMrhwFA/XHvnN9CQEiX+LsDX0OG2qsFBjS0Vo1SCs8J4zGqSh3pgT+cyJC14FcNv8tELMM1IybFq8r0AxPYz83749NYpaiogfQUVsV0rBOaa0y4a/ciFH0prrrYkl1hQfFZ7hI02q2ObV4FpZHOXmllRE/seCSyQyy/kGZw2NcoRHZC0c66i5AN8BXEgdEz6oPj7iKlhhfq+ja8veX7MdwY49bLQcmwyQYIebeCF6xzF3IaanI77Or6ESZWT7FlnxaGoV3wpYaJ019rACdyBoDG+TZekXR3yy+dxiYm9YqIfPV75/KpIqNsuX9ig3K49unW7zdk7/ZdcqiqUdJ2vnkJLEpaiGcgXkGibNb/24Ni6qlAVY2v0r8EjqLuG/oM9+qFFqQQOu6sqAL2n80HjVeSRw9/ByIbMHYV8+wlT9EpGeudKaMKu8lS6eCPuilXG459ezT7zWBA7v1i3d+LiCDMXLmZ4Y9MkdFScHo2LR10KP/oD7BK9Ir4B2mKNNcvT2v5EX6hUmaHWsspLFwtpu+PSeud9Ug7l5SFICSmNopDV8QzpM5duXA8m5mTYryI2XDYJFq54//1t2t34PzQorme7uVEUHd2Mxz5PLLsroM30ZdsUCcXtMke2ub4PNTnxzg1yoH5R0s5SZEI072HWHewFww/q4aYEx7seiEHU19yPvCp8zXKWSqtNgIrDQopMpPt0e8vCuTSD4ztxZizOpsqgHve1J8AlX4jFxDzWx7D46iqvzm2btrLuvBqzEbAAb3ROQcmKCmzWNiuh7RvXX77Ct+zEIJw9+EpP1/DzEp3tppd0cq5uncBbEtfexMpvzlddZs0VcQ7CFXYJXCy0O8Z3jnw2pheIGldOl1IOK6uOXv28bSzWPqJYYwDN0jRyiouy2M0UMNBZYVXG4l+ZKp2XPMWf4ry+53AWLcitDpdvFqgxzPgyMM/ItJX3nKnk5MpLhz+4Du/9LRkIz/KeWwwmpzYl3bjP9CvqA8UjkoNuC7LN7RmrJZ25QEI3RftTBeeiG+JD3CyXrLA/nH1JD8DbZxrTzsAyONSNL4NvYggx/s/mxzhK06BXKFIwhxlRt7JlW4wFgHAqOQMoZ2jTqTFzCo1SaTPp3B1Nh/497cOeafsylkSRwA6C9aQDO6pOn6OpyjVXmtBHeOMj8rDyo3PKxODsrURZKKMtkZQu43y4bVvxlHaqVr0dR1hSDvMXJEMkbe9R0ITujS0tj67XqSypVISE3maEsb/6kD4pwtzLuCVrFeSCw+Cs3vZMnxvhkFUDawIKrD/0grsZFtPHad1p4HSPt76GK+7GIR1XPqaPeOQCnMa6XQG9slhN/asoVy0jdAzmjpK7jGaSQ/U6f6b6nzyb/6eKoBAD1KrbG5JiTwFgpU+BhpEqS0OSw2JS0npfQripUh/aRdFQoeFtlrooPnEhfB0TxnCdB0kub5Je4n+2amA0gCoIGentmLdCvF+XIPAd8ZJ9a7ZWuUdJsdBxYCmauy0a9MIU81bwFRIHBRdHxBI1lcCrnIZmnbin9xLwE/HearPV7WczUejRjnKsLEnsChG+o253JPqPrx8cUrj5UqLMI5K5Tik0AExStYaT2EDd81h8TjuyGr6Mb0hOOy5v5TbByhdTYAV9HDLg7Np1jPpIBdHVxgR1gIUZAoo/wN3OTNqlfHp3RpVMwb6NcKfUinSl+Qr+ZvgNKNiGyu3frpx8EODpSX8Uo6M6cO8eVAQnx9zfDZc8/7LoETwmANzwhuqTZFeiUMvBJQ4rdZ+aXkOf2Q0lEXNr+Qo4zFn4ik/jYfsXQ99Id6GZJ9NRDJpyI99lHrwvnPFJcAYKjDqKsJa1BlomghbReDZWlN1OAA3jnGJ8xZKtZnAx3CV4hqfgu2m12jzAE7EBYZmI1R1R2GfXG7+3jJw/eNjofNa+F0nK5vMNeWR02wjnYmxOjaG3j72cRcihysOafip/LUK239+h92aVJUIx0QyhETpVoDgYEkoejxJybPUi8lIgCot1+Wujl84m5HB8eoIYXCoiTwqyFa2KejGSqj2rru9Tpk6OJ1qKHKnysI8AiatxgkmerA//X6mjY1UQAp8Rtx/pakfXDeqzU7m6d1MNpT6pMDUIJUyQ9x+ltIquW5dhg4204oJpnWBApbdq5N4n3kPYsL2+Qvsr6y3oWKqrhLsJEMvdOZVeI8USt3Nq3wzzobzrhmzD7b260SzxyHL8hDdZs8vIc6ntMaagXZ3OQ6wxhFmMD2vZnq4m7pjUnuMzbfE0idq0ywr4MJWojhh1uFAbUTWSepBKj3Mcri++w6Pj3K7flnkE6oic8RSlWPKY4pZvaKIFqw6EQqpAlS5UOXGRxntDK6IRY33GylppVyD6FaCze18TkNEIb/dkXWKxJNzFChpoERFrLQAfKIheaU+z2bDyf1NuOa3/9y2mWkLEcyc3ev+nAeFmfs1mSVktoyJw8gtr79strtyYJT3I3hrbgYwxxFM9X4cYlb8A9ZcLABJ6qhnE+szb5KXWXiLP4yzujXV4Qnsv5ZOD5RfyOaJXdZwPyNFZ6sTQZVOTgrA/z+DObjFgwCKAII/BayAtpcFuPSe82xRGOMcY4eyxHUdZA7WbT+l6AoiNR6EvK0lDHC9GM+tpTPYZCOSg3Mhtt3obp1dZRFYI3/uqeRh4q2HCx5c1cmPqei7HKPtDKyFwPgC01URzNx7fj48MTVeeqkIC/rS9YQVRlsHaveZltTPdxSa/QdoXO78WbzaPs8EKFRd9i6wTfgGUzG7yojuyT+6YNGOLNqkKOYx7KuuSKaz77j1BC2oH7kn5MeHva/OO/Gw6cP2mxpjrBoUvLPfRJZUCR7ZRGN5UC5yyCIntCudToTSDPxkOeLNlwZWeolHdXaBQUfcCeFidcMb41XH2SrfULa6Ke6hRJvcj8jr4cubaNvWGDsmH3mTGJwnR6oiyyznZtf7DHZ8w92wuyopY4WKd6369lQFxASbhgU4znTNmfcI3FIXvElxndMjVGrGPBrkVxxD727pg67FY8Kg5nccPk2ntCNM2WO7sfqXApjuzM35ORAAgyH7R65U3lNbq03ktyrdawRVrP7bpQtGIOrZketa23LyPO9DaOdVS4ql1WP1PrSJC2uZWYF8aMErjsrwyZvtIX/fSlEXmzjQowqDkafMP3gZVRacVTxKnLdPoGA4s5NoxIHadzgVYkGXz66OLtyBxjFz4l8b/8xlBAidNhVnVoZ/8edu+uAm/6UpcRbPGVQzWbCNMxFTgNoCIBT9lAN9Qjx/jDzk/9lMzHgmRKSc0tfexIOqBvILvz8w54AwNEidmw/d1gNrOcPwbAFg4cGRkP62hjPbZ2GzuPcc3mG2i0VWZ8lDjernwbjmeNKEKQvV0VuE8nvWNAms5n96nY+oaaHt+uUBKES7GoyLmOLs97rYaLpJTjT0iqBinbLxXml9ALfMYuzYK4ymI8Rs5BqI61clKhyoAecvI3ysYujN9FFbJtDMnmwLmwhZJKbCU+BTF+X36P6hrPxA4ElnNJi6D4h7aFvHDW3awMHVdSqwUbPiXMYDDrCdfWKkLcHoCYHE7ThNQTwm5guwHyzRmGrbPPdNcsWaHAxV2N0WVA1Yqrb6jUg4d8ucKJ69FdDi9l1KEZMFvKfCHjccOmsJDcjdKP++iQo4l4aG+Ox3mFXXn6CzzW05kjp4FHnPjtuoRb2Y2ZRo89JEyiCEWPzpDBEWHUUuc1R+UYIOVUnmxSqOb7iekraFu+7yd53fs19pFArBWJcpUxD8Ht1tusmt73obW7G5fUQl3ZdujBRGaA7Tl39ycFpTa9d+UEA9vhtMT/je7jZG/A4FgpXA1sWMhCwEx/a42FjpbGhOULpVqpvqUt3JOuCfTuBPJE/q8oxUTEv6MZEEb8sq8m7pDtLVEGEJXxBPqjqzWtOOQ4GPhb9Tw8pi5briqT9Mpu3pw6N59h6CMx9fC1xpaU4QPYSUlCu+XV2Nmd7YsKROJabtq7D8U/u3SdOzndvvfpbs9u4fLdBnzftPemSN6HbPcc+NzGN6XAblPjzS5YEvqQ/YbLkXgE6/x+1aY3HONRktRU9pxhoveJveADmip4O8AYu93XTCnPd+0KION8BxVflpoGw2C+mFsr4+5DSZr3KJZ20/el3kaINx6txry8gasWXuJDBULfPmQm2jCmyiPUK0Y0wHHLvt+QPdqFhDhqTGbhZ8GJvVdpsjLYwZvK1OXS0JZQreyMCuEpvB+sZjfVnMd+a5fwMHHv/D8Tvmo0j4hLd/uLfY5nkooPy4XBihai33JcBjfg/7s35FO7UMBjOzA4tpIu2uOgDgJBaw2izUtZeywrYjxVwrunlRdG1UsWrOd9KlqQe/PJFKhHDvXouBLKBFpA5FVjrXmIf2VsQgDrqTMZmIW00JFoMEcvk+Ch3YbbSmabvnAgGfPOTkL06EWhS6arPyofoJcAHSJt0c+HVveuPnvWQbc6oJ8qabBEb2h1RSbGBXymZGMH0Df4WTcX5z/SDN3zvbhDZDdgeV9CTxsMpkjDDBrBL1W6IyswkvFAxjAKvg8P4HG04jiiU+9QUGAZiz6HTpnVy/6TUPc2ObrY35FWia4+fW9ZGIPhz/KE4GXoKIKDRwa+o3aFYoFICzXkJIkTDOB/aikCz72/xotkDMIV6eCXxEnVr60Xef7Ef/crcspHwRRYPf0daOCV5uj44efKO0b4ubWnc56SKroz7thmRnrws4VrJ8Faln9BeqMq84xxYKp097CxX9M5WCpalRU2UTxRk6UVqOGLI6DCQhl/V5J9u2Qphf5XGq8GlSpOFtaE8BpeOUR2WlRYUgU1wx/8gRE9d/K66vBP1rx/hFz7sAQfcSuZmothhM21sbBg6K4ZFkTMaEkqJKVfEZzIaEkUKDlkQgUKqvo4gaP645FMaX3CvMsx8wjPR611WQBfE6Xdhv69twyyN6RMcBs+6Ke0WYC2e+qxh7A5FEx57dj356AWOedEVrxORU1+Yw8EJif8Nt8nqnFTXsqZO0LMQQexx/wr2tDh3RjnMTbFI2D6g08f5hwoSaJaJDV0qUeVXJs0SGa9/45x5IgOaLbPJHXY52jRwaasZs47FAfz7rA4N/ccDycBUgDAbEMkSKU50hw+pGsGaOjHd0nWoLtmUwTh1BhF/s7ha2z6SmN4MvIaqfSo5lEDQU9aCKiib4IxgUY/9LtHuKUt/2qeb5eDtoTuXsnuM2UZyug7yDTb71lVtD+3Xu9Q14ImWyiBPdIUN3VxZAv1Mv+7/FCN62NhuyNjcSSQ70I0CD+UCRLvFL0NSAJ5TeFrxQ3j7Sqs8PcLOHBccMTmm8RgSo9HDIjfUY5hE5FI2EiMR2SYRGHKWICAX9J4A0dxp0RwCELf461YBSKBGtD+j8zXPl5+pBLTgonIYqn2/U9Vm2vbg5IZyl2vaoq1Dn2KDoeSE0Er70DPQaMH2BypxQmyD3pMuLIrt7kOTko/ffEfH8eZfo63938+cQ9wkP4rwQ/EfmhrSfm4kuIGaOPEnpr+6EqB2QdsFgvmT+dcss/AOw1NH+3aRTLz1AqU3QWbZ5/LaxkgJuj+5tch4qbe6634wjlzuT41MBbBLl2FdhDwGgU5rwfWHjSvbhUqDNOx5P2PW17ZCriVoalYGIuL12QAO17jIPcyrDoHgCe+yps+KW+CAOjA6Cmx6PRW8Z+k8HCrZskPbFm4pcmTskOiqhAvxIGintc4AcoXQp/Lu0eeyndqDNw2bT1MBty4UYvcPoqXt7LIeakonjPHCuEcS5xFRLPz1MHXB/Ul136dQLo/9mlO2fWQXXGxNyr2APoSealA9QOA7S3q9BjPY3EHyILPaReTJlKo7WtZ4DaA2336UiCdgtzJDNt9qZe5W0qWOttc+rWML5i8bn3pgKIN6IPa+seK7bL8P9tseSo1MmOf4lWhekdb/+WM9mGBshvNIITrwJLxJSSYXdSWkZOUcW5ofpQ69QkvXcqAUXCiGAhFqljnYkT4xc7e2ksf29oOXttbiEqqjE4TVTxhZoyo4nw1ANgu1f7zNsj04F0VCCKRVs/T2jh5kH68O3/Ai/9CHjicDlbY+F8eDGQWYkiukOFVR6NaZzhaKgch+ZLAa+NYnlyP4Q94vmhyGyPySee/aVkgkYKuHYFOzsdpGVL7D/xVUJ7agk67DAYfu6GAq1oYsuEO75/AGsmggoUxwG6JITRL68ZL1qieXfCVPVe/AuQVEyI/1sXCNyrDSHRPzYPinGudpdLulEE7hcAxI2zIT0emgKow1R//T2RiX4+tMVrqFk6upcmfL/jpDMK6cCkyoEGZkLkJH2r/vDpnvpV151UhVRmNPgs9MEhlK2Vwd30crVou9C81ZzAL+HrmNGL8VQRDx4WxErjKhjsucx7LLDF7jgY3d/xZki/9V/g/uVgERZ1QHsRYNpwg6zE2DnZGpjO3tOd/vCmXsLDvmXqzS+IlKdeSFQW22uMCpmfT1/kaCQQQUuPooK23e8+Or41iK7r3gbqHwJI/AyQsFfnZEIHbeTF7KfWneuH3P5+E1u8EXf3TkLGDzjfYBFbMjH4fONXKwqxkMVhBXPBELYBju64COnsz6Iz0cITCbvM/WNbqz3lihixqkiv4BO5y/EOBNZGF16CauPa4JVb4S3NyivHJX0QXSS/RQ1h7DwRNcQ72aMHfKCFzhgfZa00w4obnYoxt1UnVIQOpYmKnx02dleqQ05oLLKdX3RMOEslu20AdpFCuLUQ7hckoglOGTcYtMAbFsqNlVw+vmZcQJL/ro4P46W1xr9S9mpCOiAeewrJPDozyB5GscSg0N7jzvA/Cts7G/E2BNXIwK1jMmjzJCWH+wje39p9Ch0Wyl+RPQDa9ghRJWfWOx4T6237n8iFe1crCo/+BfVVGgHpIcx/aBM3zcFV8XrY9FYp1tDWf0aF+ZyY21hI+CKZLG2qUMyV23Hy+DImc2faxTfxAFfnL5mJr69sqiSBPAtY60jehrbaAQeot0Qvzl0p73Va+Hra0qxmH/yeUNw2GnG0BNM2M8W/vj5qngNoy6/WK5yPn1XGKT1+pf4CDUypQsRafRCjyPpzGayFATh4PLDAv7IYeG+w2fshganlelHxEXOJV4BbXr2qns2R9wzd+xp14NCq5WG4ZNEX0jhRM+V32qZmYS3kCxC6vPRqbjacK+pVnIXAni3rDDNSYbFOAipI+RlHIqqTsv967EM9CECI3VWXWTLNwZdgkzdcgNbJ+lGN2joo/gL9cv5Jwz00L3CNZUmyloTBsis6ZpnrLPWvznEUK54tZ2yI+XZPezXvzl9mV9IIDcnPP4kFqsz3wjCmDOWGkgkf0jGzYMDi0wiZ8hmHYY0uRcNhz5jJ9DIr3Kdb4F2Wifd9Zm+g+DS4X+uyALHsc8E8eorJYch2v0dovykpa6p+hRGFm7NfB24J0g9tylgK/+q982pXiwMFTLDbr6q4Cnz+EF/dzUbLjq1Ebg6BHmWx9zfX0LovtasMF0Fmc9bU6Vwfpfc/AMnzgTZKWjc0Fve+o4/SminpXV6nouy/lZqVgkj/HG2JmhmGfBsYP8dyC3b5oemdvVaIh5I6356Yxz2+YP3RFaPTsoEeLSAJgSgQ/NiTphFWlH+s5yJQNvSUXNGW+pV9tOWAQNRRazglsu+wI3mJ7e8TqmWC+QTZHzXRuzuiCNutCR3acENd2IvIuMykid/soaHDh6IL2Y0Dkawkmn2AJbDezCwYxqEoDX4QgGqddpFPyhF/nq+hI8+HLIi2vuhmup4cZn9btJMeQQvsHZlBaJsiDLg76orilxz86S2S0joEk/PrLh2BioslHzfgzOzSNlqUu5jR5A7fGzlBhwGZxo/i3tfIubyKQ0rOcQ+sFtRzkRDcqjviRq3o5kAfNeXS9hU7vT41XyUCpp14MkfSK58VG/V5wqSsP0mlCd8KHvyisEDe4E1b8N2ebJdyoWUuJnC24VblU/XcRq/sQkTZQrKL6fsC/4O7R7dbhfCjO/jJntmFa1KC4Ea126TBIdmSExObgU7MnReTAybbIDE3JFd0FEYiqyF/sA7dUmAl1jr4yw6+Y2n34tH2ICyursyOMXyHHS6QVgZQlhgEpImuPKVs5E0U3U6hlG7YtVUA6yYChiKrQyltrzQr13pl/2ETkPfeJ0UQxtYpGEAX4vuQqnZMwWE4UKiE4PSr8g118tfwByg7VyUJy5FBL7Rpyw2EIN1kGi1p3zcdwgorl5bHvoG7ds1D7zxNNdBOgQ685dIdjrZJGe1j22aGNkkA9XXdPbQycgULC26rCWgCFF91UWB1uEmzA+WeUe1gYwM2266x8IP5G9qjEr2gjZZZzWHxQrJhRqnT8AJFVDyQg9joq++73wpdnh8ss0Dg5roj05MO+zUyHW6jVrgu/Pgg8so2L++FEr2ogV6euSv6NV8gajvb8aTN+Am/JN7Qf3V0vZnAIj+Fse7CplxBLGgQY2is2okPcKyH4zT11VIm7F+y2EOSO2+2v9eyApOapJ88nMgVG9ep/cmpLLAprmWPy3OrTypM6XIiICNs/ABIG5mh7KYAFCIoIYk33/qHlaaotsmW6mQc2Jhl6xBIjZRXGcGJO+H6KqxC9v77cfE4me77RfNs6PMU5c3dmPsuvY/0GT9/jgjQSxBV+msQ1JPFK7mHhNC3lLem3rPPhiiQSy7Ll6hndf8rXFKkK8ARQNUiclgqy6b9kSl0xLtVsXGf+YVdO05e0P4WYmQGGBP29z3BYIQuthgnrno0MJUpFOA+odo6lh2lCoHaUphIMD2dKgVq1j7C6ETedhjlZ3hbA9aJbOJyVbbJof/x/tsylsnCINkMswjDMLsqR4y8ynwoJnUgdhkJkiVfyZSZC6j9qNeS26OEVj4LKO04GuGdcOJyjTCbCgZ9D1IQLMqYa8Hc5aiSNNCoUujHbo+CrH/ARiWhfK3CizVInJKV462Arf4mN/dKVYAcV/+k8h8B5VfAvRtRKEjc2hOr0kxKEsH2c7bHjn3Jy4rJzVV1tSPRpUE1kh93a+/b9J+txUxd2+6SYCUAm3je+mJ5m0ieZamb1VjnSpg1n7C6lKXQ5dZ7JS4HtLf4OBx2h+L5l3xnnTQs9KL31LAZG7LGaO7xI6HMOwJr4+ui+KY1Yg0Wvo8shqIEfvjnWAPN7djEEG87kYMO1axxmzomycvVa9XP3hJ++2jWR2WaA6DaWfl8y9NNBwdz7NjoWEgxvPEJp6jUar7QYeCnqnc7qamR1NlGiNhyD8TJ+egC8n0vB+e3SFja/3/YtjwZGOyD3S9mYAEjklptX7xfs65RRbZ08jzm+C09Q1l3ZDeFW+yIbi7Y5IIQPQFbnCRpe6K5vx97KvD583BeKsWmGoGzsz0H7lIEq4S1mVxMyDj5xax+k1DcrRMPCrlaRsFesBn+lfOysg3HKcKYdFPKyJ58BH4KPApyKT05iCaC01wvTTSJtroLP7r+5sry7PaY3i3UVKfoukAL0brCUMR2BLQiP5h2ns2TjtPvlMMkT9KzxifXbkf6/kSEfcS53NNzNRhZImGRLAXhAlWmpIFkqM39A7SyxJjvzqM4RkumvwZLKgkk66Fzdxe/R0aLULnM86A5fcx7njsgIj2AJHaXFBcmgUlskRpQ4cANzyfs3PA4bhC5TzLwLu2d7v7kmFmFdSGmtoy2q4O8bimJJEWr6VE3aHrMeqskbwk2QA2apqgm2nsbvY8KQFZk4oUiYxBd77sucg75NvksuRKlfH24Pzb4DNNlWlCzIccumgbIXx8IOMD2iBTEQc2/VhpTiqycnDCq6a6UDISDliWNUEVwVMBi1e2M8TEUlb3++OFO5m6eNyp174cJhWn4zfg5xqOOozMehZPPsaR7lli3Aa0Jg/hRIdyz3Gkcs0szQmbe3dgpn1fza26PoD7OUQfIgtDQ09Tc0OrGeK0zl2U6YEgWGSNcT8CdLdJk+R0IRb0RwQYoLovj92RK1v1yCATsvd3OoSnak3E5+bOXLJubUniWQYY7UKJvJZ2rxLaEWRiZWulH6QGtDISXzfSh67U9cifV56G9e9xl9sL5LCaGjKxKzPpvGEmBySFceqnSwdKXCRtE056jd71bXXqgdh4JCAOHtnbAOkqrFrprDHrXZci7xiHBkGI4CoLUnQRMRzaYKXiUY9ReqA+FS0ZLNh8FXOwU3POPXtJxZhlfFqTCHYO2s9bB+FmHfNM4/h0JaCZn6q3RzszYAJ+sq0BhoSmgIcQ21goF5hl5vDDjLhpa7L4GADzh8iyK85Fjy0oH37Amo2p6uaiMKwDdwHw4SSeE0yqzCzEZpLJstBv+Z4f8GACOAWYccfHWVQQrXW/+bomRJ8B0s/UekChQcRoHtjbfz/zx+ULWnDGvwlPGe1hTZfw8xDGiCGczBHVOCHIw5fF5zq35kt5DHrk3ugTRPvu3AU4GXOWjWcqqqvdbWjTpU26doMhDquBqJT9bnHcyE0wTsI4Nruk11Kkar2OcI4yVRT+DBHoAAY9Erm4+ZXoec3ya6nLAFVG4PgY+H7lTA5zorcLVwMYLmrMgN1VHx7xK0V0rCgBgTUu1kenTfSBcB6C0k+yLQuw8u3Nrb7f4VIxdfuotHYy8g9wrhANx4bjZGrT0C+WkdwyTtkTAaT8YtwAa8mnbu0VchVGLypHmaxX1bF15GM4V0PYU0bThOzPk9x+uEo6tgPy6TMKQhTRNuwW8XjncL9o+iAmHq08ojkWlUlznUXoX3y78myYxO6qGeXmJGPMz/WLDfnoptRRXwNcb4BbpBpcpgJ0PaXwMHQL/FXpFQDK3xdhx8pk61WoNbHRi/sHn8IIw5ixVJAbgX42v/pfX3D8hn3loXjHgi5uJXVAJdzxIIo0AUx7yvHfpexygfovZpqKckFAznxBrOxTEFifdZj70Wl0sGLqN/Uro7bCIxsZRzoUHa9aSd8aGcjJ3CUMnHVp+V3GDBX7HB0OmHosqNd/8DOniAZQ2YaTVIXfy3YygbbOtdhWOL7o1rG/KyS8GnfqAAuZuLdE2KvfWyod43H92rRNKYWl1vHHsP3tBgbzHpj4AI4CsXsf1sCk75SzrQyVsAvbwgJjB1D44i0WmSi8L4ex+SIWXGjJsn8nuKjzEW+SZ9ZVng4XgUBXPiwqnDk7dr+PBb1ZqSiZLt7N+6HnYPkcSmGBUR5BKcBxwPXhQ9xieA1yJW4z5iAYMIrixtNXvfmXXF2ykk7t9omC7bvc4/2jsvJLqbM1bSEz/4Uxji2KUo1idwpqwTDtYo+4h/Gy6lKYGeK5PQPqal+YbemtuKl+moevEV66YhhfR4ldlUa986sPDhR7/NKg1aNvyfZpki7hBKt45txP93TZrAtiulSctV84ieiwEi67LC2DiqRX9Kdr/G+1r9FaPrOKEdP77JvgwSekSQN1CrGrqV7Fam1cwKljAUh2nKO0Gp4n67JQTLRTZXkQLMrz3Wtt9tTV/HCUhzSBQlQTXHGfwJ5qcbl01LG2GneMYb+K0l9D5XF+cZdcoyxJh5yp0hgarzui+vQpgtef+hmiMSF/WoFJLopMD7reFsHQBDqH9aLSTgVizqcrnMtt+1EMEPabHRX6/L54vE6+aCv8hZMrXN/yVibF7av5Qo+71nw0WzBjGl+iV4fYNwwCfiOlG7oTdksJEKQehIv0URL66FGvlv0ebAHtQcYn37QLb8/DJugHNDf1PQdx3Y/YkW8rQxgca9vpRRKLBD860o8np4ZkiuhyqaQN/O8SbeX3IDScVA4vHyLDrfouhb9oq8E/HD32XXZdRXa/qNkmq2i7UwQBGZz7K6nmPrOQy6Y1HyS8+h9PDtxfd9yilbLOiigj2SHtnu5hCHFJ6JC2r5UFk5gWCsC2Xl/vqdMnq9y2XLI9WSrhfE5HufSt5cZT/I0WBc0o7cE6C6KIc2e6QfhRpHMtVQoTx5+hyIYsjbZR5hNcV25zFSC4lI749pLqekodmTaH40HzS//hJ/OH1/LOrYUAp2DY2XUbuvqgZvtNElaR3ulSzqLAW/S3pd4MPolIomZHYs1BrqserqSaafzeBLw7V+/NVxGoifeNJQ5mMTvVqBnDwKKk2cldaSID0kXDORwsBn2AJi3Y/DYzGOTV5i5W0L0AwmzODygyCj8roYiuQKW/HD1L79/HL/dlg7MhrTiB+IY2X+AomnmGp7N06k17LqyYpmMOCu3DecjUC/EOwjiYc4cNbGD7BAIdvjgHsWTsPwUfo2krJk305GmtXhLa2k6k3kmC9N8Pw74XIkpuI2H8WDd/beYY57g0WUlDVsEjLv/f+oB1HDU47SOpTEnggSk2x4xOwCqU5t1h5BC+YYvcfL+yBKLWBRV4CqjaEur9iQpfooUYI6G6E9jIEQsCJxrSETbcuBs37ETq9Fq7lFiMlbfWCGBI7FrfDRUr+RpS7NcvSjQtpjWkB/tq2H+MljWHpPu3V6IIjNVJ3KrmMf5vE/aC+drAy/8ZsQwVc6nFTjwRXmBPw40bOzFfWi0ZYBLL2OmmulEnZAIBi5sXrqhqa54+2mPyA1M/ITYXNUUFnkCmeobufEobIxYTVU/wllpySWiiCVezMJEtKfd1zqGKLfUEPtG1DsAQY5bHRexrR3Kg6ErsN7ljUPyvcxMkG4zCXws7RoyVDQCDBrOar8coMM2jqyIzN+QoKmP7empdv9O+rZXbr3uZMNozsUWSq7qfmh3RUz0eUI7BbGBmX2QfihBvVdhfcrmWyUVY2u9W+MGqY+Cx+gNsFDBfNOCAGyXCBo1OmG5huqc9GNOofye6DugAv8yRaPlj5C38hQiez4l02Ww8NEigJFGEHi34ATwxpTn7ghI1UAOAUUHBzhkhj9BMVJDPTpvd7r7d/9SrjAjX3RDts0wu0fANhjQww83SMgRg80LiaXUvRGZyyiKuYHAipp2i+8b5jdgre+rPZlXkBg2cCBI8O1SeKMPNo17Q04q+JDRZikw2AO4ZKngZv+vablDHRQMFQOSR85v/KV9O8cKfq5Kd4Jgn6kvMUT53g79KJattmgPDH1lhaadR6ttELUz6oVyuIxIh2d2j+iEUmdkL8KOZY9PBOFMKvHcULH4CIziZ7TZQ1sjudENHuop16e4HEKmr6M567ALnnCEHMqUaELyp0C0oXw6Y21qrpemHLA/zju/RnsKu+ACI0S7EIMziv52M85usQ2lgxG49QXC5l+lvKI4uv2zUrOz0OeERHaJ4KMz43+k5qCifoJUXA6EEuSdT067GNWn9Y7n7QS0lkUjr8+D8hE9PMaSp+J1ob24Zu2wlPjBtFNCqcrFdJnAm7iBMsciEe3RRSo6VK5eYFm0hW7l1XpxBoka4D2ibnvhOUitUn9FRi93AdlSS892TivvGHxjw1X5mdRIFtTRUnht3O2Kx00spoayqTFtLZLuUBJvVHceMz96nAr3rog8XMFBoobr6gxSA7D9cYNhNDnf0ao4h5cTzkWCf/PT0lI7HdeXFR9fNalb8xvJeUcARZK+HyQmpt0HUPGj4q/ZDsB8MxfNMR3ikp3V/LlmKFl+KICrJYKEL6MbnZZ5YvhsazQ+oEgGrjFmOT2+cnMqUry+zDFjPwwBbNX9MIJx9moT1CsXJNjJ7Le5qhsGKJpxw/nqHXBToadVobaWgkgryQig5UiD6WM14w61BZMD1Mp7A/OOAgQsAMHY8qbm7QVxKDeOL9kmlfxqX115h6ntUeP4SBI6tPHUNE7SP2lO5fUtCeSbBSSjlx0BlhLlv2U9G3aDnGZEH5o10yKHJ2Doy+GI1gqdVm5orW5PoNr2iaAinJ7t/ORZBtt3TXH17mawNQExBzidTTWyANh7+UOiCeOSJXHt+HB0DiJH23oXr8G9dU0LM6+hYINB1jK59mYO8qwUgyZ5qrtWE+Qgq+3zAxb9bwZio9qeciEGxaZ8Uvv2PImKU5Cge0+NLAHNEcLFQeJa+eImsVYz9wVs5vHGhz/EN3O3r/9CVLrJFCo+VBOvHQKqD2je3TaBfpoM4C3+1xLVXByjg0LDAnHmdvOV1/72uF4fJzK9M3D1GCWWcYdx+LkTrhx1+qu74tjglvUGuZXDl6iFcDUrNZVIpGr3ybBQTzUd+MQg+TWuQXMs8PsVOwPCOTpGg6ceTKgrbgrTMwiw2gcrk89sFmN08ciLBCIj6VopAjBSy5rzAaMguRKrcsBXnvzmLKp+a8hMdqGkLSf4w6jQGNHmOlsPiF6Z/AaFgKcH1m4OPcvhHz5TM2VzV3DC2Cptvg4pIdfHb+StDFn5s931dq3ZMLxncjOu5WERz+Az/gla46YKmBwIrQQ+Q11OS0JcRdZQTECDw0xsRXu3KQAY6QFVlBdoq9J+uxN+J5q21OOq8W9WHQ8oBd4vL/1VEzmkU42+Fh3kGu0Adm9qV4ERS244JMlgcJFgRrBjK45HATK6QhCMMnuCznzPVBrKn4VD6lCnFmKKS1mYV9HwzeeuyekE7qKrsiVrpaB8+vwBX4bCkxYIAH5EEFBn7q+CpylTa7pS1F6EAqeTD8yj+ZPIZ9dx17zddytIevNj8R15+7UrI95vOf1V62JdVxDB/TogKx157yntV3sCAfldXqEILfnXNx78tRrlPsRFT9xrNZoWfsZvTptzN+KO3j/NFxCoYRjrvghbBYt/W+/CysYFHYzj1vuHFj9Fv4jbw5WkBnFRMS+P0tU4QWBcBRQgqJ6xb3aG4NG1VzfEdiFYEYy2KC0heOBoauDemyadJ0G2CoWDjAaI0RqyCJlUzehrlyVvr+guHxVegI52ZUEyQ7Z6dFCidUZDQToyHV/xzd7d1meNjfci6W9BhniA60DmHr6NzQQnhLc566reMsEEYJEG3ckZmFW9ifNlXM3BgzC7yloDhUvvV6+cdXAO+ImnB5N1mNyHDHLybH4md46oW5fXp+J0L3On1A1e7/uHEjx6Yt/ov/X8KMLJLdfRPC5FyWSD/HVXhe9/Sww+VmdWHtxEekSF5erh4mZnp9rA1T5BaLzjO3dsyEEbg7JBkbF30bGjigwbTQRm1HJvyzrteGZJUeTNvm0hJlMKjwXMEy0jmRKbaI/Ivg9MILUhiIOZaN9yTiPgqHWoEa3rZX/vZ69K+1TJnu3fA6ikWxsyCPEptElJWtUWI8C7vFRWQYtNu6Fmtzj3fCw6C3m3UqpA2Joz3egnFVWbHiMZkM7Yq6Axrtqfpi5L8Jvvh/NwDEyXnG0OhFIEkfFxTrxJ/TMODNFWFMd4RKcReslAlwo+BGnxp7nIQyUchlTJqon31kspN3lwT+K+Bl/zq3R5x92TjmUo0qPdjz9/idzNiRiOp6eJbwfYIwbvqUkpLFBdh5emVdBs748ePX8ifdRkic0etFfvgSirx6IdyiXndlL3n9Pit45VEEbEjvnA2juFNoKr+MxWLjH7PitFcO0Yg35UzQSFAWERFtsEK5FHDFQkAoag9bUXHrF83IPP5bDN4OwQalFXTvIjrKpaV6UW71XKlOULKr5psB6JyFMaJ5hrKYlXmLXTXTttcFICBqrx9AjJ3x1FoRCWYlauDLcypJUP1LxCuw7h3AAZTNdBXxTiPunxUcPXroG54CaBSvDw3DSYiwgok8orv6w8WjSrJ4wZqtd3JjlJ0sd8MzLTGprxlOc6EXrbjibu0jFQ5RYai5qOfx1jnpch7X5iJqrdYJTumWWbbkHq01HFxXyN5eWIV/sjyz55dluySRw558DTQNKXPZE+HC1kC/l7LYeYYlqcXsg44hWsX7qgUd08n9QKyK8bH8rJ/P8l5TL9qhkhPBRQXS4igmGX2G7ewWsAGBFY3+mYEijgHUDw/VGVqqx+d6e+IPoIIQIQHDeLzoTMjxALej6forpn5lbn4elKVSrSo2u0gsGEzwD++QPi/HWkuVliV252JIJm49Twl9RncDS1Y12YgdUs7XZcQ7clhH93C0xiiBxKgfnsSyj2W/Ptl/7/UnXsTTYdW38uz9KFGEbHhFS53SYeKfCIFhFV72PnH3NqST8IGekVvZG5eszghP5ZkCLpAjHud6o8AN0l/i4ujzveZIyOQbS5GrbVbkU5tyjsuPG294zRn/UbzCda0mEIusiKtr6vdFn7BwDDMv2z+8m4s5fFg4/UXjTv6HgsfGxTpEvRjMlv/80IPWcurx9Ef3QIvcgTIbMeRGz4FPdhqeIuNBYIe+RSOhORUzZtAXQVXDV6DqlQEqm8ebF8mczAvDELHHIILOr//VhD3I4ozP1r2RbGIGPXlydi+DCYoV/yd4byTLw5cBFbgMkifYoOo6EbzHK6GEIJrpYB61cQK++N3krAQNAy31KxtmekY9Fg4QlmVXLVeTHuS7Xn/SvokJcYl6HoaLvnZdde0iO+lxtEuCgiaQNDeCw4EFFt50rkD1xSB8ujzzXuUmPqUMhkyqOb3k1txt9zrSeVdGqkt9lm7EDm7kbw7lW6/e94x2liWQZvYJ7IDwT1W9UEP8HO4+sY7reIra1r5kkDdnXwyRNQEzb8IzpoEcNyxbusB7Z7BYvO4Yv5xFaMkSlXW4un3FbCp9wBOdBtgzxwMsEAAKiJ8tiaxdrXTc6Y2ld9zfWVN6ChL//fZACUPhbohgNoq2Ytv/9cWffCGSZk91bnrZr8ua/RS7p01xmuWrVt8ZwOdSROFw5EE926be0KhbiKJb68Bgxr/lVBhIgdrBD6d3co15tCw6WInszZXEOcNtg/apCaNV1eN1rnDAbT4p1mUZ3KcL/eQKCEJV0eXDvAFC+9rL0YxJk/cqvsG7mUvzzycSSMeiUZL59p74K5sZtWkwnnXLLmsC9jySjyvqENpfkuZjKKgak7d6YgLeXKJUoKAFA+EeUGaMMfKoE/Wyp+9cMRxXORuqdUrxrP8oUNhnYj7YjdVK1Heja+uqMR+ow1i4uccK4tT5fzYJ74Xj9sba1sbqAn9Hz9tRRFgq4buF2BBVZAB37Xbi5hyxLfiOVD83/a7us0me/A3/mZqcrBx7jkp7Y2VjE6rux8869X9E5c7M/X8AundNhfNbZ92cOfc16e+DVwFnkyeqWodhDq/7Uj1IzcEOH3usL2+bWPN1bwti8buyUrffHRrZgYD6wIj4nZIBvsD2nW5yvVr7id3sZ62u8GhqZsGiSY5jAVzVG2Bj7oTsf9Tx+OAgWfORZbGs82srDdTauKx+7fVtxNZi7e//82moiDfS5hWoSYcEqwghRXM33zE7SehMJINGN1BeYYPjjqBr0AqtuTiX92XSrvLkd/4bhiXOGTRMf2Gj9fV3x+p1g/WCInIx7hMx1Mx/V2Vzgrhqi9Uk2c3GPGlDDqGNaX09cQujlqeaVH3OjyyHRRuWmUKS7GIvErBL/7jaqlf9t7sToah12c8/xEKcugb91MyUUVOXObJEIfig0sJie9mT2so6Ob9lfuPjsiqc4klJj3ov0f60X6VGOr8vi+PDVzOZon4ysdJREW7y9mNs41WQbb2xVgKUS6vX4qIdHkHfsWDAe7+mMC3GSyghdCYLWwAYETunDKTsyx2hr2a+HyE0HeQq7McWfaJFNMvW9bEjDbrSgw9A6SMKK/yoEt8yjyhWQSdCtA1YbeoG42ctg9oKa4zBZRmkhRfEKNXL0udNNK3NrWLwq5d3LLAF8NiPdLWbXkNTG62CG6+07jU4yYJPmz+mgr1WF9QUNkLvVN22gnxtjPjPpwmGkkPJwAwegf4YZm485vtOdCqBbBtR0qwPkksvceqgwsC4LXmsJQGp+uQrJW9FmjNmwCZG1DtCS3C5OsPkDnIUou1Dv5lyQuFdBCR+SxFQmW6Sy9cEaPa2lfnHQ5aiOZ1zdKUT+j/UQhbFk+whlutg7T2JZ7+HvgW1LQ1ciPZ6LK3UoMwF3rU/xQFvNGYEhWKR9DrQsmhlJ6fq5q4IParc94wXICjN1r4hQa/dCNMVG2KdFGlymJcm3+itYD2ITIntspCmJ4SheC/yU2jF9pilvaeCuTtTY+QWU/cUB1qLg6R208z39W/vNAZl3bvf4IidbAr/9pvE9SyF2ZOXw8zJQPyUB/f5e7aecgSggxa9RIpueD6FHbIbQScv615XMGV9Y6TAsdFWMcG7WQ3GXPUV5E/YzcBka2ZtP7WgUfpq3Vb5F7fjf4C1lpXjB44QgR/oib/yHpWnak27+o7Bi3G9ENYOrFIxjB0m/nhYmFMFW7k4GMX0ZLsYcHs+hEi/giKWAGm5hqMz/a/PSBV/Dw9XXOblDbYcWE0tvoOXI/25BjGJku4rr2LG05yQ0RIbc9fI8jpLrdOhQ9uVW4htyYcCKOS8K3QEbjC6vfDh0Y/tJoF6qwGXZLOtTd8GxryWW3FglpAnTlvXSFaI7UOmhWSWgNL9dDfQuO7OOU1+o/J/hUO2GE7trK+2I8D65kS7KtoAOkVwbhhPNUQ2YXZvXezasOFu+Fo2cYfzmEqvJ+ho1M1Q0BfWnolAYbQzm1H5O/riUirngwg+x2AMljTHC0kWl3+lB3e+kXixTpKdZ0KKMuip2o4FJeElQDWcoKqoMeZ6FibtxiSCRBsha5PvmaWfZyUz64lm+dTtslb0AtFKaflzK5yR5m/NPDqyhDuv3UEP0xnHyvIi5K0QtaB1iRYwGc+PqariRw38PUM0Q/99pFPMcJJdnZFRWqLdWxTC3Z9GJB6RW90NgrtI1h8sRTECB6OLQQOjm3qsiM0vdPLzkkZNQHwus+M2Iqu6/sFPUnrax/WtP7RHcWy16mobDkaP+8PeEZN2WiY5gOEW77pGYE5gJGYOAERgBJXwkOIKBuNCkzDfyPJ6zR4uP7tgYYKIN3I0BaTjd6Yr4gDkN2aWyJ+7VNXDYpTcQk03CmWqmvyFeUAi6egHJwKrKkmzIUTfr5QlSNDLUBQjDKCK5HtQ9pqIXjSB1SoyrAThf33b4TUJSLvkUhtmGLMD61pIFSgZF9cppNrnVgaEDm9wuo8r+omVEzfmBAgufhgv1S8XRFUnR7KSE0rUiOPEqMdh9wRccOtIIm2N2bYhtr3cmErbjsnkSD5WLqh/0qGpBgQUiVZ+G0CdxVkSW5MyXDP2qFzC2waEBbwp4mr/FtYuw+3dj+FaJAQC4znetVEGTvjzO8r4ALSbddO9DoAr/JbYv2hp6J5r43FP5Ixr6iHi3gvDYWlpVp7pu+P+PmHLjdJLSnq4fyMkrRDrx3k50e+8L6ocpXWjQMypgZLyv1fPdJKVV09OFxGMEeT7srIj6j+fx5E0pzZr3uQ59SyBTGitvsQ/fPFVEm/hf8DYG7FdQj2p9/VkMoNduOJWrajA81r3UNvUb6mEQSTS7JKmMv/gY1bz+6+2z7+bnPKX95IsKRVoCVDRgTlQnkrfqD76YVloRsLtAN5trd8IPOad/oiycBzFxQA6HaxBQck2HTWibp1wDUjYVZR6fwlZUrAGuFcC91/9li0CLlTcl83evmUmt7xQ+zBbo6a/xKh1cLyYYHOcKrUgRfEqdhSVLwctJMmvtlyPepfCnQ43jVjJlYcMJwNPi4q8bUJ+VcNhrx3bRD2/LLN4U6P0KC1/2mYUTD6WrPY2v0YyYfxwHUqJ9Q+k8WFmSG84LlUt1iY1FynxbT/UT5wm2Rn1eCGHWWy6Qz/NzFoPSJxhoig/5ODh44FVusR0DUA1trR8EfDfUIrDREarY+0MQJzKv6fnwrOd4InwjWADS7wjKwcyrWbrVDe5MYo3bhqmpCF3uFh5OLdX4d/tHrbSqQL758aVCotKpIoxxRQZCn9kxfIgevFRhACXdcXf+zYGdGi9GVXd2r3nWX8rPlRUy8tikqmCdbqLRrSLW/q90390F7DMnkwGuNBohQ2JQgUGFzJ3KEiaZ3Cb37wNHheunaRWl/8vEfsGCttY6vzn9WwKhwLDjgPdxR6tz85hYBWGWFs9M6g6ep9uFHlGNh/RUGxpwdkqn6z+IcQJNnDJbeB6HWVxstqsMDWpx9YAwr20oImdZxZu0SlGFk5piORujMbGn89FVZNLpMZJStSd31k+ZCjndZ/jR1KXspWZjz2jFxT7osvImY70qHvS/qURXiU03ggh+bfxdN/pHD9SlP4Ejde1bCjWNuVPTLb+rjK4HX5Utx6ZTmnNPCj1zUc3iwjn+gymS5g+X1XGeVoRvd8bIu3QwVVypYhc6EWi+fQSFqXyX0a09W1Lw2oj34bO0eD0qIMXfcLmgVELUARsmhI4zrv0+J5vAy8PjfDdmnJfYHQd1G5wUa7gCM1LYHxzjvVgYGQbhUV9BmtDpPk10NxWt7QGIBK2PIc2IUETWJzfGqdQk3h26qGOO0t4Yh57yupDfUjZEVFDYIetHP5UHBqBBMt5YimjB5QUURaJHNG6vFJNqE27L9SpAX5B+ycv+wJb8D7x77L+2RGvsoKQfU7ezqwEzw9tRe6ezy6SpJeIfxVmfSTwRgCSXTfzY2IO3z1U6zwKfWEVFLuLy2pLes0LF7GBJTUjRSF4UFx2qmfv/1Xs8Ik9RQihRluGkdoM/NXe9o10xfat+Wj3rt8tkQ9hlYq5AIj3emgpD23+NpbWAqJ1YFBsDzLW/9y6n5bn6XQe4zQdZU46/3txyETLsD9hKvtdhWjs+VD5+60WjjP/OKtMatE3bTmkX/OeESYZzdD14NZ65Cu9tXOUBA0XZ9v5Bq4wXMQvQjw3RRdAZePd3oRqgIhwGmMcBcand4b1T3T+jbUm9s7YL/hVL7y0y/TDNAEbmz2UNCysQVt/sSfF6giHGm2ueSoRNNbDLfnaywIK8UF0XSszG1+6rjnbtwPPdCJIFWgB7wyJWC/OVdA0xHm9B9CxLLhBe1irFtDgcrjhcn2MUjRbV9CX7Wg6tnW4QDlzDvolDYpFB36bIbmJC0uWOspGrMhS+dAMc2mAfdxMDNvnwbQH+gHdjyFT14GuJyPm0LhATRLXIJa1LC7wczFtBAjEaNHjiqldWyz9m7OGl9ANTOdkwVzyPU9YpB6gSOCkLJucpk+syxC4uptbcnaYtEpM/XqyVyXhSa1s/J5rkjHlHV3L6mSHcH69Nafo3BONOzPhb6tFXBdvOzKp+joR1vRsC9YGZMg41MfOExSW42CsOw4lF8kGaYrtoSzoC0sG1VadksC5lkMTY4vNguzO/gBGKJ5ZUCHUWPI++1UqXKZOYZPLMcjATcJSMIqIJsgw/PB6vblSthzHfLVV9stA5S474FsBXw1Me5cqGAH8x64ZHhyBFI3Tlf5WH6zmilRGYUsB/jcWPOUOZYrMeoAgtL7v56B/a+GScWIxdAbNH+Zasbh+VnxOeUVf8Jli/CaZ9Cmh2joewbcB6/leMYJ1llhM1dTce1BDWWf8+94oYgHb569UfxvWpsDUnRb7LB+gup7JI01XQBbQ8SMCRw4pkJwUz0yvwIQSvi9eLnMlZ4q+4GlEDTxrSFpA65gypyKrS7ji4zWKjldXKUFrOZmHUwAYlCUMZBEpyuUG2CaW8uJIPGHlhPYwwpt0Qu65uai32f6OlRCaTLynlbgUGse1h6oLVLY0RwZEnemr2gDPt/fdlRxG1VQkc2i4DKJCM2vAJQh/1RmncqkKXEEpRHfja/IXBr5NxEyEyQb2AKGLh33Dj7OjlZDe1qlcqMQcgX1rjkFfEdKx7gsVVTx0O0ITdtWZ59GiE5gz5UCdOlSHO7PC4LYP3jC7W5xdVOrQpNdY3n0K0bzpXvBy30xqNeiuNA26qB5MC9AhYfc77TkEz7KxE1qO09aDUV5H7YA/dSA1zVqYYH+VDj3F7NQaO3nix1MpRYrfvIe6zM2A4m7qTx132ILDaii4befjJsoxDL/MxccCnFK2UKQQxqQkrI7aAgfJNQznk+p/ONVizNJUH6AbM9LsuTTpTO8V2Q/cXA9CpEfx+mIKhYpk7YxwLtly594nGWlgH3U3SPBdWM7Epex9AQLdPUP2dVkviSdMbruUVNsOQ+8mTSn/diilvqWlM0q9gtHsjOwg3mcA1zQsAoZPGbtJhKF/ayfmSZVm5RIYGeRLnlIRQDVv6Sv/JyP7lo4Pi+cvhfOnX4RTW0XaAP3/k6ToTi+Upe7kl77ogyeD0x8jVeCXwsbQUm8G+jtwO6R2m8CWaJ5F+I8kO2aMCLCDARWxmZtcgf3r/sQs4yWN1q3lZE11wZS0LnXVTuPj/cF5Tksi1BpIVSy+006dzuJyn+8oYzhtm/6HiiWS2ZpP6flAi04PxyzZhePCc3LLg1SOuWyMImFMSIQhGmeDZPxb5FQ6toAI1aUBlcuBpUyyYYMRg0HNxK95FjxB7Ykm0MZ8eptJd3Q8On0DzyB3RWqPlJo3Rha3GRUGDa2hC9PjXzQCIOwCYFrN7I+z/KqU2Gmq0P5ngLgaUW/cQWqqlVFdWoMBSqT1Tcv3sWPHqyGtzH3PYxXwQsL/DeuZ7CIS31hmMt52aPpFUuOH63lYc9EfWgpy2pU7Xz7hfRYiZ+HyNMqqmJI7vh0yyNJI9GCaG6G3HIx82lJWqzrNySGbpMx4EdDHbHmYDcFaoag4msWVw0fYWHzubGl+8T1sMvbh4hyrIK5xZOvRDtFflFC44F7+fpnMWONn3q9DDiAVMeebfACbXw+S+KdpBigaFB87HbmbyITpwm2ttdUSZC/ZmS6G6gOnUsU8EkbCEcShs2ngOpUzRZEqTqVSgTXZSPzZNH5J7jbFfujUXDFt4IjuihXcvA9PkRnfB2XiQSn2E0Wmx7HhnlPTjFJ8fIVzHFKGVWALQgwoOOcATkqb1nMoJ2emXZ0mOAvo4EaiHLnOcURN3kJjdmC/Cf7gxoLczVi0cmIcUo1q7AgqXTf5KOiElmuGt04VAM3Rmqqvrd185XEY/SiQwU4LfrW09az+XFLmi30n1ersUuFJR+QJDlyCfqtsWwRQcAn21NMo/KoRJegkqReM5CJV4p3QHJ7gMkpIw5iyka90bsR8bMdxyQunqAsVVfyIz9w+qLcrjEUK2/caJ5YT4c1nDtx0T2NAX7cDRjcVVsaXcodhuu+9bQ62VSLSX5xaNT4TJSwmPNrk60c23oBu/8CkonFJoDYKTVZ+c8Lk/K8Qr32ZP6vKuU6NCfqPAEdzPUvMr0K0ZP9vnCuue0/8b/+zcbtyf5VDISv9T8bkDO7SGu/3Vg6PFHkq4aB/NTbp0M+nKpGh3Dvx4aIOFcUmkhzJjeKSt7F9t+g0GUtHimhQ8WSe7ytMbGinCKunUlKir1Vqbs1At5RahENRpzBHUYl6KqsgSokp9Btrx8C4bsGiSrJ9W+dnaxgfSgnePUqMqlGDgZdDT+I5xJFfPsKnDz07DvyMVNf1N1ysQ92+OuhlE6MSgMShCtGS0A/sr52JQkAsBSrrUxLB/dAyZEEzV5Akzxf85CJc24QJ372+6sfaD4ham/7Zp83nMMqma1vU7gwW2S/2AAzGiIP8fwvUd1PxjJt2++siRVuP59zFEvFW821pGFweJU0xQf7RPgWifmRuuggQ8asF2bBENcluh1GHQkjLf1bWM3yZ3a8eeizHcUDsy9O9CM8R25f4ePmhThKiPPAQIhMINLep6wIsCs3sBQJYpRy0779y6C/ZvO9DSKGkYe0WCT7UxWvcPdiPD7P9FuXPheZmF9/l89zZxubUpp3iIxcdz383g+6ejV6PtlOoxNvYCjalILT8QGVPe38lHVXacF5Burs1ehniOTI0DpPPxTpoTmNcBV5CKwwX85HvufbKgf/uGB/Rg7nsMIuPKhKHxJlSs4utqLeNekJizzRwZLg7ePfytuUwOf+qnNG0k7vuW2mx/JILzvqpKnrsKUy4C62uW/PzmQ/1Uv7St7ZhfJ5YV0D3bm7TeKWxC961Q1JeN9ebIt5+AkyYcusVdeLK9Bq2LUKH+qwnXbOQLCcfWQEQTqQMoyXp25/ZhF96xipgxOiv7wyiDQQaqc7/cfolBX8RTFDI3aaSP6LLvEArItPxkNoO05Tm29PZg0H2M4a65cNG3kJWLeicaiIbLoWEwtV+st/ZMnfxdCwq+xckD4XsWsfw76N4swwi0Ndy8yGEk1FWer3q5qs0VCRmrvrSIyLsDU0fKPtTlz34ElFqS6v7kcBx78WCJkBGb3g21nSkoyU0UzyHqB66hu3ncw9/m6SbVxTRI6NdaTnUnNW/uxfVjj+RXcvNXuyGgjgSPRGzM+yMr91ZvXi3cUc2h7mfoQbSZBRZcWMKR8kgA2Nx9ndRtCHUY8J5cHp1g9u4m8VMNENWd7gYOSKGuH+zMIvDPYM41TZHgFOnbYKeeHhAC3RPldwU7/2WgkLwQy+7h35ieyb6OgbOVRsnjvNyRkcDu87NdMzveuDWOWpJcLGqvRy0Fa2weHQPw+XR41P70B68TkubcQppXOInelbG0sy4wPwSoWNU4OJ5yM3g7VzrRXlwjLH8YXO6h7rrCJ60hVYQd7AJAPj4F6wHkfqJ/uyJV7QG8MzvaObn+DjoDcYsbqHALfSSoRqF2NZw8PKGQLNHYEpG1/pHcE8Ue1l6YP2lu1W7MslFNE5gH/T3amxSLIYvL/V+4MCGTX6tj1OV0IVKyNr8F+nYJxV/rw/a0bzPYI3NQT9ErX2Uj8vb39NQxMPFchCY9UElHLzdo36dRjk3Vf1di0i/TR4+Bv9T/0tU/96SOo+6L4Qy8pdcIHHpwTVFWzhZ7KNoPc5KdcXtcoxv/MyAR/4koCwXD2X/DnX0GWfJ/iwWF0ZIKAJHDkqsB7HHlQlKjDqJ6W2AtKSgjCRJwl0/sz3B48ytGT2T57qFyAklVt1yv/GA/lwnn/DR5rghqGEX0wJXe75OznBkRTXfz6zFP8SQPWF20U9XMzImcmPmXKfcKZKFPQV3Yh3SjZOZT97Gi3cQvw8AOZ/pc4nAH5rr2BCmabA048SyA5BrXaCrhQNWvvzL4qp1vmKjgPgwpxj2QeeCMGB7DFa8KH/iZjPIFL6xj8A4BddlR6flrbGTC1Kj8+wvo1KdI94vOZ6yyLz8utoXUJuWx9I2ZTyzY2iMa63/lW43eJvAJDQgXatvSLZhuWH64FOSBnTpUZnU+1y3ut2dfcuFFb9hABpPvD1+6sXs6kuBkdWicAA/I+QZYxe1fA3hvTMFklLh2ags804hE/GhnfwuHedlyY/KOPMJXHl6aB1CqaE8z31C+kh36gyGbxLABWZ8Kh9UBcEUB3A69hh0CvCAtk6GdzP3HnDYUFMp3E5RCqxAdYVnPsXVz8zF3rxvAlWP0rI5F/FRUSteMSqhGorjG2h0phsf6Zo6eRExQi6srB1iVyYc+uGiy08G6Pu4982PF/ikrEAKm4U2vFVBcW3VFZDEwbrqQYMIeae2lJAN6/Xx44P5GuYOyKNAUdPsDI+8I39iILTR1AIFcj6rqpyNx7C0LWGGyuT1+cwsMMWfqL65pbKEPgprolffU9poogR2MnLBWoaIOBjN0CVm0YpQeZKhuck+YZ+dTNGfFi1ldQ6Hrit5EoRSvLdVPTVF1oqoF6/T380tOTIB5LcopWmRITSZTEMb8JNXz4tnLS0wJvwPu0GxkhyxTmHeEakTtMwBpdC9fpeBO0CvsL6+EypCZJnUmj9EQnyGE4hecnS1PPOr2sjE4HjXQ1Y2M0okbgp/JMUNFzO8m7YOOGO4t/dNJktlfeiQiBiSlhz0yWc9a3PhKLHy34bXo0jYPKplbsc1C6bg8hNWkQeRPZY0n48+GCQ1OLwh6+KczSkKSDLskqctTythIPULNH/a4/AJWibrbihxt2w5Pe41BuvZaRmtub5LPTxElnjLnOP6de0awsRrwB2N2CfoVPCwxWsnfxpMyU8ig6x7njeugi/1ER7bp9oywh4VcUTYhNQ0/JYJcym/kqhRIYVzejsvZ0mWv7MpYAlOMYF432RN5Ey2qQs+dnTlOkjtxtlQUvFnDPT5/ztLC1aIBJwUPKzahYqj7xiLkoJpdryBKbBsFZgO2fSi/XPXffTOk0TIaX44UFRfVEIKnOGmOrcjr4khuevupFl1YTM+g0UMgLmtvkWIQRx+Bu+Ex+zXbieYmUkAidSuiQFaJAeN5Gy9cPwZVA73rKGX1nloH1UHKbOfcK726WBwFelHXlnM6gTWKT82BqVoFqmjJd8UPlg8THyemLr9eRfKvvcu7kH7b/QYXLwd6ZBSrVhSYHCwCgjev9xcC5BD1DtDmMgTtkw7AkU7ir/OpXjKGRChhXEtywXB7mJOSvj4shDawf5TJ+wsR8s8SafBPxNZsEWWY6xOZ/RxFa/Tp+nHIwpMhHaWgMJXWwdxQ1F+BdZF93cLHEayYp5j4WpL9/N44VI8OdiH0aOLt9ip/8dRBNN1CtM7UQBA/ccbMpF6ii/paV+W/DKMZMMyiNI6Ft011DqvV/4rs6kaNJxBLHvV65tVbgsnJSnwz5drIB8Q3UdN4Vw9/iEwZo1U8/T9274f6QNDLnA1DD9Cp7n4TWae7jS/7BGu7x082KHePm+0qVSKKTdHZDl/qko9wVnGQtZ/iD93c+l+9yP4DhkGNcuNm4l7TBbO8eKZ9RUTxJIqPkvNaHg9pqdQufdX+5aQMQk/UAG/C3PdcPPbsD/MoP8ebaFSSJ4yhUzsYHfJPHOhQdhiZKxOwP9qY2W8AdHHPrF8aV5WIrOQRrG2q8jKr+VDhevYu6YapcPADDs2vWzf0Pv6AVeJzbwtlVsS7kXy5ZyUxP/eEwhxeFtyz1x2uNxYsOnZsVrdLTlx0Idlrd7R34rIZa2CRlQ8hvre7wxK2U034qHhGPlNXVSF3vXtqNhLuhXeEIf7eZuDISynteINe6nn2NQpyc3IB+9zX8Li5C+BJZRh83cXXG1ffg/WrCA7lawp80q1YBrCbRZz4atld9V9qJOOZIw9tQl/9qBdd0XQj6mfQyVrj5kaz4gbhJ1CCF3tabwCDki2ICeQUtJxIkacvhJZ1BuAxkHg/yKg3hbtJT8P+h/pnHYux1nZ/7Kij5vGmznEVU97XpRBGD29ynAWt2g2ApzJJBxFtM0CqCe1aoSD4yGY8bqM+w9jFhJ57J2WiJ2zqc6coOq2Un5FXu8+zjjinisiTbdAp+ZvSL6BYuXm0/inW6EnQtH86ZLC4T2RpCrKuA0Bk5YoqpS+FXrjevMZ0H8x6mBoFo/A7OCMJHbODreXDV/WMbLMnrz/Ntb9QHceFORQnW4kThPfsoVkkqllR8wq9xOzAoifEpVhWbHxlsHylvtHoxer9ja3nA4XysiW6UkEOaH9rhkPE82+HafMm2M8rDtl2WzHPps9ooFZ7eF/pcb3inomxFjSwI3LbARSz2sq768xdeeGKpLiAwHm/tm4TnIw50MnfUHMJjNF2A1Pwgh3D+TiG9fza3zSbyFgmeySCQqcL58i+TU5MPwWixqQL5OTQtmqIXyWoApAZuEY8gLHlqI/40Yx3qDzPooFwYdA87h/co1XeJjRsOYPjvtvJUojRCskxneNznFX88yLfOZB/IYVehP6PO5+uW7qkyxG/d4cIukSx/x90GZxkS178M17P+QOFUfGr+0IkaJzzNYd07iiG7y9NaEQRWwFaD3M8Q5HIBi/NegseBwOW8g8J1Jcib16tC5gph7K6gtQ5OQ0jCscOYzLeKAYhK7BpR2WiWfuIXglGjDSS2gwSlEBnbpL9svmKD0xCG47pmdDfeqbLbbiCjQvYui6gFJMxtp+HoP2Wy4JPzlpKRrifnWbbt4wNfIgimFz/ZOtj9wxnO1DxiaKAAFU1gPf/mGf+tE0xOHffRkxFETwsotexyhdGucL2AxkJrD9CKkeijXqQ5Op6fTYgWjIgNs8VtbBa5nFwD1fRCdY/KLKGoXYkx1h2zZesRdlCL8yQTEK/rMP7Q3sDshnMxgqMPhkkC7vAYrf1ev/L36KuKsWzQ9tuzVjmiMeglTgwr2FtiDCag5f2O8/s3ac6wyx4i1ZYAZ5+rQarmtLN1G3AfGDr6kJghZu6gnW0mknak3jD8dDzTR3ns9VTnKUaXsadIANXBtRvhNElMA3ZUciHVVe+90QRCAc3GSysfEM1jzIia+pgW56PJSKhn7X2XUxrZdGtc2/pXRlZcd87c34LBPtWMuAxMS2+UxoZophQJxiL42dU+8SvG7gKRePI39aa2nb8fihe+K/EwVEQZnENQiFxV6qgYzPjU2AW3kitdVkMMCbKKYy4vc0hyFvSMY6/KzKxDeXZHAiNaATRotd8+m2asdMk+AjZnGPdXRBAjFYK9wSHzrrHO2xwjKLiWmdD8eNuFOrdh0Pjxg5L7X8CCaL/RKkJxO/fKUmz5vIDie6+kgqR0YM8hifICSdckJeWT3WoAOrWlHpxI4pBWQBPIO7VGASOGO49MuNfWMj6/P4oEzAF2hoh17p5Gut7UthA76CMSo/sVBAxrRbN4EppIVByNL7fng0QBglfEU4fibZFydp+M8bxt10EUW2cTRI6WlIAcK6FJ6wTKKJCnLkgaEOcAxfR95Xsuk4G6idlhpYQFPQKAK6vqBohfKL4S7rfQI3KBEhERvDPxUnU59+n99iJoUUncMzAlZ17qjJpvQC45OGkB8r08NuOxcypG0to3r5wqS6d1JKUk/cbs6SLumt2vCQzKJyCNFW5DWudSpij1moVrWiiPycrxp1X3y6aD2f1N9Nh/7DqJnmXs/8bhEvUsKEXe1GrrtQzDinaqFc5FNiVRxjjDzTUTgIOtk4exDctp5qAeKk9ZT1OKnDglQYi5gw/enZVqDU2mFNHr1PYI39FKzgpjIqOuC9byxnh3CQA+3vyWoMrz3vYDPJQJSIPs02dgOSV61I+mprPapr7KSMuJf1da9odq2ATHgxuOIeNh2nm2ns3gKC77D7kr/4J/ttRvudTcLvbsXgGnUzb586B65eIuA3REJwd4ji7JVOBGkepgGh9tMwwSBDVG4ojMQQFiUz0e7fNkLmVco0QAtTsWsRVW6q0ePLD3jqGG33TCC8gk5eIEItoIQG/Dwo8B3vNOFolX1v8Q1aFKQOa73fBgJ1ToQcwmDVAV0dkmwxIQ6phHoBbfArYP4uV7NJud6ojLStu8QZs+xT8PWC+2OkuTC5sMPpZ9kooYDJvum+YfHEnNKSBEX3E1A2Yc51w72fQ0NuxYKzrb5hy9gCKziil1pAP6Ir3VwoPcjTFt7foJ0mmrnFAjLZLEkMA+bSYhVh3jnEPdb0JfE89L2P8XWwap3zWUUPtnn/nsadXqitoTa5M2B4CW809f5zW7LlL6sOrPqCI0gmFyy52FRnx+oxLIGw2Lyu3idF/lBZ9b1n5UJUqBU792BLsSLF2YGe9eH9ob2Oq+jji8/LFis1TeaplbtgAw/HHpy5AI5vN2+Rz9I9Jt0AovUH7xf2nZTb2vufpkW2hXKoIDCI6S0wjwV50Ya5DxEgPbbdoWdhpULo4GDDUm12tDb6wSL2FFnLmn9mx3VevFO6J/VMVmaBVDvD0zFh+saaARgJH+0Lcppgeu/bavwEgFWALRtYRpkc+01VXNpFcCwYb8OydnQNXsObzmtrsV11aUY42JW7UQra1S+xbsyQqnKlvXHNP5spXOSfo5fmoblMNEfxWWIT3BgSIjnex1L0W5DzWDdg1Ap8+eH8REa92x/7VYKbSIxDNmIb/fmc9GfHOguL5puZmBYHbxHJPCcOvtR18LXmqL+oQGtkAPbGuQ6xChIMovejYynBEgptIi7aL/BTd8UKjB7unEwtxIZLyEMnwNnxSlHdYV2b0lLYC5UZeJlCv+QI7hf+UV2t9I+VlKuEX8w8XKHDw+AjWePhgRYhAlGT15lm+2pQo2rs2/8sfYn9Mo0ge3GazYmc1NC+al4LJN+RQevYaqOiQJZ/zeIMTcj2oUhnlX6ui//RRDwnWBy7ogpg7u/5mu1gC16TsTTxzuaJmdyaeTvaNkOCWU5FeqPN+lVuprhZTCHhjIRzF17vyO/cQQTS2qkP92O9BwSTwRjg85yVcMHC37DYuZKbgvlHYCidGawyh3AjYeqnYWYPMzan/SY+WKdNtwrYkdQyenwhN+eV7r+vbrWf4fhNhoW2KF1JgAz/kjQWdgNEHGIfD8zVgOjVaGPbE9ZXeigglLOYOlFAOt4xjHx5jAyzJX1a4crDCcdWBFAYD6+0ljIQaMexRlvhfOakcGQMm2E5QPMByv0XuPEumFrq1JZFbRTdPqWELlVR0+k3StiGm4qd4YlOINm0YL2clXOjuwNPgfvs1II8sApRzeAE7kZpgXtsZ3VZLsJdeFy8ZfsSVnxb08txc7JG0uVYRU3x8CNVsvgGsKpVaZ1jGlcUPvQuqbWw1wu25eyOZ8seY3LgDTge4kwZhBybS6ng5t+CF62tT1s09ggRZs4SxpA1bekHooRjWeciaAJYm9jd6OPOv18TSAA/nDR9MuWatQAjtEOyvB3sGAB8LOQJMVyxxsyy3fWlGHEnghTBk19OUqAPqNaTFLJ4KbC/7+fM+smBib6DlJmbEgzTNq+BVcpbJ2CiMeOuW0AROLJB7UiB6lEem0MHqiRAocmp6hQaqQHih/DQq58XxBw6VDPcWIv9eg0ejyjYMbkU0f9mZpxHs9LqI+qcUlBjK/uPTFCK/PGhxjRvCqe6dwnyBLDxrRrXTJzwQSJ8r2u4oedYtwzzkU05fBlM51ZanpANSdEAN3grdMTzjoVqacjWGK2ss+MKbnW66umdwf0K5TMlzpK9pk/4dRYuAbd7NvwsQobTPCYu5lR8zJkTNHCRFcNmDVyTW8I4v5TeGn22QkMgWkfVKmaBo5lvYYzLv4/4wRSm7MQqNz2KzxSNl9abD01TrXhA7xcSDlUVk4sVtr+x6PjJO1y/F3mVeP8Il9bffdZkgZ3pFBh+LY7OWlQlK76DrmnKkV45ipnNIx7MSzTROy7pGzW8ugnTVM366QItO0DSE5Wm9ohKXR7zxjgMztGQ/Q7LT7hD8p3ccA3J3EFFcZRadA5grxAeHQUPa5BRGdvBCSNv8heYZy0hB5XMevE/oP2cksYLiRL42BsYy1IAdeA4Hx/e0Ugl8KmZh2pL7A5obMvS98MFVUUblQWVBKj1bxddIcAcTg6XDxAU5h10U14B5xILnE0GGCjwmok0gZ4avDv/zTiE8fyPJU6NXSpvgL5vKLvHJCP26H6V5aIkD+vY3kvkSv4DGZF3RCRjpRqyr/WCHzL/Qs1yfrS3DA3HpXGR0JOEnoGCaWrdtS+Y4ky0rWuc0DmMVh3bCg9wZ4eS39dvq1O5EIfhKjlLKvzS1YJODh75Zt1XwU2AhlxeBVgJHf3q+c7l5pObAKoMzhjt5lrD0nGD8nkpebpGm9RVXzmJ37o654XwrjWtV0+q4uB/how41G1BzkLaXAGOyF8C38mobrcQFqDH+EHcMGOhNIdqTXMFmm7kLz8nFKASm7v2oDJ5SoQPfBFuzdtFZEPMIi1C8sZwpFCCoxAXX8ve7Q7aWI1vspRseH3gaZzuAZy40tIkgyFbPbkBIqbUw9m0urSIGsV9+nKhZzId4Er2H/Vnoontd7bNN/jtIKwHftco8ZK9qiFz7ldriZmUY9uHH2+1jFIFjhtV7uv0tjiWJQoA+BqXKkZqkczhMH0GKzOVyCW3q2alBPlocx7vq9wYRz02J/69+AWTZYZT1z68GLLB959RDghxqepsEcpiP7op8hjWeEi//1GSlIwRWATLn5WXsEZXMgAOa6CRjjNli2obAEOxW9J/tYUEZ4DjiMm1gz2SrJe+eeuj3CgiWLxpbbFQsDAPd+53Zn0/SqPtveonEwE0rY6wY5YlvPIDEbEnQmnOF5339o/xlV78SWb54L6BJSx9mWGjJNncp+PAQ+qBjD/QAsW98ZICWt6lKZbK7EhBbeSRGXf2sEHExGAwYkXXz9f2zrd2Wh+NmJ5EXD4ldqTbJt6k4440MLjSwcYb73KK/B31f24l4Iv3AX+S0+zTMh0IbYLjrIcAc4oNEYasFs++HF9U/fb7NTnl7tCAUfVmBdg72SkI2+9M3M8ErIrELTe1x0QO0bad3K5U5YLxuix59+7TS/2PPIpynWEibljRhbmvIClnhbFtufnr1rVeHe0P9ES20rdCn+O0EfKMkjhYRWbMy6bdtf8fg5GwqHoWMZPDPwQw33SiZspdzDpYyiXnX/eF8vwb17Krq7d/BFh//lWatqS5nFizMM3V/aCaqEofrTuD1JMLTQfi4SuAsC2kM090jtWzIfcIRRc3oZC9QHDKTd0Occoed0QbBVieZa/npRRRKZmHuvy2FjK8IrEDE5zDxzj9bu/0lZQBeHy2duEgNTY5LxN1Cq45f7WsRPLXDUo7gO7ds40ItCd95AFfmzMI38Qrpy/ij4D/uJomDMjzLq8J4suTe9wjsQuLVgBe8PKa1t43jcoMuNzEHc3+uw/LPgoq9v6w1DUOBeIQ/RHHN5fXqgeePldv87b33OHHZF5KJ4sMT6Ho0gJe1qs6w+iu5ZD5LOEQRNfcGx+rS8kbGfrRnTPKgaAx0SGl4qwo0GI+mEffv4y0w8P2+nYRT1fA3S1ccOkKtmbTB/2L+XIJ7mSTZHK79wVmg0hr3vQq/5ZxeJ7iPfczIHHPrUOr91cRA8HiQhm1kKtI1YNEH8+D3coTLf7u0cyCOeyG0eZubjlj7Psv2xjcvw0Ix/7VNDG7NMmpWdTGognKEO5J1c5uowS6emuFDXHEq5rAOHR7xH7gw6f3zZqA+9QcBrxSqCaYYwZNiDnIV/BRJ6GD/3NtBcnB2PjEyDvbHXruJtGDMpdPjM8DFS8IpBcPLtqBr+fStNS5+kHLkSW5EU7JjoCghk7K5BXtPNZjLshllrDNwshpXkalO8IJym5ng0No/S2qI8Vqsr0iOR4IAopEJr69hhNsThBbRQScQYYdUg08Oo51YCJ7zqRUZm0f+PCCvAqZ4xEbhz7tE1dTfZTRt7GYLD5wQvwgKj6vlYS0yAJtRgsqWl8nikEZL29+lX3arsZsyyuPNQD+P9xMGHcE5DLvWUpSrLV1NgZ+aR/bi0w3IbB4CmAkveBUDJ+OtNrpRBDY3/Yn1htUzL4WB4lB2bEL+J5PIfs+vMRV++TD+vI8I5C1mIg/4FagiG6Otx94ZjoIP4ec9FxDUGygDteidF6wruD2V9lhGITCFhwTYbgdVrbz+QKtPf5HumEpqnMHHHjUsVTAen4gHzdp2PsAQn0PeoAi9yvmJKAP1FNjNjMjTNmGtjPrHLonqB+bAg0wDf/28L4IZxEfs+vCNJFeYNJWmyGZPuChmnbvs4I/IE/iWPre6UxpK8Tic2E7DITTuc7w6MqU9Rb0MtYKSqznOy4/fu1YSL8+0nSjZIezkFS1Gr7xK9bp6RUrAQbmXq395QR/iYyPvxDUNkpd7jMcrZTi1OK1Nm1aLtgyBgi7w2kZ3Q1bXW9KB20SgcJbtSHiFy5jRrnYsFpHODxiIhIb7XT5MYAHIYxZa74lvyXUDoBGPfZWiwPpnceTrnOQ8SXFST47G5nbmsC+cRwVvKXEVYEVJD1Irgzwyh4vh5IeMsO/q+tpqKJl1AC4DOBkXwyD7q2lvgn4pv0nhPUAsq4xVgEa6p0M2ax6uR7QlHo7AVc4MsuUObGywN2anmw9Rn5+P9cqep4FrQ+B4R1R6XU5iq8hB9tmAqBmtrGFpqpi1YMVNKnvhuW+X19Uf5t85Du4XGmiQzCTfQfTqms2EdAl+OYuipidYAWWJY7IviOBoktR1mV4UTMjGvGXx/sUTbpYJy/8QUMKAipUsMjxxI7mHk1iafv4MDBcr5fkhN21hMxlvD/qaIrOqZYKvaJDnb/Sflk9QbAIcD7Ub40NJc04o0Gw08KoKrfhwEM8jrGo7Cf6tWnV57pfis5F7rG1+SrIvCkToVvpPr6JiG2UVjaz2EOAuADkLMavbhSAaLuN5QNN/4NkuQodadxav4fp6xfLP3xMekIty7VABX0UZkwLguP9YQBi8tOBEw1LM/QCJhdz+jZLfOrmxBcOmb8EG5hy603qMJ0pVKoY8BbASOds6qFf4vggjiOY9C1BrPyJh87sWt4XuM6Kgl85BW2nTMibwFOja+X3ljm9ganTn2qGDRxbsSe5pJOK/vJQcl+7U8bch0u2pw7vJSD1HiNmn2STx35LlHczA8hVRdYEe+PFdipUXNTeaU4csZ/43LA7x/+s2UU2BdjoUvW/l36S4DLTCGkhcR1zCsZKA2/plJvWAVpRGSV8KKpYUFFJ3u23djAhZDb0Tno7sroqyPZI7VLnk6/uQeEcTclIZ3a3WOo+/GjKybNaK9DDAWerjzkoaOINDiTQ4VlU1Mv8GphH4ohV4ttkhfjqst/4JZ10qSRuVRnuyPbIwO48CUzc9P3b0M6CAF1fbnPVBWVWLiUXGxZAFiSZiYmfDxKKOzWWMELSi2phMn918889MJMyCwr7h5S9FscaySFtdJ8zbC024DXikcVSErqKQWEuIcr6lWgK7CteMAWx5XALldFvcMaozgqPShvKaEp/U8eMCdWidxnXD3dNphO/CzA8L10/URZi+nfntQA7zyWLE+9SK4ViLm4liHsch+o3KugF3E4H3f0iB0zAYLvHs9D67CaHAWDQAP4vsFqxKrhTcjItW0zh7UxmheanraJXXdZqggs8fV8urMTke3Y9l2f0ibg/kF+2ajsKK1WmbOMihEpmCCmftaLct1GbQtIiahjoi2zRVx3OoNqzl796MbMNPEwsw8nBhDno9C7Fv26h5Q1x8ZZMjcyOxvVHfsZxJAriQx06JqpDuCGVYsmOh0Z9BCnHxRGbDbjno7eifnyQ8FDDnk051TmF5Z0QsosXIzlPzcPrpzIKrZDRlKes7ipFE+BSOAmm0vP/JREyWOHWrp5dijUzZOlaNoQArDTHJcjWXBqUIPbuRrUBSCivLbSq/hmp767sygoRPL9avJx4XKlUMEorkx8Gdl3zXn7BYRxqQsQfwJ/ZEIAKyd0E7PCYo4ZiKKyL37sSEcNRZoToBD451e5JRWvBOaVTlnqh6NLSX0MJLZJHAwkdw0SkHs0F8IcIY9Fx4IdgAfzfjg4qS3wc6y95mWozYUKPpbJ1HR1b/G5R3cLnFDD85Vo7F2aoEP31b4i8UAefyP8ibDXTHmTHhOMh4BAz/GA7BmvimKTwhBB+8p/C21nqmm2/XsY2lPccE91ZBP/C60h1UcTczEwB2ter8mM67lAMo7IgZmTPPqZxOOkkRleQRSSq1tID1i4lbc06AulGUt4kzj2np9XHa4gzRlGMqyNHZKU65GexqgcNptqqDyq/PTA254IU0xvA8PP01QRUfOSkFaaiUigI++WE3HrM4/y4NPORw3FtV8QFqf0JX22cFdBY0iDP3denvXGxcIoWOrUhyq5c55IfA5u4uuBWGOb2cW4CCZYWEhkkfezrOnz/TssZI5LIOAVsQJ7cY2XNW8XCybstYTURH0VLAzkbC+ZoFLm3eQ7Bj10krB1usN874Bcy7ZCqeIHtCo2p/V+mW/3U63x8CTa1tuztvYWe2S/2giTqxcOJ684I3vlDUh7jzCv0kEhPTm5bKaFt0cJbwF61FI1n06KVk/6z8zlTNLAhl8vQ8g5XH4ptq1rNGv8kDCJP/Md2PKjoav7ev7qDEhUWvm7WCaYf3p/pOCct3YOVNtRaCn9einrGV1NtYF76UkX+J17jF1XOhpxnoKU/84losgHB08eRRvUWnTfMn6DntkFjvIGo4tDxGSpvBtbMvUub0vHmDTQS3F38L80LkSaaHUFi/XOI80ORp3wyNFdlXJrSxWqr/rIOUGZG3TcDbHqveRZpGs8YFVILGVENtklRtYCS6womSCrKAW5FebHtxyuy8cns5LsbZw4wCL1xd+Z8cljRM9mKY/rxMwmIOVFmFLV0Nx9l7N8lUtn6hg0mnsxxcK7pn+fwxVyrvZFekzoGGwR+AzBp6R8rCpDZDCAgBNSOetGIAcQe9lpWJnGXa8SDCEHXYLfXFfM/8FI15uPOoDpiPnG1yrG0HqO9zH9shsUzYjPwutB47qCPd3CK61xMHDjCwE1oJHCHOSq8qpVbsOf5b+/K2M+YfUSR0rEZsacXcpl6FLPtJmx4ijEyc27Y5QsN/Z9NtWyPsAD8rfgtJT74vB2xUWX+RaeVHIXqHecaj2x4bkK0LUXil//q2z2fqDt8iw9R1R/oxAdN+AZ1SshNRyraqLNIYM/8EEAb+w4ddS8FmHnqKhDn68wfvfjU8vcSsW543nJKwApcp3v71/gl9HhHBDFUyEHiuvg+7268FAoH3AaZWPTU2KHNHmM93tMWXycl57RslMQH6JegyPKdKlufmkY1xlqIAS/VgBTmR5qf8OwTSrQdYugLsg/CwoNBaPZhVvaacKr1KdZ32hZDbS1lgvWRtM5Ewv0PHBwI4AMwL2wBwam+sA571+E9QJdKSOOr4DGqVC8JTZf4yEpXw46zKX4yTetIL4SWhlwiISvDfdHGHLm2dYMR6uKnvUd6CfkciczFIpnC0iJiTFA1lxb3GV5YCiJQZKY6vWFVJhbE55kCojwMqMFTfyjSPbS7C9a7KWuCcY9zy6OaQ5M0yIA36lVeyXqvGrXLdIh3NLdv8MWFCf9KINMoykOnvBKL3PDrGbNm8+ls8LtL/CPvydPpoF8+gS7woYzEqKjV7XMyETYalcD8svXI1D1Y1v77iBcaYF0Gzbj/zO9UFlhwIRdBiL9rTq0uTpYfH0DbI5/brSY4kYhcP9kEVtsNPMddbGrSkWbbBxWQ+vVd9KEvwwjBgb8LRU9zDwOuvsQ7SMr9KlRMRpkDfFPaTYI+67E4xpj48bNi/HU5/bPqCy3y0I3dJnrkfyIRB5xlVXcrPDsqIaNRAtDsJrsO2q45ABwodCuQF34j243B6Z2Y7qiPndbiAxW+U1GD9gt3r/7X4mVT6+KVIBR/pS0bSXG/q+Eb/k/7mppvmOFoe9PURpKmt3sTwYe+H3AWmcpV+E3J3T+CkyYdGDfF9GoJXdTkXCRFD8FgrFJhOsH52oohOTLB7faDX/thMQVRcATvIFh4Cem60JH/xIHv7sHqN0ZjyeOKiTqHNzgp1Jsv3CXB7cvAkSyIm0Rg+7j2+3L5xV4anzHvbz1jmid0RLbCr177BitiEv5As9MXrfRKYT6wgESxm2vpq0bvtifN8nwsYDqpQppfcdAvpSLCJlH3yXoaVOkG7yXRpwCiCOPycOpXiqKYwrWQ0abuxPFsnOzPvtbX6iLTaptOYAdH79pcTazRDlMcfb/LRKhKCCVM6btWemrl+mZYEjVUMMvTr5iUgvEpGlC2UCYytt8bjyK1tn3OsPcjRl2VKmIfg4d6lXMyj6RxYHqrevQugs6VTfI6vjDcghaJ2e92VKU7+/yJQe81veVmhwGi8rNb053oNp/EjhxSIi+HdQfRoyjaIulfM6p9647jNk5rBnPjtNkpNGIbL0IArSFaD79LshNntA/+Gne5qXL2vOjEapvQYQbTH1zm/r2y9iXHls9efEIpTV8IRL9kZKLLDH8RdIJ178jDVWSZWjFsJKSPnIgAJIh4BVf8vwCRbxZTx7GRvN2ylZwqsZnRIIbKefNf1RrN3HrDAoeMFqJKEIsefdWQ3liqiWrS3xqmmGoirWTrjKukfBRudIef6MV34wpqtWXX3O27ALw1/ig8eyuiVg7u7O340nZEplyY7ko7sKuVmKJHpoXz0ZqwZ/2gv/JhvMIzh2jRBhWu9XNJQG4fKlcav+hXwSyIDcG5WxMwV7LiUAwbw61oCL8NTKnzgvlZg3+sbeNmrDAD5y8LghS7kAzH9b+nxiMYGUFh9xCnwyFQnROyhyZCHL48cH68czH7pnY3z6Nocp63Uazu2QKngNM60ZAW9YR0pesRut9V/XxrwkaOM9mMYYXGVvdoG1q0JziCWNs5dWdHu8tvScKtK4+h5m+QlJwQK8OLEAfKXUW2/KR2yScO06LrAL0djf2fJ38SI5wMDtn6zj2DRnmJ5loJ7H4wtbGA+JYHawMqz4dCTlzJr1zi1zUt6TsqH5f6BcmOuRQZ1o7B4Wlf12RPXQKBP58+iYh5WN/hgsnvqx6SE0xbRSsjSVVI1k5O7WolBFQwqd9qu+Jq07BJMS6KU06Z8zvfM6IulRqmOVKvnwUlNn0mD49sNGw0Z4ffN2UlntTgUKSGpZRZPNOHSM4dtYWd7mSPDqhFzBC8B77fG7RoeMPVQQGtPwsrVakQq2rRsJmMd6lMQPmAtPPh0yEMO0QHqIxMrZkTcIUGDnhmRUc6qpjy0vK064VIZta7ZrF6LdLpP2n51B76DN3pvSGBD6TjUtTa1R9rLCJKjkIOttNTVaGRP99XUN5rWOvVu4aVWqis32lv0rK5to2BZ3OYiN7IcwebBfeSeqgg9DbVHgD+bcii6w0j+PcEHY+TqB9SyZcQ55BlOWhSlg28Hj53Dgoi2Td9fqsII0uJsafdckFqsWi1csVnmYSKeqBf9JYuFu5ys6YgLi+yVLeDQ5EmVaIq6JslbAEk30O8KqfqfWoMyIUhEgQpOf9osAStiNjk7jk2hyorNqNK/sVdczt5R3qCyfnZH25to5iTXXMgP7OUGDCYvMRmQd6klka39nzdWAkGV4bUcfp96vpY8+siBA22qnxdw6yXSUOLftc4Mq4jDUXymhkgOgp49kb5u7r6CVdL9ux2wDBpjsIoA7kTAcpQ2+1BBhnrgPhyLGc/Am3LGeuKfbVJeUJ651B9SmWfvNkaIuO116v5yEphEHRtCho7sPI71rYWntLm7JtDq84sI/M4oVL6IOpNYYtIpbJaKLvQk4M79IApWsWGX4TDMvCPnquSgeEFMIGrxLBRKFspecxCP1FGXCSLq702egod1QVGYlxcuTbvack7ghaXyDI//7lVgeMrDKs0IKlyjkYbxeiAk0gf44L1RtHcc1X5dpz440tetv6ui0FR91rTN5azvvHtnAw0v4vctr2+jjuOjgSCKFuZOilsJaa6jkvhy/XtYC4F+oXQpSrjQr2rWqlp3N1NRAzcUnvR4ggGh2pUQWW21Nuffraafv9qPxRCZA7xjIu8HqkmdIONNolkVjJWTkul/H9Mo5mqRhRImsJJlGUyB1CTsXU5IcONd3LC0ZgtSSi6ao4CyUOcUKtv3bbTMxzx7U9FXOnLhRTDZY5ftSz5xzZ9pvJv1LLoqeiUP1XpS/UCHAFg+B9c3N0/uVdhkVOIUStqcRkrh/WI05zrkPJQqHzbdWLZCSGK/P5wfLjDr8yg1OgiMrE6zNZ8pjxzmFG6Q6yJHua/eivWQCe2GYxLc6ywOPI4cqCgAgjtvACL/mHqVyRpZWcuZr1zKQffJeLnaoLlytlLMSiDZExu32MVNiRwHrD/PRx2Xnna+MfyvQwrNZ13SBwXVPLoDWefR62xTQoDBS9/gzbvPXKDuKaXZZQDJniqUzQfjy0gCtrk7rpe0b7JKhQaj18uuFARMN7rW0miAbzoczr049+K9GL2XxGp9ZImtnuTtZMI0qnn3UTsmBa7YUV1JzwADCgrq32i3uJXY7+hc64zE5MzuekYSqoJJFu5uQ6MEkyztN7UOk+rowiCLkKFS0nlpIiZsil2XNKjA3XD0qEpouolBK44afhWwep/DMc2CsfSN50/3j/UqUs79QUekYUJeFaMbtizNvm2M/L1AgpQpt+dNukhx5xWr0KPL47Q9SN+gCn4xGKfV9aEKC7nnEtwQrn7skSQ6obzG2LkrRgBpQkDAH3kvfbelYYAZOpLyuHAdng/umTt2GQE42RN2ISsdZRFAZ1Sg51ycOS/6dS3jhtDm1cIdQsBimq2T6xrJiAa5pkgv4u7AcVOhbAv9Y9eHJ0NKr1t3y8rFAn2VPCawaIDuvRXwY0dEt/YsJBiOOguwyw9quASd4y8CaMnbSmybgZeAVmVNLSYSzHMoC0kEecvtsEnv+UM6UCOpB1DI3VdtHl/bzzgUenF5/kT251LvQ0pbLW743hlZsL+yaXh0GD3wHqbOTZxwzMJOCJl6Ba4wUh3VBwdobsYmot2zuEXmSmJ94OCMDr2fRM9TwWmz5bnWIY0p7fECpHIQgrkH4bE+mwsAtByFQNYgqJxgrmYS7J5pktnDXw7tOmppO0M7o5xMejJz61E6On+wY9yhRLdM9oM52yOtymXwLCwVSMB6DcAwA+gKKmMgKUlg0GPDCSc9OhXnr27V4yAHK2JwxuH6SiSEfVM9zvm45Tpb+33LdE/0nm+q35QbdklZNx8kGE0nFpjzKkHFf0vK54Nfe1sHjAtJmT1tCzbMgZYUbiSQSRSQEcfLrSXAnmcSvr7AMqYmBycr59QBYneQhPZqvzoMvgeN/ZLnDw1VOIecVc8Jq976okO0j+toGVjCH0aElzAjB2VtFxFHVn0XxTRwbgoWQT+JZnVAECzYsV55qS3Fhvymze6QoPqdWOnspkx+T2QQDBWH55dO7WXIMpU1up7vraOumGnNLFPH1n23Hi2eDy7q+Wicp+P9/Sbjyjjpp6v3ZLMzX2d/FCM2yHxzrQL5CS2NPPCYcuvjIL+2jVoiC8jAql+rID+gDOgQHSUXLhZWVuR7vv4gKOQYsjG+45splYh7yHdtpfdHY/faFuJ3pjBGVD/ZutCbA3LnItjH71y1oFKZooWd6WU9mCTkUF48pV82dm8YOmEib1oXI9uAerJaNoDcKXaAaOh9+/15AfPw6wblkBx8M7qCpnT3DuR19dYsYsbKBj+/a1sarLHqnIeYuTLXIJExc87K6E1LGDKL/iDZCDLAOwMmqtzmqbJ/xu0hdTxGO9EuzXdwxZCE8vRwDTdTziOpy+CfvntVBoXHNHgT7ewDhi8xGI9R3vRhQxZWFW7YmKxaF4OIBUUXcmULXaHEDdF+K+TJWhW8HmHTBoSnSb7pY6/1MaHeN2YjRESu8C7GyDo/ELY6iaSOsGwK9bkmM8LlF8qc58daEealZmY5CLEkOztrRsnwKP2v8UMHOdOdvKuY+JYOlFI5Ttc92zva1pCXiX+FkMf1ywdleA1x3PVoMFSQZZdkiP95RJHwDhjRSKkhIbwee5q99gThPSCrmRr3PcTlCEOQoiZlwFFldFRkudpKCBkKsiATf99nh67phinBXhTAHWehz0WKBTMZnYBF7cmizViaRrIm7dZ3t9FRpYek1VFP1sBamDOgPx9Xf1uM8V9pUAAkH1//uwR+K8envBosxHbKQ6tF2AzlpcMInaIjwtZJxgoNCh0JFw+KIdjBJsq6VOixR4z/ADWqwY1qftFh1JntUw6pXUlmw5rtJ9BpbaHXPo0gWgyWjN7vY5lv6gXzYkhvqCsrF4EdL471c+eDjVPv5HSXVzJGIAZELhJXf2Y6wn21HOsuutJvdDksqe8z6tfleVOQov98XTR+Tjnq37RSlbfDZ1m/OXMSabRsCFB9vcNUemh2XLNk/8JnaScF13wbEEBTqW3J73W3CHkWGhVc6Rez7V4l43oRN+8b3Cgikzd3YoLB/u5bJTlL4EcP0TJKiGaGzQmJ0EcQg1GOBe9o38HnP7wQWrtUrE+M7JcmwmIHA90aVCy8lRCMzgcVq4+0ZZFC41dEgcspYeRf0gSK9Btb8XY9+PviqORqGzhb6gK2qj003iIiWEEETV3z3df1FmnnqaM03J37tMqr7bcLaBTW8X5eVnl8fTWOopMrnI/4ADdLL01+XtFpDjstkwppd/4WOhDMLbsEvv9Lux3e0Nfq4rpnYLlLjPCHACFc57js26n6y/VWuwiUdmO4W/9UhHEIZVeXfzkTcdAdz7vQxCsLye8HiBCxtsI+Z3E5gPv7VewwLVhf3PbF7hOV0w2MvRfUAgZNZkdTSkoyS+N/+XV/oR4BHmMbhn7+eHKOjwJ+2dEsTiXusRHXTCHUpnl1j7ESgcNANYr8V4q2Oj1tY/3qRzSfTqp16aLmLt1aKqppKYQY7jufJGtBz9GleAU20DmN30USuxxa/Pt5A9YesGamiCK0ss6boyaTteZWw1r5WecvgGngQ7I6d9S30IOdZ0tUrdYqGJp5LMqw6c+3GbbFMINJphYxIeYyBjblKfBoOK3fhbM+03+sF9H6dRkbOg+AK963Kee4heXv24jQXYSEpAsd22VgW9BMYb9+jrQdF9PVytgzRVHg07OKZt6SBfuohXMzNikC3/NqDqGTazfPGtXuiW0CrBkzmJMT2lFWLxpma2elmeUSl7bCkDYpud6ryZx4bQ6KDdbCjK5/hP1wC+OMJ5lRO1zw1QAbnrMzh5BY9oZdSXNMrkQexYQQNWfzKU7xqdw6AeSbiR8rtrvoxTVchwuDxAfdosGW8+f2ZpOdZ7TlVee19WI9mKoNplG8NMgqOM1KWXooocxEnseTskPq9jjzkrwH8bgFw+xzn31pbDdyAPagE9lRd1tt5GsGUgTW9IzXxzjYTkBl3m3h3O0pMMdPpI4Z+3BZRG9T6QN22DPI17dSAZwwgNeeB/s6Vz9IylaWavOBiEvBJenlDNsC2+jO4N5teh65hBr/ECeMz1AqcR2KjWlQ3Q2P6Xjgg4Ze84h1i8Ku0Ynb+Key0GUwo4T/uuvETzDWyPFHVOHO+aD5x6fvMlWMcdWlTP9kE9xX+S+np5ETjGxsC2upVzghQdY7Gvr38hWY1MeRrUuYHXH2IlfO4pVotaWZY7eVzxAaMVHsH/PBYtpyfVw96fzkF5eXa8QRENgswYtzP0lvoiSbeUAGXoyp0zdOKntZoju7SANgBKw2frLpk5bI1pIpCk1SmipKic17cUBHaMCAroN83JFzZcUO6svFa07pkLBgXsEkFn5E9GnPEhg7nR4lnCABz92Mlcz6eiSS85k8elkDU/CRH0ZHJJj15YefSa/ITTrZdlzYpeVyqXLVTgmtZCUAf2stJgTEyV4Si6EoA+tz1yXELVj3nW5tJzMNSgQ8D+tU7odO63O0njECK8o0PlH2E3Krv2vv175ECkYZLQbWAlBqi1oeOSuS04oZy9qJpBxKO0tgLVLtNy7Tlu2U9xOfVOUwt6mSkD76p0wNYqSoZzCZHgGC8uj1QzSQQDVC2GlY+zcqFLrEvtELaXDwBlvx6oI1tjBX0HbO2Za8kh68I20pqdD1dRVYLoMXXtAbyLCgGyY5e51a+OWV7vv+xfFgjGGI0U9PicieunvTW065NxmhMnudpaK4BZw2tBrJ2pnjDxQ6hIcGmpRWxziLWT4MiQzPBgRtq9toZxLQlmoRysh5PqmklkvVUzJhg4N5O43KvVlAmqhGSdAxyutAtkNYj1pQzruf69A9iEBNvJAJYcb0IcW37Hp5Gt/AzqNGsBxMGJkpD1b09j1huP5vHFX4Ia4OFoQmXd4ijLvwS3AOYXqNmgEEzzWcpjhtjAn/6AWPsxuvfgmCwfSW8nhlb0APho7SI4kfkaqD1+LrUKRGPO8DEOaZ1Mif1H1bZXf//eFpX3AD4I0QxHtX7/o8Zaz3I6g/voaNRCKdVypw2pKv0wTnvHXVTSTfRri36ACQXMASjpUuGTwZir4tpe8NkADxJe3hdLKdwQVFRC5aAdMIjTLYDo/2IaFBCo/lcC3IG6/oi8T4j9JJTCGMAnGcn7bar4Ur2OHeUP6jxgldSM3ntM8gotYRle64EB4ll0gAxkI2VmVdTld3T465hmopWVDSz/Aw/c5JXtJggcLj/muJ1fjk97Yyn4J5jvRT5RO7m7ph491VEkuYSScWrVDM7Lx1iKc5F7PboqMSqKL0o1SKe36VCGRcfDAhWGv0zpY784OiGowvq1eSDLCUMdO4SJYT7FVOAGuSxrvCmDp3oPcyx9CoIvonW6j38f5iIz2G1B2UFcrmPnu/m4H36F71eDTAJIvhwwl2uNlZydRWZQaOfP2DQgV+RhfASKSiflAmYkoU46QrIz39+9+ukVJ42aGkXkSEvEpS0vw5GQQKqWOP3rjaWW0ErXJ72GZ6gbV/qN2CoUxHRl2Zru/BlUoguM0AHtDhZraRcBclUPvW7hi20illcdV/8eB0gTwa5iAnuG9yfl18JKGxC1pylFXj4BjCSSP7bujgytTQH6gx1VSRYWjQzBv0gnD/X6/WWL1/UfHOk+1HmeEuetA9ZvmyIkaIcPvNas1eEx3IBiO0cKDJUb3t6IXcMInmSG4Z1JN2iuOGMy2yLbs9njCZ790F7PNDJgjSWYqouoBhooAxOOSpAYDuZ5m9EsLtAZUGk4WyglKhO0jwEK768hjcy8be3yvtuIQNSUKEA+X/LCX1Be21/QWJ75e8sZHOtZBwACmHA64Gq2KPpZW1vF08ViN6Rm4nAnnE2YoSDYiFCsGdCLjVydECYDwynW2HwtHAR8FzOyCWn7Vb34afLqabwFmjFmhTOid0msHS57IH6hnWvoiFe2bLvP+J7Y4wqJuCSh6ZsiM1O0k/roxcuqWjIWmV+f5OEFSUFF5ZPd8Pwe2l2pUDq6OXEjtCzA2EFtq2Z16hLs4ZDoLDqhD8dfoGz8tsnOHjEDxcC+9G83/+gssq5boZJI/VUrSY/r2+8SMFTuT2aszi5/E/LphtU7GY6P/UeCpDknYGOL6V626Spip5tS7l8NPgMXVpRrhdEc5WuN3LWB//X4Nfc96dXT6NAhJbqB555DMFiUexi8tjuKcWxVBCTVibaDJuwqOtofAdsoJGep4BfNZvSzhJ/9lx3rXWk2YpWQ8lEHZew4xk4RHpF4JSkjaqxjBBTU29T/GThQIANkEa3hLJ/PmN+PYjfbctrtAXVBCMvUB4kCtrG0XY9m8YbeSJWSiDbCZEg6HmL0HRNmHQlfXyasSwxbKfhdnnjgw1rnWEgrx4EPJxOOn1jBD0MfkoGD3e4EYVWaCoUfvw/mb2mmlJ0WEq391NRUgG1R3jiR3dpcrnUrI+u5nbGpDAlbE/79V3Prd7RoV05Ypef0E0Bc5YUvuH5q9x3pNsWP3yU52g4rBeCHM6NpmobBPvna/gI8+YzIJ2hyGeQBCW14jjXE+oARXbhYGyPwEsLypDX3EJfLvrMlnZdDz1x4TNKx8zMN7KYCaUwy2Zo/SjwibOA5hviq7FDZu/B85oVmbL38jHzVfzesdu2kjgJG3V+NMrmvHbw9XkgvDcExrMnSXPZl0GFrViKH9vHquHT4edbq4O7VasINc3SqQVuROZNYFQMLyD4qB8LqqBXhNiw95nTl/5h1+RQULt6hAImDlHIaoQaGES5qtumS8Nkv/Y8Br7r8FWdrQOuZW09Pw87PJrbEeALyZbq9CG39vEcyKuKlGoxIpLFao6Rf4YV3rGW0/H8kupDdNkSIX0JMR7jUvg/QySvaVoVpPH5nGhYPNG0Pq3mG0ppe6w+iw2jQwwxw7wbm9tu1f8hLRyDB74pfVoBTfZN1jG+ULoCX/NR9SYA/iaAjx1UIxDiwKSwgtAwCUiHgrESlsrZw0nRqZjj+AlyqkkOL3lOUl8SoPZT8ESzxzDTJlD6a22b9ZjjEpYZ17CkC/NCoaEyrLmi0fvtVBq7ZanWmmyWKnSuwKUEy+LDGVBrf6BAHEaHarv22EyefqfOZRnvj2oDM/hfZjrz9Xgl/EBXdLn0kenLxFkHk2JZg5T7tcnMF4JAytWkpE2VFjgoGsqD1SwGXt51Mfb6YPnTYIoT/6rqHyGEbcfP8BGwTKrQ+mUdijyhnxrjjawMs25NKyharL/svC49b/C+opYEuR59oS6Uyy8PZ1Fo1Fu1IgSHHKdSsftR03vgPXdfAhSFCgEoJeXSfQ+xLqyHGOzJb3lUcW+oMF2rSNqGvkV7T1h6NynTaCuCCLlS8eVpf5dKSrBP1kvwl0TRZ3LKGyvJ4pNPeHq/Tk+FKl5uz7RN5a4GWv9WIpAasJPoEeuitywpT0E2F3zwKw49UvF/KL6Q2ZZ6juYtOvHoP+UUS3ggHav3KzwWaA1cDOeMgUUhEamOse4lAAX0t3Gwm087F2uen7NhfLeWcnvUMVxz0i1Ea2x3atVWsxg3OAg2PUhCFpNUsi3EI59s/PPgTei9vnq3fgIxDJVEhS9WT1aHjdjVcU9UGR/O7v8gJe6h0PQ7SsSz4AqOONVleg9ArXtPSsxJo6u4GhLk3TQ9get+qL6EfzT+2nhihewtdFm+9o9/AR68BvwIbxWX84qdo73WdPOKTNF1cpOtFCWX79Vd9UrBfprhtQQLq2KwaXao0j662WRyDq49HP5OOerZx7Yt5XrDqmQDnpIi2rIBDLICDxkYxxSa262iC0dZbRKKalKyCsFdMakldKdmyGladjp1SnRyOcR1PO5h8zdmDQC6A9sP0Di2s3A9Nolnnn6uDMC7d+Db2kV3bw/+Jo22xicDF7JivfvzixNnJtk4JRwJRm7RGXtHA0OdRJg/wNAnVL9QQd80b8r+yvrDk43CyUj3GYBWRWiAAwmUUc3aOFvduFAWWOyrMSJMpUUaPYaL5BSuD/6QOzvgyr1WLdW/frtSk5g11f0D2urrpFRs/Uvp2UAPJefukh22CmpqEjcp1ZMw+eYlTLoNpb6aINqwvcx0YeU4PnoFG94QmeKBtpBS6JKp0607IaGiW2HwN17gDO7YtaEwpYeYHBWs5O3/oXOayPiBbo1oJOyJUzp4FP5x0V6Uv/xG3Z+/ECOGL2E+Z9jhAUw6c2rl5sjdYPN8YL3YOhJDYws+lSlDVYKdsqmRhmTi4XE6ZpW7CdPx+oYAL+3yUZrv6oohF2i9fyY6I9DBnawn5UGPtQlDGjBfzI2mkinSVoc7N/kxrtpPKle0obZTtpQAP0dnsZwIKm46WTcrhfzUbMqqIWeBmJpfx2dIo0148toP0HIp9B515bYaR0feBcpY6g4jx6wr068dgkUDYrjkS+bTSMPsSrA4jKhg0rUuFwNztH79dkul/4++3N5tlqvAjLIfFr5ck+SCnrAHJ2bL5bMjmGtH7oKobRPs2If6N6UTxnHJg7Tro9C7bzXTpldYf7HnoSo7b/xLfevNc/O5yI4b7+DobeJapPqqwFFh56ec3WtYWWPQHyM4SjpshPXUP3wznuWUCMXEaPxyMQ/3S1uoZ4QPsTVsCFQUbxYY8NI4lwLy/L3QxHIBAcJAEjjTy8OjwTCYguYtXJQYxqGApDfWSlC1HzZiIpT1v8ITd9kVCzthlJWVukhtYElOMBEXbxR4Y8duvu13lvKfdPZ71LJqaJnQBqsxDAg29+j75QapJfSRE91w9j8QH24OoyIs8GLSUdIH2ZEnBzb4RTE3NW25HGAzzEXkXbJ7QXC5XUF1qIZBMysv+RTvMWn6cly2cKCOgkT9UkIO7JtMdOpwsBGGkwcu+NaYD51nXEiLhnGMoFo4A30DXTLcNBBbRx+4wdVjTfiqzY1Db59p5z/hZvfMKVKlHRhPuwAV71zZmROiDwRpP955TcThj1+k7LmFq6G+XtS+5nTEC/Fzq2EKgvtQaYmoipWVv28xX8uLAHtukaYf69jRBeMH8MwxJE5beVgxaKm7P+EMvzygI4sj5IIzy/Fc3mdlqtm6hmHxbfVPLGFwCf3Rbk7GQM2PiPtMcyk1gDpiyanyofZX+XzY0fc5rcBCqAB8gcqj/mN/ubTygRIbDUJYYzHXa0QWtVvKNdkTlhaZS5g2MACuT9JqaO85HK8uJc2+4MX5iy10BlQos2ZlbP4zyIeBD3ec3K/F2KP9GI+jThrEblc8fwiT2LrRXsY8Tz2u9PqqOxxAKDCSyv/+kcGVH7KIx1Qds07cgYhaOrLRBQTMd0fCjtJmJHz9mQNRSOWAltiI6/9CChJCDETJIOB1Mx4TUdWRPfz2b7k//Y4hC9hY2/+EFFXq8yCM7rD9IdeEbOm7WIjRliOOtdrczsnkCMQWnZIUlRUOEmk3zSGtr7x1N7UdqPRMjGoEP3YeceUIFoR8AOtdm6EDfAwA4ALXeG3nGk6GSPFeQLzwtBgw+sdAfwZl/M+piZJGamnHLImNhKoM/wtDVrzcIVa3JTbanpsIb48c4QbE/2WcLwidOHxmCw8h3QmGC6wFDWyR53KPbj0bXQe8rl7nxGJO457eaoGi2np4lh7WwSY7y2t2HLnxIu4PbeuaLvO6nIjozo8xg+lpJ+ExRDW5nvQAYtPF/kZjMBf3FEjId9+uYQPaWfdWZy9ymVvoUfwqL61lsc6OhB9NjL1Jo6gqDusSWtgZ0NW5oDToD9iUsYhmIK8Ne25w1+yavA6aY/Yyreeqk6eOqwnhOPALDeo6GvWM0XVohC4DQ3gdFpClHCTes2FmyIVorOXDWOuyNRRXkZ6itK50WQ1U3aSLDIilwKkGpRkH/IpZKoHrbbmtyrGCfom2DZHqkQcZ4Dc5xgHgnY+lF4U9MW2jMsoAU0ejjXFlMPTU3S64S5rPqIwOmzlYXTEiw4sxj2ygVDaIm1InGiGQxlwDJ5dkbIRcrn1clkCwZVDY8eI4DPw5zPbW3sL1RVjLKg9sSkPXkLmU4yanB6nyQ6EmaHa5e2gOVMzTwGo9n/3+MQDhU4acKECFtYMXuxHOkI/ZsXLoa22+0kXU4CiyMXEjnzyu33iSR3RMdtkq6L+KscBvta1lsU1Nroxv5PEKMGUMSAB0Ecrw0sG/X11d4HFSGAMFanK8Ivi1L52SgUaT6nCR4ocytjedk5yLfZgaUz0kTjlAgRmFyOmd6zQbWZsEra4QwNZ54keb4BuEqWhvPDdDq1mXo//+zkZk1xiVYlYdRlLJd07LxnnI245Q638WK5HUCMfA/ymtHM0IRdUaMBTJZ1laYdyvFFvGEeb1rr9F+N2lHj6pfwDD4M19IpObVFlcrNgM1qEP+5zDDVdCnsjbI90299dfkXtWaK2rPLmREQtbjoNjmBmJTILVcXsZL1iKu/pNIlkf4h7milQW0E7sTwj6f5B6Eam9EMXJFo2Wx4Y1YTNOCKEgu7WXJVFH5CZnjYmt1gUJaPdA54z/xOtBWnj6Y04m7OpFjRwX2kf5UJ/znQePtQZ4S1pDVgAMgoaGtGfntFbXvZJrNKsrMdEiZ+O5AWz8i4TqYyOnCBkFrkuMLu/uCnKWKZp5uGmQrFgwR38sGozfrvk3+LvEoFNH7/Aa+1N4oWvpycgxltIdaE/uM/LkGN8V/AIwBLE+PZiXIRsM3k5+IMXOwJ2hSQT2sGC1TyVLKEuuM3ZqaOrpVRjCz5QHAS+H3CR+bG84tNSE6dn5BAl5qPR3U7SKLPFwnd7iqMMTSqYFYTizNWz9ft7qAfM356OWAt387HQFTaDMdmiLJMi/rFe4G+xEv3yQMNampUwzOsfccItQPuUG8fPFSzfN6wWcf8j9Hn13rbH1ClQGPZYBaDikj61pSnuxFeKp1zfushTF+ydbCa32zUvGlslufToDUfvt0XldlCdKc+JZfl/IGTsH5ZW3W19s8qI0DaIhtBTwLg4gDj215cxd9uHXLUTWIS1lKJNcHqgsm9ykuxkiXJLNEd6Ac/bmI87/WQZTIRbvRumVHi+hSZwLD1Fpv+Zz/QmjU9UIjSwv0LaJNGctzt+bZ+5E+dR1fi5o6tedWzx21fravLf0It8AnlvVtptnHYIm150yzzSnOShnumO5ufduaRW5n2nrwZeAikK45EocBlXa2fg8PYVNz7D6gcatvkSK/aP7OTniOMWoDj5STg1MsQKKcJeRLGJ6wrugAZNM/W9FG3PqLo6X9ldypGF8eF88vguQwOKmjfY4Uh6QUbimzupKx6fUui290rBDA6os46aSBJWaSaX/YmsQCC6N8zPQXeQCv8v8hyAf60Z+AdPdoxNh8tkmbg53tJP5BVZ/eTy0YwISDlhvFysC0t7Y0LJaQy6LiwDNgSPk6nyX5CkJEj6L+oWZ64bUddSzzbxkkmzYQTWxj7bKQf/qmAVJXZsQmKBVIw6MlQoXtSpZijHtXZOBUrRdpFXOweSLlzxEFwkcWD6Gv3H0rjx5LkMXePKHPfV8XTAKC5zoWQQbDyC7KS0K/L1nkvoRH3L4mNBeUxPkz/igvhSt1G/prPkLbr6SQ9QJjNZ+5A3JBEuqgLb8o5k48AiHAGpoI8iHZVf5Iiei5U5xlqi4JF+HA/sQ3Y+qAe2bLtN7qRWg3vynTeX1921O1VKbAX+EeygKKCI5N+YVIt7bMBPV4bThQKhwNSiUeYP9K13YaTdl2hD0DdPnlDPJcpMdm+SW7WWhHXw00G85kfpDuApDXJwGLhUCLlZh4h3Io7A0YdVTkS8TW1oIAXXX8WfuXh19NQhJT6MrBVhWb1PaftxKxE5eN/JEwNygr7DECk7mjgh1H9WYGHj9gAQapREnYr+s01lbZkxcTECM7t5Pp7IdjndexM0+9FXY2Yfs9PaV4QtyrfaPenQwvkEV0TtTBNNM7lNaADP+phseiGe3yq0PpJ8670j2rzgSf17dzwq6P1a8tUlMo/djEwSb7y6kN1oz2mr5aoNpPe5VEY9l0URwNRqFN0NHnVKz3/xyHBRv8IExUucQz3zQeuja5uV3e2dfBdZ4PthDbtrdc8hFd8mAhosfIR1SlyPnHER2tjn9Fe9KepBc4521992DQN3D3yYQk3pnNVgs5YY6+2KgBAZPMNWSGeO33k4uy/M4kZMzANgAHw7V32zzSNVy8F+Po3F2enB1A5QJA1xVtQL4oPb+yZRUUH2liE5xm5+Eiu4UFo0K1JnmyWaqWkZz1w790famiFIMeo3X1S1pKWidOFd71BCNWqjpFbk/5PHaKLZNKjsDHdtvZXoPGPy1M3a+/42hIM6HYpqEFmuCa9gYJE3sbMuFw2RisKHcrXbjsGVjN+8n5ex4wfSkFQ9bFOK3V/FRapsQgqLwDQrHlbn75mmnzMwX+7+OclBrzcLsgq2gcVnP/VLDYXSSkaXOd+Is5kUTbjrmlHjzy7AKwekrtOMSpvM/MSkBvr6YHiJrRpNgom5Maf9In8AwRiySPbCFxQ7vhXJ9IUHgsubuTeEuFlAkOZhtWnDxUVpDrD5IxlqFypINEWKcUDQNI8CsW9VIi13jhjvxXAdznAEL4xtR1wRPdp980dPPrY6qDZBcqED/ghd9ld9LRfxm8Vu3vKX+lQlBy+Aoj6dMV5kGcDwjZj83aRKtjbdnCvNxlPRtLYOjRlilLPTmYKWC6tlqdExlyBJEr12QTOFdY6cidhxqpzvAi9Ldrz752b3AOsI4Nm7F8A97YugmaLj953kWroTkuCV2xpxE2wQMSEX6BjdmZFTAP5WNhc5uPwKfmcgNf6vGo/e0AOXrEBdptQ3inyaaADPEMKfgltQ/IMUGehBNjiKDZd83YV2o6dp/6eNWEZMN0V1pyfCchiVni3gaVHj/qpgpHIobDko4rtTS3MWX8P1ced2uqrptwgKue+UZiadHbhuHvTg4P7JJ24Y1c4LlFYBmK0b0yujo/lxaa/+eSyfr2wfxevYXG2LsLU6RSBxXdRJt9YGLnk4Acgba5N3TiivMZ++Of2uJW5CbLu3ZFuKjYcB+3sVajQINj9+5ZWn7AbZh9Sgq0ldDJy5G/Q7ipez6cz4mMGH1srxWrOT6dQ1NZ2nQeWIXiO1qgPzIICLGrhXjy7tvz+fJ/GPQH9aqW2tr/5WschYSe8fLtGaPH8fcUlrR3fQTZ5+PZBP94XpJnKS1unb4h6scOTSt/tu8v4ZQMhn24W7hZQBPLfS8k5ZIqiqwDz0A5az+HHdE5HHi1hZQzlQnApoXuPYpMXwpDiqx7PCNqi+u/2qs4+30BZaCQqs7FfG2IgRvQNxwrYQQSU+A5Pm92BCGHCpcdww1MPkLGOpC4gejh6jOvN8ojyx4DLdiAe1R0OA98kvL36hfUgzEdMZLwXR3YPdI/M832x7HRsG3klogufxeLfzqi6eJMh1g7zS80f8lF9vX+LxaK/I0yr715cvwuZL4Zk2DaR/WzHw2+9qiMn+a22bxlOZLGdIv33cQZf+WO0bnkZh80CbdP7E8805urPOkpXQ4zyVgFRigx9xfoXGgBZvTKET3DDuywqUYUpo51rDV6Vsr9ZWyXLTi7VK5c7ZMv3QEBYsNA4HEnMQZOd9JzhGIp9Imj9VBmd5+3cJY/h0nRsUPkCGBcy5vWve9qkr3QXeU+q0P2zk7av8N09uLpFkxbNqIHlQuE05MoIqi6jVUGij5e2rNQyHffyS+ADo9EDm4GXz1BS5De/xMQpQ5PiauMuYEQOYuy76iK/CsxmYcoo65hy+MAzlblEhINU/fGWgcdrQm3fE9aBzoBcJrvm6Qu0Xlo9JnN1SdXe2uKmOi87qJriCdgoNPqSm6iuFw6uu8WXMONJkS8em7qhiOGvTGHGXfosE11TPhC0qHec/DbLGnrS49BaM5OQJZ3e5rsw0+YgxNHwwwInZhwzS8DPi3E2YUxx1ugJqyaKdARk9S5JzUN6qrPD7CVOklX4kgZ0ucWAo3tae4ARNqkJwU/QaXrWdCQdZIWm4RlkiE9DWY7IxEIz/wyXvDkLsIPkntw9oifKg/NyaV5iBuS/eh/UonhRRutW81N8mxQXIau4mcWPt4cUzRFITItpAVu+JSTvY3wMKxhW4LKIcJgARiTqBWZb0YEi8dAKZ/PgZurwSmKb9GsnR6St9mTIUGDzY1TCcroX93TqTN8QtgmZnnzAO/beaGLpkj1wk5lK31mHDgbEj6Ri56NpqUab4Xkpb9xXhqUzdCEU9iKcqaQYVyQtCjUbP0bDXkrCfsJfb9SbfrSdQQwExTaqO0Fsab8QpA1ag6pbbuGnA8FyWt/5IlMo2c7wNMwSsnQSeaCGtN836b29aq6ZdYpJMDndapIhn8PSJp97Y1+uP+VtLs7Po6rkITCi8OIbPjeIMPhQUD1oM2Rnv+F6WnI9VMEz+3OBZZgc8q3HhcS4slXoOFqAA4kQrGt33qsrICDzgG04XWfS1Ak6a6ZVPQhYN/pPQpRacevjUpnyOdKaS9o3fMqE/l26ZUnwmBEZnBiZGJFXhnQ4tGVWtotrkTcGOeeguf0bbU63pO+EJiOPECnB8CXisQuGuPQW1XO4EhDuqQR3i1cDT8gnnPEHRt/HlViwUmDCi5EKdzvJl242ru6I1360R4JzmxcoXwNX+1pQTHgBYg8wiHTepREU8zyfLLApWiqVJWhSRfg1+dkT1t6YNtUAdT2OSQPKDF0zpd775otcriGrhrRkIZfyCxyLZeaLE0862gkLmxKUwf5A4Q9G/4H3UQ5JVwxqRS1k9v4GwXu5U7H3F5QxXDleO0ue7lYrrT4HVBNzlxtXHr9KX/DurXT2QC8ngVl+v/YpjQUZxSvvXDd0ynbNVyv5T9gd7Z631yEAAf84ow7b8lnQ3OXx97Dx9kDXaQZ674rAFEAkjIUAFRD7eR8+YJgIBB5CWozl+LcoPeFfM5Oc8J3uKnx2+JmEOK34TMmuuvZH5oHpmwD/TPH3/QJ4U6mlVTKVWutVEifauaaZpE8UXQ7ExD043rZgFKhw91zTCNliEAQvBNIIXNG95LNyhY2veeBWyUxD4FKCFR2XhcX8tDyt31RNM1O6IOh2IAbPByNsnmyhzcEKDLxuRlETAKWvImQUHVQs/zBJf8LlM1NtWfEA23YRl68vaeHUcJkJr38a07zPJWcoixYSa2NMK3Z0w5eV9kVDTMDUWxzrs1QHMU+h2rwCIfhsO8qmqzW169VCO9lGPKno0bbCzofDaMugdiwllWUGu2ivFgIbCIFNeZ1d3hbeJcAxueYVbOX6CiQ2EoA95KMSKDt2lElSsF/loWMCMY6mySYAzP5h8d3EciJTCqseaXR3Amhuk1Z98/m5Sw8CIR0hT0oMHJD8JH3uAmY2oVjTM0RklQ0b5P77Fc5oW7d0/XWZA6PILNcfizIAIj/3LYpM7D5B3Go28JvRdVMYcIbO1J55yUXMKfdzo2wEb9TpAtt4JeSpnsszagycKFxofbYla1JRfvGWlWqBV8ojn1yZtKoxkoUgvb01vNSaM0IK3RxoimAdeoZ4I7Z75H5Qw+apyPQlo7u1QL70rqOuBsG7Nab+I2GC2Cs4CRkd1Om/cF9rK8N9VLAneiFNmLYC/gEVBN/8QP3L+ejD3yuWmzEno7Zr1hz+n+toQxpWHLBx35MxHLM1GBTUCGuuVmZrknEvEgycMzV5gg9EbAjXkjTb4cD3XPbVQ1lrtjNLlQ1T0dkqXupoYNO+S/w86zb6V+HR/axEupDIQDXHBvvmUCqPXUEQBHCvIFYgw1VCOutWTeqnFCYBrYMj31ir/3ap53ItxHUJ5UqEPfgJ5xT2GYtrmUtMzhjv8xky3tzH9YPPRYyuSP+JtD/0MiPDCm6Vo/kfs9B9eyyb+R1Nib/65UBfDBYtCXgYx4aWvwy4cHqmTKb618IwMaU3m7RzXFfii/x6bV0ZXfbsK4FeMbQ7F08HNM7M/8lL0mB33aPMRcfRp05F3E9WQUWQR8IFpLGP5K48y92OOfXomLExS88agfVUAdiUwboeticixlVQYYB56Ro2T8CXPNGppJr3EilPblL1/bfxDbMeQGIr7pnO9t0FRqnEwRsfiEP47wmUfG+xqnfqjQifyrpmM06BRb2D/wek1zv5vfUcxg+wzuvM6sclAd08QcjXMoR9pDNkfPO/7quMPSmN9SvHB9fyfbCx5C5khcRuukF9PJk0e6iJYNwMEHMGgSsOuR2aXkP050Tuljru8i/I8ho/OhTuzhQa08uEAG1lmWZTGmaOxYvQtCkAZ9kjpi5ZwUXu6KDXVC4Bb2aqZnAD/rqzdm7miFPx8DWdwq6D/JQ243/GAs0/zBmTvO7Y7RONKxuuVjvSoNEwNNKiXh0Vdhy1C7UjpWMyCo52IthuWoAPjtShYreHufnNehoLcO1v9WNqoyAegb0Pt0s+9NHexOObqWJUxzyYyljCq/43sTqk+ms4MjFCGYL/6vGKwiSQx+evFPgtNqpA1B0kwBBZ2EhAXUPHI0pUChpJd4kQXK/zx9pL6z5NOYjxcXAfpQ1eXQD7zI3CbUGkQslh+eP3ytahURdXZg5EjIAvCedCcV1oUUq1XbZMullrQyAp6bJ5/5F5l/UsE987PCW0g3pqP+HveMLTU6lyBhoPwImtXa2i8yB+hlI+/PE5kpCea0IHt7m/Tm/Q1fQkXRTkGo1+OakClIgX8aFZNn8Ba2fszMimqUDTYdUlzBt0peoHWOPYaBQjN8Oc8Y3ZHMOPZfPkDcAcemWbvUeaORY4wqaBmBWyEQO0JTa9R782z3FbwhvUq5/ySXmu48Xa0boQGzc1rVuEU8A13iIgyYZvCqPo0mKyRvIKRD6MEpfBmwmcxMLDbV4CqS5DmlFqpPDMC+BqX082ie4FTtXzuNWeI0hix/a2UvnU3HSzCkOB3K/Yv0B1UQiYxCCyuiNPl9tf7EXrDDQg3Mn0ViEdDI73cK3CYhqxRGELSdudGkmFoFiePnU6gxiOA/cRQlooAary4ERhitsJqtsWtoLhNqhOkxdjNwBCdQR6cZ3DaqG0zGSO9tDsJNYwul6OCiFTbZ5g+yBHrbyhO8Ng678MhqrH5dGlQOUaoq6lYuaxO/u0QcaN71G1fsbapYz9KghNtHvsCEkjxqVgBI+nWcZmvhSrsXt9IvFgEBTtb9OL/BY0A8ld23WnUrXgQzqclKshHxM2FqDKLfq2lea2z7bpvk5n5LWfLoQWHUb4eXFVpIVM2tyYhBGijUdQDaaVTFr4bX6jX6OFKySC8/kLtZ2vvD4cDT4cCPXUEWHuSY7df76d+uyj/2rKREvzo+P3hqzYZ2ZTtv+yYOg7Yxjszi1p5QwC8JDne+7yvPJOxLhZaoMKRhsmomwsNutoDWFNBqWNImGBIPd8OSsfVURXEJTumgy/QRe8ZE+V+uvn4tf1Ap/j0ybXMDHYwPUHiCWclW9+QMjRwarPwOFPPh/z+5ts6TrSBW/1hRkpYQwK5MUz0wyq2EsZDuQ/b01PLaTIimm/FXccX1B2sJIqvVeYxMOnLySE6NUr/vhvI1sekfsMGFcaxR5lHOFNXLUKdsI07/2ANHFNEghQ6vOu1chkyRZjYB/f4ivyYUHeMhHTABFbjLozHaHYmKX1AXqjsNv23jPhbm53WEbvnV5qgYLKdquUw77nZL6gb8obCoiNLPjSKwew8pUA4ek70VzQkDIBy2YOdhyT2Rp9i+YcDkGzxvooBCubZgB6Dz2u7PoG4Z6R+pEXSY29D4QDDYc0sYd8p2tCJZ8bVQLE1TSnIbV60cRONG+MUgYV6OhSV+9F06Gr7FPxxngClZ33sDCzqdyag+8DRCcaFe2NBlC2FRqoVO+m4KZ6Z6BM21LLgoHsajzR9K4FAcBlSQUhphy4aGMI1m1lFtOoND+0DSYyGMHDhUj6gRUkgeQ2A2hmDJQPAE5P1aJhB4Ol7cpFE6KxdBXEguq/Tuck0sbmv4lp95Q2jQnCcMbBbWcY6cvCXJ1bsNAXCbdgHltMh5+y0mhw7IipmguxvrrhHv8lHL7Fyl74mtTHmmP3IxCKh+Ls6aKgaoNgTKQ2VgYk37zWUzT3COVlEiepMJLBXiO/e50OePPqBgJly0kgRTEXveB95V5faFf0dRvwUme7nX+0ZfybUUSzktmkjAzTV/PDh0QC9CDKrWKIPt7BIfXFw9MYq/T+/1/8ILy1bJwSZ9WyR6UlwuLVOL3wUg/f6FXp66M3pjv7iVuVdV7FRvu2FuGSfXLo6wndt+89hRydQsnMw/2lSx62iL7eTJtviTEm7LzDg2b3iJ6+2yHbOkMlV1if3ZggFzj+WSi3QHmgzvP4SspnI95dkIpOWUdaUYXIguIVi244q+EG9FansrAGmIKBkaQZsmXvv2hVDpc4en3o1Kj7y+jmq5hW6E3+FEmqq97nix0AeQo3t8Zo/KJkilOQZKUAvac+DdwodCKbRoTAwWiLFhuWicK5+/1ZZBY/FDWl2PXTesN+OWA1WT36nLFqVo+sbnSpMOEwX+ruv58jJi3AbpGNtDF14wiqDE6MG99MdrDnKiYyaCJ+zgM0x9TTXM9V1UzN6hhP5LSvdBvJMfLyEAurnqIciRHs95QPIUy9HiwllFXpS1Kuz49aW0adDeNrYwrTEiINPLW9/FoJTwRvU+zmARMwChsHDNwjOh9uiRLul79yFnsEQRU69AT4PtmBvCjGmKeB0yrWXAGEVSrXH50apZgYsoCXNuY66M7SwNGM3oYnJzZARvv/AnCsKlKB+zJn2JeaLewKtxFO9P5lBpUUh8+7gF1eyXd7wUJL9kU0JZvryX8lBWAgEks85heOate8FFOXM/wv6OkcfmpL3GetPw/OKt+NXrIG36mKBhUXpFIee9L5C3mBHmKMuezUsJuInK4d+qBkQXaVnbvfkuz7o1z+1lNyusRZE6TmPDFRs7s44qVCkTp6LOtPziL4ppmPfKwUIjCzHmTFRUwGnjmW858IrKLUQXYuPxEE3HP8yJrocGi4NwecJux646YV2DJucI5kWwIeARLPp5NSa3cQzKkbh5OOkXxThnQfWMDvsuLi/qO5dRMG+/0IaSaoYqwpyQXYjK2V1FYiYlHOELUnpU2OV0UXXp5twyFMIAMY6OzcjP1doCoWpLSDzUPc899iEbljLZB+PHNrHI5GxvJEDHtPS+j7As40hVSY4fKgGw8wCkIynwzsAAq2sgmPMxVFqvXL29oScYtPRJyEc1B9NPYRaklxJ7WB+uU3YQAlnz1jhpTb3cyqG4QHiEkWkBjfloeg5t+2P2Y0MlLrVZAA9IHa6cLFdAMml8q3pl7OF6aY+OEOvU4WnKm3SQNmqGazo2bAWrERgvRY4CR8nZMUVVx1hh0Tr5ssQMG28VAKIMA+Qs1lqJnPEmivZfLz3uxP4vH/c9wppTSHj5+KN5LtX1vIB8Per7zITa6IS8GVFCtJVIX70aj/KAWz1Ktw0I3NoXGpmfDGN/1j0nacBmoRfwWizEsor2OrNI7O+FFFX5BzeX1xbT20/xV6uB0MVSuj5YdG4+GYKLtTtv47MwJmmIf4yqDgGg2fKc2vYjyQaaUY6MPr6b4eW4d5SOwh8AW0Amn+s6T5Mi96G0POt0HRSeTh2MYtCnvg/Q8BmWUa6+dEWuDuA079IB4xY9OudRwl+DL0+XtOzN7/4l3xt5ZHWkCnvJ46e5dq835ScPhNRMlWueKSF6UdNtMmXcSIrrPRkR4XxTmkioXOjl6Geqcwbvri8HEMdOw/XApA5HbfjMOdK6FBnrOqbJNODOHAkERoAPFp1+Hn5/tTgYuw9Lplt7NlPXDMUCqdyi9E1zkE6tJrrMmgySGtBNtiR4DgbzV6jFiKYW0wKQ3Npf/vYtMnnjARBa4JXXKdaPcKHsBs4mvk44XfDztGIm6PP5v7F4/TIehWE32YNvX5kBJB5Z2bKK2sX8EYLBShCOhnUSyYNOrZKxEKCmkmzu498DQkNhhVTgGCDzW5lYyYo/WIOb34Qt2LJ8Qwr1HKEU5LKIhYvuCXwDFqJLcmSqLbkOIRzAMbsJlsm2YvsRngZSVkjaDL3AyJi2bAC/Km7ds9s4zkgaFe2jtgsTJc1yXAeo2F4yavujkpIxVWrNSQlaihBUkmi3ODmw4qc+FdVFCmm3p9F52LQhH5srpPAgx+tonsaAAaKfC1HdoSz/tL1bPi2+GgUesNPieUNL/c/hoaDQQb7kktctEcYAPE6KCTafZqhGlirYcrgJ0OHYMdih4nxZ9n2RVmw+ktgR+oGdRBD1HeX/u/9wtnXn7Yn/h9/8R1znRLIBL0uOtwlzPsxJMlaF9iDQfATl8LSczhHEu9l/CCs+inYnR7yGQOwEIEIHoO2pW+bjnU2znJtlrwA6EflsBSZD89Gko+ha5dZm0m9+em0p64QJasOPZ4kKuqpKvhqIMnQwFSLfgpidfkcOoynXm02z2U8SNDYGtg2tarb5+euZjV2Y+61uq4o+g+KRDSElsd1B++vyNB3lMUOq9FE3S9HXIwoRfV79ULsVT330+XE/enszKgCdS6aVltENwApXoWBhfr0zeweN3M1V/SQfHj6Et4WNlj2Axd7DWAedwf1J7W0jwc4zx789Y2Ztoeg1bNZO3OSC3dvcGsm88LFIoQwQJYKva+SXB0TS8A/hbaFXp6Yhy6/xZcKsi8uJcJjRjF+6Nf2X/UimZwrzT5TAFE9uwqfvHbO1zZUtDsORF4QsP/gh84oN5psDBLpR6KXBJYSSMU+6m1pXCEBBmzrMyaubLhCFBaHis6LvHZ+QUS1pprgWoZvJ/ah16H4EWpmA6aK404hZSWBp9cNlSW7kgOpfsns9IszXGQvrB3ghRiMzMa1xmRMs5HvpPNYnWteGH+HZcpxkk87bgslp63qOty7GW32f0GOomPyZNsdyc3PjnSOdCJTsmUPmG2zVf8s4HlgO9R0D4arLBAzpXtAjMETdDjJEMn+ZSWRPEZJIeiaRMIXxm4MzJ6oKZfWAsNJoNsbq4glY6p6q/CRvmxNJBYJ30dH+/K9anmj6OBxrUvuuv6BIRLUDBA+F97hLZfinBaqMFR7JH/1xbxkzYpIaPS4DoP190P0ZLng0QUKUElhIb8sQJIXeUD1ydjMnwQxTQ5i+CkH8jOK8vmANfxgq/Rc6z3UcltkYcFIGwwmxYLgr71tc5Hs7aJeQxl+3r06jGMpA/jqyfor5JCsh23fRHz+eZ8on7/jzT5j/O6qgmF+AEJlLTJWi8QYFiuWfMczbUxjnAOWiFAZP7WB56m8ub9sR20DrVzuDW4SXluBZgworZtzeO4k3jcM7xJtiPqjw/KDCntTZTgsR3CATHhgtCiyb3WEDrvjWUh0LN7xJDom7LxqrVA3foef6i/PJtOcY6dBKZodgQYvTgoPWb3IpB1+Ze77uroJQsYQKouM/C65IgTEJl9Eo0oPAr7SZtSUgV4zJMPNv+TWXyfOZdOCaOuPFzHllG9d2sH+b9m/0m1/XjaFYRPKH3wsT8TZSwMM3L12y3qHOAxQkN4MjVuU6lzYtFzzlaSJeUt9KtSllnrWM/xXJHiMkjys/ur1WFi6kuxarDzciVcc5t5vTdZAuAMZ3app2foEVscysMiNTnWBuKN22285V0PEFUgH7mgqH2dgphCWO+aY0NHy/vrE1oY6AglmesqpDLqqxMLAD7TwSjzlL6XNkP9vG5ujWuOq9dojipXtilrdvf0oAJsj6pHs2R5PkJWZZ3FmS1k1/b1gX9xpJniPEDgdVPVAm6XU4WG4CqPrqKrndKeeEVs/n4gMZSCt2XVHpSwp3Y1RSI1IMEpTtV0nmQ8G2CWoORWYy/LcQJa60SyqcATM9aoBPaKmzQGeNm0wrXTqRE/+eak1r6gwCSa+2XBTp/dUzUfow0IN+EQm5PJMhc1Vy8bo3aZUS56Lg3tdEHNcE3xOw23WaGWBq+8bgd8xEOmTS9QoKD1qfc4OwBuys69ylXylYh8VHBangAI4/XLDf0zI5m+nJoQpc4OxzD+CbIX1irV993hFBJ4dfNYFwivxLTX50gdEDysbbpwm74ObIHEIANWm3KVPC8YmyCVAGeCIs57ePVHSQ/oE1Ng13FssY0n4+mosqqAERYLPT2e8OqeS5on7Hn7R023rhijpHSumnUawusxTEtMm4KrT+4L02A1ttLKfNOLSpyPtC+IgvbaMKkwWJmT24GzdUrJHvnjflJDBNPNhvNUaDDOGlOuQTgdbsV6XRtot5LfONcjC2NeGd2MlOalTu6qlq9ypTsDIWua4VizC0NTsT8SJ2wVN+onhTZQ+lznJBDk+vJ5hYpM4OqcnmgumpbHmSUYhXA3q7+E2iFwbXhgHkHbtBgabH3Ob5Z9Jb3YTjyw7BAMRUNS70xZj27yub56DkiI9yBK7BGr7P8MwZEoqT1myLqILOqBo1JISXZCajUawrGDFWnvKzOJ+xnlckeu5TAeoPyykV5CdFOOczLiRncV1yF/cK4R9TmvqsZ0IEMsExjRAX+tfpRkDuBemaMMgzXJQRKuwcA/xU9km97NM+xLkA+hrdH5mJ4vyBsyodMaEQEj+YSs3xdYD3yVcO3H+xVIcyPoD/s7+8b739TisA+nKZOqvy87rgRYTFF7WCiR5/hWdqBgvQ79vJzUheH5R7QheH9GqtQ/xOCBZGekJ6Fbv99BJrc1GWArmfTvlEekMqJxdgvVSF63oB4tVuvAwBr4N3n6GD96zTOPlbzeHVP88xVeZ4x8inA1KnSZTIbQ9DAcZEqYthpebXmgpD7YfaJPlzEVJ3Bvjqo0rTSsW/JWt9AXJ2JUCgGIkN7HKb18ksu/JXDGtxHbbFqxtW1Xj7NOAo4+0kjiQ+rhIAxBukyGLLHMLI3NpVxnXml+dY34hf77EwOt+IDckn7yD2g6VZMs1vs/7yfj03+n9v/B23Zbl866Vhu7VtNdK2oshqDuN0nbJRmFwQWwskJFKsR1GB6d6ItLgk1w5mD+0QOV/UqyWggVjlb7BirYAlppbafQcyigNAM3s8sd7n91gjgVel7OeVnlFLtTDW4EvcRe+1oPXZc8TtsqZlLjWLvSot9GdqQG/aAswL+QjK61WazmfWe7iGpBy3LAFlu9Ef7gj7NCo7L0qWW+OCPm8dE6itIOXkZtzZsnsUZ2+EDLir5VWbIMQnq6Zk7xs88V3M5+FhXdA+MXCBwBnzDq7/Gi3gXj5K//lsUoZsxyDLwTmporM1clRErB+uiNOefGnzEfyyupj4+HawvbS6z6W3nm9WQrviclxhx00NntsmhxTNNA56pvSsCVpvNFvtGOFBPltCtQ2tYbzlmGu+wSr+h+a51g1leJS1QmNUukZu8kOsx614emuJdy5kkZXVjLcng2GcUgr9aGTJKZuHsaH+1eP/D2eoyK/26tyKdDsu5myyFR/Uon0Oe9eBg4qJy7GLK9aZn6PlcpcOAG0fbOOiCXP7ltaP6hx2oDWIKlwiko8JhIr3/x2y3MHP/VgLMbUrGnfaBbI1uQviaZAsiBPTMXRI2Ey6qcxV6m4M3YAqlBIws9+3WiPk5yKWeUefmqpJdF0iC7jkMXyofSRGrb7eZ8TSdDMsAyDUI2xYmkf89UUyUZ88dW0bynJx+rgiUC8V15NqQKbUyf5kND/dJFmVgqR3SHcCf/ylrn+MeJDhwWB+5Ve9He/zVsce3K+SCMtMNxwZx2Xs5NsXGIhB9eZB/uSgj+gqTbVo3avrHWYpKqJrX6fAPA7zwurSHtJy9OaS6gJ9EbUnV33MQAE6QYLLutdVvsYV922JEyFO0HU+0C6Eeb4zENNEpXtVcK53CIrBsNhvKbO9ZkSpKUFAMa268hdMDNMi5XZBE1aPo/pbmBz5nSMN1pz6NcJHzwxwrN086hcrfnZVyCPPABB+NkM3c7TPWmrrXXGFX5M0yEYpO4clIMFPNPytw3cFUAspkFgW0cO00eaDsAEWw+m3gglPe8upkZXlqGM2FCRni2jmxAsVeyX8OQviOCVIBgdalBkKOptXT+K6D37c3dN2G9oAh2+Oc2+rb7et+8n+Gw76iXXo1z+WvUdo1WII5YHTqWHFoLniXoN9D45e3n2a1rIlyT4qoUOdk2R8huCebLc+P5bZ3x2cM17ToB4JN10o9461yoVtZAptN/PnS0k4P13zRiUfpqk9CY3+e9F0tcmvjc7gty+2tgv0HNgakbldDjs1pvAK9jZgkT98R3JjvJHJEDKOyVa8nOawran8ybdhC3j77TKuXW7q5DX4O1Psn59FxHuxutjHqaXuf99WvefFHiShlKjVQ1zyvj5+D9Zd9IY+Un3rUB3zakcPiWBP+9WzFOHODVzj66ctgqcFoqzAiC5IRvV65/rFHx/c6uu6NJe8MVhY1qy1Rj7C1/O5i8+uucHY+ABDg1/IoJp216yL3EcmtEWWVD75TUcDNhPOcYPayOLme+Bh+2oFC93+D35I+EHqixOk40ZL8eKeLCLiDp1PRvqGvJd7TLlVFGScInSzG5yz969Qob6qQY7YyfFpyrbu2723lhLh/HePtBgp5z/OCTSEU9h7jrQnBY8xA2jAlKtfP7fyema7nXv4U+op3bu3lCVgWQ9tNR6tc0F9veTdfMSYNUqgQilxQi8niBxsyIs25AK+zAy3lpuhV2g82f7VJqvjdlfrUHVbwmzcctfsTwPvXQA4k8eEdPBAdPY/zorBp933c7zeKOAODlEgDNF3wiJZ3TciLpVe4qKvXkFknPR0T6cJUSVkyN0DtH0Zlysv4pry7+FjcX+z45M3dSAdwZ6Bg09DYJ2kKmctBmoYhrw18bWyDeu6AjbQED4jPECIvFXd2J6fpwhlcIbw/ZXXjlgk7K6mg4eOU/bjQZi4MHxkruaD1xx3bVAROuRqWHqyRzLiSuRkUkDip/uQ5uwC3P+ajIxrPXhsi1dr673n5k6PqoFV4dYVNLnYCFJyFcMIPWHVFHwYDzcqaYGWwrKp81KtMzdM6glUXq95e12C47VtzJNGq8igtfIiBe428mLY9eIkFLD8XSBqTWNp06yH38g4DbcstquhX4K/9UmQW2LtxmB+cs+R0LQrWh8y+6ityQHBNM7vigplnRc19OIsKeLRr7nYTxIVR7JP5aZcDfjyROxnBo+ZInifs4uMuVRXqMlVRuB0RHz/o0ZHlmIHbHjDEtXzoMVd3vhS4yL4A5dUkav236wD/H3PQQ+MkBtvaWCFNNboXq78IoR1sYhvXnTKXzBQJtmYIvj1bW9ATXuCFn9nnR9RapvHl8BLrVUUtDMUT+z2+ll53HVFPU+cc++dUlfguRcHuoXHk8di7u9NCIg8PtHcHu8IZU1A364/LIHIxvaqtTkXXcPPUb1cVxFuhsolE51Mx41+kbJR6mwjTMXQkGwQGgwh3WytmxaQucZeJ16soJV9BrY8NbXOYlvosoKq3r9MNR1xqKto4J87PGtPTgBQGVFlvucHCpQs2Snd5WHQOkNPnjOW5zkDwmqtezNO+r/PW3QK999jXoe6owQOwfjp+K7Ecdkfga1JWKWOuDHjd+auLCtNcl/tTZKx2FYBjG+5hM2Tr+zJvqmhx96ua7m6jTkAHgSLDctumz62VJhXgHAy178Vdbne9vFo1nCatVDaFGL4J0mfF20wYukV4vw6/srF/XLt3mw2uS76L8zKRbJYJsmcA7MC4BGJ2jNill36z/3qOACRA2cvg0clRYv4G4sF15z5dOnjcTYYmVxKPDGA33qkpEBPKwE2L2ZFrn5eojOx5nqGqWkLK1W/LnXhPmeSNkkW0JYbzi/N1BKs982PuVlS40vnVAT2la9f7b20QTNaI9jeQIpH8Ay42DfGe6Ltju43ZVKWTDa32OjhhGRp8TsOgvQ1VqlnIlVW+yVqt7QD9Z7LaECzHWUC+W3lsTQT2EeSu3G3s1n302u/vmzB6nlTnDs3XUklZqh+UZ9TW8711T2Xv5SfzzXhMSIcR6Jfdx2jW2Z/W5P/6AqqDsqiw1tyB4lyzHsFm0CnaeHtZhUN64Hk2WZl+EPBbARPdCCa8CD8EOeHlxRGEFhtgI2dhPU/Hs8rCSbHZSw3chdnbLT3D5i1bQCeVbGOn6S293PlViGK+/AXiQeYq4MgcOvBt1dX1ua3DQjy4EduEu2VA+vLAcRGslyBilDx5KRZ1jb4Rz62yz4iWyk/O5kL3Q9wwzVtoc2BCMqbGYWIok4ZMn5jaTeMB9OyqpgBfKtLTSC3QoR0LLFGl1Yk0XQ4QUTU2UnYb3+O4bIFU5aZk+voMN9X7hXDCgeSLERH3yymEDhlbODZ8jZ7WvkvuIfY1784939ul23RLn8F1ECBdjBPEO9NyIRWthx9SPdKcNT5xthrcLmAKD2J94iTbm7n9C8yzzKg376pdqf8A2rFjLBzAWCHI9ibaPTPQcGkXUUSijXjbdTkr59KN/1KbSBBgDAaX4hQnThQjPw5dUKkkEzep75BF74no+UiF9CDuv7zWbnEFUKkCNBm7TFeTB88Q7aufg8yiZsM6QBGLrZzCN4hL5Bm1rKFZd97NiqJmXRzZ8Al0z86y0dyRbDWsJyewP/okbeg/wZH7HNRduuG1xxstljirmMIR1pzWm3eFugaRA7lOJPYbH+2QlfprGb6Pz8M1+mXcSQfc4eJfIUEL28SrpVcCc6+W3JS23LxnlmGms9Ov7Izc8sBLVDMAd38ohNfYxNin9lxW2ed7bdQvvZVAu2lrj+8J+LJ9cfw0UtYjPIBzuM4vPRLhM5NcTGYDfiL5UfS3wHNlYuV0dZmzdrMCDyfzwClQFayyZMD7XJSjQ59ypN6H9jwSIkEui+/umQPGCIuYh9bAiqWVezMXDg/5H97cr3VxhvF0ozly21Mvn5Yj6vO0/wQ+C+zWHkAkAidyo5aiu3B1+uOJhR5v++r7qrMGbh2zu748Lv3mEWCT7P8BKuztupeopdQBnYzUa4B2AxjpXWNwXqkjNhwxKea6JY+00lCXlkCZ87BGiaDD6FHpj0oUWLqtxbpquSpHU4/ljEpZmTuEvzgTT8UUahb/NNx9xa5JgdVyBGrMUwVl7gGqcDxBv0jy/9B4fVNVZz94iXFtX4k5Oce3K13n1dQjzRCPII2GqBJAuu+wqNLErLRZfp7YnQPg+ibfQWLwFyMVkwvuDNlMoNxESwDQyoJh8p/hd6N5xsyMsHzaZT82auJ2n8vNxOkLJnQde/PBb4vonMWQMst3bYuvFXSdXeL8XvHGpioPGqQnZGJ9vINISF+/XHl7EtgDpGazr59Ijji2BQgFUWxxbxSgF+xYaRW7YCyJxNzafd3+pr5RO7XOUPyyQmT+YpL/x3sjj/U7vHr1KmxfGyl5Wy3t6Dpgs1+RV7CLYC14pW49EN6Y09ruwXAr4xdR3Cl/Os4EPfXZn40gInUl/nOUtkSeC/7+8irvyGsZPNYfHyYcip/mHt5Rpr88X+m1URDOaz5kmteMRUmE3Lm+y6n87CcmwYT386RMw3BucBfBWU6NIQjizw2JEEPXk3sszKn/f3ZYlRlMpv7J82Eh+Mb3qFmFT9qjsCsGXnG04x94a/vov4SSfS+5gY6tLbkinm6k42JT/bohhclNWun1fDzE98pXKxu6YUbAGHTyIxRWgSqehXLF2ypgUh82xHYYnJySkd16967xxhRg1kDdkiafb+v7k0LRpXFoddq5LazE6BzkBSFWJYp6eeKXm3Ej8JD6oe0qzRrxfPIkaYaxu6fqCAZPYhNwwKqfxZNH0x9C9sidBzOZpQ0ZG6Ld5wtTorvl0VJkbHl/CvcEJLzEdnR2CevxfVBtlaRzqTIamQAQY1rscj+G5iG2ZkKiu0EFkkD0WsTckBE6InaKwqQXvJESOOBOOSrl5zy3IeoAjN0SFHh0PFp5HJgDVXqO46TnpUYPG+z1dXVIfQC93OFiqj33/BF3MmiCCeiaQAzBpCBCLwI58IWoATWdlyy4lo+HLO6kK6ck4mSnngYpf74HQyV8RBJtzp4nP5QMq1gMpZiPuAPB2q/JfCkgO6yxtPexS6lSpguywNtAt9bz2fY4CZZE5yuWecxWoF1KAVKiWdfUwo9M/jIjUHUNWHaCRqetuIEHeJwWjiHWDLZbL7YQ7mxoMjwyfdwmqwrUeoTIeZCY1BpskwTXfXbjRsBLqNvMJ+bX/170AIu+cp0KCbBcYJNs7Qqp58pQzAsiOiDPFYs+Sp4zem5PpLLpCLYrBf+p2BtaevB9tTPfnQ3VZFGu9dWpWvqJRBLhlC0VSlzuKel9iQ77EZsMeg1pqrnU+LQzZ4sbYYMmoEwfpbl66DzeBI99cr11soItUTm/NJuDA3xZO+zEcEQXL4Yhgn93cO1F+7pD8w9jlpL8Oit3T9d7WqajMeeKuyaNGZDVXU5n6bEYQudgwQEZ2F/M1Ro85Vdikcq3dLGJRCXS+ZPQwLNJ1liVlf3fdeUp+wnkOBhzaykU8nlDcQWgceWAzLjVrswll+xibE5RCT5cn4vZfS3/Y8VLR78JkHsAxQBVk2XbMbEZKRqssTvEGHRQvxCOSPJbiMEdeyVfVaNmp+NMkf29HsViRAbTmTg92hkjejNowzzMyLFfl2h2kMH6x4moG4nzsW3o/tDI8ij54PQ5wKCjBXBhex7v3iaBN3KRO6SmqHGHFTOHtuOgoMuobCV1iqsplxUATBMCgoC1VxdSK1Rs6pf3WJh3D7EonUsIeRsJjIfnmAECSimve6vcyHe6TUOJGwpXMSGfHNstkSj/dT6jZB017L2OkGVVvkmwyg3e8kH0DBLeSJewFH24GgkrgcIwpU4rzPnKRGGqrvTy3dagQJQ97QR++UzOMuGIezmmmKnB14QD1JdvIaeEiPOOMiKh7y8FWNyjAujoGsSeeLgDM5nFwxGOZ+w+AaVpcguZfomGARDACfEfYSWeDA37ApHsiw1QhTiQS7ThdtU+KjIUFX2Kh5Uxs6evVj/GznJBG4dcpquStOCjONPy1YPqc7BFMFPXQusG40T7F8CGYiD7lHUPl54HchfSuOTsXHzLxst7+BLoMpZxlFEyBdIKlMKBC7yCH5+GsZxJG7pA9UOyrBzRFGvWrA+KT7YWkoZSSJBLzQRdEcPWg1utG81iASJwACMQWKWOd/0mQA6FLTe0WUC0NLAOg/6n7SAb+lMeN3F1G0tTJVoDhWI8v2Uy5CYvFYiyrR3n1ral3qPG8bfOX9G4M9po9uqbJpcLMQRENmjrgKZ41MzIVff3C7LbjD4TFxm95IgkP8dDKRZXNTV53DeKtEBSmxK2f5MGDvh/lZF0LgxHrvZPYnswv05+Gaxjr12EsCA3NtCEIxWXaKAU8t+R1lwMEV+Ps9wDRpRw9M++UPsqEBzsd5FGz4RYjfkL5hSTzh3CCI4T4pqXGdpsARrBRBfcozvmKItuHruS4w2PKYfCR3AZH00cSzDd0UbTgiPSVSKRmmZu/O1RiVVZZhscAGQZTcrXxpDgcQD0tc5cwaphE4axmWar93FhEPb0f0zmy6Jzc77CGPw49tZxVF7vw6k7WLbxK55WKwPwVc0/UueWRDAi1fP5yLB7k704XjI83kBtexEuDK+Ju/RfNds9XZb9+f+xztJ+0/5jRcird3DrbLfkoPJje3KxdLAleQpOpDC+TplDOF6AIrZj7g+QXBRca3DB7aydaqPa8af5wQmspAYRPUyrmjEGcL9Xp05PaCC1CIcNsBYoJyuCIECtG/vwxFkQApgeMB3fuXTuLv6brMyOAwHJXzLf+Hgxh/CjV17eZrMuylYHqL8PopNAflP9zFH6MOu8Xkc0zyPNr+Cd1lFrxSufAAi9DnU87wkEWudXxVejekd+elqBbR1ClbyDUfqNjssVlcki8yQE7AjncNnaT+yoSPfKK0RwOKX5Koeg6qZy9ub+X8Q7kjCMl/4fTtt6Q1GAsCW51HvTZbSJSZz454QhvKVWvVsu4lm2Y2eS+6T5u8evEFbZC8rmy6ca6ri5a8f1CmvZZo9ujOJFlwlEjPqMLNSqQup3xMFk3OIXjJ9bmeE19U2ZPW1solCZq3CAU8pix88q50E+reKFiQr7MAdh8OZCGbMXt50RNwen4c//6XejUXLML3+SZWzxwST3+nnQ4D+lYO1wjR/+mfgspy0ZhEvU9XflIKbHC7CYc47qHkOCCZx8gSuJJmYm+jJ4os+n0/hvhrcrI0ZsHKde5ADkR0749vidA3xGlYTsn7fGwZwOgHbOF8maq02ztj+SXRfk3s9m4aDDcRiaFGBm31KQ6TSJODbB2sFcKbSVcULo6QlLFbI+AKXDSnXu+TuttaTlLYnhBpcEDMnP+yCdrWPVakkaAizym0wp8AG8etQef8DZOyBW7GS5V6JxM57GYYRd/oXjD0UKCvBcTIVvnwjYGvWMm7u/2SCfKl2cVDhW3uR7QzbbCrWrYAPZBQQv60CoegGMHP9H9w7Q4cMxqeoWCKlOo0hti7GIHA/5IsuuTeTBFGXvc/Dys5DVeHfALTwF0wpTctDri0WfrJzUw2r/5KQ0DCnkDSh2R5Bg/fpgHYZTWRyqmhpYGXPKm5MtpyjefwdtzUtD9bJAs/ov+n/KTkjimgRhK4pmLm5FlMwmcSBtxqKAYDwHK6S++/Ky7u3YU6qjqg3wMj+t8ClHd4//ZW6QO1beE7SD21TdeF2XYMUJc7yFdVSlMjWKAMSO+jdWwsD89enuJsEsZdK0ULN3vUWK6PAfI6Dp5qHpLFTl0lPMv4i5RcEltWTNtpmsM1ZVoPAFO0xwyJFAJsG6I2dmh7W1Ray4laSP0vfWrSRGt/RqYcMaTjbkx21jAR6HvPg2TXkOxhJzgnS1yWXNOzfCNwYF4cBupwqeLfAzsPZw3EkmAzvTsC04rtERSrjWRUZSDDtoHQl53R0p1QdMFdDKqnJJdyczPm3zYPA+uvi/moqAY0kMbqmY6GVEGLaTXjllJfIsPXqwymtunujHzShyTrhTUHqFGo3osBdB9cg7VnzN+PaWXiG/v2gWpmsznrEmcl9UDfUCPnFFgrxafNU+Y/u8Newp+PtTKESgFIVTh9cFE52Mvz6pprhS83rkRe49lkC1hSorrHPRF6s1cuGQw5q9LXyydEcN366K9Ff0CebysoVdTBUrypedgAqnZIaaGJm4aLf0S/yqhc/usVV8xXJWSjBVpNVpFNZ6pEZ6bpfvtqUkLiqZhOrFpDgzEuCrTheCdt5XNuhMxlNqilqQOGmO/GZcRqu7jAhnPfrM5y7IjgW4KjNpRrP63fEOkT172Zc2s2zl4rDcNIfcOKhVanb5Dh5QGC1pFbYEqeM8514Ej8MSB+wZkomp3bmXgun9+o1SJo7Ww5Lr6OVzbPsAJ3o+v8I7P5koJyxTRgnTxSk6+lAz6YGZaZxS+yVK0mzz9VUnp8Bm3aMikZZfKWX9UnAYefevaeQcOMAWUd14xtur4xVR5GLy2vV4ePT6G3IbAIeVlCP5SulbYIr5RN2b/dOdvhpyd+Q2M/SxYgaAqSO5CGbXReD7DM5aQq1RAKsZ9MZ/jZUv3mwc2cbia37mWKr+X7GUwtz83a2yEs087eT5iJOT31Wz1NIYAGoxeHR6RdYmwoEoxaOcFWXgPOssqS0ep45UnfgrAZyc4q1cPOcD/uBEdIhmR1I5XlDFFXTzEBIWE+enhvjDvF/4lfMl+1xN94bfWB2r+LHxrILpHVp5/tzRO2A+7FUBjdCB4lTkdvqwgxrlAkcEN5xoY9A25V2ViULLS2C36SHHYfpcGf6uU54qIcumBwBjaoTB9nMxX7nqgQ29YTWki9/gjzcvSxxWVoNxorUrVr6/KFJ4vTyAiVCAiDVx7jRxTXlFRqNNCs/2/foVZUyuFoz9KrZefUKTvx3ytOY1RMr2b+Luumqi8755dweJm0IeXlD/0eOjTjIG3Hkxwffr5fDMGive3A3dzPw6++C/qDijzWXsnKWMLRKzItfwN51RZM91dYbClGbLc4LXqmYPtkKIsPkM5Ju6Q4GhqCbA7ViSuxdWOKUobYJn0YLQsUFYwEVvzf+6alzlpLI2cItk3aBKVYOeZI+SPlDpNcCvSX6LJieUTSb0fL3kEIs6oDuZ9VQfw0/o59ZM2nqknXCUa5qjvcaC8K0vFnAgEEQ7prmNjtQKSi7BWrZDN/IC3aLwvmzMmpmCAfLX7Tjfet88p5z9FB7kDp/N0QPr6RbDSoCkaK2+jAvqh6FVZ9oeCm/CqeJByKvczrYU4Xy+9eIGK7LOwFK0ed3gS2v7oiv9FDXCxbH2v712rGh3BieYRqNqq2IhBtEW1C3oEShP027hSsDjdaO1EzXXCFzZUahmn9um3v0UyuYgFXLAoHMQH4WIluq2YNZ32+pYOxcWZNRHHGyDaaUHHkZgl5qNiQWpQzws7I6bhiV0fHTGSXYNZdvfdBM7MIS/2eDvCaOgyaTzPZGCjeQbgZikQRzJ6pydU+IyVBpZ5ZKIk1qaCaILsgRfdsjDrrcSVy/6E3+rv6FLP3a75CYZOB+Q/xcbFHWe7Kg7XcPSwo+M5mmwx4YVFCMHM3aUo/ov/5ij3PrOARCl3q6idZQd8HUNatR6DwPClOexX1EGh2E17Qp2OEx3UjbMM6xnVIjE4gmBUjPXWObevnYf6Fsdz3Xae+JrmjYfHufbejz2TbGw/Bsd9gwp/pfEFxljDm4OVR+9k7aorW6YCZWfNs59EzOtaa4s/bbeDlDFUnZnRbNz9yryymub64yAwIzHMSv+H6qv0WPYSHcgQ828SAvO20p1USfJN/R/qhnLl/pdeKNPpt6gTMQMobnPJ06sFqkZWs/mkApwRn9OqwINdCcQf2YLZnccsMSVEntGYjHwlvw2zDFRZyXWOz5BQvkKFkitauNgtAR6mDO1x0ne5G6tXPG8YcbV7rHVMeoURvQ62/P5UjbVaUQXkTyYNIMZ9LlQbezwp8w0mFmJh9N3h/833x+UPt1yvYx89S09HKaDa0Xdc9nidhv0KIBWJRdD3xyU3EMfvv4k0SIKXi099dCxlrUVUEpsVgZ2dbdLl+xfkoJ0EQoXdikn0MGyNQF/QSJQMgfF/6G6kxmUuWWWy8DpGaQH+uIEK2n7P6zGnYmKGbwF7PxNbJvXMnYvvAyrnwXYrv8K5ehZmLDc2UvlPvoVPpynR+MYfE4iPNImkNxSKNMI5bYemCXFZ7LLZEPQPdmC7MPJpD27l8XLSAN11b1KDh/VdbAdEkStLFmb1aXXqRYsSZF4ifuyziPxiW5ambOuMNpLLiZFT72B151FAJK81Ii4+NpBp6d0zhbg0IHIhSf/hfd7NJVl+ZuNIkf427XVKMRegCL5YHLSiluwuJd2zpiHgjytbpqKflCJM8xP+GJdhe+nFtFNKJ7AbqAKGHGZ86TJdMItfpqZHXRnbEeYR1O6h2IrLRNDkeCUEulR/yYmMY8pmUBXFH4FnNiXnAjKCq8756tVdd02bPdPUOMacc59EUZNHEfW2E6IdbbWjUgnVobv1SvIVLALyaDwnFRByy6HlZxv0jpvbYHwzddQ3KCLmEKF7Ltq/8y85wuKmVA0qNg/KRTBsijMNpY9udrnCyabmKimjPQwgK6hJ+2ZGujFfqu2movB8OzSyaFuD43KGTxCryfMHwS++j/MTznRynkzFl7U6DlLCa9jzsvEsDm0mdH/K4La6+lrwXjDE4YD8G6C3kwDZ/B5nWAdAE53xZ+Lw3Ijw1FIYRsTOyNcj0jaanS5CQIJ6lxcf5S/c9sRkezmrhWfconXTe4+tHDKH7Qjs14eFoBjKVEwHmnrDuHd4NJOZelehNQwtXCE2yCsDGudnJrV9YLuwKhh3inQRuGnGsoCcnH4Jm2R0KdroBS3uIiTemFREVyHAD5RPUqFnvBWExI8hg85p7auce0yKqsAdZYB7d1zWLuzakMKVrbE3frqCR0QFYLSTpPkVcRwwO70SDvFnJj3PBBkd6JIePRGrFbxie5JjTwM+N01Pxe2k4p4RspIWDgyM7DCxXYv8sjbRlqv5P3JfcNivEU8faFZsmhnA/QVmxhnqFyTrZsT/9qHsuTXFNst5yeywQA4k6GVqKsG9zRVc78EBBkHhRK9Nq0OrfJMf7RDp6X/laxxyRwywcWJoMDnQYy6AE6ifVbcRBv6QonAvhqxfSNdQP5O7JHcIUMi3zIQJOW93y3J53kRqzqGl6OucWYcqGRWo0zPSccxTFRUFUWjequdpv0r4pAH5Cdxt1KRHfvFOGZay0T3golgQBbEarNQ2S0qxUxo8L3EEb8O2ulWLE3iNGoBMKICHlgAcliIIt+V65GiZY68upLC0g7GzMYv9VRlfe2Q5OhnObNkc7Sed09TAULKGcIexiBjeKI5uYmQp7ASbbcU2Mnckjt3azX0TUJexTLXWbOijxJK6UwaiJFHQa5q5tfN28Bq8ji5LHgKBHsMnq1sVI69E+mlPGE/HJIMNqb1DFX9Lqcm16HM/9ozZw4YUenA6i+e4wIXtgJ++R8D4iFn9f514lfjevWgzX9t5hXH6kh6vDNyQpZYyHPGRO9HyRcLbdXqcXO7EdJnhlkzSlmqQOaCgOpw9S8NtjgJWrQgVkTSykcpOL3z820RCXqvh09icHwmFneRNPhKFIIrZdIQZcanEUu3VuRw9e7dcUr2mfO6/b0gPvlPU3jbBw/s/GB2Wmdw7qdZ8s8/XpylqMEcOFblbbLcOnir7CZATYQkcWzZ/e+zH2lcKXOdv/zF7CK0izghcjaZ3/NemWEWptXS00eTU0EdOhaVRkrNb2DUPXvPwnF9G0u4HTzE6qFME4ejbBkp3YYkxAKlliGMnYnHnXlutmAwEmwS0aFVkjOzz+m8K6vsKKmdeOqJSxs8z5q2jU2gcmBZwwThwIwx9JdaBQuHNyWy4hzk6IeDG2bZkY9N1G5cklkfnqcvNu8IDtrJK9Cuqsz7oGRyCQd15IvCYcnkXdZVc3JRNakSkuapWcT2ZbpS37G/EP8Ix7tmxD8rK61vrcj/kFFBoV93MmJo13wLpnMEtamjUpB5K2SCOVlujwGJ8XMMjRVN8OxJRZTEEMjliM5ShhR+L3pCBKiE2kWpiHoLmrmYOajX5ISn7bISaGljuwkfocD0/LODscomfUZ4xq1FQdOP81S0DAkG/z46cGukKHR/YkOUuthYbHiX7qZyQKLw6S8xEJbaENf4oBrraEG4x2oiAZ9emJHqGW1kpWwd5GGSiGcUqZflMHHSadkHClptzjg7CQ0cr0/UNFswWcEswbZ8/t/Qxe2KToDKZMw2vJuLMzgx6KWdU4gkYVX6or3PX+CZrsFre+35FgCahy/kRgvXGv1q8QZl4y8jYULOABS4tLTmBDIkuCWH+CcQ2/uvqlagtdzZyrflXmjXWUZXkhggdIV+e7RRE8a84A4lKFyB1ie/V+ykgcSCWGBssiMR+nw86ZdvZbeaBqbc4q1st4TlWa3pyEYdPFBmFn9t85lYYnZdnxEb3yAw8vt7S8wr3BB0NxlTEYB10zrqenb5b6m7QwFTTg0mVBxRGstgHNIo0pyaINZvFPgME3vC+QMA5KJUWOhM/XNJhZb15oaMsgz55T3JDTOxHOcy3vzGjYB5FoSMOWGA+amKkt6MIEKQbnTetSy3tOK67ONccshJmD/pl2Fx/14Vz5m1sEB4/eWM0AKDIgyhPPO0oaIY9yMi5AUwR37vWekqJy0aI0OaCSMP2NL/Nzb4RMKZbM6xzfgjusvilZB9v45BOkh0RKoNwVc4kkFAI1lmyO7qAcriGNJ4qcSoBHnJLOq4+D4xL4Y2freF2SDQPBVo2N3OpIkx1G+jVnolZZvCJdEhMy5nR8iPdA0Udg+yqF4C3aAuIvrIJFV7bHXZKzUGR5qNS9QtBe0bD9W2VvGO5ulWxqFhUM2fI08MK9Nazm+XwABSFJkH7WkQmXuvC7zFQzDtzJaC0OLbSD53C/4q67aIkAUNYg9V7Ke/Os7hBW+qeDHq/H1PMi9E2YOFu4iR+H1lB5M4rhYUBPrlyDuv746O+wf0bDRElfEffFXckDKY+j4hVPZFJka5JSXHR+P5M1xqFQM7wMj7fhZRUXWw12hYPLsXXQXvqitEqJslMFYh8byuV3TicdOPQsbFzYeg6guYmqAzzs9WaQGsOZBYmEZwaz0BT9/eSLy/IOnvmfVQqIKBkczXQ/UZu8dp5LhMNXWFatPf8nh0Egh6Au6divDvcSX+XL35bcCrzsAk9arsfBb0JOkSq/zMnZ9NcpuYYVC2kbE7lHh4/mz0/AvbLa7lBXC8BKUPt8bxKY72+RZ/aW880gXD0aRE+aAZnw64kQWw0SilgGeKSFfKTU9lFU+1Lx7SGbK1LKqwX0N8Lqv4lgaaYyK3og83GTfpsJLU41QOQkvRJLMVyGPN5ljfkPwhueenXeYjTMzE1WmNrdM48ttQecTK+ZIygMtohGjG2WE6Y7GzJW97dAe2rEjAFCYRYuK1n9kOWWk0zLeDLTyalMuqIQI0TEEzg7el2KjtSY48hVd1Vna6818u6I7i+9FAwoPisMxv/1GMyHusBvccclswjLS3vYIgqSTEOZY46gY4Z84xidqFhdmsD/03UZgMxsS6BL+YvBKXJ7SOQgPKnfTP8c4UFDCrBrP5MgYzkr2r/c198Vq0SvGMa5QGxNMW6F3NEq4fFzLCvFn+1SJWjmPsyOA9J9jeTcj4VDuWoQo6hxQG6rxec/+kizSpDIfG4TO6PwMWMZmUrRgmSBvJvBaG5XnaApKs4twtD4X4Dlj7CRKBrjc044FDiy/pq415r9atDInfi4SsEXCAYjNCwAmWOAJ/rBIri9j8++/VmztLD9lAvZH7cPdQIsOJtw4xdJUq9qTjPnF/li1jOWaMTmB2jYOMUux+2u9fnN38T8f8V++UqfyEWYlBkOR2HaDrSsezYjUQ9oU2fuiqe+DuUSfqS21zqJLjL7DjwiLa8M0KuHrari64WGcRmqk6F5c/3c5oZlEaaiKAhPAUEWiDmUqdxfD2HaRD0pHx9/iUSNydlGzTszNIXdDq/CtbMV7JoDyA/2ZFMRNsOpECcikhD/jVaecWpRLXy2xYTVjnn/FizGF0pm0sqFf/xI+TMSgq03WJLxltRnGUJHzQgHCr3WQPWN/dGkH3XXjz2qiVTZEANDSeLt3EiWH+9FbkBJsEd9i5BBZcTEq4mswmEocSZ1UOs+lUrlG5Cy4N0+/FGRFFov4W7AnQy63wJs7rH35dfPUoFy3ocmL/otuYBaAoDYZmgPvvl7nUtySN48mQlheM76bi+ePc8K0UePUxI97Zd9IGp5WcXfPvMc6LLCepYkP/BO+Q4RUTq4hrC5iwqRGk3OkEmw8G0G72vkWqvruLwfCN9PSuDh9LsFHOBnQXy5zp6qg8QDes6iNtEBlVJqT3kQhsQp7eIBdK9jK7ibMPwQa3aFldLNJmomUsMDo+TneK8/TVfiv8nY/5/mQFXLbC1twcpUF74ax7plPlB3cWm3SaWCLDfm+c1Px8w6aGytyEcf+BLQihc3iw/LCn4QE5rXOqCjkLOcdflS2LvseHbQEMaaxSqs7jSfC1lkjZky8DVk0EFUhWPm6TVpw0hffnJxws/Zw00EErzT2TPYSaM0iZCChxVgbRirqnjgR7+5z4VS8m69G6rGCZtcuUbu1NEA2zayti76ZjHUfyBYZQLmiRwPzIzV8akCDCbI0rGUFHocVNxi/nJq9dU2fWMrNSirZQVz8moWzrOAJRkD7qManOxO0+RDHNVhrPNiXtqcLgfqrWzOvEYhqQpH4BXLw3Pnl1gfmpcYMtH9CJn98Ch0Uxm8RNR+oHeGITUoMkZVowJtYqcsZ1jJUCh5CoFLv5U4daA0Tpx2W++YMhstvvriP54ak3cZBZx4WHqFiELoaPRsm8UB3+U2lPAjUBFzCb+WtnD6MYMzloiefqIDd95XNnDPpp6v4v717DsJpdHpSaaWGia/vlr6klwBAo9NL5j1MxFOAkbn5TRadM+RqC++ScuX3/tWQNIFH138AGBc48/Gd5n0zKmaUGybLpgnOU2cjvzNoB3GjJlT3f4IngLKiYrShkcLDpXLfVkFY5VDYCzVy1S47fa6BhWB2RkoVE6elhFodcBDZjBuNV/57AgsS+NFmhfvZqW2Ri4qVGttJCCAgldsyhs/5oIoAkiqk7qz5dv1sihBO2L9lg11Tsd+1ZrCVxPOdfCFVRd6bMzvV5VYExsak2vb4YeuLCOoKj7lnJdl1lgIFQYXsonuLESd6LfLq/066Bp2YLcd9xTSMmlUpJGcLmyv2xcmh9BPJ0gXLI5EbHgU+bgfv8oEL8TZs94BJkpqdTrWdHuv05kSK5xRTOGzsKm2aaBeUrZ4g44V1hIMFgD1naYtM51k4Obl1BtsQWGm8y0vQJgIpG63fuL+ml/jshjR8gIlSRMyDj5v2NXgesRVaVppbajHYsZfzYE5FZ7/biYgMFXKKzw7m3hWvXnaJcR4EY1pXyXB3oBZAd0q9E0U8HtCFfZI3+Kx/lNlNbDtvsoTu2JvQ+ZI79hmuTQ3y+F4EKV4+tAdNI5LMQsIHuSfTqudBNO9+4ivhupxZPrURIjYTTCV4pA5jZ5hW+UEcf3fUsLzf1MxQWgpa3fx1g7ogqiLNowV+rffi551rvtQh0BhK+baBRuO/jjrhNKn4SC1OVGewhz1qUaFeAfC0ZBcMqq6pkpwdayN3g6slL8ykhpRUbmEuMN6JH+84mjDttf7/PWUDoQq4aPOFQRXVKsvcfG374uM+1cp12wSRHQLHLlQNxXLi87kIY07/i/C/HczI3fKX+PBl2QwR75xpOjb9QOebzySjMg30FYYVXeZja8BF+Ist8cE6ipVfcQOrIuYkecI4QrC1/ORDI0kVYsq0MgFnBVW7GFQBxqi0T2DBELLjsNmlWMSjw8J0F1G41voNST4r4G6R2rihOkfHu7syTmw7liKAeAa4qZjqC5qWDUV2mfc5blnJcdTknaqk7DljQ9HSvgNedARx/qWxHhRyptaAYyKIpb5sqo6ykmL/sfvGy2ANIDx7IzHn6FiNpHiBOHmQvAJi7UgvFl1/RWUu8olRAc7jWzyMEIQgHA+kGoOqniLxvk5spONoyAQqI4ZmpM80ZNXNXCTSCUDEuGPdOSP/xasYF8su+51McdwXBuKNvyYogrC0Jlwo4qaSMH3DEI8pGSkqUPDaIBWEBT6JjyRNcnfRaA5qs8NXKTcVBrDMI6VDQa1f3XPqbFN/3E7OheZfcQ4S0GVb50xSDZevYM7K7pxdP+DtSqGW7L3OkslPa5w0oUQLso3ZxB8m6JoPC9TMrT5wVkBi+ai5pxHfz4L4W8PyrjWESODfN0iMjgg/GpSziTFnmbmUiiahOoSeoKXlPmLSBIp3wXXUxEYI5ERkisXU/gpO5wt9cRDQKSEvEcZw2LGzxcdd9f0hjzZlvsyZAneGOR/sqN/Amn0W8j2VdbcHI9tqLRp0bZFNThsRtJ0d+0ykMYJStHDP5qKXQ2/Hp7vktIPJ1GjPkoUyeV5uWPAvOzw5PG13a2bLteMZJd2PUSG6HbD8TPxvV4ug7pEFabraSvY699dFMK4waX+yHiQ9T67w6SXytKJt1dPjh8VKS2TE0pUo92hFoYiEVE5iwtID4kO0/bRMdkgR1S84EiCGN4e19QszCf3PF0cQlMxCj+MnFj5ZeloevH+sIZi+86qfHuIHjOY+IAcS0qiXH70V05AXo35rGDBE4oTRv3tsd0RGob+k8io5Y11ciMyYJjVFhqKwYxu5c1Z/rUvXY+VEBT3b0oRGudYVc0Umw95pIGEcVF423NqX6WoI79gq1CVHCwha54ICjViYyvSyZYYWa0qIIxbymILOCmS1QpPsLeyQ2jqhHXJGnYDluNqfxgwLyOwsBCLOHXrQiPNg+JYWL+PsloC/JRQ4aEkVXRrttgLeA8wMLWT10HeCgxk7Aso2uXsFeQ0RDQuL+nojAfw1L32Wyg/YyvXwn7aM1JwnFwsamfFMUQLrJeDjMWVSF06YydWKnarNd6jNZnktQxV+RlZ1tnwUKFuqdzC3X3VbDyO74VeXJVum2+DKQ8pmqva42DSkXxyxh3xa8EJ+OaHSMFTZYuJL3qdm4zeHRVdZUDiXS/P+PQGR3PegqQ/osbF7btx50onfq1fy31MalWw9a3MjSd2uOQh4Dem9maE1K/ewq9UWUld4l8ds90nOcfvYGeWCv39vZlBw9lkX7JiFbaBKYIJ7R+3t53EFF0bs5J2BLCV5oCJuUW8a4+XhxQa39G1A1G19p1E6ZiXfSSA6L2N4ELa7ezQ2vD04/ipBywAAk0cGVsXZeT/ZyldZKee3C28oBc8UCA70RzfdAAynUtt/xQDt7AMPOekg9FT3YoIn4M8apyjVvY78ladYbNrOyIgVKmt8CtTWawFueEGg7U7t9SoZl9VUVX4ZCj+O+e7Dg/kIxx2HIqxMomrkmBbuvDqiU9GM92QW8RVSn7eFdhIAPYXvE81ZtG0RSWTlxY/ibtWkiyDdHHNAexlUzC69PK0H1lyZXgvbbtBQVNMx9xoztGsI+JNeixTXnz/NGaATB7iR9TZwzi9Drf2p1Q69HqgOWlqkOfqSH4hBWBNm8kJWcAzyUZMdZUa2X3XaQHkc6dVF10UOrHf7hlfadp3SphL2Z4dNTB8W6VCjeRQs9pkeksFmCphCEptycO9aeZirjuCpcnkOnB3403jyi8/Ai3IJn4jNMKTKUWLo3hOk8Z/pHMcuSHwsAKs+sH72E+A3gIsdCxJnqydXyCu7qMx7ZQRnHh3swceV9KlxL4zOUSCHAaOgvbWIQ6rDH/k7fCNePJkC+2sFrVoLdfMriOVVMagGweDp+fh6feRB+T7KAkMweE1hc9ogzTbDD9wsuPkqIN68yaXPz1jHAraeTPzBsYE9O8hlrxA4jNvKVJPrz519rYQ0DuzO6DKzsh57SW4JUX7Fc7sj6T0RxJtIOx1n8gfyDbUrTRZxL1/lCFizkVfZd5UCPTUYO13Hhb3gpqVch6mSAiWSc5n4+7jT6Vf0l0g42X2s7VKbhLQ/9UoEHgzEyhSRmU0AXYDnI+CwBuTo62Uc/GLctnx/zMEJk+ywSJVSKqM/2cuKb0yZMJQ2YbGrlzjIyJKDoTxCeA1JYc0xAnjImaANOwlyUGSGZ+WkT/yf8DihNTjYBZ8PaVmJC1vnIdxheT/g3wVEc1unBqsXIDZvQXt/Nd7ZLh2N7O2XiMqYlAtMot8k3Was9a6zguPLIsh19NGcNPifLjs6gs/D6zLOkypnS+tRgU9eaUc1Qz0x1JK+2Yro3SpgoQf+5CKI1YPP9VWMKX9DqWmyWfxfOlQkwSvxtXWmVR9mNSIXoPQk6gCqIMjkitVVj4OdcZJvbxsBZb1dEjWT/zdZ1TCyRdVHAOfd5eoX5oM1w9//cbfekTXUV9RELjpPwCIOzi3vJqWC2LzWkxuFbEHmU8faeqOJTElILuN8ILG5d/CLuqNG6TZvSjStaKnO1UzvoxiK4O6m+vTRGAOQfe0V2Q27ropBVh0MiJJ8/pU2OdB5gYuC08X2y1U+ttX/n0Xfp+EvEehElTAqkJM36QQ01Q/zpPn6co+B1d6odeS/0Yx1EpOjjsvRjeAY296Tiohw1/9xO/Q+32bqbAF1UFIPTmNmOMo57QOkH46e9CTndL7IyGqhlhiY6EC2aU6OqffgtFkE4WE4IBTpSqfUEkdx1X4HQtrpIrccv+Q6ZucMqinZqomF/eEFYtDVqQcrPWCl0rfUeSnEZ1bHsiF8bOFTS2Nra+4U7q8J/63tosn1weUJkUCCewZDF9YKL4cQXQ8G59FGOlDLnD0OqKlWyd0gOyw7oFMQkbTYk+9X3x4ig6GnZtZTuVNfPn0ky6Eh280o31Me01tq+87APYKQYsA/K6rGKolmLjAFV/YegOh34CUIgq1zf4n3XNzEducDgSCIfqC86Lc+tgnonQaJdoatbj5FdxfJuiUdCBBFLiACwenKnmfucgv0kd2v5mdacCeRJ88krQ0l8qtNzIQnkAfWoJFILVDglrvmTXMUACt6xnOzOi3Bwe4sTMhnLwxSQwZ9uqDSDFlT2cOteRYKXdDTVHM0plnCav5EZhJlZcNVylDo5RHNAd/hrRsVByiWjuClEZDtmng706Ftm4zbIGgQu8lWjbbNRbN0jJER6ajEv9BeIf0pggBoi7KseXvJuVAWJGjIi0LVsLuKJPgpTNMlwM3cxXT06DhtFHtuZM+G9grJB9IPut3qIZ++b0992pHOtFV0Md7TsibiG935TvKVLmAcd6q38ezvR7PyalCVyv0TDln0bZg9dEhBqmbCGoQJCUqj6MhQs+v1eT9GRXt9+sAkR08V0PRDdoLqPQcCKat9HUHSuOQ2M/gHevIgdkqhSV0w8pMMPYYZ7D0IhS7E12CqFc08dLqFik4Ao0dRjNkYCLYk5cgBR/g2LfljdVKy4ZSFW+eYQ/xoi4+s+udfxgSgFPsCSCvtDSnymrPkiY+DmVGlcbfruFOsF12UNF/bHrpyK0OCz+o0NSKROeVwoGhjetiEzUV3YaPkPHV7SEx+IAYLQxAUl713/tV6yzbLTvEi7YYRzArbiqnby0e/sRIu1s3Cxb5nxMpdcqDiUjBEBuOaxbsJc8N+GbH5D3QFV/fJ/SrtR6K7O/ZytG03oL3qBQ/MkJZoykX1oX5O2EpPlFkHTXCj8m59pmdyXK2XBZ7W+zXwFWP9vkzakmdFkZkbVN/DZqjnFbjQicdxV/ONNSi3OTeLzIXGMUs3n2MzjzWK4zsW0misLhhtEmIis0SAjCCbDL+mhnJEYuKhbT1XVFY5cs5owmQyjp9ARwrTbJuIycWpYEmHO+o5y7v7Axt2X9GA6FI2MwXXBxmG9K4XQ1k/stoENYr5/B9gf194hu97BinibQcRy74rlXiXo20U3OXLmFVOkKSJnfJB+ruBxB96iOs0DAJzoMx46gHAZhu8fkSfcZ5KcURUPSUNrUjLfO6hwj5tCURNAuhKH6FXvGGk1wS1/JLN+LqieDdMgDbcjyrn6qJUoaZhbTHjDG4FIri3fs2qmaa7IvrcXXpZkaPC1ERc1Ch8sSVWmw6a1Wfv8EeWEiWKrUwC6H4sb7TYhrrfh1CFnPTVCW73x4aNA2kkHrmZeoOdX/QhLtyDMSKNdNBUd8U/vYXsMyniT23MogQItFvq2gOCplXy9MayxZYfsIdJwKK+3/e8rxZ0uMKNKUjWSOtiBbaulf0sxWrlOeE8So5K7W4th8j1noOWdsQCj9dJPijw+YpZ6ezLNpIW0X2ZMfz8K2ZksVPCCCUC4U6voPurfHDY9yRbwf+qO1XL3/KJvL70x54uyHEC8jX4AJwjtFRtaA7pQxVAyKk/u7g+yZeKFpya9mj2tbDw3WtfvHwFh4oqnkOGeQkEQKcL0FHnxewl5JvexlC6w3mDnbzvJeZGs1Z53iyj0a8m+KpogvNI29U77Oqy3iqf+/GYofywBGXNRHxVQHeOGixzzpVY6P3UQl86QrWdEALsjSKRTLlmR2w06p7fVicGaFKpbzoHgi/Fzar1VJ1k32QcD4q62QzUHzjL75hx8/NrnXHsoMBoELEqhvApW5XPecpMFMMQt11Wt6T9a30ud7JwE3CuVsECIlrMtaVQ8tTfehXgYhAbmmRTTUt2HsvXOuvxrHKptBLNagrwmqNXFLuVmJji9Wl1UDSyl13neugSfJ7iq9tbDMfrASxB+FyQcFxeW1KBOB4iB1rlH9xuCv8FZp/Uqiv3rCuZ5EkibdfkSPHr6ew+6CvATpG2MoobGiw8I8nfmku27Lz76GEgjK3VRCGySFspTr6GYQy3ay8CBe6xc6L0e9t3suvxE+p2kbhXAnn1vGBve8cxPmsDIp2U85TI31wK8lOqeNA911HOsg9LLgFAAcyUfvUEjcrxZX22uR1yCFBDkTiCvhf894idyvsBZDhCyukjvlKdivBIEZ7UUO0VAKWjr0gpvyib0qli8j1/JG4jf2T8nVu/KyLdUZsssvvucSAHqCgKSV8CjvNr2xIX1Gr9Hn3OUXICXAkEwZLhbg5Wx9U2vIxYkdQW6MsOVVPtgJZltfFzBq0r+EKHzBPTpVbdLJrvoK+my/NxC0ISl56WZzYKu96fhFXnkZCpdqhvuxpWctr2C0KuxIRekbXdTtRATpmyu6pCj7A4+/hik7g4nR01Llde08PVSbXw34BmcUX8DXNziy205xPTWbIupyh+WOcLmmjesL3dm9PzMpfLRrGrld4KRWuebcYSNghliUDOBSxq9EHWEo9QDwMFsdMF7cd/QbqldKA6++dMRdQLwSZzsjq3r8wVvpaOU9dTpazRg8ujyRHBL9nrT9Xf5Oc+SLerBn9q00UKnMU5TRUsLek8vTcwmpBP4RRX3uyOlHaXWNToXCm5VELY8/JkaqN5xPSkvi68GmF5NNCDBcnMxTVldNZtqzgt7uZ5NKV8hAmIpD5LqqeFBmHL6qE35UnYQYGxQfCmf4gIcbqYMBPDO7shfGPe0yxNx6QlKgU9O1z5yGqHm2gG+NCLiMrH/IbPbZ4sRtFzlhBZXReU+/lYcKGb5PEciqmxJPedWyaeqwPNwNYOwDxZR0bS37W4xXJQKQ9Jlhk5eyFB6WRYpeGpfbjU2M+zhNvbxj3UQPsmj9qpAmSoXdUFjV7U7xSkCFniloV0gQoWrIEQ/L/01sF/kF21cAxvFNw49ypf/RI2EVsPWtY01ww4n3I2nsy4cQ7tkuSfTQL73mbZtT1N6ZnYlC1xK6iszTkUUmUDH/G+NsW2/w1BCWvxCwtJNfwqBxerasKODoIkHYGXxhKRgJA9nrTAWTy3J0qo1B2Cd3Pc1+6cPwVEMlRklxLEeHhXXYx93HWXe+98+jpC5humufAEMZOeJs36YEDNFZFmRFdDARuED2w4C8rhFSOD7i1lkbMp3dObnWzbIVW1IQR+JbHW1ZlMNV7LdxmonDjSnuYMUf641zYEQUrOmktMvCyIlOH4WJNzb1ZKdszvb3g51siJUuIBCvcfft9rKqdTW7pxHFabsg4vCsHkFabbDML/Yj4IbmpMv4AorlniC/RSJraEAWr8fvB6HQKgYPjXoKb/1ItGx829phNJUUCHaSkkRAhd+v32Y1UElePRwYQfqFoW9JD9tBYAfat7Z1A6LUnLDwnlFSPVrtcqToLs0asxNeqA10TPcErROYOYoLcFAw37ppkGLzC/B0VqzuG16HL8f7pAKfXPQ/ivEDxm6DxKaz4VT3EWHKlU5htKMAi/0AoxY82qfo3A9xSrPKOHpIbepOSFr7fVGEILI3TDQR5plW+vxeLHdNJJX0VmW7B2/eQduIfrpdiUkGQrJgFIhZB981jXIGo3ToANqJHmKmZj17PCq4fEKLOqy4fknYQR2k1fv6GTI8bprP0mVD/8Y74OCiZuTdKkFGPKo/SToAEP2fFTogyIotJ9/MPqzcVg0CWOkCadxApHlkwQi733YOXuuBD6cQzbSTXVE3qCyID2wluFVN+kZ6MZqnRmEZBz/iDVAaSyZytNPeTn0/mXaWLLAkyhtVqQBsy+kslrKU72UnjH/yspSctSa1pH6FEAXQ7gUTkROjgKIvRmSFwohJhOa0kGHZc9C+256CqHeM3EhoCPM0nefsqlPT+HBSmHJcy963DiN17fRS5JcUji6ZiymHJp6bIojUIVH7pryjP+DGypfr9Da2Yjd/PXSTCT6JkoBtmxG1jgKxJKUO/Q6GEUY2cPuVs5lp9VIZ6ki0YuGY7btsNXmOBTJAbW+I4zK7MhZHoGcSdsxLOPBaTlu71oLhhPRLIYMW/WP3vHzRYM6qAi8TJwluVZ04LLC+zNJYxjZKdJ3TZCFa2CY3o+YGW+xZeVyuDz3VZEFIf2fne8Vd7fKXw2THLpMk1EdeZYFwQYWa8EdOi2QxM7ouD6d76O1VFJ15q2bmkx9Ot/LL5NgAwhH/IbPDeTzYjgsqgzJXVUoq7Z4WgiHYz0rAP7ppqHuRWYwiSUEtFbWK/sCa2qtO4DDjmzYL4iNze4ylaSa4AMIcvqfoFnZGberIzIDgmceDX8VBef/RpulYLW5rcv1IYuHxgddNoNmRSNWslXY/iAvMbQAlstTvFjS2IHdKuovYiCU8+sXaYv0KWpYV+BYxPVnjXiZ9OmKaKWEacwkOgN4S+ntX4njpvxuJBEgaoqvbQYRRU9Z8MC4xSz2n0e4m/o/tSrthHvR5GHEh4mkgmlOyw27lDX1Os2Pur5Gid8FZPDCWg0m9xaR7pc+i5YPSTg147irZmr3wrjX5EIzFHwsIIHZ8MKcyZziuaCzoI5dXclD/COAj3jPegHrKRAQvz8Mla/uOSP+2VP1ZIAUjdoWpa6pUJUEf7+87hXf9Zw05thQ4tkccr24i+gsDNOpr0KAi+JGw/ezvD0FHf3CE4aaxG+wW2VvXgAu+REadc4Tsnu09MzLBhFl6YnTGvOz93Y6aNVrxtn0nMp/kFFqhBv/Rvi10Zn6dsi33EKuE9D2zPc5jYcXg5jKWfSwdYO5EiwtZaJrW56D7lVWE1pyUN5aH9oQY/CBInbgEkl3omNCXJn27eac6qJIFKOWfk+P0ANECKENz+g8HrxNfr65jvAHDhWnQF/KPjdw4n6+qM6fOzeVyCZbXZsn7GBF0j0dKmZpdpGnirJ2J/ydomq6IthQLDCM3mIY4hsg/vzTrMswQIkCK/1y3GLcH8IwhrHOqi55u3irW2CmxJ9g/Qu6pqzKg7YwgEScxsucdVRIJXWquB/68DKvhhTef9v+JKWVsjoeP+yqH7E+puxOOHG8MnR8A62IJf6/r7qcyEUJVjl4M/ZvTHGVm4dn6GXdnSVmMz9fc5vSCCXFXwsCyrGyhThOrb2XUYefjYcawxvh6Qh2P7JyU1b+1i3fPiX8uagrkFkVqjpfrPZY9dryvqiP1vVE+Hpr+07vYnQGsDZTyXJ5HhEEfG5jMo+PEVAByFo5KmRnOjaQbMkEKY+rNY9cZ8wuS1Bo6hiZisH1ExuZYBeijIDaqqU7xGkQMvzioTTAo6oyQnFxVo4gXNgIwcC3pIJqIWbUnhtuZamUrozJFsFKQ1wUAPYHYicGP5VAHQrujlzKqFkkTrD5ApldXfvZou572mRurRuP4oZ2r3puJIKgLOGE5KjpaBMFDbaKMOvuaknvykvA/jpTqalkphruiCpSNaJWu0aihMxvSv6FsLu9OuByL1+o7W5wVS/wshCCAZrgU3Ga2VRlKn8u3L5c5xGFxXJMiC5YlmzWJ2nIUG1iF4KXC1xpnnIxDi4VjJ2ZWh1YOIG0+z7TR9s9kftGaAJyXLkuvQyRtrm0PE+BBw2Lf6bjSNICJkuaZHo5vXTYjdR8OovG7+P1xz3kmDrZ3Akrj9e5spAWMtBy9t34aVgIXkEnCG/CnPdrnzWc6vJuF2S5Iq4fcss/eJnbIUX1CUvSoKrL8ouz9m8kR5b1H6CmhM4U8eIW/aWAFEM2M7LXd8yjY+6qP1EqqsgDhfQ9PtbAeY+NhwLyig9F34+Ik9m+oi/5CN0O5sp6rsnP1jnCUhXicnruLe0KuZMIRL2qEMHoi1E+pkkV04TQcytmIXC0y1S4l2EV2DEAgKFXbeg4P9UFg0Qf6Gix6lc94mcxm1N4trCvw92Q/N6Eb+PyN0U6m52QqgbLU6LcwJy4qvmnyF/1vQGQcmECysCNPADfokvwijEmFIYucrsleElSTyWYQ8VM7B6hV+UBQFSFPnhndDTElWasxOIq0DNaW7ikO+LqcvbUjeiG5BF4FcFpPjP8+hyM4/gIHWQTjxkeiG6SJ4aEx/v4daJWt6dK+hiAcpmETTjKnLva3P2gOej9gvowkROgb6NCDrZQGJTuRUIflrLFJ6Q+ijjJeTP7gU+NWuwgbtbtLoStufPGL990HH6pMypL7DJhnQvaAdCgcMn5N++co2iSdffBpXy9swIZVuhySbbJHbkafXSfmkOuXDLMR3IE6T9Z9nV8EbtOD6k/Bj0gc0cn5+zpy2qCQ+X39OEv09STkgnLwNgSeeoguY3zM4dXvQdPAGONiC9tmFfclL7ksWYpzXYNTdTONKLg5KeIwqVFjfJF9PCU3PZcU1QMWFb1yQGP62ZwTxl4LPj1MeZebkV4pLErKfg4Na0P4JWnJBX6s+IcjkTj335pZsgjJKxf4Eo3t9IIgF6csO+1S/+tgWGuCuZ0JIB3KL7MIsqtxJgXrbPnLbAsUvk/hZJIwKR5GFd12PUnMn6YUUjspuPbU0TfJ0BXMdqXoNaes+LFjwmaNV9PFQuzXEZAp92nLmSsoKJki1hNmO4zdOs8wRoW2BqqX/IGv/2nk/zPgyps7sbf3hTjwuI70QAo7q4GefrKD4Au7xB3qAdBYj8qd2QnGPLFPbrFxljNiqFuNpd1an2fYeZIuPzmd63muJOood0AKYF+f6eeoKIHXWibpIpUBV45JBO1gi3mVYmv679GAemY5LsGAD03KQTcjedKEuI74LNxrI66vsLCjfRNaO3PU2FTiKSWW66W8kYAxka7+61Xd7IRxF9+BoCC2I2pl6VTfM7fOWH1lZEykvdn09KHuHoXl2AWi3dXK9x1GPsmWBhNBR9iHpfqkt9zUZtMGyeUVCcxJjPdNrk8PJgj/1Yb5rHP9PEFX3LREreLu5HSLSLIGmHuE2sots3HdVFBEmxo2mryxgLS6yAB2Wyo6taSAPZV6Pm32KnlV1piHW82oKHoRmSoLHxLny2f4yTlHQN69tlU1LDwY1rfD9BI+c/2j+U91PJSfDduzI78WO5PbXVyQdIMT/vdmqP+HdpZuMvcYNanr4rnP3SKF2r/o+0dGEXxvq93TsLVOYL/NctrnoJ9k0e8v3P7ezOgx/R0QUYprPOqaGzR7AzINghQx2ZAPlmvYIU7RW4MxQAEDCgVbxdi8oqDW9OuEJktyYDPT2TlxShs6CWWZswmwZHr0splYyNxNZVSKX/RoPZ3qJd9o2Qf2LPokNNnN2sCNFLsXKsLoHf9o21sQ7gY0704IEfCTEWfTu/zW8wk2vE6RxUvSaFl7zlFYIuwaZrm+vT7fmUlom/qk8IHqIq9tlik3XkZbUwbP7qjj/2QOnnIN2aYn8PBzo5hanT6GESRuvQnJ7crHJMQIhQ8qiq8a7DihselirPhpdFRB97ImGxgO4DWZvumQlxB4K52eAHYnqCqsFCAIPRIDRZ+SUZO9ZKUVZe641QydOHEW+uiwjX1t/1MKuD5CzT3eg0u1Yz8X+pras0Ddksive02xJQjnHdI174SkbqX5eDqPbOrp7kPj5/B2rg6MZQNTXjNs8oy5n7NfP39d4gFc/ZLqEWI7h8ZoKu5OVK/P5LUTFrDH6ZZ9rmUDdU3F6h1mBrz21bu15l1gD8L9nz9yJ/BWCpcHoRxySQkXb4uL85jtt9Zhr6/WSg4MYy7/8y1+ZmtXLHIZjKr92Ku8MitVkU3KhRcP/VxVtRBPfDkWscN4rnYqw2DfZH+i9T1m8DLrH1rq+3za6y8CZjK2Kk3G9hjiLEb7PxK5snf5zB9/APSP3KEkg04R/P+dQ8/JGDxaV2yrQsrNtrCnUzgP3ktpyZEfEATOiN6ybIMwCB6GdfYYeQmoFkJiDVa3Mda6UIM+ryLZEb0guKR41Aya2r3yYic0ymVPfqI4X5HNM1bjIQ9ezbYdrIrCGe2Q9Mj4YbwEgVvNjmgUNNQjodTOBjD1qgzqPzXwhs5jccMh10jLs768tVev1eoKo8z+1CQ0b4zCoiaFxqgENrG612mpD/qTsyjfnpAFiDoF3ycGkwVBtRW3K9TO2HOT67yvp7VIstOnC1pwkQBawuEk/PZ9MClQ9/SFaRUaks3Fnh1SfKAOeBuiOvEEsWz2CYrchPygsBvbZVXfK7ebZd+SxTzkEie7t4sJzwF1haXu+QQxYTAMUKcs7qj28w4qXbS0yOxgrSy3r2nvlElhlCNdeZyIRfz3UBbMz2ICTYiSWbGVAMYlLuAMCt8Tl/laJjBpN/X+e7hnusuv5jYk2ba2W2n4P8VvuPTGFdMZXPcKyfwoIp2GgR2DZIQ77vCSEbj+MtXLmTk5KQJUAQ+MLOeCGUo40zA1DQAmSYjTc26+twhYrSjJzdp6a3vIWx5QeIWLGHF3tXbNtIaW8kXGo/DTn5y2m/f/r6ETm6iEWGYBVRm2sJgltPlaGRtWeGG/8P2Z0hk3ET1kizhjs+b1odpkG58aqvsYgHigjUgJRV48IVsWt7o84wzAuIe8wEjwynqsKodcvsmXGGEElkvEsZEONofSmgF42yPFw1WNleEgM2yfeLQEnZm8/oZ9Km8ClO//E3H1SPvQUuYY5ezOZVh5Br//x/0f1i3+Wl7SHd0CrPmBUrQFVb1+VDvX0IkoZ0bQ8PoFxWZ5uSc3uMOZapLoEY/7x37HZy0f3+Ud0NjFKQhFMrynHb99PVlxiMBG/setG+20VenlgxjUDfY7xSBlNxWNY4XOPn5cyEMKpQ797R2NCwdCE02kd5UBWCvPB8PF6c+bD95HG1E2QZxGhOktgTEE3Pei/0aDiahRIxBkyumRXCgWWf+lNC4aVJnIhem1r9KCYeUnuuqermbVZEuhRFVRe50lrqiCjOsR9emfKn42ciFj6jQxA10hyn5lVYdUL0fDgpHs05YZZSVd4ZKy8NHJ10+OCF97AH2SXx8vn2UZZZ8M2W3uS2G2spiicxq6r0l67895DQiSLDVWRmd+uK2HDBAyGNbY+0LyjvXudU0GqYSFcWhj4NBAdaKWLVojiFVQvt8iZfMOgKS/jTx9/UD3iQ5NemFoouL2A/g4MwoqhVPJn8jRnjCOTo9l1GCMhk24H5gpj2zXLyY9EZV2UBjpfjwge25VMQtUh/13nP2v1IoRWaT0YhOC8P6PJThv7M127AnC8BNleSSOP4j2Zaq7n3wCC1u5q7QvZVHtyQAWr1bV4jK3RFbNmVC4gkbdOiylDurVqjgOoaD0Q1E7Jx5zlQjd15Q6/gLOtFo+Rx7KG4sAK0qvhkwaB+nbc4DXRTKnYF/t2p/V0zVgUyGY+09aI48mVsPjvoUaYVvQWGJ7x4sZHGKXIL7heJuehtgURbHf5jSda2aZ3B8xKoEu6GhJJVY1rg2blLdX0WoUEUPRwXd44wFrPs2L3HYtla2n+2M/HsYHo9oMvzm/GGfwIRXbz5wTPYjDhMK9JxOWdJJ0814zAJHOWodgWEX1hpHrJH9ZciGRepG1q29NNhPkGTmB2aJx14wWUXWBHXIZtxapMYNHoaNf+PSl3eZ02Sx63wfh596qjxVxI6JwoIHEb24/LUU6p51T/3DfXW7gZZ9isSfaIJziQ1aTQ71wNJTE5casQhtigjJwwkimteHSRD0lXwGTcc7pGcCkAag5d2uPkbgxyfZU1MM/itWq166eL08SH2ImgnmhhgSfWK+ZUeNdLeAJquiVGQ3X+z96VAP23nR+E+Tz/vEQMky+akoXisGSUqCfOuUKluKl7TlqVb+CycMfPFpqbpc+cA/M2P6DlV9ko/Wn87g4zErjgPe6hIXmRqS8GqE7xnq2GAINvl8VZns+VPX9PAVXujQSRTJQIs8y02sbuESgAvu+sbBPnk2qko56BAaDtGoU4H61W54GaH2ITcMkitmijDmLUrr38KDs8g23+BTUbMATuRbNtl6FWGcaRlV2IiOiWWpCUV9cqC/dOoJ2gLfqkYfFJIAt21EEqWffmQgbC07gMy30P5VCyACExm4wfwhvfUK2v5CKZtLR8FXtdE+tb+BTNXwKSWFDptIw1nC1I24hWiqoV9cdMS6akL8YY0bM4/tSXoSIfMeOi7IEg1GkOSsR7hTEp7Nuey7jCHoHlCaMlvlHB5MX6m2i38bx2tco/HgiHAOw+ypSnbA0uaZzkV4tod3Q9VrUjMQvDTYGrQLLx/xCl2u97qUns+Mu3Sy69uXo5U3ImLVxXnJMHYvuzqJyJno0QgPJJzL16/gEUXm1YDOJ4UWU7eU3iUVyAYHb6SNXP78YWi4sKUXoDuxkp3xU853To5i2hDEQvrdyoDMGTfpzBF2t4JqUJd08LdZQWzErOnk6WMALjsOWNDhOg/YRQ3jh7A8FtCXmXDopho537Awd2WsFj0SCf7FlCgwTvbsKHi65q6/AhhO2bG39N0Xk3z9mmTthiEMks1KgdLYo21gwgOn5zcxN5ZWDV6ia5L5lNXrT0B8RjDMq1T26G7W8MeadiQEUqRZ7Rg1dEpnkjWPCcT8P5Avqfmhww+SyMhaRVBU77tLpY48saFm46tZ37dc42DZANnOSvlGRJtvsZF71Kg29VfsA3m8ldZi4DaLKcwQBOX/OxffVfHrVXlnSOsLGA082WLNPgW97gaX/oB3piutP2pK6roiFroiCUX5XKp4V0MeupfS0l1Q68Ik54GzntyKjKpAYhKVy2ALWtPd3hFoxD/P+lWjeEJxRD/mUB4ycK4LCjof6s5E4zQicsQAt+KJxlvVL7qTrKtegZDx9p0WQ0Z2Fsc4TMXXb4REHSuBjTPz4qc/tctvZ6foEgUhmHMqLSTI2Xopu047GhG+ZQX18bwg8gGKfY8HrRjqbbRVg56mEkFxjK5mR1PFRdHmyXzEDOGyTkUdrF6FMm2CgGC9m12toYmhA7Pgy9V9hR1SdcJrZ9v+t3Nec+qHyShMZGnrXl9lvGaGuNOZn2OiQiNAN7GudQe2p74UH9vOGU4lGoB7eZPiHVKXBqiXs+J6nHMaSkkU2EmL3+1xURZYbitmDLcuHR/QgAlwCOxNl1m9WqwCFFwFkA9fEJSA2nSNWVvGZ95Os3czopVEeHFR1F2+mhu3UBAm7I1I0ABU8BrlCG7rytDmlza679HeULjYgW8i8wIg4AMR7WBcQ3Z7tPW89FhlpBj6Rs3lLFV8zFEASHmV4DAmpYGQSKhgOwIPFsBHR0VGLV+zSsstFl2Amw+pnu2jo6FKK01c1Q23aubLibnXWivXPHTKM1buQgORwnT55e92VXGFfHlyIncFaoh4l0w1OnLuRrW5QZDyznMll0E1tmOdop5Kh3SAErbktZUtkedo9O7ogtkZGQAI501tadMtb5uIzP5RKzyoq1Ehh20FM3G1pN+DHS55x8Dld8bIKt4D/Ysf/mot8n1Av+DuBbtOCC2Siyzql5kWIizGZ/UVunbVNZxmZte9QwH04Ybq4x0k8H2AcKEK9wYdr/TvEtJpb3wvjbr94mcaIL2R7ADlZtlfgNPeuCvSRsgEAyZEQR3vQWo7CWLJa3mxBnR8k4cHRoO1m+JpnQ54za2oTnzzvMq8RowQNhay/6r4jCVEgMOzqYoNCUxNRs9oXswKR0fMxZqlyakxwG3+zyxNaVhZjp0mGjUj4hNG9+dvoprmBF/DPQM1mn+G17QcuJD/uH4D4Vg4Ph5fJ/EqRZ0ffmwFVz0eiYVy4cr6BnCj6/eWCw6sLSRbGIj+yrzZPKePL5KORDy5ZxfvItrZ9qjcM/O8B0Fv8oq/1od1jdIZH5arNzS9D0E6IldieUKeo0qCVI+R0ZG2trPzLuYo8r0brWUbtAb2m/78xsOyBCq7rp3oxOCF7NztysE5bu1QVptyI5BarzxTIWPbRXexTIQu8uULg41zP/9D+HQ4iWE/SY9gJIFE0EH/6D0jNkn5le1dgWGnyotYbKWsC6tFW3wJtwqREGoEkIWX5ICAIuheVl6Kzj/tMd9pMprY2OfdjwN+E+e/lkQnZTrr3e/gkvRtRjFOuWHWMvifcrd0UkRpP30IXmgySOXSnQdrvcorFj1JnUzEMzeDskRZcMDhsGRe8hap76nZltph2m5pacsHjWWx2xtAMmYGkU29FWsnl7PjlpBjaUPYfR+gwtZsyrfBK4xi/dBFGnT4jqbbbNHmKoh5A2n1LrfiJ0QEmRsMCNgxXotRjxCzdbFx7fIvjUz5TeseMqyrLsjcA2YMZ3gV1A6fOe6xwRlyvHeeHEeRSGYTKEWF80CHIka21/shVrw3a0PSinfJFywOWLJTuBJV7VxjLNndKsWJirXn5UUQc4hH6n1lQvYTIwhv0kyURmNP4afJVgcpgGp2XldQX2vxy/SGn2SgH6TR3CUrSEUNMPDu9hgapahZ/Rw1RCqjr3coucrT67a1s4UcBfNMVbKnMfN6E+AorX4CfaSNtAZ86h55paJ33HCMDFzNBoJWGlu2T1Xt1A1EJQM0vAu1ykh8GxOIIs4mABrVEFTi/eYV4CUwcbxmY9VroCPCiReVm/hdmHF/PcvKD2tuf2u0YwzxUWQMTBQoU33vloNxaYgQxsRFvUIM/VFrbI5+b3v+D4BqeNHsFfP7kPjpvRoUnbmSByGv44TU5Z+2jtMyTd6W99RTbRFeEkPetQsm6aIycmqP1X/L+IH636qlIMbcfFL+3YJyFJO/VcKzD5bUz5SyWWZGTZh2EVH9nMuFIonyKelQ+zD3TTo5wIr4+SiBLc1q+zj4xNfu+qeyRWBVpuOpl0mtosGfYAEkaoDH/7jh1hsNZMAoR7jiHkuMHAVaOPTkRaZJJwzNS2zmYX8/tg5gEn69jd0fb4Jd4AzoFEWdP/ykwSpTOrX9P51hK7ODh1KizHCsI3KuMqoib0qXwsOtyoworUYR3LrOj1mQXlmtkcFLY/Xybu3dTlA0/8k00qSX976odk0aT/eZIjFfVdah8eQ69eU4FJKRJBY1/1GbRgt/6CrJETlhhKnA02ayMobMnJdRGEPPzQKkwnWIOIG+X+O4RkyJEru77DPJIHuhUySZXAEBOQGm4Vb4iXiOTu6wCB+SFvnaVQFMP5CYaEBiP+faAg3hbNp8aAzdMv9qHf39qhtyfbd94aKiZdbA11Q0XNYmuQHHSUfbBM2ULg+67XL50CksSYT4Weib5b3ohgVDDAtEOg1dW+3FxNmry403xsQxg2OyuFqvisJkAcPWhGDV+JwkO665SfJc+N1hZj6Y+CEzih6Ub6VqWOtcCTkj1MuPllqPBpxVm7YurtCyHkPN6s/EG0jPi0Ppq4Mz8eOwK04h+LzUZOmOBpDKQWw89yAiE1e9T0X6CTj+HyVyLCGCxaCd3u31CG8IbRRJitiztBuhfUOlWYvGujTXJh5wwD5oP2UZiCyZR6Cl08kWh1l4s8jD2C9d0DzNCAXT8rr3C6zEdDiQ76BfDEHfKdeZOF10z/+EwpmGWL2TAakXc+fEh6XRWOfMG5n/d9NB5ARfDhy9JPpxPyAs4T2cy2b6vbvtrgtmy3TM1P1mqM/zujPilDug4MfeEXrGQVpbg8Ubk0EjpbXJ5OHoXqlKjQjui4GDve6VUsGnByjdqvhaBQwTMx+Lb3p8I5e0Tr74O8g+PYVJqXU7xve1IMLNeZeDIRiEJeaae3bJ+VyQ7eErXjQPrILr0uWSboBZUeYm9JwphIHRtnHcp7n90ze8yXhiAxFEs9dRg5tfnI+7tSI5tWMNmXCDh1ABnyCGPx8UMBUs1zz8sJ7fccPeyt1aQoKhtzQJiG/2iBHq06k4+WF7OyZtB+O9vcjj2JAr0RSeeJ4AUZXiHyfBCxwuigH0JwWNQ8lqFIcKmeI9iVk0Eo+Ynm6hWsbfFeIYPWT0xY46xSUs2bgq17h6kay7H/Wr5TGVU048iOSX+XdsJ3fcxDPcKAo08/LRvJAPqmLeE00pkn/h54nvFfXrMw05rq36NNQZ/FQgmbAdlVS8L2B2qLDwZK+9LfiXdFqZaE4SVTAl7vUWEnMlNb+TQFcNHmRGyv9r960gHhFEBs+M9cPzkfAv4rfF3U5cbUouxqvgfaezX901+wXmjVkgin2kwPz0kTTkqv7spXgAES8LVwMwgI6h86R3cc09Q3eYR9rVJg54oIrWu3QoLxMuwCQ2IG6ymJjAvzCjPGZYM3lBlFMUYxVO3PFmHKj5iy2DH2Lyeas9/ghM2PeYxMg6qDGcOxMEQwkp+KczK3QrQKwq/JRsUcZAmCtYaKV8ee2A9wUqwgkdxOh+RMqWQ+7LzNIlWZhhgtlnAfYlJ35hCiKDQDHD4alexil6zpWwOf7X8Rt7SEsr3eKBigEJivhdfPe1ZAQZ6hR0a8ClneagRoA/OV+3DxYSI+HMPXAAu6Ir+RCYf7AIMCGjLAo3kB/HD9CdMFRP0auzbcCfR/wrVgunBwZUU9HpgZp7LF3xWRgcd366V00CfGJPml2DPKtlUxWI3Pw1Ih4c6lz3cm4/lXiUcR3zU3Ur4XoZw9i6oDdqbW4AoZc+noF4CwOpfVtslh898c5wwoIvNXDO1lvEyxNnPqt38g+UqS3Nt/zQJFsh5Li1pIQlDCX183FWn8EwG2EEfOnsRPM+z4IanfvIPLw7FcefV85Wmt3+8p6dGpgmmwrDAhyJQ67oAoYLWTTpGa+yRa1mei9RzIGIrs6rh3eoFcYqXcICxh8VT6dl6Yy7QJsKJ4XbJJ1+PoLHZfKKTRXmqx6bHh2ar7i0WL3xeY7GO3EMSxzV8zlss+qakhrnp9PDB49ica0KdvM+bj+JvuRfY0lpfQV7XM8zIRzJDN054SsApAJkPMK4tV6qZqVvORB0dfjy5F1A6mzQCchIE3YiKwJzN2pTZJZvs1kKOktQI5Ut+pGL7RK9tPWzK5tjPv8alRbuAdV/Z8+1a+qQQYmjCSElPaC7Ov1x82iTSqeXT56yo9ymrnv9zmR+9Ph241D0BPYaP/izW4w6AWmhk4BXbj80bypb86QUvtjOfX8/SiuPGCoH/NKmSjMfEZZNpn0SWKCbsZZXTFYjP1D3etjb3tTNhLZ1dEeOyi0T37WPW5PJoHJb5MHuma0Mq+SJH273VzljUmGDr7fIWIXHKLYO67t2xEkaZNI9OGlKe0Qz3fjntJOHFl7k8N38ZME2irrkYMuhIQFOWHFkuirxsIHORNV99tPB6Ry1fA5/XGT42WCjpWOcoZQIOkdvFtx0J5La/qEaSyvJwIQ4Dn+/ZRNSkV29U0ntVEjuwoeOLkAkuc8r884Uhaoe9IepdbEviRn9K8VgQ5ADnLe5aciv6DahbuioWjGzauYl0NU4WmX1xZj/pnnLrgNWLfc6Twoxn83XnEIaKbdLaqN/NZzVaxVpf4jFFj+rQeQhI3Qt+foeIGalu9rUvL4jGNcMJfV/dKqnfbZf9nX9R9gWwtsRDHv6pp9zhHQ7sOy1t6n9ntwPruSudSFPrrJJBKvIYdMvq1wvSdxPP2lTo2bxdiiQgNKxiChs3/RYhjWjMmMahPKciYffPXikRw5asjyK3hAPAE8quwE6OFT7gymI1eEmnKA26Uwxrqxnw253R8sntoDIoDSwDMdYaCPnMysuf6Mz+Ujkgd5A4uuXVDktLqQFgkOReSr18L5xOkmy02do25F+dO1WZD6qs6x2zNNYmywrRpfqWMKfNkmvez7hRHR7uuKpLWwLaax5IJVnHmsTRGnyyhCGvODKfCX6IvioxCUxIw6PzMazDxW1pLT+VBmqUWok1/117m4GjFsYR7s8t6ILKhOEaz16MOJ6T+htTsbrqbBY/1fbEwkIjV/xhkaDTzp9yCy/oxrJFYHro8VeFVa/pMF3NvFqYSDbvqvfXWZBSykKqoeL3h/m+RVamA1PxEYi4cdiDKNnFC/Q0E62k5pbKs2LZkx6NXc87NRyrs+nrYBEufkv1in+4tbFTV4zYQZjJ9gu8hPWQ1FsiwpkurHiIirAuxSIMs2ATA8VLHlhr+bF2DaUO5bahMgqIVDgRMj159YDJZFy4mMk9JTlDYyoJ0fN/iUoUANbt+xMm803eWCbxw1py7XAoBcA6ADRS6VkaBF9uUrWli5zvliSKNlVge5eWbaDZwt8Ccp562Nhqcr+cHopDgxpwrQL7RjkelBg5CvCtVgtcuyGTgDP1Gn1Jvsx8qkafbHWRslYxrcepioCuVkaGehvHXkoScf+/9InjLOaRWgjaJaHPcIw8dGnsFjpbJMX28YrlMPvfJBRGYyDJKzCkxrj6wZ6SlkQrUHB/8pFaHx4tshmd9ZjOBp+F7LIannp9HUegPey1xO2Rdpxat7lSRfmTXr433G10Wt1ULjtSTvoTe+L6i3XZCCF0kDICy39tX0PrlPLEN8rt2bilYPt9DYNFddT2ii92HSNZopwaU/AbtZ1nQ5hYdDddsamlLbGeNcVuxkYMQZ1WtfZv2pQq3aVWns7Op6/C7NguaXt31JJ5gVjR178fWJdPZsV3E34E2E+tZ2NzAP4h6X2W1P7eIJP2fIOXiCDly46lqJckJiV2Ib9aKcYhEZObop8ZJoHxVm5P+Upf1cqd0bXSBLwIFosgsZBQrdCOSvYf3nFoFcTrDEegPYe6BFagSFNwjYIFw/PxEsYDA32+Ord7WDRDQJJd5E50Z/ggUvU58IvEP4QZas6DLq0rJNBqdHp7f+yBC3gd5+11Cxk+jovyEhj4SqRGxRVSGa0yB6zzJUt8t5mMiLlq25CogZ45i5xAMO8bD5ezsfyir8+74ddibJA+WeN2XctyKX19jIky4He5s+aeZ7AGhwdlZbtQqmQoiOMq0OSVkiLkNTa0Yeql4vOaK//K1Ir9CNiHNqbD2sMHLLO9NGMEYtRZdIDHM6mQ5YCsDYfy17yZ8ZGXcSn5TV0mkqa4KYVqScCaV7CdlJ6YlYxCWzWzRyMcLRZw6EYxHZF0NKidXC+ml/+D6pojVHLzgTCvKRQ3tF6NAXuyMZTo3v3Jjpk0zxNRjHdB5KdCuH3iOO9lIFIRAFfXkDIPzFQ4LLh8ZXouyEaVMtgCJ4nuc81Sn16csT75vZfeIz4Tjz5ZYbD/dPSAJndAo+FjSfV1F3EuzHUMSpVIprZNm5pWDqvq77HWqYpa6dyBbw3pDQKepWQ2/xmnuj8OXLhiw1PvN9E6QGFD0jufAGwA1UR6AbIOJr7DbRLpDlEPuBUDfAlvQZ4zSBIqZ99saFFLbR7gwLOYCRS3oN3B3QIQuS/lJk3DIy1/rR2p8dUdPLmgf+IAb2oMauph04FoTAnkaJLcP2p9FVsBsv/e+m2UYxkvxlduUA0x2cq1NDyyE2Ej8Vmz0NcR3Am3O2CRL9j1Xvv7OyNuY2g/bOMMoSkjS4F8vpZL5x0/KmRWhSU22JzdV9AZElmdaBypxHS1Se5+wQ0/btckfQD/p9/JtsoKpeJOHzUhdi8M8U3kmyhgwKSiuQlL8mcu9m+GckHKulSfpUdZBEWkHUQxlpzuv3MrFcLejcjvnA0vF6SB9i5OYslFVs80RA+dOPI2z/wSaayeGJji+HFEnQywDRxhIdFU2xRSqXLmZby65yh3EIqFs8Mltg026tMShDlc0YDreqqlwaFalWBp1aUy3+nnPrP61DBGbpP77Aodmz1Bf879l/EyBlZhbMPZkCT8UXadtQxrdOFtNjmttUMNEjvvPbtoZ+N6uJ+wv644yzY3VJowVKZEwfRFmY1grcIKGZMy5kQt0EaVhX0/HSCwU45/AWKi2mHKhqeeBubH8I5DlkbgYWIXC4e7WmIEnjqfaBcwx3jGb0v5KGBgpKir6bl54dTxruaUtMJ3eQjbq5lNNuEoDrtSCrXg5tcthUGuDmsJf1bkw1ChR+//+YELfBiOy0Wa0/QuJmG3HSLrRT6uIpcubgmoY8DIsyiC/IxASXjebwXIdYBQnPokW5a557QjIrzLZoeJ2FDV1oC1T/f+QTGqYKpiGslLr/Hts+DStKH7YHLoSlaRHHMGqi66iwRmC6i+DYvt+r9E6pr7LBomQEE8IZXyP1SgAgHVGcQscwojeEiHsxyoktCfrngV85iq7piN+yfJ7YmZrSxSPAVS5RQVYvoncZ0xpHKTLCUx+Jb6GZVZcyOPABF2gppJ8S40c+E2kb0rjulWbQRV5XMOR5ozsjYOaPEzNEh0TEs7/FCT+Vz48pq0/FXvserXxCx72Q/1fjzigvuruY+trprQa/at+TV8YscQHTc7nWyB0iUKZlZvIqOs025Olp9rQj/ezejavN5pXQKmzsThCtZHhlxyfKekv4P18pEqiyin/w/IhT7EIHTZ6z/JFK9k+Nse0fQM/5AznUD66vGsCd3zi3UZYyOuVi2Bgf73DspVz0ztxFNFvvSbH1FXSRf/uk+SDqQaPsycrDc9x9q83V1uPlxydRpTVEpcP1nuC2KHAjN6oUCtGOVeYTdhCDOZZMSTmMrUE0Kzc+UfBK/L0km1wBgGqxeQPloam8byj/WXwpjuzKcCVenZ4Vpm5naZ8k8bMcLy61Vdhnm0HvbH4zddDVxFivnjt/KHOoADnwMiq82uPH3EX0QMqsopGPrTHEnvgQNUKmSR0nBxgF19+HMn8JO7ju88OAMTxPADOu/DIwPx6ve7I/N/PXzkMpa3MNS0y8UJo9qtuB0QKRa3xd1VWS5+QjgbP2qSCAnZlyA5b4L+mbqsIuKIthrAyTambOxPyHx9hyQZU0K8Ef7HU+Y9jfSn2Qn/r70dZLHhV395BW47Dh5g30xLuiyPLyFkruo1g28fX9CB9fn3ImnyO2lb+9bKqIblMoR7npmVoUlWOkT/jrZQfBKivs6vyNnkOd1b+Dp+gPMyR3ebK51egHt/2fhlYf3wu4tf353UUawV9OzQ7WqJ2foqsBdBQz3mtgU+Qg9I8JJOtEJ0dMB7kJXFnrKYUevXgnl9wx4tnAAOU4q0L/mnO7lzpwkqpyYpwuHZ0k+MmCqqhE6DvUYKjy7o+LQkqJYgcV6q43yFL5FPMHKE+nohucLxLN0SbOFUtYbsZlcNm42BuaNJDHWudmHcwOwW7wc0GpTLHo9HhLW2XVD35GRWzNuTji+9PvObAH7U3jo4qw3yzv0HCt92tBCK3ZsDfapi6iHaMMOK5KYLDRK2+dU29fWo6YakbaCD3HHy+kD6131iQ3jgdHXBhWGfLz/oHVBs7G/jqQSpe+Cu9cD8Ixz6d/A/Ua5oOdkpEyiGo/30qc6cctSDuRre+3Q8DY59tj09N320bklftGudO931ZYTFczVyTpibXWqfUy+aBwPvFhFWoTlFZcEjjlbg2Bs5s2V3IqMI9ZTgoz40sL3ob1LaCRxICq5sOA/Kk2bX9bInyOlwvCvNR8RF8w6wX4TobJsYHuZVfAXlC0YjE3M01y48ynaz1IbiSMu/GoWXkKFC9hBifYfnx9l6/bdfGUMVpx9dP8duT7+obS16jLc9F5CGhYV2thduf+4DHA1rD8dkjLIPfYdFRIlM9pFDLfSkwaOOYIsYaECnjTh9dwbGhcSRyIVWhRmUOEho7BzgvvvuXU0bsd7nGHu64OvEKb9aCA7baV+jxW/vrVz6MeAw4xflGE2h3Vs4CsOYoqzb8R7XMhLEq9ttW5xjDW/lvG6aG7A7RYVQSTJnWlYqCI/mWIl6dGH3qKDd6WKm03CtWvtazr7j9gvamX5YKCP0vUAnAghzSWZmUBzf4m3GWocutSxWzRBLRsIwmjrhpmamDSh2ulKzh7rNgCeSWzCPUlZWwMSoR6bH+N3e1uoW/DTVmUGm5pCgEd9adaCOvD8kF2UjqwYJJufS01orQookVmOrULt20FFiKYUjEbatcYE+cCLw9V2ahnErQ8C8AnrUmn6GRQNlMS1JEBhWe0Xq585tSLSQFYwlE3jZXDZK69xa9uxXlRaBAcUEEQXObcooamFDsxB/1362oOUHFupYl89BkbUw7NG3lCHICbdaoRtTJ4qrSDwdaqNHdiEdV8rI5eZ6ChcB2cIgiDZlecMAdh1ourD82IkNlUS5WTWW2qS9vr8nkfc6VEJHqaQE1Q8QQ4BvDJaE8lNfI6zNxSbSzFPc9ZWk5pNw+UI7DP749SeY4WeKfI4chh4CQ/X+gkRNXEOlOvXJs2bX90hkCO1Jek+xQy2xVbQvHJlKGYvr6bVg//VRQItOlgqN65J8PIWE9jBTLBgDEB63f6XDlvN0VPbKMWyotbbT4ALbM/+HkV/AuVQ8yh+hWUl6Ldsf6PtsS1eGPW9urUZiESOWWSBdXXrrALqmI5btuuSQFmCvG/NfdBBji5S8LVep2F0PFB2EUOAceGk5LFEPS2crFM+lIozxEG2GUdfPmaYpaUVxF1N4NiNoo2gG9vNIKuIpqo89V/6ZmqtEELOgdUNxVWFrJz6Fa7ldKLi1QdA17OusAAGBlKfv92dL09JRxqA5QAxsl/bcST13CMVXADGf6AdBDQKnJ41xDGblQ6vloJtG0A9gK0TVapqdTONqNMdH04teu5JURTmvqZqWXDYgdPp+4Z1UtzwipkllpwIJrIQNQD0r6DLoyoRBUQwy7aeB/8+BGigLc0dgmZGEpWn9BFHeCDPNt4OB+dnikKhbPnQvLlykckh96MiOcDTLgYcRZ9h13fM2NbvKyRBq8bx4OqToK6DJsIj8h3QJy8GF/6NCPwzQrdenNe8oO4PYp4sNsyrHwYQTDPAsVdBi1RNKOFTkLYo3B8TIwTgpOhpgjCLGAoBzDJHSwb0Tk/kw1W+YOGZ2+ATekz4bRZrC2HEzwoqy9zHxrTdqvzWhsaE8H3MLB51wakjN312UKRduTQOUiVo7yQAK1buWwnfDdfad9bR0HKT99OEFCNr6O+mJw1TaANmVUcpPBKMIX79PIniyEvw7+T81SZcy0Y3ci9n3EVPBYN+6rDoFFWVzRDlNEbXfAmrqFfJt98g66toAu6gXeQBNi4SuM+MYM7OVyORWMn//W09X9MXzM6c/GdD7Qa18Xwu5mm21S4ww8YPLX184tq4NbdLJBDo8ZxyNMvMCXtxpPZosLrAvDW1XdUwiPgRrBf4DNYxgpfuTcAdFZU13yGgXKDHL5L9KWUW1ubaMJXV6TDTmTuo3u6LDl1g5v9LRQxVMpgOuba3iIrHj5LX+9lPxD3XhGv+BjH615r65/nbWHzerzChQRgXdDIIMY5TURe/5OfAwkR5Q0XZSZ1dsoinN0NmJcIxno5gwqrZu7tVrr+G6YfyPKxAP7gbW77Rfi3eWUTaNEC8tq9L5e3dkDJ/nHn6EOS/fL9Lx9RHmFcqpTKyUc9bN/0/RqWV+XkT4t9AaREtiR/bWOGBwjQdiqbxC3+JWJrgo44hlpe8V2NL9QIfVj5yHQJoef2G9oYprpsP3P9lmE0KAIMw3H5VYd9zULF4h/vUtPkh5iOgcEJN2wgIjDRaCwjLjUJJUZ8m9u5ie3X/flh2bEKplZDqBf2q/e9TrdCu03w/hYywwhG/6GJqk6JjF0sp5bGYqofWPPQv7BwjlQVajmcYckFnyOQOlpjDo9e2wK1efPlkxQds4lH135JsAeRJ4Jl3jWfhCYcmsgWYTxZUKRWJYCXNJ1FXeMUVRHAKqRS+nVupsVaL7E+BWo3hroeeab6/1GgBuH6h4BRI4MxCKhbF7N1YX5f31yrnRMnLywfK2BgIgO9iEHDufeFQ1gP3+hsuD+IiLR1ooVGUOVaQqgBpG99uhztFLgUbMNAqREMjvELjciVYexPHCHQ0GloLTIXnvPtyJAS+4I4vgCLFFGTDd8ad00T7NCUL29xlPb799WNLNQZInkV4UUEobyBvPw87zPV432Ef7Af3bmQJnErxJkhektdWe4PdP4sfUJwpplR0MQp+Eca2mpGI7hg51d5oxR7tIYA8TffuGbWYkUSzYtXRngs2QxtEjcXBQNzAFHb+CXzb5iljgEPPpoQk0AzslNGv4I477stb6K+DIf3QmAdHqBv0du17FndN1Osh9HVXone2Kam6iuKnZHcX7aPqZ01tYkZGQfBSkrFYpAiTq7UX80R7+kKDS6B3LnXhdAfkRAFCabeUDKXhjyMUda80fD5QQA3Qa6Ox0rdFoF8TJb7/RK4pfzhivGvesKYg3KSfqyWi+Pe0u/CG+qdz6+hbwK6jPRrR640gv8gTY2u5UustbMJ255JN17ukh6dC0jx13NE9w02r/UxmCTJ91r0uj+UCsp2GEi1faMwVznGDFLgx/pVNZ94xqeeQYMpsUif4ZYtG3WO0dpw52LxYEfDMznb02dSojEbse9PxIZovPXRUO5DKll1D24w6Klru9N/XviImzn1qhYRgfSm8FpmJvZGOImD49Kyh6Gs/UQVo2JZyO6zq7ybtIOm4Zg6yWG7YgX0MxGMPahiTiVQykm4rkJFCU64EWjBub4cdp2sdTxtJ1q5gVMyRL/4vhW0/ffpdFgSBFfnnzXSFlcSEXT7j4kDk2hEZUnpf56GBdCV3/DfVLTdfdbvftb1bW9qsS2nSMWqpc6zJTaXqXu+oS3Twk8y2CgBvvc3DhJyhEX5lROXCKBHWJIEVmMohOLiVXLWJR4KouAUcKoJ5TE0lsMNCqtBOngtWFnKGb/Z3nYfMKlvmUdvafLlUXq3EVMc4UsO7cQLFJIL6r5XTRBJI3k6VrSTGPeK9S7TdM7KaRfRnpSj5P36vn8hLF25Qcxld/KpHex2wwkqm4RP1vSOlsBsqX6ABZDNiYy7AuzvPipHnXJdS36Vn50rLY5bl4eXCcBRNHtbsso3mHsGCRvp69a40fg0UuQJONryjUJkqbqsgGVyeei9AQPS5HY5lXf/UtT4C5eoJ0xuhdf0bmgYLJtWPtBAJbqB75BG8y7dgBA/yUdOdkAMzrUoBKX2may78oIwVF974DfFcO/4oBBGNuo7X325iY9Dl24lrJST74iC7YwazX2Qf3+zbndLqMpAigjCnklRIpVZuf1XRQ+9gmdB6NEvpzkSmTrAVrEemzXzTXT8bswPW54zIQ8A6Yyb44F1I39+iobLGzZMUgRTfLtSmZIGbuP7btVcqW4nGWa1zMjR2BphqPoDCaQ2WYycbGnokQ9xMbQ7rdPLmUQMuTgy7knaXW54xFNpIgwPKD5FZvjxI6XSa6rS0p/N/iGN0hwOXxkiIOKUkUVme3/zSLlUhNYCF8BcodSRNLL9VcNJ784070xFDsGw+scg+dRqBvWH1DKlJasXabH1sWXz5sryrZObljvqQtzB3pvaLg13sB2Rto9CD1DNE0/6rqpeWGORlaeaadhLv6pRwKTyvRQDCembe4CHe8FWGWW6bb7ZByGH0/VeT4vobbprZsSiQ4z8kiiWHhC6hQJYfrXe39cuzD9YPwPUrwD/FSfaCPEImPjPsH/vKG0QnuDQMXJ656n8N9HjuUxHboMlXWliWkJ2WjsGqCrBQq0iLTppOznk/G0PG+7uDwUotxD112OCBbc1GAzR2FPNjLHrkJZPRIXRySDUy8u51zLpwm+VZK4JhmAxq7lKqIKlWgLQmLeTRxXJ7ZZAiEmWGb9PS+Xmu3oPdLSaOIJGA0qkGFGxjA8yEPh7CO/ND6VzBydyqJ8gL9xJLB2rbyxm6OENJl0GpX9NtEIgf6HP4cJcykDGUwzZAGYy2QMhXKOfiph6/B19VOmm4ELsdNFMwkKAwrnUUAPRDF/EY7ZCnRo8iN0lsw0CLnHHrSc2ieVgMJBFv1Fjf02oSm3wxasZAZiloJ+AKOIdDbpW7UPYIVac1uHZbfss3W2gozYtDlOrtLdk6Jmua0f0eQ2PRaDRTGG0yAyRhdYlaHn4E+dN4dJ99d1FGrnpK8r+NtjCt8lHXazuzAK0jEzlKtogV3yqj0HS8WTolltU5YwwtZuuhf7Wa7EFhzGDdS2/A3cyeEHMfratU35dbIfC7O+weKfChY8NOerCd/95JJohExH/vPkd9Cpu/FsNe/yFeFf6HmiRZxGd2Zv8cqPHAN+XOzK32wyvtrJUeWLPI3u7Cj43nK2+TKL4wLLTh0xXeai8aZD5CTVg+rwCovGKmJNHhhWtQ5kIZZCgfyQh/S16ttADmZbv5YmkqvRdG5z5yokl6t4W56KiGglnO3Rv04LDGJw0wyRzHSvKCaIQAiwhfy9pTrs98kEvhHa0UbBlbLoaL8dWovndsGGpnYiCoWN2LENZGiL47YzPQzk+fYPn9Y/bIVWmC8Wqlez79S6kZzZr6T/TGpgGm7VhaUxK51/jueHQTQLb0r3xovpFTAQc5hhkvJe/wTIDpX/DII/EAc49Tvp4usIQMPIn8TiD3RnwG36rJZGsoUFyswTb4otaKB8bc21O3NAB0TBYnsVV+XTpZFghFDbdMlaMXOH7LSxck3VtGjDc9fW83kL2t5inFq7YTuMadjixKZQN6J/AE4ltSRu1Pd6zSPVFpZpsuy0IwIbA5UcR/JJ89lcuMXp/CpCS6vVoc3xbXxQgzVbuzLzMAvJDggSGh5fcgQPudaKhM2P5XJwxZXOQ8Wv92lfLKSJ4P+j7xzHJyQQOW9WJ4hLOm0Q49uFTPSXJLmfgUb2IpR570e6jskQ8zVCCo1F9Y/5KmlsuX1y+Ww8nmqZmt+9q1H6jBZBCnEhsoD/YqKn9myxkDh+EFMKI5RL/mQl3exzQrR/u8d4gXBTaWviOTcDM1KguQERh+fhJmr+wjuNn3a/gne72v5jMV/Da/VhBaHDyYnX1I8a0+n2p/66sruCpLFrv7Q1mdbl45rjU9zSsUTu9JQ5eB2MZkdysJNAmLDW16m9IzGv5Rs92D6e5Xh0usVdry94+O6MRyQiW7WoWB96LpEKBpvrSZ7SfRbxoE0zAOEBVFncgYnYR3y7PuMUZxeDleEhGqC3YScoV7PaSXh4zYwP+5QnVac7p2UPwaivy2MFAloICf27/B9ArKDfdBA3L+CpAWSUrJJkkM8XRF5ZX7f8YA2hN3FLPYoHmVTjV59UugiYXWJsHoaEzo0hjg/uAtJCHscIdxHM1GCuj5BQyERpxigNBY1lEbdu8hynGkO4subx2VQwXhOcsxh+jcpoGb4s1O8MQ1N7ZOM8ejzpmkpqR2bpFAmfBilC0cf8L4FVmmnLevMBG/nUikIjmn4dJskmPhYXJS36/rzW14RpXnjQj5pI5kk1pCsm+uYP2U1E9hipd8XA7BrCH0tEH/ss397wfYmAz5P8QUjqwdWQaY7wnldCEjqtmfO+hGY2PZyrnWT5g9y3X2NlVa+tAQZa8geFnpjvCzj7uQZeOo3niZzf+rwvviQKLBjIO7Oi3WBa1IQnv52JGcUKzD8g55YVgbc5tRi/D4OLeP7OkFRSVe3wW4xL9yiI5unjtufSKQS7fDtmcHLwjpPw6GyNXAqAG2JC4TFXM+dXlwcI8K3KnRtdfPxf/hOcsZfscM7O5+d/MkXGZuYxbAFWa7XLjYAK6hP6DEKxrQFhYc2UWQbj5Zl4oJl0g8rJ9HW/fKSCK/ii3FMLxra4098eB1rTvf9hKV4HmF0YfV7GkJgFpHxQpLH+fJlcxENTFHIY/DDlsTvtnJ0v79iys038LzVSRyK4ZFatcO5HlKZ+8MwoD8xIMVWSH9AcDqic1ELAVPdkV5T9JZt6FLYWtYGMP1xXM5hAugsLM8/6UFqRZhHonI1x6Cw/TQgVI2zTuT984JJmS2uvi1+m9LTPBH7nKzNz3Exu5VHLoym3efJCDHt42q1ehxZhXXGt+Zvyig8H5OLkr0T/H3BPqBvproz9kO4m9wVCwHLMuXJbuBqsJKcGyT9XvBrUr3nQyQsDQAWWrLVc+gTb+7morNT7NDNw4rmTl+e2wjT1aF02iaxFHEyx3D5u7666bBLcQtK5opzSRoGn9QXJ4avWTgW2bCCDD0gponaPHc9DY/9yCvRObbzxX+9HoSIVGcKxA6gVRsg045I9qTxm3QBvZwLyhYnQGv1Jwj6mn2fG4s8YbvcqnpTk8ZA4+A7H1J+Cy93ko2idAUcS9R/9iZu8lItkY5LlN6/0luXKQu77sOmnmiX7WICrDCWJusJ9M/V5q7HeZSCge62PAjOVOK98z9CTqxtIlbFned4lmCDLIjAOcRqUL6fGp8Nat/q/92dv+fZQMsRWGj6QzW6cXj0yosoTasXgWZdEohCooBsS8An9RrKrpbPr6cCM1lpk2Ipas9pdr4PbfwlMw1Yb+jQcJPIQuP0dIzE6dviXs+rgnvKUv275bLzamLzuNPneh+pPEXwiiI5a7IKrzd6+eaPZC5Kr8nXFulbYGbi0fxxMlEJMxncOH6txMsvU+oAkGFnDDcnF/ovXqgxfNNBRUjEYsuKtaHtnqqkSHegGY53D9F/BpiN4kzIjZMwhojyjaZNmbScAaoGIehll/XGq8rSxvs5E48jzC0+aCFKQouWKVh4AsPSDSUzUKfVQ8t9hU3TXO0nE002HD4qqk9Ka7uEqkmux540mkOhOToUJ6IuMd80fJ9Eg4oWpxsD0NiXhp2BRsM577KZqtvUEj4dLcIFd3Wha/lmJ7c8dDYrDsj3xc1Qix4nIrg1TzWmzEY3PVNQDDbWfmWty8ORHR2dSYS5FAg/UTIZ1pO6LirTUpegGWqTJGRshrhxlIa04igglBP9hKRjrJR2ChNjMuH+jWC5Yrqk3VQY+4F+98v7uqrHYcUR+cWAa2XgHycJ/y39wT4StkRRQxND5gfte0QnuZ5YjZ3VklUuNo6zm4ezJ8pB3BeboDzK78NyQj8MJJ+Xy1oUGNHahypWcq0BbXa/tVGZpm8scmF5fLMF1FVA4AyRPopdGyrhFNVp1jXPQxNnZ9pHUU6R8owhVp8DtLMCxSyXFtcZV/ygHEl1gMSZqUkUhm74K3/gjY2SZfdiV3fK2UhHG6yBXYzWbC9U1TypFPWF3Q3WMhZF5g6I+OjsqYo4ajgdqLK3x209YwZzBrHaFXPw7gppvxxNnw5e9VuKvxdiza1vuXJpUl3/RC1AsBl130+5GTsdSub67ANkRePfLfjcx49vfDooGyugVs1/PRWbsHyqcZfFk9yD8kG97qV1luQbfkHV+l67vOHPG1zldeyRB3yhBmcqpkNFR4TzMxFCjejFoAdxFfIcHofTm4A+awdAyx6ktnu67nwWY9s2DnYhqNXGkSEkzMRFVeW6YGaKVfRaqCJxfazMabBIf3W0suEn6Nt8zhdehH83x4pnWA7/d+DiSvSLM8GfMvxUvBsxYTfZBesKUb5tvzqKJlPiCuntlMlI/O15UG2wYoob6G7DOJKUBLFnQq8xkkKUIgSAXNP0QChM5d7dPbsx9qnCc5eTU4O9mUVFcKKlZd5z00FkTKsI5Zv675UcMFlOpl1hawyhlkaYQOIlyu7LwCRjulQsadHTbBXZMOB8qUbVL+0+J6MMzYAX5Mt5CPq+8F1MuE9nj0S952eYd1opEAnxQFp343UVGNrnBwfoIqtHAn78aHtX4xnuCbdClI61uVBW8R3uyXYpFFq1NnCo+bWZfjire13For2MAwKMHi6m9MKUlLqA3gOp4Ko3jsBURBUACi5RIUULlprxxqvX7uFI5Yg+fbW3WePmcYKbKUGsqISkb6p+6s/Jf7qRrH8R9ifsqdp/ejyAbm1FtvGY+sIug4Yr02VGqRHiwNsE/r/DaDhrhUqaY58BcpIApnuRljBjg1AUywvsiRxUhBQ1+Ii7yJ/hwfmx4x13rie9QRN/AUeJ11IcBn/6dnDcfFTg2uZq2FDTe8QNqwlE32aK2FeMYLPVpAuRvzbz7UjN2bc1DGd3x2oYII4iYM45k/Ojw38e8iBd6YoBWIRTwjH8T1BLFoI/45Q7W8treCKcJebw+SdRCcSEkSS2bYpWc+K25gqTYKKLacmoVB45EmTd6X5P2YGdn1OZe6zQh+oVYUgNt2/mC0K8AsKvapgNtFbQLw5kR5p2Xs/mEHmJil41YR3QYKb7CilMRCYao1aMDuWt9+3C0oAcN1kUUetPbIgkl/uW8kKy16cMgQ6UNqGbUnbK7ju0ROKpqJkuH/FSUxL1b9x/hrjWV9uAF3PIwjlZqgptfuDldYtO/PZJbu2fUgTeFXUvhsPjccuJ9AXLjsraXOko7eDJ44uWbK5JWPhScUH1ZHz4HqRKvZjGhSiUDigj5iF9xVrIOFeSN3EEgVneRAA5fLkw/itBmdJtnsKHargInArBNRxo6ff41WpupjFWwrzJdir+IbuNKJnVZioXmQi5t31MnjRHXimB+fAx0hQXzr1DJVQqdKXpIsADJJTPQsdyfSxu4BULPEGG/En06JLvPY96nbpUwyO0Vxy4/2Jwp4uW7e/AGi1bObIrEfY77omsOcTZUSLC8DJvYsUnFMe6cgeWg6eeKbnaCbsEYBfwbJC9V8HKZjYJvGAVETsGSMmcRmNqHFO2aQIK9DT8tZjDsFAf0nIQkGJAUQ3eVo59NTqeqDQ8wee7e0+W/tEw8eKUId7jIi2xaFnCPkJlMlIowpGNA/avRpnZMGEq1Q0A/XxDNkFK7taZEd8Pos+hzux9+N1VW48nFrcvd6gQudWWv9u/pjJxt59qQ/PMnkyw0sQypjRVh+Iem62vVS9qynM4VzMb9lZ3J3IS0OjBwSVfutYv3XhH6uaQHTNM8tBgg0OMU+J/Ndv7GUtGn4+KkS+N7kRd/KP+QXuYdndru+IKrUvc8r7X7J3hIwoeEIpgR4dtp3kedtoEFtw4kJ+tskKWsTzC1+m/+bdKARANJ1cfN675aEM40BnqlXqPF7G1Kglzq8bfNRpc3IoEnHthAXYspeK2hL4VUOMG+y4wDOWpkmcwA4nqy/gi9PzTfea/Z83ZvCXGyjnt3cQg/VvPH7UNJ0nmmAsSpt/GXp5XXCiZQFWXKKqVnBJNCmisFN/U7o+wALhdr5hiExIzqXho0EZ1uabBpcgtAEbml9hS6YTKi/UeMphU1wKjUvNZSaVjfvBLHYRA8Q7lrvVwX1iaKRkIx+ksPeREMum7Kw/+fO0Wf0T4xrc548Oc5hyIEp42PQ7E4s85K4W5VoZeugIImbPqc2ImHtMmEcodiwzwJ59C0FinV1a9aj/QyDFATKIDoQXIHnJj8ZuMhYYv5m+PfrTKwCnB/lxiCtQy8QsLsQeVIAhiEAveqKcKxZ7Bx0KCg3Efsl/kSI99Y3ebgLmPXJfU44juNZe61SrRK7oFcMdPY362JQPaTsqWUbVNZ9T3s9f3DR0spWtY7cXqLYcVHpTlSp73HEU2DC1QLNiP99UVyV45BQaHLR62LlW+UkMvNTgM4MVd1E7FiuQQM2W99tHtzIiSEBkktBIxS/CSYSXlfyUQpUDzEaFLkinHXozfCaGfL0Vs2CwfLIs7UQzAaCrn+AcDIuirZtCkhoJIG+QKL8u4MAxBD2UtdTlX24WrmHIYLvf2SIMHvmUidU6/5z4nqDODNN3spib4cGixUhivHdXru0a7ahKBsrGK/TCtxZudByM0CAPV5uxxhP7yxQuaez4mZG84cE+1CATihgtmdCDfur2b+XAzlupBlb5ygtaEKBoy+3jnXd9nZ+KFB8t+vD/37TMIbJCl1GuD8+iyscW7iJ/3Sl8uagmgnbM8dmuw24TH+ct+HAlNKAB2QNbHzC3wg2jf4UBvLgfqaAj8qFJg5xGibjr4NQqj3sX0zu3QZB2lZPcQyBZsuiiwrnCTauSOslcSch5TXGBytsbYRm44KKocvAUM/NtSCi9wGV7qBaXzBfKNvATJdToTh4zQbzVIltOj12+yjlhCP4lHGuHXtbnUaCE0wktnJgFERmsS6aZ9KZPrDnw+uUbqgLsFO1sLSB4Os0LJ6PxiAXpXzEm57+2LwSEg00H/067SJCSm4UulKbfMdX8t2V37qsgn73K0lfdGzzjjsal4Mz9KHP/a42KwQi94QMY101bcxqwe3OaXbitiAoEHV/juEQjbUs+K3WNOjvgQOkv1Gk8eUkwu30UmWkibHav50PJZJT0TqRabdOi7xRWK856/lbHxnkkNq5RUEuAiQ2YlVk5ZW6JPCTDl70uXHfbTLJ3gbHHqWx5+U9tPX9D8f5THjUqoMVRhzdOUsdLrK3cFFV3/2m4Jp2fe9dShxGwDJC6oWPm+fUQ3rxXyjNs8+5ytAQjRzGcuLMVhzpy7+ASqBbsmUPkZ6zR2hRVNF8Q5D4vFZU6xCkKXBVzUkuf/tkGSKckdqGZH/y1apNl3Qpu3H9HV194usTD4yEQ/Xsd7DIorzoJ5ekIaydHha7MWJi2kxWwzz5tJmGHyCqUUgXe3MGyIvGGd+QUEFq/BIkJiZEZjU/iPyYunizm6V+dlVydUJoehLg0s1ChGkPAZcG8J7j63xX2Yikmxw6PT8SZundU2rt+a8W3oxAcd7bwbx3ITCvX4dGgtS7/QtHp7bJQlBfCEJbWiwehtIxEieRYFIFdaPog4/t1acmYnUqyKdROO0wmORZ1tI16n35HiyrjtkPNNT1bS5d8GIjVMv0zvbc3HoiEjzv7aaImGtk0BAv3EYOIjo5kJN44ClkM2n8Ygx3k7ChMMdo9zBa8KMDc83UD/RKhceh5rrWfZGW+sMSl1unAbl1hyIlJ6tWfn5g9DNg06YIVN1wp2tx+K0fXQDKF0LQNkYhuso39Ycv+0nG4339PnUzlJ+K7o1GtqorQJUiFYH05m0zkreqvKnk/KHXzp8PAFCb7WAWoTyUFJxmkBwzaHdgjkKYrz8RWyl2WaZ5fICmhKew77SvPybQS9QOFu+voj9Uyv6zYbvcC4yE6etvo2oGLeY1xOSwspvwbW64C+yD5dertnZGuEqwV2cfiMxdTj9CnmlLd4lrzfSLe+Pa+CGPGqtVJyzDCdxkPM8vrmoQDaw2Cr5yvLsiIknHchr351bt1KR/afPMEJ1GDq4SHuak/AN5KcZa4OjyPGeKQeIILIECSUAhta+EGV89sZLST4ZDgYzdB2zAAdTizbwVBAeWvw82QXrmIuQ6+IEEoXxB5gCb99myhOGZP8vx+BssVd0XpLlBnrR3fHD45yRhAwAs9f3dXoT7W5ttzN1C9LTlA0+O+fqYl0Iwu0TYPkF4piooVGyXV9xDyf4mplurwB/uohmGo2Kp53nKtrySVt4ssw/G1i1ec03leQYDTCYaMu6ecgDiT5EGpjy/0z9J8Xn55faS3m4/29I/6HUELjL4YF3S3K42clh+5hLdeEuMTSAZyMDhtVAGLDO5JYTnicIteC+a+hNx4wXp7yZGLVwnMZF1hobY0m3izHIuWhgYX5UsEW5MXdWvuGFWQ6XktaVYXCxTl2Xl1ogzRTCwvtRQTGznqp7LooxIarYqXFVXMEO28C1gvMucp9tP3jOIZl5QOfadLz0u13ONRvlCNI8gsExb4Ztmaex344+DibPc/8Kht8dZm5aBYAt0uiTZSQozza/BIGhm/8jS29pUEv0ahV0UVBLCVZGNFU/ymbvPZQAuxYToQd7p0gkweEr+gBe3QTPl9motSzFLRHlQHEeCmKYyhhC2KCG6z2N1iZ5AUPBRjmuD3XeaVVKlqyoqM62HS6T8BzicooedHYCE9cGLc5L1OcBleIVKIU1iTa6jZnHVgvMTcbtbkvdSsUgE5IUEr8khco+NZfhPNeSD7z3/JmrIfF3BXaqnKpHe9giw2Z1rnYn/lPcLeTrHZ7VwiAimM+iaxWlLW6bR3U6QfdX9yng9U481hnIloMNj9srtCwaA4IeXMfznasm/7zTrPqyTI8dfVIcvW0eEkBxngRPiSUFyUDbElipeM//G0KeNDeViaP4X/h4Qy6ovvf6FnTBSUcdkUJbuCPhfVfQRmxtSnWA5A3dEE+BF7uQFYEpuiWt0jpAmX3PcatGntq+WfQgBSTj8JaLkBzJNyw5sWfDpgufAa7dVtTdAmLZ0fJmsTWIPzBPsSHU+5OMsNZ71eJG7KXyh/Vb1sdpjM7EUOwhe2Em6ELVfkRIL17t4+W1sPN0QiZiOIR4Z/OAR8QCc64+mgQdfyOK16nRRttIs11EFwTdDkejFWJnT/qgXoRKYVvSCvn0OBcdGACvmiBSieUjBsvmHbwKD7MKFf+y4fsoFs0UPTDjfAVaPSN9LE5RS2f7QhrZgxKQjHKS9ZpF7slKCYkAQtUe7lNF1/Yyxj78vSAb3jc/OcFlBs7NXT6rPGPX7OoU5vtlqNP1Xay3iTcML5/gTijMY7a/4SZVIbzunzk66nZqJN4BPyJvMaZC4rWoB1AeiXKbJnqmffiq5XBw+gBsG80W7x5i+4K6i6ulgrI6k4bipxyx3m7eAq8GTOM2X8X2jqB9U7CxluWbZa3kPDxxbZJfFC1PGcaLj7/UPuMzqQTP97jwk5GMR5Ec+iXTE4+QAGMDMNJEaPnMQpny0vNYASihHamDuN+LeMv44FkvKuYfMZfOYP8qwAZELMW7EwBA+UyWoNKJ5/KJe4tu781J3lzNpk9Wt0Pb+k94FdaNa7SiwcmMvLKHhyR3sTdbRYacR09duialiom1z142ox23CfdYRpPIpAViHqhg4Dh7qAV2YDR63powRjKBAxb+keBJsJrNU5G2GDfW89LnQ7pqPEzqTtJaHW/ZBLZBS79JmPUXdtgc25NszKmNSEnBzPZf5dRzDP4Xx6KpX5rqnEC0CYS4g6j3BKAuvaiDqcZDcDe6BV5I4NjrrLNXPnCScA1ptP4pQ42ibbaNtXa6fIXs25wtzES1eLIQ4FrIW8e6/jdgc4lpp4w9sq6UYmsOZ8XfbuHjoMXHZ7TXCPDbAQuFboe/EGoNaxYXEo+EodVmsHoW7CVRb8XlUsT8pFt9YJc/sKnwy77FvD8d3D5X7cNp1198TegvyJTigRktM8veFtDLoYMAyFRrkNXwkCLcLNAI5UINXSnSyhEkxz7gwMOM56SJuTi25GETzhSGr9h30yTjpycBWpcR3PAMJHiojP0R1VyBB+00w4y24JyM47BtxG53Nzn+Vk9vOrYCSgMjT4pa9dI02TpfdOtWVZnERdLO4Cg0Cn0tvFMQSx0H+o/DUhsbXiioQZwvNW1uyZY+hl0mzztWGOcaiE9t913orM042JEz2pQ6L7NGkMN8bARwxqL5FTkUqtqqCHvuFIJlSfK5ZCKvMN+Vidjm4zhd1LWBMhfaAWYaVKZECBwbb2G8nSBcN5zGhKvn4odFP9D4S+W1SSi6TFznJ6SI5gaFHx6Sg6KetcTCfvXZBynQjaSGjHiVbCY3CSW4ugFxxT0Z2UV+h3nxudW5X8ialNdY85CVhVrs2rdeo6duye3jMx9lFr0XJTSv4KCiOeCpb3BI9X6lilcQ+7gK/vNThDpbk24Fmxn9NVSzelfIwffSlIhTNkybfnypyEtNdb/VvVry5EwwPlD4+9sVFtWp2ryueHdIDxt/tW3N9BsBKPnb9DZUuJkB/TnNg7PPbTBw+C0ycBg54Q1BgKC7zmBvl5qxMVr978YrmdKlILgL5NlI9a2/D19nbMxUlozzVDRugXgVMgq/uZdr1gzIb/w1OBOZLoPAlukQ3YKZ4oqOFMhPduVjZYZB6qi8/hGeOmxiptiffweHC6+Hsp7oD0l2+EDrSUGh13Eukq0XuvbBjXdIGpBLyVTd+8RtlF4whTh/5QJytwSCmfnoabjETqnBBHKK7bLI6osXRLD9ftQwmTIfziMdRRadR0yuw53Q0giKwpV7NqTTH1L/G7fZfWa9gsWsUA/K9YwaUi+mQZLN5m7Pesy/gPMUav58U+mWLlZLUs+H/723ZZSe7Uwmcr8I9GRog7gOYKeq3fuD3fTy3kWYwm1CLkdBzM6NOGNGqXDnKrp7WD4I7GM5cCLSYYLQorzbz+RaYgjrVT9EatcucMadCmNVfNbmDhNYsuBmtUqmQCIUHZIan2RvFLhO5IrsHRbj+8e78ii0HLwsgn63oiWtLohe+COrH4EaN1iIijRK1JvTqmfHSC+U+wuJlFHfCN/h+eCo6ye2nfzm/aOZe/nuIeyjkvv00yW3AXWra7Ds92Y/T5OUSdgRiUBcBazoC8ZqHa7TMW9VnFdDSLd5gykBmZRdF9BOOVp8ib/vtG/0Cp+QI3otFW7eLPsJCARM7Vc3faKd2n1t0Gyo2/3/gC0vFW7oBsgatKnqYahlCj5dkZNSxTNVn4C3oJ2SK7R5FXm4CDj6NtEUbRUTGqHJPCB69FV2Y9b2zSmU+URm8FDvAL7Zg60sztup9TrOxArP2IdAHPCfrvenUWF7Hrf4EhLyrgSYH/UPVv1HR2fyeTFpMeReUzzZ8v9rBtxeeUiNVRHglaXlyANDXMLUzxk6Xyuo7Ha9cvCzWrOSWMRFe+STvsM2kOI6A55BOOZxI9LNhp1Q9qwMYMA5WL3ZNBSXDeZHKzxUZRfyZF3AGQ2IXXuDSAqaWKBmzM7c7WUx1oFiifZ2+7SfDbaPKcbJYuBrFNZpxgexadFni28o7+ygzImtp8WG+sBF45113D53NBURitezHeATXpFfZQP7SAuaJtrvptg+ZASE5cXkpirEFBgdUNWOrfI9pepqfP647LTbmVBSiRbJrMwn5r2rSH1zmPl8ohwj5Q39+OyuzAF7qivPiBmkx7hjFJTpUSK3dYhX0ZhiBVx0KlGWCp5FeKyCjInufCVjYQdCsvRWJRmPkYuRft/DZ9cG8bKfS0ddAzJm3dN17mguwUH3cMsy8a3kkm9eH1I9pC0X1az1X3/INuBz7uj0wyYnvErFxryy+RHI1FtuHcqO+jkpMFIKzYKnKh5xFVUiTnsSs2imm0/yFXkBj9nhhJMMv38dCVhuQyYYXbXKy9HHXc6tG1K54mkvI/Ta5rmygttacFSlq3nMzQd0rvroZibrB4PCtF6iayaKBRkzO+Xf6iJ0LULxU/mEDyuPSBWPNG3JagFDhtp3eya77vImKXd1IdonwjVvTtzt48ELoBedCdXkxPPFdx08I/Vo03XZK/EyV1KzVhj1Rz0IovYUn/5tIUeC+AdqBzxgfizXywIYWkZYTZT7toqDujCjiDx49nCqBw9GhLi9bP1zfoTGs/4dxYe9maQc2iM9UKrpT7PTmffs0ZXHq6I9v2Xl1+Ji16AysNSb+eefPfZpxXP+0f2ZREQWYCT8P1QAYw/ws2pvqZxLxmQdOW/s5nJnXC1qCk6ZXCCc475ynPeMqzMTPFdN0KfKpKXbY+r4zKUHpNghYcQ/Z3wBIOYW3qKpS5CuHP2wjkc/ocRlhkXzQbrxIHu318/lR6TviAiEr1LanICcwQpSBb8vUskTFp2StgK/sWFqmfGbxEaok+cJiRfYRNM7o4Szb1Gcl1wNsoJE62PE4yxodEVxkHUySoDm4FiRpS0dNh09nlpBb7i9gPyTR0XbmsiXF6RWCqk9kW25jZekScJqYk7IXLBkODq7MRTrXfPwnnPLk1BECIZW1P0hRDGqZMN2WOULYw01HL4MgQkkZAYZDI2fKTl+ML27J9F1p++NsEqicbWGFf203XhsH2b65dgd04i3bLYG+nNAMn+D5+GXrCs7x7pg7UxD02vhH8/BR3nwB8fcHClDciEnFMo924b0lNNoJHIbSiX3UiNLY1phxWORb2ctnacWsFxpAa2qPc/gQiGW7Brir8666d3JS0MhQzItawSKkqVYQD3MhGcoFQtDA/k57nBzomEETBUDXTsABx1f/4YTRi3d6mqIVFKwSyEK6Vk+YN7O2+S0NxbWiw6i/alQUP4gp47DFVEhcSYW0IGLGGy6b2fyC6VkueKG7kdhm40dkG3E7bpb2OIt23iBAIU/HHlTYLnWWY13NtpwhjFecpVbZS/Ku+XFg0LlR2IoVAlkx4U/o8XToVYR9ldCfOwWReBUYV5843VpoV+ftroXONDungIkW9jKloQWrFUobL0DAOM4HHmGU88i6ibveIFRbHZ7N+B6ICQragY3nN06OeU3+PT1MWo73/t9A7QrM3ULIVrDqWJJRVpCO31LtFuI3lssmhLKG2H0dSyY9SVMKL/YvRdPB7B1vwamtpoVQ+4qYofFn12odqeCfk9ygdrZYp2X8mYc5ixAZ/SyVGka+WffBnx19YIQCmJglE2PGA6CCylI0dhjHsJCb1RR3qlwxMVEOKH7gZJsBi90aiL2lWYkHvdWKuL7jK1vj7rYNczm6NZ40H8a+3ALLsV2lmSt+qAKEgzHlfNJpTefLVL2EB8jyfsZoe11ZAX27VlkYF2RxlpwzlBMvZ4grHCwteiphbYV/i3UV+XNvXO2JcDmP55ZQmoXf+2l7JkPpQYdQR/2dz6bISpDpoVeD5Uj7Y/K0VBWUnrFKPuPY59wWU14/AWcaF1Rbpn9ghd7MJ2EqUPQeoZ1NAxOLq+wwnrGls7sZqhSMVEWDXvxF+ZvBMYsKi/bFakBFUC3hVrbdHBlYMyCbF1We9demZzDRtwfzy4lo180S0w8CzObduJP98EM8RfP1yQtyblnvWeFzGJ2CMlkXfYCrRsv5gfogIQxW6W3xpgM/fK0BEB31QI4ZgY+ZO205y5LeFBi+KSerUjkxIYMVEyn29tk0Hx7wdElilvrYBt5p9bKgstsU4vT+Wvu73P1vERJR9+su9dOFvn5afwcRFCK4FAgo6rHZvqCHjDFVEarzHlznHB+VXhNzQK678kM4k345VVjoTEi+gIQUFvexbHCG0poZjkzS5U7azoCChExzM+jYt+WS+S60JWQuEUzjMZLBJEXy16R82C8YqKlUYf2X6mj9UyeCTQICTDRrGc8ROokj41gTpmZhH8YXueND5BBpH8IZJV8Z3FH27F0wJWdK6AdyjGbbcPGgq84iVu8M68H5u3aywlRulnMxtMkXEj9G4LNdLDfFCaFmhQW5EqmsBa4afldB+TN9RBE/ZClopLlmye0guKhkpvlxwzoc2+OEK5MiG8ufsgXQ/BJy9jJmAf3pQ8v0BSkcEGIOIGaKECcFpC2WWtZPSU5SugkQ/OUkemU7nlW9D/FyMiE8NQRt47oGg/DQXTXmSas6bnw9/j+D/P4zqBVy8h0IUeSRONUC6kFm8pUkeDUErHrEil8IwHnOc0SUHvJ87AjmmJa1u2jXCzkOx+kuJYPwCLlNCeP0E6u3C7/MdH3sHTi0H8+W/rH/+G7H0x0gYdNM+77QXSCQt2ae/s/FEAGTbK8yknIdfwmwiw6PFc+y2K//NCyrXHO7zMpWRTaQBaPjHbKdeWiHfZc6UMyOtVrVvfilSmCSH+2yORY7QGT1iKpIvqPtSeTlAXp7rfYhUdGADkRudiysNOr8wrvPk1qZwnnKh2oZZxhWsLjk11JV8e0ErlbVhlPt5Znj2Ajyt3OVsWuApY2QpFxj0mnwOhETbfjlosHdXaV9xxs4NSuQYVCzVD2Ykkshw8lTvq0RJtFJMQLHRgr4jyNiQDTX9BvycGsnYI7eRsXe6hH9qaRtdEMGDPvb+cq35tbyFlKgg3HYRwtQ7aLtK2nNpx5L5ehSxsxaKc0EWpkb1tXiMWUFkIkZWzzOQuXnqVhaoY+lOtsinjTCn4XmSQGUb49PPnefESE233sOX8TkhYAqFMZblion+mATeVsB5q8Fj18OqRKZZgChTrN2Rfe2OWjKah4Mos9Pw3D/b6rJDD4sHqscd1Wq3ICjmjsxyTNKdqhXVAeCSHcg6WQlcyyWsoaaxDFQML8SEuVaTNmip0W9kq0uMJu2A7aAy1cR9gNcwGdqgThiELrGMKJ9vc7aCdJePV5yqE4qro26biKH8MVA7Kf4CV7xFFZpFyCUGpcTlg4O7NWbQp0672jvBBjSq+2HOtyoLqB08+zqK/zntdtzeD6d7JodePRRHpZGsZwZ7T+C0V+apN8X39LqEenF/8K2Lpt9Td5eHANBepwUtOFeyHy1dHiAfX5C4C1zlZf087/UEQVQvVzbYzd98gGhogtm7ZKtHpDIjJXNDw4rx4eITOR4UaJsOm/QSJjSDUInqIaEfpP/P43Y3251idzYAx7rJUU5/FmQAB3C2mV/8S6QQt/1D2JfjK1rlcCuvwQctKk8+f3J/18jwvk7xnEf14Z33Y4Diyt2NnXF89BRS8iZ/g8wrS78oCba3068wtDJ4MwlYCxI9RISvAij6Y5baIPSZ/nrj+S3Dr9TYkrYJfPSB97aTldK2YXknkAyqaMebtyXw56FuLg15BaAqEfZQz+y9SlmeWRKGY5zzNJAuRxkwycxNN+HZ6j8tgBsgI4yfhl0MzTAeh+dpIvkrRqGQg7z0CtuzLpc4OmkJldO6wAIHouisGrTc1hw9XHy/gVIfLjC6/Hqq6ijaIdM95bEKCQCa0KpZJr88QrzaxvEUPlhmreNVOHirnc6kgYG2yCufcDm17gv18JGzVuoIfFCaIbqcfVqkckUUZkLs3QFDcILDZbnQNR+0JcO+Nxsp58MSMY0Dj5DJEYh368VtBzDFP1YKcgNLHMUWFPe3mTAb8+5clLcalYHb/eL1r+RiPifUHvdR+K5vmrycRZNvrqsuBvfHnUwvrhQEzmlmb0PD/0tqto6RfbqzBJjTGLI2Kxt5SevxXAIe9VaZEB0fvz745hwG02uLQHpl03oAj6wPX6lXsWv3bdnymwwqfMec4FevnM7u57h7eFNDWPdC3V8Xb0aVVRxgPGGBNecIKLgAH4Y+xWXQ/HMBVT36oBQsp83La26s4/CawwBtI7x/dPjjhr3H8ruYHFQfRWgq27/ITqQIOjG8Mq8dmsYtdvYBjGF/0b7A4FTzqqy0RthY9YWYo5eHR1FA34UlrfdVfL6lmChjuCIr9jACufjn4hsyRRAu54eF1WFeVnm0Kq7oL4l+dOjss1PUKtBaAxF3Etw2DYvpzXYEqqOkNMfh8jsUHL0ZVr5fZ/G0uBVLjovZj7xos1WkdKU6AYGPWVYBeP60pYkb/nBKBRPfnfffJfh1eNCg6ABDXCVl1g2i9EkrMzqF1jOAKU4lcb820iOkBCyO0gbti39whJS+BcKF6+tV08AbB4T1E5N730epNeRW24aXwO6m8uqDZUJ+cd6C8Ajqq4D0hXVGXGa16QOPsBSZACLFULZXT/vSVuHocUgzT28tTXXUv+JBCWL0KQt6x5q97iU/BiogG9JC7hvAV5A8fxCJI1otHdgs9L0pTc04nMk0eol0pDlBM54U1n2Zaef6XTeBNFWI76HccvPQLo3dJWbEB4TJ59/8mCFE5qBVcJQlC/sDmnyQ+AU0D2PwBzZ8ur5VyGJ4QDYx53SzD7Htbn71iH0ra8g/15nVrX2wB2r4QjHkv2RkhprjIauh0Cw++xkrqk7GFlyCpmuV51fpR5udvK8mnfJK3DCgFzYs050GsdLenF/+H+eB4wbnCdw0LwrOoje+gn71Mr/43PXv9wZ5AINTarvrdhWmo8gyAzGWouv+X84LjKuRjO0y5AUHc0qztZ/hGqpgmNExuARz0HJVF6o9vXr286R6+mTR9xcYwWPfNq8Qmdcx3ewhi0WZIa46Miec1MfgbQCXhHoSDAwLpod9um+xnTjmrgWQctsmMIhnzyTe6LZLvPU+wy9Q8BvuInDSoaDtkAv/Hm6HFb+CqYpVDaTY0BG2n+z0IwWgI+r5HrCmwKkLv5FPBeXVqvIfJzP8UrdJHTVQci6zmQryffS4a8V7q0eenBqt16PmjNc5wrWI3WMNeKI0n7bfk+FYK8TQygRBSpWnuFTpHz0QMsLFAc9xT1diio4vkwqsmj1W1hhiDho/q+aXXAJRkrhb0ZuocTKGMQ0x++u9g7k7EOOK01w1ebwMCi4PbAhJmX0ZUkoZ7OyBSsNVk/xSPW57NM53I8pbhYIM/HE9p3OlZNPzNTtmh9aLn9if6KEtCCkF4W9kkoEUSH3dxyD/NvdEksd8By6Ts58nx6zSN5BO8geb7Cm8DHBSvhQ/FJXTzrYJhUaa/ELnX1ubWAkBMwOKQu3zn8cOCTPCub2J21CgspHSItpFuj8eubam2/qmCfgX/6cLY/8A75ulHAi9WURi1w3RP+IE2AFh8IsK5SoRevla7IlSat58RSuNcQCjFXGW+t4gwByc6tY0n5R2pBFZs4oJhEMuvGz87gOEgXMVrykJmS+k3ZTIG7oBdH8qudcGkQuIMw3dnx5aRM1Ks/x77yDzhahQk0Jpj4BNVXIxatIf44dsrfq26SPoDMmEpuywsJIXh8EZ3itjPco3CMIXkUNbPUys3vz90BbDEfxksslVdaH1yeGqDcbcP6TsWaxJlNCgZCl9DmkvEWy4YHJV0Ro3otQs6MrnZyhRNoAbhHQpP5ienkwsD6JceWqMcSbpEr+5+OkTcllTgV557rh3CnwK0yInnqVxLlwr8/20UGsCuPwHGSMr46aW7Rv9lJWt+6/OTFlyHP0POqPFehO9l+HVPblNbRwggPCJj4uxxfiqW7x9UMxck1uHhG9m00vj8KOxD9ne1wtMGqy0WWe0rtwxuhDkGUtGkIH6qRl0/eXJJkK+JW0Oh6UAmxp9Cyo/v5UsH0svQ41nOANngqd4Z4EQR1fL0JSE8ooldn9PTV8wyFDPFHrBvPfD/1+G+8b57EN+kRi8q2KLCAnQX6VT1dZtP4pYSQDKhQvF2ITVhulNiT0vRMbxpfgTRlD1jxX7tmBntdaj125OtmizYEbEdHC9zgTeIHZTzGJEQhaKsZlHiKvErQVsKuJFoaXvic49hWtTPllXNjZx8DOl5ZEMhREEW8RlcYVy+kNFjkCOQ2Ekm30EhDIHtkd8Qh0E0NQDkOOwc78LuH+DpIyODHV95ehTLky+qgH80Cn28V/rNPHoGIh2RY/We8jtK2VSNqAczKU7r3UiCVc3hXNiPm7gGVPrmfWoNnoHZNwsWZgMAkviyD4oCprby5CTS5LgkjNRqG3nz9TwndpDct3eGPVmSzMy5+4xFNa/8BCxJfylJe6EV0KGrvEO05xnbXACYORdZI/e53XWJcEAIwULwmgu0OM01no3P7D6Mw6YftrqjAxL+8h8fbdZFbIQ25fi4T7SdR5c9WP/yL9fWEkn9meDM1gcOScdti3JDgGskxZzRu7delveJX2H2rVnXQO6uDQ++SqZxps2lwXIggZyKkdAhID48of+gBPNate6frlG+hQVO0z5jhDQ/nE2iiXOGVqowox7VMb7BvqeNPmyoE+Qd3+piQMWREgRhj7toKhVl+vEQWDuUUfcwCoWQvC4opRd1Y1067ZQeomifUAXxN6A6xm0RrXnsT5bU4BAMFXz/bL/qK7MhTRrTPPU=]]></content>
      <categories>
        <category>模拟赛</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>欧拉序</tag>
        <tag>倍增</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2018」BZOJ 5335 智力竞赛]]></title>
    <url>%2FBZOJ-5335%2F</url>
    <content type="text"><![CDATA[用 n+1 条链覆盖一个点权有向无环图，若可以全部覆盖输出AK，否则求不能被覆盖的点的点权最小值的最大值。 n\leq 50,m\leq 500 分析 首先判断是否能全部覆盖，即求可重点DAG的最小路径覆盖，传递闭包后求二分图最大匹配。 考虑增量法，根据点权从小到大插入点和与它相连的边，在残余网络上跑最大流。 复杂度 O(\frac{m^3}{64}+m^2) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("contest.in", "r", stdin); freopen("contest.out", "w", stdout);&#125;char In[1 &lt;&lt; 25], *at = In;#define gc() *at++int gt() &#123; int x = 0; char c = gc(); for (; !isdigit(c); c = gc()) ; for (; isdigit(c); c = gc()) x = x * 10 + c - '0'; return x;&#125;const int MAXN = 500 + 5;int N, M;int W[MAXN];std::bitset&lt;MAXN&gt; G[MAXN];struct Edge &#123; int v, f, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN &lt;&lt; 1], cntE;int Cur[MAXN &lt;&lt; 1], Dis[MAXN &lt;&lt; 1], Lev[MAXN], cntL;int S = 0, T = 1;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); Lev[S] = ++cntL; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lev[v] != cntL &amp;&amp; E[i].f) &#123; Lev[v] = cntL; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lev[v] == Lev[x] &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int f = dfs(v, std::min(E[i].f, left)); if (!f) &#123; Dis[v] = -1; &#125; else &#123; E[i].f -= f; E[i ^ 1].f += f; left -= f; if (!left) return maxf; &#125; &#125; &#125; return maxf - left;&#125;int w[MAXN], tot;bool check(int p) &#123; for (int i = 1; i &lt;= N; ++i) &#123; if (W[i] == w[p - 1]) &#123; ++tot; addEdge(S, i &lt;&lt; 1, 1); addEdge(i &lt;&lt; 1 | 1, T, 1); for (int j = 1; j &lt;= N; ++j) &#123; if (W[j] &lt; w[p]) &#123; if (G[i][j]) addEdge(i &lt;&lt; 1, j &lt;&lt; 1 | 1, 1); if (G[j][i]) addEdge(j &lt;&lt; 1, i &lt;&lt; 1 | 1, 1); &#125; &#125; &#125; &#125; while (bfs()) &#123; memcpy(Cur, H, sizeof H); tot -= dfs(S, 1e9); &#125; return tot &lt;= M + 1;&#125;int main() &#123; fread(In, 1, 1 &lt;&lt; 25, stdin); int n; M = gt(), N = gt(); for (int i = 1; i &lt;= N; ++i) &#123; w[i] = W[i] = gt(), n = gt(); for (int j = 1; j &lt;= n; ++j) &#123; G[i][gt()] = 1; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; if (G[i][j]) G[i] |= G[j]; &#125; &#125; std::sort(w + 1, w + N); n = std::unique(w + 1, w + N) - w; memset(H, -1, sizeof H); cntE = -1; for (int i = 1; i &lt;= n; ++i) &#123; if (!check(i)) &#123; printf("%d\n", w[i - 1]); return 0; &#125; &#125; puts("AK"); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>二分图最大匹配</tag>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CTSC 2008」BZOJ 1143 祭祀river]]></title>
    <url>%2FBZOJ-1143%2F</url>
    <content type="text"><![CDATA[求有向无环图的最长反链，反链中任意两点不联通。 N\leq 100,M\leq 1000 分析 传递闭包后做二分图最大匹配，答案为点数-最大匹配数。 复杂度 O(NM) 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* * @Author: Skqliao * @Source: CTSC 2008 * @Problem: 1143: [CTSC2008]祭祀river * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1143 * @Date: 2019-03-05 21:15:32 * @LastEditTime: 2019-03-05 21:29:55 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N, M;std::bitset&lt;MAXN&gt; B[MAXN];bool Vis[MAXN];int Match[MAXN];int dfs(int x) &#123; if (Vis[x]) return 0; Vis[x] = 1; for (int i = 1; i &lt;= N; ++i) &#123; if (B[x][i] &amp;&amp; (!Match[i] || dfs(Match[i]))) &#123; Match[i] = x; return 1; &#125; &#125; return 0;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); B[u][v] = 1; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; if (B[i][j]) B[i] |= B[j]; &#125; &#125; int ans = 0; for (int i = 1; i &lt;= N; ++i) &#123; memset(Vis, 0, sizeof Vis); ans += dfs(i); &#125; printf("%d\n", N - ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>二分图最大匹配</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2010」BZOJ 2208 连通数]]></title>
    <url>%2FBZOJ-2208%2F</url>
    <content type="text"><![CDATA[给定 n\times n 的01矩阵表示有向图的连边情况。求有多少组 (a,b) 满足 a 到 b 联通（ a,b 可以相同）。 n\leq 2000 分析 Folyd传递闭包+bitset优化的模板题。 复杂度 O(n^3/64) 或 O(nm/64) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637/* * @Author: Skqliao * @Source: JSOI 2010 * @Problem: 2208: [Jsoi2010]连通数 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2208 * @Date: 2019-03-05 20:26:54 * @LastEditTime: 2019-03-05 21:11:23 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2000 + 5;int N;char S[MAXN];std::bitset&lt;MAXN&gt; B[MAXN];int main() &#123; scanf("%d", &amp;N); for (int i = 0; i &lt; N; ++i) &#123; scanf("%s", S); for (int j = 0; j &lt; N; ++j) &#123; B[i][j] = S[j] == '1'; &#125; B[i][i] = 1; &#125; for (int i = 0; i &lt; N; ++i) &#123; for (int j = 0; j &lt; N; ++j) &#123; if (B[i][j]) B[i] |= B[j]; &#125; &#125; int ans = 0; for (int i = 0; i &lt; N; ++i) &#123; ans += B[i].count(); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>传递闭包</tag>
        <tag>Floyd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2018」BZOJ 5334 数学计算]]></title>
    <url>%2FBZOJ-5334%2F</url>
    <content type="text"><![CDATA[维护 x\% mod ，初值 x=1 ，有 Q 个操作。 1 a x=x\times a 2 a x=x / A[a] ，其中 A[a] 为第 a 次操作乘的数，保证第 i 次是操作1，且每个位置最多被除一次 T 组数据。 T\leq 5,Q\leq 100000,mod\leq 10^9 分析 这是一类常见套路，根据时间分治。 具体而言，以时间为区间建线段树，维护区间乘积。 复杂度 T\times Q\log{Q} 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667/* * @Author: Skqliao * @Source: BZOJ 5334 * @Problem: 5334: [Tjoi2018]数学计算 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=5334 * @Date: 2019-03-05 17:36:17 * @LastEditTime: 2019-03-05 19:10:49 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int Q, MOD;long long Mul[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid pushUp(int rt) &#123; Mul[rt] = Mul[rt &lt;&lt; 1] * Mul[rt &lt;&lt; 1 | 1] % MOD; &#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Mul[rt] = 1; return; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void update(int rt, int l, int r, int p, int x) &#123; if (l == r) &#123; Mul[rt] = x; return; &#125; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; update(LT, p, x); &#125; else &#123; update(RT, p, x); &#125; pushUp(rt);&#125;void solve() &#123; scanf("%d%d", &amp;Q, &amp;MOD); build(1, 1, Q); int opt, x; for (int i = 1; i &lt;= Q; ++i) &#123; scanf("%d%d", &amp;opt, &amp;x); if (opt == 1) &#123; update(1, 1, Q, i, x); &#125; else &#123; update(1, 1, Q, x, 1); &#125; printf("%lld\n", Mul[1]); &#125;&#125;int main() &#123; int T; scanf("%d", &amp;T); while (T--) &#123; solve(); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「FJWC 2019」FZOJ 184 签到题]]></title>
    <url>%2FFZOJ-184%2F</url>
    <content type="text"><![CDATA[给定序列 A[1 \cdots N] ，有 M 次操作。每次修改 A[p]=x ，修改后询问最小的 y 满足新序列 B[i]=A[i] \oplus y 单调递增，无解输出 -1。 N,M\leq 10^6,A_i,x\leq 2^{30} 分析 记 F(x,i) 表示 x 二进制分解后第 i 位的值， S_{a,b} 为满足 [F(a,x)\not=F(b,x)] 的 x 的集合， G(a,b)=\max\{S_{a,b}\} 。那么通过第 G(a,b) 位的大小关系即可判定 a,b 的大小关系。 统计 Cnt[x][0] 为所有满足 G(A[i],A[i+1])=x ，且 F(A[i],x)&lt;F(A[i+1],x) 的个数。同理 Cnt[x][1] 为满足 F(A[i],x)&gt;F(A[i+1],x) 的个数。 那么求最小的 y 只需要从最高位向下贪心。对于当前位 i ，若存在 Cnt[i][0]&gt;0 且 Cnt[i][1]&gt;0 ，则无解，因为无论这一位是否异或，都会存在若干个 A[i]&gt;A[i+1] 。若 Cnt[i][1]&gt;0 且 Cnt[i][0]=0 ，则这一位必须异或， y 增加 2^i 。 修改 A[p]=x ，只影响 (p-1,p) 和 (p,p+1) ，那么先删去这两对原先对 Cnt 的贡献，再重新加入即可。 复杂度 O((N+M)\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283/* * @Author: Skqliao * @Source: FJWC 2019 * @Problem: #184. 「2019冬令营提高组」签到题 * @Url: http://218.5.5.242:9021/problem/184 * @Date: 2019-03-03 09:33:27 * @LastEditTime: 2019-03-03 10:03:11 */#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("sort.in", "r", stdin); freopen("sort.out", "w", stdout);&#125;char gc() &#123; static char In[1 &lt;&lt; 23], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, 1 &lt;&lt; 23, stdin); &#125; return at == en ? EOF : *at++;&#125;int gt() &#123; char c = gc(); while (!isdigit(c)) c = gc(); int x = 0; for (; isdigit(c); c = gc()) x = x * 10 + c - '0'; return x;&#125;const int MAXN = 1e6 + 5;const int LOG = 30 + 1;int N;std::bitset&lt;LOG&gt; A[MAXN];int Cnt[LOG][2];int solve() &#123; int x = 0; for (int d = 0; d &lt; LOG; d++) &#123; if (Cnt[d][1]) &#123; if (Cnt[d][0]) &#123; return -1; &#125; else &#123; x += (1 &lt;&lt; d); &#125; &#125; &#125; return x;&#125;void update(int l, int r, int x) &#123; for (int i = l + 1; i &lt;= r; i++) &#123; int d = LOG - 1; while (d &gt;= 0 &amp;&amp; A[i - 1][d] == A[i][d]) d--; if (d &gt;= 0) Cnt[d][A[i - 1][d]] += x; &#125;&#125;int main() &#123; open(); N = gt(); for (int i = 1; i &lt;= N; i++) A[i] = gt(); update(1, N, 1); printf("%d\n", solve()); int Q = gt(); while (Q--) &#123; int x = gt(), y = gt(); int l = std::max(1, x - 1), r = std::min(N, x + 1); update(l, r, -1); A[x] = y; update(l, r, 1); printf("%d\n", solve()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>FZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2007」BZOJ 1047 理想的正方形]]></title>
    <url>%2FBZOJ-1047%2F</url>
    <content type="text"><![CDATA[在 N\times M 的矩阵中，求 K\times K 的子矩阵中两最值之差的最小值。 N,M\leq 1000,K\leq 100 分析 二维ST表，用 Max(x,y,k),Min(x,y,z) 分别表示左上角为 (x,y) ，边长为 2^k 的子矩阵中的最大值与最小值。 然后枚举子矩阵左上角，求当前矩阵两最值最差，取最小值。 复杂度 O(NM\log{N}+NM) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/* * @Author: Skqliao * @Source: HAOI 2007 * @Problem: 1047: [HAOI2007]理想的正方形 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1047 * @Date: 2019-02-28 19:29:48 * @LastEditTime: 2019-02-28 19:48:10 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 5;const int LOG = 10;int N, M, K;int Mx[MAXN][MAXN][LOG], Mn[MAXN][MAXN][LOG];int Log[MAXN], Bin[LOG];int queryMax(int x, int y, int n) &#123;int k = Log[n];return std::max(std::max(Mx[x][y][k], Mx[x + n - Bin[k]][y][k]), std::max(Mx[x][y + n - Bin[k]][k], Mx[x + n - Bin[k]][y + n - Bin[k]][k]));&#125;int queryMin(int x, int y, int n) &#123;int k = Log[n];return std::min(std::min(Mn[x][y][k], Mn[x + n - Bin[k]][y][k]), std::min(Mn[x][y + n - Bin[k]][k], Mn[x + n - Bin[k]][y + n - Bin[k]][k]));&#125;int main() &#123;scanf("%d%d%d", &amp;N, &amp;M, &amp;K);for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;Mx[i][j][0]); Mn[i][j][0] = Mx[i][j][0]; &#125;&#125;for (int i = 2; i &lt;= std::max(N, M); ++i) &#123; Log[i] = Log[i &gt;&gt; 1] + 1;&#125;Bin[0] = 1;for (int i = 1; i &lt;= Log[std::max(N, M)]; ++i) &#123; Bin[i] = Bin[i - 1] &lt;&lt; 1;&#125;for (int k = 1; k &lt;= Log[std::max(N, M)]; ++k) &#123; for (int i = 1; i + Bin[k] - 1 &lt;= N; ++i) &#123; for (int j = 1; j + Bin[k] - 1 &lt;= M; ++j) &#123; Mx[i][j][k] = std::max(std::max(Mx[i][j][k - 1], Mx[i + Bin[k - 1]][j][k - 1]), std::max(Mx[i][j + Bin[k - 1]][k - 1], Mx[i + Bin[k - 1]][j + Bin[k - 1]][k - 1])); Mn[i][j][k] = std::min(std::min(Mn[i][j][k - 1], Mn[i + Bin[k - 1]][j][k - 1]), std::min(Mn[i][j + Bin[k - 1]][k - 1], Mn[i + Bin[k - 1]][j + Bin[k - 1]][k - 1])); &#125; &#125;&#125;int ans = INT_MAX;for (int i = 1; i &lt;= N - K + 1; ++i) &#123; for (int j = 1; j &lt;= M - K + 1; ++j) &#123; ans = std::min(ans, queryMax(i, j, K) - queryMin(i, j, K)); &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3437 小P的牧场]]></title>
    <url>%2FBZOJ-3437%2F</url>
    <content type="text"><![CDATA[每个点 i 要么花费 a_i 建塔，要么花费 (j-i)\cdot b_i （ j 为 i 右边第一个塔的标号）。求最小总花费。 n\leq 10^6,0 &lt; a_i,b_i\leq 10^5 分析 设 X_i=\sum\limits_{j=1}^{i-1}{B_j} , Y_i=\sum\limits_{j=1}^{i-1}{b_i\cdot i} ，则转移方程为 f_i=a_i+\min\limits_{j &lt; i}{(f_j+X_{i-1}-X_j-Y_{i-1}+Y_j)} 若决策点 j 优于决策点 k(j &lt; k) ，需满足 \frac{f_k-f_j+Y_k-Y_j}{X_k-X_j} &gt; i 。 维护决策点队列斜率单调递增，且斜率 &gt;i 。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: BZOJ * @Problem: 3437: 小P的牧场 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3437 * @Date: 2019-02-27 20:22:08 * @LastEditTime: 2019-02-27 20:27:08 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;int N;long long A[MAXN], B[MAXN];long long X[MAXN], Y[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123; return (double) (F[k] - F[j] + Y[k] - Y[j]) / (X[k] - X[j]);&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); &#125; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;B[i]); X[i] = X[i - 1] + B[i]; Y[i] = Y[i - 1] + i * B[i]; &#125; for (int i = 1; i &lt;= N; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= i) ++qh; int j = Que[qh]; F[i] = F[j] + i * (X[i - 1] - X[j]) - (Y[i - 1] - Y[j]) + A[i]; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[N]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3156 防御准备]]></title>
    <url>%2FBZOJ-3156%2F</url>
    <content type="text"><![CDATA[每个点 i 要么花费 a_i 建塔，要么花费 j-i （ j 为 i 右边第一个塔的标号）。点 n 必须建塔，求最小总花费。 n\leq 10^6,a_i\leq 10^9 分析 将点左右翻转，点 1 必须建塔，则转移方程为 f_i=a_i+\min\limits_{j &lt; i}{(f_j+(i-j)\cdot (i-j-1)/2)} 若决策点 j 优于决策点 k(j &lt; k) ，需满足 \frac{2(f_k-f_j)+k(k+1)-j(j+1)}{2(k-j)} &gt; i 。 维护决策点队列斜率单调递增，且斜率 &gt;i 。 复杂度 O(n) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940/* * @Author: Skqliao * @Source: BZOJ * @Problem: 3156: 防御准备 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3156 * @Date: 2019-02-26 21:32:07 * @LastEditTime: 2019-02-27 20:02:09 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;int N;long long A[MAXN], S[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123; return (double)(2 * (F[k] - F[j]) + (long long)k * (k + 1) - (long long)j * (j + 1)) / (2 * (k - j));&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); &#125; std::reverse(A + 1, A + N + 1); F[1] = A[1]; Que[0] = 1; long long ans = LLONG_MAX; for (int i = 2; i &lt;= N; ++i) &#123; while (qh &lt; qt &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= i) ++qh; int j = Que[qh]; F[i] = F[j] + (long long)(i - j) * (i - j - 1) / 2 + A[i]; while (qh &lt; qt &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; ans = std::min(ans, F[i] + (long long)(N - i) * (N - i + 1) / 2); &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2008 MAR」BZOJ 1597 土地购买]]></title>
    <url>%2FBZOJ-1597%2F</url>
    <content type="text"><![CDATA[有 n 个 X_i\times Y_i 的矩形，购买矩形的花费为它的面积。允许一次性购买多个矩形，其花费为 \max(X_i)\times \max(Y_i) 。求购买所有矩形的最小花费。 n\leq 50000 分析 若存在若干个矩形满足 X_1\leq X_2\leq\cdots\leq X_m 且 Y_1\cdots Y_i\leq Y_m ，则一定打包购买，花费为 X_m\times Y_m 。那么剩下的矩形一定满足 X_i\leq X_2\leq\cdots\leq X_p 且 Y_1 &gt; Y_2 &gt; \cdots&gt; Y_p 。 新序列可以通过排序（第一关键字 x ，第二关键字 y ）后用单调栈维护 y 值递减处理。 转移方程为 F_i=\min\limits_{1\leq j &lt; i}{(F_j+X_i\times Y_{j+1})} 。 决策点 j 优于决策点 k(j &lt; k) ，当且仅当 \frac{F_j-F_k}{B_{k+1}-B_{j+1}} &gt; A_i 。 维护决策点队列，满足斜率单调递增，且大于 A_i 。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/* * @Author: Skqliao * @Source: USACO2008 Mar * @Problem: 1597: [Usaco2008 Mar]土地购买 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1597 * @Date: 2019-02-25 20:43:09 * @LastEditTime: 2019-02-25 22:14:02 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;struct Node &#123; int x, y; bool operator &lt; (const Node &amp;a) const &#123; return x == a.x ? a.y &gt; y : x &lt; a.x; &#125;&#125; A[MAXN], B[MAXN];int N;int Que[MAXN], qh, qt;long long F[MAXN];double slope(int j, int k) &#123; return (double) (F[j] - F[k]) / (B[k + 1].y - B[j + 1].y);&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;A[i].x, &amp;A[i].y); &#125; std::sort(A + 1, A + N + 1); int top = 0; for (int i = 1; i &lt;= N; ++i) &#123; while (top &amp;&amp; B[top].y &lt;= A[i].y) --top; B[++top] = A[i]; &#125; Que[0] = 0; for (int i = 1; i &lt;= top; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= B[i].x) ++qh; int j = Que[qh]; F[i] = F[j] + (long long)B[i].x * B[j + 1].y; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[top]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2007」BZOJ 1096 仓库建设]]></title>
    <url>%2FBZOJ-1096%2F</url>
    <content type="text"><![CDATA[从左到右有若干个点，点 1 和点 i 的距离为 D_i ，点 i 有 A_i 个货物，在点 i 建仓库的费用为 C_i 。现要在若干个点建造仓库，使得每个点的货物向右能移动到某个仓库中，每个货物运动 1 距离的花费为 1 。求建造与移动的总花费的最小值。 N\leq 1000000 分析 转移方程显然为 F_i=\min\limits_{1\leq j &lt; i}{(F_j+\sum\limits_{k=j+1}^{i}{(D_i-D_k)\cdot A_k})} +C_i 。 设 Y_i=\sum\limits_{j=1}^{i}{A_j\cdot D_j} ， S_i=\sum\limits_{j=1}^{i}{A_j} 。若点 k 优于点 j(j &lt; k) ，则满足 \frac{F_k-F_j+Y_k-Y_j}{S_k-S_j} &gt; D_i 维护斜率单调递增的决策点队列，且队首斜率大于 D_i 。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839/* * @Author: Skqliao * @Source: ZJOI 2007 * @Problem: 1096: [ZJOI2007]仓库建设 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1096 * @Date: 2019-02-25 19:14:22 * @LastEditTime: 2019-02-25 20:02:31 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;long long D[MAXN], A[MAXN], C[MAXN];long long S[MAXN], Y[MAXN], F[MAXN];int Que[MAXN], qh, qt;double slope(int j, int k) &#123;return (double)(F[k] - F[j] + Y[k] - Y[j]) / (S[k] - S[j]);&#125;int main() &#123;scanf("%d", &amp;N);for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld%lld%lld", &amp;D[i], &amp;A[i], &amp;C[i]); S[i] = S[i - 1] + A[i]; Y[i] = Y[i - 1] + A[i] * D[i];&#125;Que[qt] = 0;for (int i = 1; i &lt;= N; ++i) &#123; while (qt &gt; qh &amp;&amp; slope(Que[qh], Que[qh + 1]) &lt;= D[i]) ++qh; int j = Que[qh]; F[i] = F[j] + (S[i] - S[j]) * D[i] - Y[i] + Y[j] + C[i]; while (qt &gt; qh &amp;&amp; slope(Que[qt - 1], Que[qt]) &gt;= slope(Que[qt], i)) --qt; Que[++qt] = i;&#125;printf("%lld\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2007」BZOJ 1095 捉迷藏]]></title>
    <url>%2FBZOJ-1095%2F</url>
    <content type="text"><![CDATA[无权树上有黑点和白点共 N 个，开始均为白点。有 M 个操作，分为两种：取反点 x 的颜色或查询树上白点对的最大距离。 N\leq 100000, M\leq 500000 分析 做的第一道动态点分治的题。。 首先考虑假如没有修改操作，那么求最远白点对只需要点分治，每次在重心合并子树中的最长和次长链，得到最大值。 有了修改，我们考虑动态点分治。 由于树的形态不变，因此各个子树的重心不变。那么我们可以将重心记录下来，形成一棵点分树，点分树上的父亲节点即为上一层重心，儿子节点为各子树重心。根据重心的性质，树高是 O(log{n}) 的。 发现修改一个点的颜色会对它上级的每一层重心造成影响。 用一个优先队列 S1[i] 维护子树中每个白点到上一层重心的距离， S2[i] 维护所有子树中距离的最大值，即所有 S1 的堆顶。再用一个堆来维护全局答案，即不同的两个 S2 堆顶之和。 那么修改一个点会导致 S1 发生变化，从而导致上层的 S2 发生变化，从而导致答案发生变化。 插入删除两点间的距离可以先用ST表预处理出欧拉序对应的深度的区间最小值，做到 O(n\log{n}) 预处理， O(1) 查询。 由于我们不知道修改的这个点是否是堆顶，因此插入 /删除前先在上层 S2 中弹出当前 S1 的堆顶，完成对 S1 的操作后，再重新向 S2 插入最大值。维护答案同理。 在堆中删除元素有一个常见的trick，即用两个堆分别维护所有和已删除的元素，一同弹出堆顶直到堆顶不同为止。 总复杂度 O((n + m)\log ^ 2{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263/* * @Author: Skqliao * @Source: ZJOI 2007 * @Problem: 1095: [ZJOI2007]Hide 捉迷藏 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1095 * @Date: 2019-02-24 10:24:53 * @LastEditTime: 2019-02-24 15:46:29 */#include &lt;bits/stdc++.h&gt;char In[1 &lt;&lt; 24], *at = In, *en = In;char gc() &#123; if (at == en) &#123; en = (at = In) + fread(In, 1, 1 &lt;&lt; 24, stdin); &#125; return at == en ? EOF : *at++;&#125;int ga() &#123; char c = gc(); while (!isalpha(c)) c = gc(); return c;&#125;int gt() &#123; int x = 0; char c = gc(); while (!isdigit(c)) c = gc(); while (isdigit(c)) &#123; x = x * 10 + c - '0'; c = gc(); &#125; return x;&#125;const int MAXN = 100000 + 5;const int LOG = 18;struct Prioirty_Queue &#123; std::priority_queue&lt;int&gt; In, Out; void insert(int x) &#123; In.push(x); &#125; void erase(int x) &#123; Out.push(x); &#125; void update() &#123; while (!Out.empty() &amp;&amp; In.top() == Out.top()) &#123; In.pop(); Out.pop(); &#125; &#125; void pop() &#123; update(); In.pop(); &#125; int top() &#123; update(); return In.top(); &#125; int secondtop() &#123; int x = top(); pop(); int y = top(); insert(x); return y; &#125; int size() &#123; return In.size() - Out.size(); &#125;&#125; S1[MAXN], S2[MAXN], ans;void Insert(Prioirty_Queue &amp;s) &#123; if (s.size() &gt;= 2) &#123; ans.insert(s.top() + s.secondtop()); &#125;&#125;void Erase(Prioirty_Queue &amp;s) &#123; if (s.size() &gt;= 2) &#123; ans.erase(s.top() + s.secondtop()); &#125;&#125;int N, M;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Sz[MAXN], MxSz[MAXN];bool Vis[MAXN];int rt, sigma;int Depth[MAXN];void getRoot(int x, int fa) &#123; MxSz[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; getRoot(v, x); MxSz[x] = std::max(MxSz[x], Sz[v]); &#125; &#125; MxSz[x] = std::max(MxSz[x], sigma - Sz[x]); if (MxSz[x] &lt; MxSz[rt]) rt = x;&#125;int Fa[MAXN];void cal(int x, int fa, int dep, Prioirty_Queue &amp;s) &#123; s.insert(dep); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; cal(v, x, dep + 1, s); &#125; &#125;&#125;int getSize(int x, int fa) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa &amp;&amp; !Vis[v]) &#123; Sz[x] += getSize(v, x); &#125; &#125; return Sz[x];&#125;int Dep[MAXN &lt;&lt; 1][LOG], cntD, Pos[MAXN];int build(int x) &#123; rt = 0; sigma = getSize(x, 0); getRoot(x, 0); int p = rt; Vis[p] = 1; S2[p].insert(0); for (int i = H[p]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (!Vis[v]) &#123; Prioirty_Queue tmp; cal(v, 0, 1, tmp); int p2 = build(v); Fa[p2] = p; S1[p2] = tmp; S2[p].insert(S1[p2].top()); &#125; &#125; Insert(S2[p]); return p;&#125;void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Dep[Pos[x] = ++cntD][0] = Depth[x]; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); Dep[++cntD][0] = Depth[x]; &#125; &#125;&#125;int Log[MAXN &lt;&lt; 1], Bin[LOG];int queryLcaDepth(int x, int y) &#123; x = Pos[x], y = Pos[y]; if (x &gt; y) std::swap(x, y); int d = Log[y - x + 1]; return std::min(Dep[x][d], Dep[y - Bin[d] + 1][d]);&#125;int queryDis(int x, int y) &#123; return Depth[x] + Depth[y] - 2 * queryLcaDepth(x, y); &#125;void turnOn(int x) &#123; Erase(S2[x]); S2[x].insert(0); Insert(S2[x]); for (int i = x; Fa[i]; i = Fa[i]) &#123; Erase(S2[Fa[i]]); if (S1[i].size()) &#123; S2[Fa[i]].erase(S1[i].top()); &#125; S1[i].insert(queryDis(Fa[i], x)); if (S1[i].size()) &#123; S2[Fa[i]].insert(S1[i].top()); &#125; Insert(S2[Fa[i]]); &#125;&#125;void turnOff(int x) &#123; Erase(S2[x]); S2[x].erase(0); Insert(S2[x]); for (int i = x; Fa[i]; i = Fa[i]) &#123; Erase(S2[Fa[i]]); if (S1[i].size()) &#123; S2[Fa[i]].erase(S1[i].top()); &#125; S1[i].erase(queryDis(Fa[i], x)); if (S1[i].size()) &#123; S2[Fa[i]].insert(S1[i].top()); &#125; Insert(S2[Fa[i]]); &#125;&#125;bool Status[MAXN];int main() &#123; N = gt(); for (int i = 1; i &lt; N; ++i) &#123; addEdge(gt(), gt()); &#125; MxSz[0] = N; build(1); dfs(1, 0); Log[0] = -1; for (int i = 1; i &lt;= cntD; ++i) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; Bin[0] = 1; for (int i = 1; i &lt;= Log[cntD]; ++i) &#123; Bin[i] = Bin[i - 1] &lt;&lt; 1; &#125; for (int j = 1; j &lt;= Log[cntD]; ++j) &#123; for (int i = 1; i + Bin[j - 1] - 1 &lt;= cntD; ++i) &#123; Dep[i][j] = std::min(Dep[i][j - 1], Dep[i + Bin[j - 1]][j - 1]); &#125; &#125; std::fill(Status + 1, Status + N + 1, 1); int cnt = N; M = gt(); for (int i = 1; i &lt;= M; ++i) &#123; if (ga() == 'G') &#123; if (cnt &lt; 2) &#123; printf("%d\n", cnt - 1); &#125; else &#123; printf("%d\n", ans.top()); &#125; &#125; else &#123; int u = gt(); if (Status[u]) &#123; --cnt; turnOff(u); &#125; else &#123; ++cnt; turnOn(u); &#125; Status[u] ^= 1; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉序</tag>
        <tag>ST表</tag>
        <tag>动态点分治</tag>
        <tag>堆</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「APIO 2010」BZOJ 1911 特别行动队]]></title>
    <url>%2FBZOJ-1911%2F</url>
    <content type="text"><![CDATA[将序列 A[1 \cdots n] 划分成若干个不相交区间，区间 [l,r] 的权值为 a\cdot x^2+b\cdot x+c ，其中 x=\sum\limits_{i=l}^{r}{A[i]} 。求最大权值和。 n\leq 1000000,-5\leq a\leq -1, |b|,|c|\leq 10000000,A[i]\leq 100 分析 令 S_i=\sum\limits_{j=1}^{i}{A_i} ， F_i 表示将前 i 个数划分成若干区间的最大权值和。 则 F_i=\min\limits_{1\leq j &lt; i}{(F_j+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c)} 。 考虑 i 从两个决策点 j,k 转移，若 j 更优，则需要满足： F_j-F_k+a\cdot (S_i-S_j)^2+b\cdot (S_i-S_j) + c-(a\cdot (S_i-S_k)^2+b\cdot (S_i-S_k) + c) &gt; 0 移项整理可得 \frac{F_j-F_k+a(S_j^2-S_k^2)}{S_j-S_k} &lt; 2aS_i+b 。 维护单调队列，每次取队首更新当前答案，维护队列中斜率单调递减，且不超过 2aS_i+b 。 复杂度 O(n) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * @Author: Skqliao * @Source: APIO 2010 * @Problem: 1911: [Apio2010]特别行动队 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1911 * @Date: 2019-02-23 17:04:48 * @LastEditTime: 2019-02-24 10:03:05 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;long long a, b, c;long long S[MAXN], F[MAXN];template &lt;class T&gt;T sqr(T x) &#123; return x * x;&#125;double slop(int x, int y) &#123; return (double)(F[x] - F[y] + a * (S[x] + S[y]) * (S[x] - S[y])) / (S[x] - S[y]);&#125;int Que[MAXN], qh, qt;int main() &#123; long long x; scanf("%d%lld%lld%lld", &amp;N, &amp;a, &amp;b, &amp;c); Que[qt] = 0; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;x); S[i] = S[i - 1] + x; while (qt &gt; qh &amp;&amp; slop(Que[qh], Que[qh + 1]) &gt;= 2 * a * S[i] + b) ++qh; int j = Que[qh]; F[i] = F[j] + a * sqr(S[i] - S[j]) + b * (S[i] - S[j]) + c; while (qt &gt; qh &amp;&amp; slop(Que[qt], i) &gt;= slop(Que[qt - 1], Que[qt])) --qt; Que[++qt] = i; &#125; printf("%lld\n", F[N]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CEOI 2004」JZOJ 1131 锯木场选址]]></title>
    <url>%2FJZOJ-1131%2F</url>
    <content type="text"><![CDATA[数轴从左到右有 n + 1 点，每个点有 A_i 个人，相邻两点距离为 B_i 。一个人移动 1 的花费为 1 。第 n + 1 个点为集合点，现可以在前 n 个点中再选择两个点作为集合点，如此一共有三个集合点。所有人必须向右移动到某一个集合点中，求所有人移动花费总和的最小值。 n\leq 20000 分析 记 D(i) 为点 1 和点 i 间的距离， G(i,j) 为将点 [i,j] 的人移动到 j 的花费，则 G(x,y)=\sum\limits_{x\leq i\leq y}{(D(y)-D(i))\cdot A(i)} 。 若当前选择点 i 为第二个集合点，点 j(1\leq j &lt; i) 为第一个集合点，则总花费为 \min\limits_{1\leq i &lt; j}(G(1,j)+G(j+1,i)+G(i+1,n+1)) 。 设 X(i)=\sum\limits_{j=1}^{i}{A(j)\cdot D(j)} ， Y(i)=\sum\limits_{j=1}^{i}{A(j)} ，则 G(x,y)=D(y)(Y(y)-Y(x-1))-X(y)+X(x-1) 。 若从点 j 转移比从点 k(1\leq j &lt; k &lt; i) 转移更优，则需要满足： G(1,j)+G(j+1,i)+G(i+1,n+1) &lt; G(1,k)+G(k+1,i)+G(i+1,n+1) ，移项整理可得 \frac{D(j)Y(j)-D(k)Y(k)}{Y(j)-Y(k)} &gt; D(i) 。 D(i) 单调递增，左式与 i 无关，称之为 j,k 点间的斜率。因此可以斜率优化DP。 维护单调队列，求当前点 i 时，队内元素 q_1 &lt; q_2 &lt; \cdots q_m 满足相邻两点 q_i,q_j 的斜率大于 D(i) ，且斜率单调递增。 复杂度 O(n) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: CEOI 2004 * @Problem: 1131. 【CEOI2004】锯木场选址Two(踢我) * @Url: https://jzoj.net/senior/#main/show/1131 * @Date: 2019-02-23 11:47:58 * @LastEditTime: 2019-02-23 16:36:42 */#include &lt;bits/stdc++.h&gt;const int MAXN = 20000 + 5;int N;long long A[MAXN], B[MAXN], D[MAXN], X[MAXN], Y[MAXN];int Que[MAXN], qh, qt;long long cost(int l, int r) &#123; return D[r] * (Y[r] - Y[l - 1]) - (X[r] - X[l - 1]); &#125;double cal(int x, int y) &#123; return (double)(D[x] * Y[x] - D[y] * Y[y]) / (Y[x] - Y[y]); &#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld%lld", &amp;A[i], &amp;B[i]); &#125; for (int i = 1; i &lt;= N + 1; ++i) &#123; Y[i] = Y[i - 1] + A[i]; D[i] = D[i - 1] + B[i - 1]; X[i] = X[i - 1] + D[i] * A[i]; &#125; Que[qt++] = 0; long long ans = LLONG_MAX; for (int i = 1; i &lt;= N; ++i) &#123; while (qt - qh &gt; 1 &amp;&amp; cal(Que[qh], Que[qh + 1]) &lt;= D[i]) ++qh; ans = std::min(ans, cost(1, Que[qh]) + cost(Que[qh] + 1, i) + cost(i + 1, N + 1)); while (qt - qh &gt; 1 &amp;&amp; cal(Que[qt - 2], Que[qt - 1]) &gt;= cal(Que[qt - 1], i)) --qt; Que[qt++] = i; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>JZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2008」BZOJ 1010 玩具装箱toy]]></title>
    <url>%2FBZOJ-1010%2F</url>
    <content type="text"><![CDATA[用若干个区间覆盖 n 个数 A[1 \cdots n] ，区间 [l,r] 的花费为 (\sum\limits_{i=l}^{r}{A[i]}+r-l-L)^2 。求总花费的最小值。 n\leq 50000,A_i,L &gt; 0 分析 记 F[i] 为覆盖前 i 个数的最小花费， S[i]=\sum\limits_{j=1}^{i}{A[j]} 。即可得到一个simple的DP转移方程， F[i]=\min\limits_{1\leq j &lt; i}(F[j]+(S[i]-S[j]+i-j-1-L)^2) 。 但是复杂度太高，为 O(n^2) ，需要优化。 考虑两个决策点 j,k(j &lt; k) ，什么时候 j 会更优。 即满足 F[j]+(S[i]-S[j]+i-j-1-L)^2-F[k]+(S[i]-S[k]+i-k-1-L)^2 &gt; 0 。 设 S'[i]=S[i]+i-1 ，整理可得： F[j]-F[k]-2(S'[i]-L-1)(S'[j]-S'[k])+S'^2[j]-S'^2[k]&gt;0 。 移项得 \frac{F[i]-F[k]+(S'[j]+S'[k]+2L+2)(S'[j]-S'[k])}{2(s'[j]-s'[k])}&gt;S'[i] 。 发现左式与 i 无关，且 S'[i] 单调不减。这是一个斜率优化的题。 设左式为 j,k 间的斜率，维护单调队列，满足相邻两点间的斜率单调递增，且大于 S'[i] 。每次取队首决策点更新当前 F[i] ，并将 i 插入队尾。 复杂度 O(n)) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041/* * @Author: Skqliao * @Source: HNOI 2008 * @Problem: 1010: [HNOI2008]玩具装箱toy * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1010 * @Date: 2019-02-23 09:47:42 * @LastEditTime: 2019-02-23 11:03:34 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;int N, L;long long A[MAXN], F[MAXN], S[MAXN];int Que[MAXN], qh, qt;double cal(int j, int k) &#123;return (F[j] - F[k] + (S[j] + S[k] + 2 * L + 2) * (S[j] - S[k])) / 2 / (S[j] - S[k]);&#125;int main() &#123;scanf("%d%d", &amp;N, &amp;L);for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]);&#125;Que[qt++] = 0;S[0] = -1;for (int i = 1; i &lt;= N; ++i) &#123; S[i] = S[i - 1] + A[i] + 1; while (qt - qh &gt; 1 &amp;&amp; cal(Que[qh], Que[qh + 1]) &lt;= S[i]) &#123; ++qh; &#125; F[i] = F[Que[qh]] + (S[i] - S[Que[qh]] - L - 1) * (S[i] - S[Que[qh]] - L - 1); while (qt - qh &gt; 1 &amp;&amp; cal(Que[qt - 2], Que[qt - 1]) &gt;= cal(Que[qt - 1], i)) &#123; --qt; &#125; Que[qt++] = i;&#125;printf("%lld\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>斜率优化</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2007 Mar」BZOJ 1639 Monthly Expense 月度开支]]></title>
    <url>%2FBZOJ-1639%2F</url>
    <content type="text"><![CDATA[将 A[1 \cdots N] 划分成 M 个区间，使得各区间和的最大值最小。 N,M\leq 100000 分析 二分答案。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849/* * @Author: Skqliao * @Source: USACO2007 Mar * @Problem: 1639: [Usaco2007 Mar]Monthly Expense 月度开支 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1639 * @Date: 2019-02-22 17:05:58 * @LastEditTime: 2019-02-22 17:19:34 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int N, M;int A[MAXN];bool check(long long x) &#123; int left = M; long long sum = 0; for (int i = 1; i &lt;= N; ++i) &#123; if (sum + A[i] &gt; x) &#123; sum = 0; --left; &#125; sum += A[i]; &#125; return left &gt; 0;&#125;int main() &#123; long long mx = 0, sum = 0; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); sum += A[i]; mx = std::max(mx, (long long)A[i]); &#125; long long l = mx, r = sum; long long ans = 0; while (l &lt;= r) &#123; long long m = (l + r) / 2; if (check(m)) &#123; r = m - 1; ans = m; &#125; else l = m + 1; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2010」BZOJ 1816 扑克牌]]></title>
    <url>%2FBZOJ-1816%2F</url>
    <content type="text"><![CDATA[有 N 种牌，各有 A_i 张。还有一类特殊的牌，有 M 张。每副牌由 N 张不同的牌组成，求最多能凑出多少副牌。 N\leq 50,M,A_i\leq 5000000000 分析 答案显然具有单调性，因此可以二分答案将求最值问题转为判定可行性问题。 假设当前判定是否能凑出 x 副牌。对于 A_i\geq x 的牌，显然每副牌中都能放一张；对于 A_i &lt; x 的牌，需要用特殊的牌补。若特殊的牌不够或者在一副牌中出现两次，则判定失败。 也就是说这些牌需要至少凑够前 N-1 个位置，用特殊的牌补最后一张，即需要满足 \sum{min(x,A_i)} &lt; min(M,x) 。 复杂度 O(M\log{\sum{A_i}}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243/* * @Author: Skqliao * @Source: CQOI 2010 * @Problem: 1816: [Cqoi2010]扑克牌 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1816 * @Date: 2019-02-22 16:23:14 * @LastEditTime: 2019-02-22 16:55:38 */#include &lt;bits/stdc++.h&gt;const int MAXN = 50 + 5;int N;long long M, A[MAXN];bool check(long long x) &#123; long long tot = 0; for (int i = 1; i &lt;= N; ++i) &#123; tot += std::min(x, A[i]); &#125; return N * x - tot &lt;= std::min(x, M);&#125;int main() &#123; scanf("%d%lld", &amp;N, &amp;M); long long sum = M; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%lld", &amp;A[i]); sum += A[i]; &#125; long long l = 0, r = sum / N; long long ans = 0; while (l &lt;= r) &#123; long long m = (l + r) / 2; if (check(m)) &#123; ans = m; l = m + 1; &#125; else r = m - 1; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2005 Dec」BZOJ 1671 Knights of Ni 骑士]]></title>
    <url>%2FBZOJ-1671%2F</url>
    <content type="text"><![CDATA[在 N\times M 的网格图中，初始位于 (x,y) 。每个点有属性 1-4 ，若属性为 1 则不可经过。要求先走到一个属性为 4 的格子，再走到一个属性为 3 的格子，要求在走到 4 之前不能经过 3 。求最少步数。 N,M\leq 1000 分析 做两次BFS，第一次初始为 (x,y) ，求出到每个 4 的最小步数，再以这些点为起点求出总步数。 复杂度 O(NM) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485/* * @Author: Skqliao * @Source: USACO2005 Dec * @Problem: 1671: [Usaco2005 Dec]Knights of Ni 骑士 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1671 * @Date: 2019-02-22 15:35:46 * @LastEditTime: 2019-02-22 16:14:24 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int A[MAXN][MAXN];int Step[MAXN][MAXN];std::queue&lt;std::pair&lt;int, int&gt; &gt; Que;int bfs(int sx, int sy) &#123; memset(Step, 0x3f, sizeof Step); Step[sx][sy] = 0; Que.push(std::make_pair(sx, sy)); while (!Que.empty()) &#123; std::pair&lt;int, int&gt; a = Que.front(); Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.first + Dicx[i]; int y = a.second + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) continue; if (A[x][y] != 1 &amp;&amp; A[x][y] != 3) &#123; if (Step[x][y] &gt; Step[a.first][a.second] + 1) &#123; Step[x][y] = Step[a.first][a.second] + 1; Que.push(std::make_pair(x, y)); &#125; &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 4) &#123; Que.push(std::make_pair(i, j)); &#125; else &#123; Step[i][j] = 0x3f3f3f3f; &#125; &#125; &#125; while (!Que.empty()) &#123; std::pair&lt;int, int&gt; a = Que.front(); Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.first + Dicx[i]; int y = a.second + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) continue; if (A[x][y] != 1) &#123; if (Step[x][y] &gt; Step[a.first][a.second] + 1) &#123; Step[x][y] = Step[a.first][a.second] + 1; Que.push(std::make_pair(x, y)); &#125; &#125; &#125; &#125; int ans = INT_MAX; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 3) ans = std::min(ans, Step[i][j]); &#125; &#125; return ans;&#125;int main() &#123; int sx = 0, sy = 0; scanf("%d%d", &amp;M, &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); if (A[i][j] == 2) &#123; sx = i, sy = j; &#125; &#125; &#125; printf("%d\n", bfs(sx, sy)); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2013」BZOJ 3170 松鼠聚会]]></title>
    <url>%2FBZOJ-3170%2F</url>
    <content type="text"><![CDATA[坐标系中有 n 个点 (x_i,y_i) ，选择一点 (x_j,y_j) ，使得所有点到该点的切比雪夫距离之和最小。 n\leq 10^5 分析 dis(i,j)=max(|x_i-x_j|,|y_i-y_j|) 。 设 X_i=x_i-y_i,Y_i=x_i+y_i ，则 dis(i,j)=\frac{|X_i-X_j|+|Y_i-Y_j|}{2} ，因此 x,y 两部分可以分别计算。 分别按 x,y 排序，做前缀和，则 \sum\limits_{i=1}^{n}|{X_i-X_j}|=(j-1)\cdot X_j-sumx_{j-1}+sum_n-sum_j-(n-j)\cdot X_j 。即可 O(n) 计算出最小距离。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859/* * @Author: Skqliao * @Source: TJOI 2013 * @Problem: 3170: [Tjoi2013]松鼠聚会 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3170 * @Date: 2019-02-22 14:13:36 * @LastEditTime: 2019-02-22 15:06:32 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;struct Node &#123; int id; long long x, y;&#125; A[MAXN];int N;bool cmp1(const Node&amp; x, const Node&amp; y) &#123; return x.x &lt; y.x;&#125;bool cmp2(const Node&amp; x, const Node&amp; y) &#123; return x.y &lt; y.y;&#125;long long Sum[MAXN];long long X[MAXN], Y[MAXN];int main() &#123; int x, y; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;x, &amp;y); A[i] = (Node) &#123;i, x - y, x + y&#125;; &#125; std::sort(A + 1, A + N + 1, cmp1); for (int i = 1; i &lt;= N; ++i) &#123; Sum[i] = Sum[i - 1] + A[i].x; &#125; for (int i = 1; i &lt;= N; ++i) &#123; X[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].x; X[A[i].id] += (i - 1) * A[i].x - Sum[i - 1]; &#125; std::sort(A + 1, A + N + 1, cmp2); for (int i = 1; i &lt;= N; ++i) &#123; Sum[i] = Sum[i - 1] + A[i].y; &#125; for (int i = 1; i &lt;= N; ++i) &#123; Y[A[i].id] = Sum[N] - Sum[i] - (N - i) * A[i].y; Y[A[i].id] += (i - 1) * A[i].y - Sum[i - 1]; &#125; long long ans = LLONG_MAX; for (int i = 1; i &lt;= N; ++i) &#123; ans = std::min(ans, X[i] + Y[i]); &#125; printf("%lld\n", ans / 2); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2006」BZOJ 1862 GameZ游戏排名系统]]></title>
    <url>%2FBZOJ-1862%2F</url>
    <content type="text"><![CDATA[有 n 个操作： 更新name的得分为score（删除以前的得分） 查询name的排名（得分相同按照时间先后排名） 查询得分第 [k,k+10] 名的人的名字（如果没有 k+10 个人就输出到最后一名为止） n\leq 250000 分析 很明显的平衡树的板子，只是处理起来麻烦一些。 按照得分为第一关键字，时间为第二关键字维护平衡树，用一个map映射名字对应的得分。 平衡树需支持插入，删除，查询第 k 大，查询名次，查询前驱的操作。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173/* * @Author: Skqliao * @Source: ZJOJ 2006 * @Problem: 1862: [Zjoi2006]GameZ游戏排名系统 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1862 * @Date: 2019-02-21 16:26:15 * @LastEditTime: 2019-02-22 13:59:09 */#include &lt;bits/stdc++.h&gt;#include &lt;bits/extc++.h&gt;const int MAXN = 250000 + 5;int N;std::string s;struct Treap &#123; std::string name; int key, key2, fix; int sz; Treap* ch[2]; int cmp(int x, int y) &#123; if (key == x) &#123; return y == key2 ? -1 : y &lt; key2; &#125; return x &gt; key; &#125; void pushUp() &#123; sz = 1; if (ch[0]) sz += ch[0]-&gt;sz; if (ch[1]) sz += ch[1]-&gt;sz; &#125;&#125; *R(NULL), Pool[MAXN];int cntP;Treap* newTreap(int x, int t) &#123; Pool[++cntP] = (Treap) &#123;s, x, t, rand(), 1, NULL, NULL&#125;; return Pool + cntP;&#125;void rotate(Treap*&amp; t, int d) &#123; Treap* k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap*&amp; t, int x, int y) &#123; if (!t) &#123; t = newTreap(x, y); return; &#125; int d = t-&gt;cmp(x, y); ++t-&gt;sz; insert(t-&gt;ch[d], x, y); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125;&#125;void erase(Treap*&amp; t, int x, int y) &#123; if (!t) return; --t-&gt;sz; int d = t-&gt;cmp(x, y); if (d == -1) &#123; if (!t-&gt;ch[0]) &#123; t = t-&gt;ch[1]; &#125; else if (!t-&gt;ch[1]) &#123; t = t-&gt;ch[0]; &#125; else &#123; int e = t-&gt;ch[0]-&gt;fix &gt; t-&gt;ch[1]-&gt;fix; rotate(t, e); erase(t-&gt;ch[e], x, y); &#125; &#125; else &#123; erase(t-&gt;ch[d], x, y); &#125; if (t) &#123; t-&gt;pushUp(); &#125;&#125;int queryRank(Treap*&amp; t, int x, int y) &#123; int num = t-&gt;ch[1] ? t-&gt;ch[1]-&gt;sz : 0; int d = t-&gt;cmp(x, y); if (d == -1) &#123; return num + 1; &#125; else if (d == 0) &#123; return num + 1 + queryRank(t-&gt;ch[0], x, y); &#125; else &#123; return queryRank(t-&gt;ch[1], x, y); &#125;&#125;std::pair&lt;int, int&gt; queryKth(Treap*&amp; t, int x) &#123; int num = t-&gt;ch[1] ? t-&gt;ch[1]-&gt;sz : 0; if (x == num + 1) &#123; return std::make_pair(t-&gt;key, t-&gt;key2); &#125; else if (x &lt;= num) &#123; return queryKth(t-&gt;ch[1], x); &#125; else &#123; return queryKth(t-&gt;ch[0], x - num - 1); &#125;&#125;int mn, mn2;void queryPre(Treap*&amp; t, int x, int y) &#123; if (!t) return; int d = t-&gt;cmp(x, y); if (d != 0) &#123; if (t-&gt;key &gt; mn) &#123; mn = t-&gt;key; mn2 = t-&gt;key2; s = t-&gt;name; &#125; else if (t-&gt;key == mn &amp;&amp; t-&gt;key2 &lt; mn2) &#123; mn2 = t-&gt;key2; s = t-&gt;name; &#125; queryPre(t-&gt;ch[1], x, y); &#125; else &#123; queryPre(t-&gt;ch[0], x, y); &#125;&#125;__gnu_pbds::gp_hash_table&lt;std::string, int&gt; Map, Map2;int main() &#123; int x; //srand((unsigned long long)new char); std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cin &gt;&gt; N; s = "skqliao"; insert(R, -INT_MAX, INT_MAX); for (int i = 1; i &lt;= N; ++i) &#123; std::cin &gt;&gt; s; if (s[0] == '+') &#123; s = s.substr(1); std::cin &gt;&gt; x; if (Map.find(s) != Map.end()) &#123; erase(R, Map[s], Map2[s]); &#125; Map[s] = x; Map2[s] = i; insert(R, x, i); &#125; else if (s[0] == '?') &#123; if (isdigit(s[1])) &#123; int x = 0; for (size_t i = 1; i &lt; s.size(); ++i) &#123; x = x * 10 + s[i] - '0'; &#125; std::pair&lt;int, int&gt; a = queryKth(R, x); x = a.first; int y = a.second; for (int i = 0; i &lt; 10; ++i) &#123; mn = -INT_MAX; mn2 = INT_MAX; queryPre(R, x, y); if (mn == -INT_MAX) break; std::cout &lt;&lt; s &lt;&lt; " "; x = mn, y = mn2 + 1; &#125; std::cout &lt;&lt; "\n"; &#125; else &#123; std::cout &lt;&lt; queryRank(R, Map[s.substr(1)], Map2[s.substr(1)]) &lt;&lt; "\n"; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2008」BZOJ 1040 骑士]]></title>
    <url>%2FBZOJ-1040%2F</url>
    <content type="text"><![CDATA[每个点有权值 W_i ，选择点 i 后不能选择点 A_i 。选择任意多个点，使得权值和最大。 N\leq 1000000 分析 根据题意，不能同时选择点 i 和 A_i 。 该图有 N 个点 N 条边，因此是个基环树森林。 对于每棵基环树，断掉环上任意一条边 (u,v) 。以 u,v 分别为根跑树形DP，父亲儿子不能被同时选择，且根节点不能被选。则这棵基环树的贡献为两次DP的较大值。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778/* * @Author: Skqliao * @Source: BZOJ 2008 * @Problem: 1040: [ZJOI2008]骑士 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1040 * @Date: 2019-02-21 15:39:58 * @LastEditTime: 2019-02-21 16:12:59 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000000 + 5;int N;int W[MAXN];struct Edge &#123;int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE = -1;void addEdge(int u, int v) &#123;E[++cntE] = (Edge) &#123;v, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, H[v]&#125;;H[v] = cntE;&#125;int Vis[MAXN], cnt;int fir, sec, cut;void dfs(int x, int fa) &#123;Vis[x] = cnt;for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; if (!Vis[v]) &#123; dfs(v, x); &#125; else &#123; fir = x; sec = v; cut = i; &#125; &#125;&#125;&#125;long long F[MAXN][2];long long dp(int x, int fa) &#123;F[x][1] = W[x];F[x][0] = 0;for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (i == cut || i == (cut ^ 1) || v == fa) continue; dp(v, x); F[x][0] += std::max(F[v][0], F[v][1]); F[x][1] += F[v][0];&#125;return F[x][0];&#125;int main() &#123;memset(H, -1, sizeof H);scanf("%d", &amp;N);int x;for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;W[i], &amp;x); addEdge(x, i);&#125;long long ans = 0;for (int i = 1; i &lt;= N; ++i) &#123; if (Vis[i]) continue; ++cnt; dfs(i, 0); ans += std::max(dp(fir, 0), dp(sec, 0));&#125;printf("%lld\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>基环树</tag>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2008」BZOJ 1054 移动玩具]]></title>
    <url>%2FBZOJ-1054%2F</url>
    <content type="text"><![CDATA[给定两个 4\times 4 的01矩阵，每次可以交换一对相邻的 0,1 ，求前一个矩阵转移到后一个矩阵的最少步数。 分析 BFS+Hash。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657/* * @Author: Skqliao * @Source: HAOI 2008 * @Problem: 1054: [HAOI2008]移动玩具 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1054 * @Date: 2019-02-18 22:53:30 * @LastEditTime: 2019-02-21 15:15:00 */#include &lt;bits/stdc++.h&gt;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;struct Node &#123;std::string code;int step;&#125;;std::string s, t, x;std::multiset&lt;std::string&gt; Vis;std::queue&lt;Node&gt; Que;int bfs() &#123;Que.push((Node) &#123;s, 0&#125;);while (!Que.empty()) &#123; Node a = Que.front(); Que.pop(); for (int p = 0; p &lt; 16; ++p) &#123; if (a.code[p] == '0') continue; int i = p / 4, j = p % 4; for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k], y = j + Dicy[k]; if (x &lt; 0 || y &lt; 0 || x &gt; 3 || y &gt; 3) continue; if (a.code[x * 4 + y] == '1') continue; std::string b = a.code; b[p] = '0'; b[x * 4 + y] = '1'; if (Vis.count(b)) continue; Vis.insert(b); if (t == b) return a.step + 1; Que.push((Node) &#123;b, a.step + 1&#125;); &#125; &#125;&#125;&#125;int main() &#123;for (int i = 0; i &lt; 4; ++i) &#123; std::cin &gt;&gt; x; s += x;&#125;for (int i = 0; i &lt; 4; ++i) &#123; std::cin &gt;&gt; x; t += x;&#125;if (s == t) std::cout &lt;&lt; 0;else std::cout &lt;&lt; bfs();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>哈希</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「FJOI 2007」BZOJ 1002 轮状病毒]]></title>
    <url>%2FBZOJ-1002%2F</url>
    <content type="text"><![CDATA[求 N 轮状病毒的不同状态数。 N\leq 100 分析 发现中间的点度数为 N ，其他点度数为 3 ，用矩阵树定理解即可。 也可以暴力打表找规律，记 f(i) 为 i 轮状病毒的状态数，递推式为 f(i)=3\cdot f(i-1)-f(i-2)+2 。 python打表或者写高精度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687/* * @Author: Skqliao * @Date: 2019-02-16 20:21:57 * @LastEditTime: 2019-02-16 21:10:05 * @Source: FJOI 2007 * @Problem: 1002: [FJOI2007]轮状病毒 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1002 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N;struct Int &#123;static const int MAXN = 10000 + 5;int len, S[MAXN];Int operator=(int x) &#123; memset(S, 0, sizeof S); len = 0; while (x) &#123; S[len++] = x % 10; x /= 10; &#125; return *this;&#125;Int operator+(const Int &amp;x) &#123; Int c; c.len = std::max(len, x.len); memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i] += S[i] + x.S[i]; c.S[i + 1] += c.S[i] / 10; c.S[i] %= 10; &#125; if (c.S[c.len]) ++c.len; return c;&#125;Int operator-(const Int &amp;x) &#123; Int c; c.len = len; memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i] = S[i] - x.S[i]; while (c.S[i] &lt; 0) &#123; c.S[i] += 10; S[i + 1]--; &#125; &#125; while (!c.S[c.len - 1]) --c.len; return c;&#125;Int operator*(const Int &amp;x) &#123; Int c; c.len = len + x.len - 1; memset(c.S, 0, sizeof c.S); for (int i = 0; i &lt; len; ++i) &#123; for (int j = 0; j &lt; x.len; ++j) &#123; c.S[i + j] += S[i] * x.S[j]; &#125; &#125; for (int i = 0; i &lt; c.len; ++i) &#123; c.S[i + 1] += c.S[i] / 10; c.S[i] %= 10; &#125; if (c.S[c.len]) ++c.len; return c;&#125;void print() &#123; for (int i = len - 1; i &gt;= 0; --i) &#123; printf("%d", S[i]); &#125;&#125;&#125; F[MAXN], x, y;int main() &#123;scanf("%d", &amp;N);x = 2;y = 3;F[1] = 1;F[2] = 5;for (int i = 3; i &lt;= N; ++i) &#123; F[i] = y * F[i - 1] - F[i - 2] + x;&#125;F[N].print();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>矩阵树定理</tag>
        <tag>高精度</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2006」BZOJ 1003 物流运输]]></title>
    <url>%2FBZOJ-1003%2F</url>
    <content type="text"><![CDATA[一共有 n 天，每天要在无向图 G 中从 1 走到 m 。有 k 个限制条件，即不能在第 [l,r] 天中经过点 i 。每天的花费为路径总长度，每次更换线路（相比于前一天）会额外增加 k 的花费，求最小花费。 n\leq 100,m\leq 20 分析 点数极少，因此我们可以通过 n^2 次最短路，预处理出来第 [l,r] 天的每天的最小花费 C[l][r] （保证该花费对应的路径在第 [l,r] 天都是合法的）。 然后DP， F[i] 表示前 i 天最小的总花费。枚举上一次更换的时间 j ，则 F[i]=\min\{F[j-1]+(j-i+1)\cdot C[j][i]+K\cdot[j\not = 1]\}(1\leq j\leq i) 。 复杂度 O(n^2m\log{m}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586/* * @Author: Skqliao * @Date: 2019-02-16 18:54:21 * @LastEditTime: 2019-02-16 20:02:16 * @Source: ZJOI 2006 * @Problem: 1003: [ZJOI2006]物流运输 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1003 */#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;int N, M, K, P, D;int W[MAXN][MAXN];struct Edge &#123;int v, w, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, w, H[v]&#125;;H[v] = cntE;&#125;typedef std::pair&lt;int, int&gt; pii;int dijkstra(int l, int r) &#123;static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq;static int Dis[MAXN];static bool Vis[MAXN];memset(Vis, 0, sizeof Vis);memset(Dis, 0x3f, sizeof Dis);Dis[1] = 0;Pq.push(std::make_pair(0, 1));for (int i = l; i &lt;= r; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (W[i][j]) Vis[j] = 1; &#125;&#125;while (!Pq.empty()) &#123; while (!Pq.empty() &amp;&amp; Pq.top().first &gt; Dis[Pq.top().second]) Pq.pop(); if (Pq.empty()) break; int x = Pq.top().second; Pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v] || Dis[v] &lt; Dis[x] + E[i].w) continue; Dis[v] = Dis[x] + E[i].w; Pq.push(std::make_pair(Dis[v], v)); &#125;&#125;return Dis[M];&#125;int F[MAXN], G[MAXN][MAXN];int main() &#123;int u, v, w;scanf("%d%d%d%d", &amp;N, &amp;M, &amp;K, &amp;P);for (int i = 1; i &lt;= P; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w);&#125;scanf("%d", &amp;D);for (int i = 1; i &lt;= D; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); for (int j = v; j &lt;= w; ++j) W[j][u] = 1;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = i; j &lt;= N; ++j) &#123; G[i][j] = dijkstra(i, j); &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; F[i] = INT_MAX; if (G[1][i] != 0x3f3f3f3f) F[i] = i * G[1][i]; for (int j = 2; j &lt;= i; ++j) &#123; if (G[j][i] != 0x3f3f3f3f) F[i] = std::min(F[i], F[j - 1] + G[j][i] * (i - j + 1) + K); &#125;&#125;printf("%d\n", F[N]);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ICPC-Beijing 2006」BZOJ 1001 狼抓兔子]]></title>
    <url>%2FBZOJ-1001%2F</url>
    <content type="text"><![CDATA[在网格图中，任意点 (x,y) 都有 (x,y)\rightarrow (x+1,y) / (x,y)\rightarrow (x,y+1) / (x,y)\rightarrow (x+1,y+1) 这三种边。起点 S 位于 (1,1) ，终点 T 位于 (n,m) 。求 S-T 最小割。 n,m\leq 1000 分析 如果根据最大流最小割定理，通过求 S-T 最大流得到最小割的话，是行不通的，因为该图有最多 1000^2 个点。 但是本题特殊的一点在于这是一个平面图，可以将其转化为对偶图，通过求对偶图上的最短路得到原图的最小割。 平面图转对偶图的流程如下： 用一条不与其他任何边相交的新边连接 S,T ，构成一个新面 将平面图的每个面对应为对偶图的点，第一步构造的新面和无边界的面作为新图的起点 s 和终点 t 如果原图中边 e 同时属于两个面 s1,s2 ，则在新图中 s1 和 s2 之间连一条权值与 e 相同的无向边 删去 s,t 之间的边 则 s-t 最短路对应 S-T 最大流。 复杂度 O(nm\lg{nm}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596/* * @Author: Skqliao * @Date: 2019-02-13 12:36:43 * @LastEditTime: 2019-02-13 18:20:57 * @Source: BJOI 2006 * @Problem: 1001: [BeiJing2006]狼抓兔子 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1001 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2 * 1000 * 1000 + 5;const int MAXM = MAXN * 3;struct Edge &#123;int v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, w, H[v]&#125;;H[v] = cntE;&#125;int N, M;int S, T;typedef std::pair&lt;int, int&gt; pii;int Dis[MAXN];int dijkstra() &#123;static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq;memset(Dis, 0x3f, sizeof Dis);Dis[S] = 0;Pq.push(std::make_pair(Dis[S], S));while (!Pq.empty()) &#123; while (!Pq.empty() &amp;&amp; Dis[Pq.top().second] &lt; Pq.top().first) Pq.pop(); if (Pq.empty()) break; int x = Pq.top().second; Pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125;&#125;return Dis[T];&#125;int main() &#123;int x;scanf("%d%d", &amp;N, &amp;M);if (N == 1 || M == 1) &#123; int ans = INT_MAX; while (~scanf("%d", &amp;x)) ans = std::min(ans, x); printf("%d\n", ans);&#125; else &#123; N--, M--; S = 0, T = N * M * 2 + 1; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d", &amp;x); addEdge(i, T, x); &#125; for (int i = 2; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 3) * M + j, (2 * i - 2) * M + j, x); &#125; &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d", &amp;x); addEdge((2 * N - 1) * M + i, S, x); &#125; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); addEdge((2 * i - 1) * M + 1, S, x); for (int j = 1; j &lt;= M - 1; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 2) * M + j, (2 * i - 2) * M + j + M + 1, x); &#125; scanf("%d", &amp;x); addEdge((2 * i - 1) * M, T, x); &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); addEdge((2 * i - 2) * M + j, (2 * i - 2) * M + j + M, x); &#125; &#125; printf("%d\n", dijkstra());&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>对偶图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1312 Neerc2006 Hard Life]]></title>
    <url>%2FBZOJ-1312%2F</url>
    <content type="text"><![CDATA[无向图 G 有 n 个点 m 条边，对于任意子图 G'\in G ，定义它的权值为 |E|/|V| ，其中 |E|,|V| 分别为子图的边数和点数。求在最大化子图权值的条件下，子图点数的最大值。 n\leq 100,m\leq 1000 分析 如果将 |E|,|V| 拓展为边权和与点权和，那么最大化子图 |E|/|V| 即求最大密度子图。而本题只是边权点权皆为 1 的特殊情况。 对于这类问题，可采用分数规划+最小割来解决。 首先二分 k=|E|/|V| ，则 |E| = k\cdot |V| 。如果两个点被选择，则可以获得这条边的权值，由此问题可以转化为求最大权闭合子图。 将每条边 (u_i,v_i) 抽象为新点 A_i ，连接 (S,A_i) ，容量为 1 。 A_i 向 u_i,v_i 连接容量为无穷的边。原点向 T 连边，容量为二分的 k 值。 二分 k 直到求得最大权闭合子图权值 &lt; 0 为止。 既然要求在最大化权值情况下的点个数的最大值，那么再跑一遍最小割（ k 取允许的最大值），与 S 联通的原点即为子图的点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130/* * @Author: Skqliao * @Date: 2019-02-12 18:50:43 * @LastEditTime: 2019-02-12 22:17:09 * @Source: BZOJ * @Problem: Neerc2006 Hard Life * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1312 */#include &lt;bits/stdc++.h&gt;const int MAXN = 2100 + 5;const int MAXM = MAXN * 5;const double eps = 8e-6;struct Edge &#123; int v; double f, cap; int nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Cur[MAXN], Dis[MAXN];int S, T;void addEdge(int u, int v, double f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); if (x == T) return true; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f &gt; eps) &#123; Dis[v] = Dis[x] + 1; Que.push(v); &#125; &#125; &#125; return false;&#125;double dfs(int x, double maxf) &#123; if (x == T) return maxf; double left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &gt; eps) &#123; double flow = dfs(v, std::min(left, E[i].f)); if (flow &gt; eps) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (left &lt; eps) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;double dinic() &#123; double flow = 0; while (bfs()) &#123; flow += dfs(S, INT_MAX); &#125; return flow;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;int N, M;bool check(double x) &#123; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = H[i]; ~j; j = E[j].nxt) &#123; if (E[j].v == T) &#123; E[j].f = E[j].cap = x; &#125; &#125; &#125; return M - dinic() &gt; eps;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); if (M == 0) &#123; puts("1"); return 0; &#125; init(N + M); for (int i = 1; i &lt;= N; ++i) &#123; addEdge(i, T, 0); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(S, i + N, 1); addEdge(i + N, u, INT_MAX); addEdge(i + N, v, INT_MAX); &#125; double l = 0, r = M; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; l = m; &#125; else r = m; &#125; check(l - eps); int ans = 0; for (int i = 1; i &lt;= N; ++i) &#123; if (Dis[i] != -1) ++ans; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最大密度子图</tag>
        <tag>分数规划</tag>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「NOI 2006」BZOJ 1497 最大获利]]></title>
    <url>%2FBZOJ-1497%2F</url>
    <content type="text"><![CDATA[有 N 个点，选择点 i 花费 A_i 的代价。有 M 个关系，如果点 x_i,y_i 均被选择，则可以获得收益 B_i 。求收益-代价的最大值。 N\leq 5000,M\leq 50000 分析 这类问题也是常见的二元关系类题目，称之为最大权闭合子图。 将每个点的花费作为该点的点权（负数），将两点间的边抽象成一个点，点权为收益，新点向这两个点连有向边。 那么如果选择收益对应的点，就必须也选择其所有后继。最终求选择的子图点权和的最大值，这正是求最大权闭合子图。 根据相关建图方法，该问题可以转化为求最小割。 S 向所有正点权的点连边，容量为该点点权。所有负权点向 T 连边，容量为点权的绝对值。原图的所有边保留，容量为无穷大。则原图的最大权闭合子图的权值和为原图中所有正点权权值之和-新图最小割。 简易证明如下： 考虑一条有向边 x\rightarrow y ，如果 x 被选择则 y 必须被选择。即若 y 不选且 x 选，需要付出无穷的代价。清楚这一点后，根据网络流之二元关系的建图套路便能得到新图。 按照常理说这么多点和边的图跑网络流是很慢的，1s的时间跑不出来。但是对于这道题而言，图只有四层，即 S /正权点/负权点/ T ，所以每次增广时的深度很小，也就跑的很快。（纯粹口胡） 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-02-12 18:09:52 * @LastEditTime: 2019-02-12 18:23:18 * @Source: NOI 2006 * @Problem: 1497: [NOI2006]最大获利 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=1497 */#include &lt;bits/stdc++.h&gt;const int MAXN = 55000 + 5;const int MAXM = MAXN * 3;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int S, T;int Cur[MAXN], Dis[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memset(Dis, -1, sizeof Dis); memcpy(Cur, H, sizeof H); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) &#123; flow += dfs(S, INT_MAX); &#125; return flow;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;int N, M;int ans;int main() &#123; int x, y, z; scanf("%d%d", &amp;N, &amp;M); init(N + M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); addEdge(i, T, x); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;x, &amp;y, &amp;z); addEdge(S, i + N, z); addEdge(i + N, x, INT_MAX); addEdge(i + N, y, INT_MAX); ans += z; &#125; printf("%d\n", ans - dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割</tag>
        <tag>最大权闭合子图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「湖南省队训练 2013」BZOJ 3894 文理分科]]></title>
    <url>%2FBZOJ-3894%2F</url>
    <content type="text"><![CDATA[在 n\times m 的矩阵中，每个格子可以选择 0 或 1 ，分别获得收益 A_{i,j} 与 B_{i,j} 。如果一个格子和与它四相邻的格子选择相同，则额外获得收益 C_{i,j} 与 D_{i,j} （都选 0 或都选 1 ）。求总收益的最大值。 n,m\leq 100,A_{i,j},B_{i,j},C_{i,j},D_{i,j}\leq 500 分析 还是二元关系的题目，相比于happiness要复杂一些。 照旧将最大值转化为所有收益-最小割。 建图方法如下： 对于每个点 x ，割去 (S,x) 表示不选文科，割去 (x,T) 表示不选理科，容量为 A_x 和 B_x 。 新建点 a_x,b_x ，表示 x 以及四相邻的点均选择 0 或 1 。连接 (S,a_x) 和 (b_x,T) ，容量分别为 C_x 和 D_x 。 但是可能会出现不合法的情况，即相邻点选择理科，但是又割去 (b_x,T) 。因此让 a_x 向这五个点（ x 与相邻的四个点）连接一条容量为无穷的边。这就使在这种情况下 (b_x,T) 无法被割去（因为割会经过一条容量为无穷的边，这样的割显然不是最小割）。 同理，让这五个点向 b_x 连接一条容量为无穷的边。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143/* * @Author: Skqliao * @Date: 2019-02-11 22:29:59 * @LastEditTime: 2019-02-11 22:56:26 * @Source: 2013湖南省队集训 * @Problem: 3894: 文理分科 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=3894 */#include &lt;bits/stdc++.h&gt;namespace mxf &#123;const int MAXN = 3 * 100 * 100 + 10;const int MAXM = MAXN * 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int S, T;int Cur[MAXN], Dis[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init(int tot) &#123; cntE = -1; memset(H, -1, sizeof H); S = tot + 1, T = tot + 2;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow;&#125;&#125; // namespace mxfusing mxf::addEdge;using mxf::S;using mxf::T;const int MAXN = 100 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int ans;int Id[MAXN][MAXN];bool judge(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= M; &#125;int main() &#123; int x; scanf("%d%d", &amp;N, &amp;M); mxf::init(N * M * 3); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; Id[i][j] = (i - 1) * M + j; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(S, Id[i][j], x); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(Id[i][j], T, x); &#125; &#125; int cur = N * M; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(S, ++cur, x); addEdge(cur, Id[i][j], INT_MAX); for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k]; int y = j + Dicy[k]; if (judge(x, y)) addEdge(cur, Id[x][y], INT_MAX); &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;x); ans += x; addEdge(++cur, T, x); addEdge(Id[i][j], cur, INT_MAX); for (int k = 0; k &lt; 4; ++k) &#123; int x = i + Dicx[k]; int y = j + Dicy[k]; if (judge(x, y)) addEdge(Id[x][y], cur, INT_MAX); &#125; &#125; &#125; printf("%d\n", ans - mxf::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二元关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 413E Maze 2D]]></title>
    <url>%2Fcodeforces-413E%2F</url>
    <content type="text"><![CDATA[给你一个 2\times N 的矩阵，你可以上下左右移动，其中'.'可以走，'X'不能走。 M 个询问，问任意两点间距离。 1\leq N,M\leq 2\times 10^5 分析 对于所有 2\times 2 的子矩阵，维护左上到右上、右下，左下到右上、右下所需要的步数。 建立线段树，发现两个中间重叠的子矩阵可以合并信息，得到最左边一列到最右边一列所需的最小步数。 每次将结果（一个子矩阵）对应那两个查询格子的相对位置，步数超出 2\times N 意味着无解。 复杂度 O(M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 2e5 + 5;const int INF = 0x3f3f3f3f;char S[2][MAXN];int N, Q;struct Segment &#123; int A[2][2];&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rSegment merge(Segment x, Segment y) &#123; Segment tmp; tmp.A[0][0] = std::min(INF, std::min(x.A[0][0] + y.A[0][0], x.A[0][1] + y.A[1][0])); tmp.A[1][0] = std::min(INF, std::min(x.A[1][1] + y.A[1][0], x.A[1][0] + y.A[0][0])); tmp.A[0][1] = std::min(INF, std::min(x.A[0][0] + y.A[0][1], x.A[0][1] + y.A[1][1])); tmp.A[1][1] = std::min(INF, std::min(x.A[1][0] + y.A[0][1], x.A[1][1] + y.A[1][1])); return tmp;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Segment &amp;x = T[rt]; memset(x.A, 0x3f, sizeof x.A); if (S[0][l] == '.' &amp;&amp; S[1][l] == 'X') &#123; x.A[0][0] = 1; &#125; else if (S[0][l] == 'X' &amp;&amp; S[1][l] == '.') &#123; x.A[1][1] = 1; &#125; else if (S[0][l] == '.' &amp;&amp; S[1][l] == '.') &#123; x.A[0][0] = x.A[1][1] = 1; x.A[0][1] = x.A[1][0] = 2; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;Segment querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; int m = (l + r) &gt;&gt; 1; if (b &lt;= m) &#123; return querySum(LT, a, b); &#125; else if (m &lt; a) &#123; return querySum(RT, a, b); &#125; else &#123; return merge(querySum(LT, a, b), querySum(RT, a, b)); &#125;&#125;int query(int x, int y) &#123; int a = x, b = y, fa = 0, fb = 0; if (x &gt; N) &#123; fa = 1; a = x - N; &#125; if (y &gt; N) &#123; fb = 1; b = y - N; &#125; if(a &gt; b) &#123; std::swap(a, b); std::swap(fa, fb); &#125; return querySum(1, 1, N, a, b).A[fa][fb] - 1;&#125;int main() &#123; int x, y; scanf("%d%d%s%s", &amp;N, &amp;Q, S[0] + 1, S[1] + 1); build(1, 1, N); while (Q--) &#123; scanf("%d%d", &amp;x, &amp;y); int res = query(x, y); printf("%d\n", res &lt;= 2 * N ? res : -1); &#125; return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 145E Lucky Queries]]></title>
    <url>%2Fcodeforces-145E%2F</url>
    <content type="text"><![CDATA[长度为 N 的 01 序列 A 有 M 次操作，每次将 A[l,r] 中的每个数异或 1 ，或查询 A 的最长不下降子序列的长度。 1 \leq N\leq 10^6, 1\leq M\leq 3\times 10^5 分析 由于序列中只有 0 和 1 ，因此最长不下降子序列只有两种情况：都是 0 或 1 ，或者前面都是 0 后面都是 1 。 用线段树维护区间中完全由 0 与 1 组成，以及最长不上升与不下降子序列的长度， 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).sizo())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0;&#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0;&#125;const int MAXN = 1e6 + 5;int N, M;char Str[MAXN];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rstruct Node &#123; int zero, one, up, down, mrk; Node () &#123; zero = one = up = down = mrk = 0; &#125; Node (int a, int b, int c, int d) : zero(a), one(b), up(c), down(d), mrk(0) &#123;&#125; Node operator + (const Node &amp;x) &#123; Node y; y.zero = zero + x.zero; y.one = one + x.one; y.up = std::max(up + x.one, zero + x.up); y.down = std::max(down + x.zero, one + x.down); y.mrk = 0; return y; &#125; void swap() &#123; mrk ^= 1; std::swap(zero, one); std::swap(up, down); &#125;&#125; T[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; T[rt] = T[rt &lt;&lt; 1] + T[rt &lt;&lt; 1 | 1];&#125;void pushDown(int rt) &#123; if (T[rt].mrk) &#123; T[rt &lt;&lt; 1].swap(); T[rt &lt;&lt; 1 | 1].swap(); T[rt].mrk = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; if (Str[l] == '4') &#123; T[rt] = (Node) &#123; 1, 0, 1, 1 &#125;; &#125; else &#123; T[rt] = (Node) &#123; 0, 1, 1, 1 &#125;; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void change(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].swap(); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; change(LT, a, b); &#125; if (m &lt; b) &#123; change(RT, a, b); &#125; pushUp(rt);&#125;Node queryMax(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &gt; m) &#123; return queryMax(RT, a, b); &#125; else if (b &lt;= m) &#123; return queryMax(LT, a, b); &#125; else &#123; return queryMax(LT, a, b) + queryMax(RT, a, b); &#125;&#125;int main() &#123; int N, M, l, r; scanf("%d%d%s", &amp;N, &amp;M, Str + 1); build(1, 1, N); while (M--) &#123; scanf("%s", Str); if (Str[0] == 'c') &#123; Node res = queryMax(1, 1, N, 1, N); printf("%d\n", res.up); &#125; else &#123; scanf("%d%d", &amp;l, &amp;r); change(1, 1, N, l, r); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[codeforces 280D k-Maximum Subsequence Sum]]></title>
    <url>%2Fcodeforces-280D%2F</url>
    <content type="text"><![CDATA[序列 A[1...N] 中进行 M 次操作，分为两种： 将 A[p] 修改为 x 查询 A[l,r] 中不相交至多 K 个不相交子段的和的最大值。 N,M\leq 10^5, K\leq 20 分析 对于第二个询问，有个很熟悉的网络流模型，最小费用最大流。 但是对于每个询问都重新建图跑网络流显然是会超时的，需要优化。 网络流的流程就是每次增广最大的费用，然后将这些边取反变成反向边，继续增广，直到费用为负或者没有流量为止。 那么考虑手动模拟它，即每次找到区间中和最大的字段，统计贡献后将其取反，继续直到最大和为负数，或者完成 k 次为止。 这种区间打标记，区间求最值的操作，让人联想到线段树。 用线段树维护区间中子段的最大/最小和（因为取反后两者就交换了），以及左右最大子段（用来合并）的值和对应子段的左右端点，以及取反标记。 查询时记录所有被取反的区间，结束时再将其恢复。 复杂度 O(M\times K\times log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define All(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;struct Line &#123; int l, r, s; Line(int l = 0, int r = 0, int s = 0): l(l), r(r), s(s) &#123;&#125; Line operator + (const Line &amp;x) &#123; return (Line) &#123;l, x.r, s + x.s&#125;; &#125; bool operator &lt; (const Line &amp;x) const &#123; return s &lt; x.s; &#125;&#125;;struct Node &#123; Line lMax, lMin, rMax, rMin, vMax, vMin, v; int rev; Node (int l = 0, int r = 0, int s = 0) &#123; lMax = lMin = rMax = rMin = vMax = vMin = v = Line(l, r, s); rev = 0; &#125; void pushUp(Node ls, Node rs) &#123; if (ls.lMax.l == 0) &#123; *this = rs; return; &#125; lMax = std::max(ls.lMax, ls.v + rs.lMax); lMin = std::min(ls.lMin, ls.v + rs.lMin); rMax = std::max(ls.rMax + rs.v, rs.rMax); rMin = std::min(ls.rMin + rs.v, rs.rMin); vMax = std::max(ls.rMax, rs.lMax); vMax = std::max(vMax, std::max(ls.vMax, rs.vMax)); vMax = std::max(vMax, ls.rMax + rs.lMax); vMax = std::max(vMax, std::max(lMax, rMax)); vMin = std::min(ls.rMin, rs.lMin); vMin = std::min(vMin, std::min(ls.vMin, rs.vMin)); vMin = std::min(vMin, ls.rMin + rs.lMin); vMin = std::min(vMin, std::min(lMin, rMin)); v = ls.v + rs.v; &#125;&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid rev(Node&amp; x) &#123; x.rev ^= 1; std::swap(x.lMin, x.lMax); std::swap(x.rMin, x.rMax); std::swap(x.vMin, x.vMax); x.lMin.s *= -1, x.lMax.s *= -1; x.rMin.s *= -1, x.rMax.s *= -1; x.vMin.s *= -1, x.vMax.s *= -1; x.v.s *= -1;&#125;void pushDown(int rt) &#123; if(T[rt].rev) &#123; rev(T[rt &lt;&lt; 1]); rev(T[rt &lt;&lt; 1 | 1]); T[rt].rev = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; T[rt] = Node(l, r, io::gt&lt;int&gt;()); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void modify(int rt, int l, int r, int p, int x) &#123; if(l == r) &#123; T[rt] = Node(l, r, x); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; modify(LT, p, x); &#125; else &#123; modify(RT, p, x); &#125; T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void reverse(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; rev(T[rt]); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; reverse(LT, a, b); &#125; if(m &lt; b) &#123; reverse(RT, a, b); &#125; T[rt].pushUp(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;Node queryMax(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; Node res; if(a &lt;= m) &#123; res.pushUp(res, queryMax(LT, a, b)); &#125; if(m &lt; b) &#123; res.pushUp(res, queryMax(RT, a, b)); &#125; return res;&#125;int main() &#123; int N = io::gt&lt;int&gt;(); build(1, 1, N); int M = io::gt&lt;int&gt;(); std::vector&lt;Line&gt; V; while(M--) &#123; int opt = io::gt&lt;int&gt;(); if(opt == 0) &#123; int p = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); modify(1, 1, N, p, x); &#125; else &#123; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); int sum = 0; V.clear(); rep(i, 0, k) &#123; Line x = queryMax(1, 1, N, l, r).vMax; if(x.s &lt; 0) &#123; break; &#125; sum += x.s; V.push_back(x); reverse(1, 1, N, x.l, x.r); &#125; io::pt(sum); rep(i, 0, SZ(V)) &#123; reverse(1, 1, N, V[i].l, V[i].r); &#125; &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>codeforces</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2008」BZOJ 1036 树的统计]]></title>
    <url>%2FBZOJ-1036%2F</url>
    <content type="text"><![CDATA[一棵有 N 个节点的树，每个节点有初始权值 W_i 。共有 M 次操作，分别为： 查询节点 (u,v) 间所有节点的权值和 查询节点 (u,v) 间所有节点的最大权值 修改 W_u 为 x 1\leq N\leq30000,0\leq M\leq 200000 ，中途操作中保证每个节点的权值 w 在 -30000 到 30000 之间。 分析 又是一道树链剖分模板题... 树剖后，线段树维护区间最大值和区间和。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;#define ONLINE_JUDGEnamespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if(cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace iostruct Graph &#123;static const int MAXN = 30000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, R;int H[MAXN], cntE;int Depth[MAXN], Fa[MAXN], Son[MAXN], Sz[MAXN];int Dfn[MAXN], Top[MAXN], cntD;int W[MAXN], Wp[MAXN];void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Max[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; Max[rt] = std::max(Max[rt &lt;&lt; 1], Max[rt &lt;&lt; 1 | 1]);&#125;void build(int rt, int l, int r) &#123; if(l == r) &#123; Max[rt] = Sum[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void modify(int rt, int l, int r, int p, int x) &#123; if(l == r) &#123; Sum[rt] = Max[rt] = x; return ; &#125; int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; modify(LT, p, x); &#125; else &#123; modify(RT, p, x); &#125; pushUp(rt);&#125;int querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; int m = (l + r) &gt;&gt; 1; int res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res;&#125;int queryMax(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Max[rt]; &#125; int m = (l + r) &gt;&gt; 1; int res = -INT_MAX; if(a &lt;= m) &#123; res = std::max(res, queryMax(LT, a, b)); &#125; if(m &lt; b) &#123; res = std::max(res, queryMax(RT, a, b)); &#125; return res;&#125;void change(int u, int x) &#123; modify(1, 1, N, Dfn[u], x);&#125;int queryPathS(int u, int v) &#123; int res = 0; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[tv], Dfn[v]); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[u], Dfn[v]); return res;&#125;int queryPathM(int u, int v) &#123; int res = -INT_MAX; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res = std::max(res, queryMax(1, 1, N, Dfn[tv], Dfn[v])); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res = std::max(res, queryMax(1, 1, N, Dfn[u], Dfn[v])); return res;&#125;void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N);&#125;&#125; G;int main() &#123;G.N = io::gt&lt;int&gt;();G.R = 1;rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;());&#125;rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;();&#125;G.prepare();int M = io::gt&lt;int&gt;();rep(i, 0, M) &#123; char ch = io::gc(); while(!isalpha(ch)) &#123; ch = io::gc(); &#125; if(ch == 'Q') &#123; ch = io::gc(); int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if(ch == 'S') &#123; io::pt(G.queryPathS(u, v)); &#125; else &#123; io::pt(G.queryPathM(u, v)); &#125; &#125; else &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.change(u, x); &#125;&#125;io::flush();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SHOI 2009」BZOJ 2028 会场预约]]></title>
    <url>%2FBZOJ-2028%2F</url>
    <content type="text"><![CDATA[初始集合为空，有两种操作： 插入一个区间，并删去集合中与它相交的区间，输出删除的区间个数 查询集合中区间个数 N\leq 200000,1\leq Start End\leq 100000 分析 首先根据题意，可以得到集合中任意时刻不存在相交的区间。 假设集合中区间是有序的，那么插入一个区间 [L,R ] 后所需要删除的区间一定是连续的。 两个区间 [l,r] 和 [L,R] ( l\leq L )如果相交，会有两种情况： l \leq L\leq R\leq r L\leq l\leq r\leq R 总结一下，如果满足 l\leq R 且 L\leq r ，那么这两个区间就是相交的。 那么找到第一个满足 L\leq r 的区间 [l,r] 后，如果再满足 l\leq R ，就删除 [l,r] ，重复该步骤直到集合为空或者 R &lt; l 。 集合有序，二分寻找 [l,r] ，删除节点，统计集合大小，STL库提供std::set 可以轻松实现上述功能。 值得注意的是，std::lower_bound(s.begin(),s.end(),x) 和 s.lower_bound(x) 的效率是不同的。由于std::set 的元素存储是随机的，因此直接二分寻找必须考虑寻找元素的复杂度，而它的提供的内置函数可以避免这个问题。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Node &#123; int l, r; bool operator &lt; (const Node &amp;a) const &#123; return r &lt; a.r; &#125;&#125;;std::set&lt;Node&gt; Set;int main() &#123; int N = io::gt&lt;int&gt;(); while (N--) &#123; char opt = io::gc(); while (!isalpha(opt)) &#123; opt = io::gc(); &#125; if (opt == 'A') &#123; int ans = 0; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); std::set&lt;Node&gt;::iterator p = Set.lower_bound((Node) &#123;0, l&#125;); while (p != Set.end() &amp;&amp; r &gt;= p-&gt;l) &#123; Set.erase(p++); ++ans; &#125; Set.insert((Node) &#123;l, r&#125;); io::pt(ans); &#125; else &#123; io::pt(SZ(Set)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2011」BZOJ 2243 染色]]></title>
    <url>%2FBZOJ-2243%2F</url>
    <content type="text"><![CDATA[给定一棵有 N 个节点的树，每个节点有一个颜色。 现有 M 个操作，分为两类： 将节点对 (u,v) 之间路径上的所有节点的颜色染成 x 查询节点对 (u,v) 之间颜色段的个数（相邻且相同颜色的节点对属于同一个颜色段） N,M\leq 10^5,x\leq 10^9 分析 思路很简单，树剖之后用线段树维护区间颜色段的个数。 线段树总共需要维护区间的颜色段个数，最左边颜色和最右边颜色，当然还有lazy标签。 如果区间 [l,m] 的最右边的颜色和区间 [m+1,r+1] 最左边的颜色相同，则 [l,r] 区间中颜色段个数为两者的和减一。 查询的时候有一个细节。 (u,v) 之间颜色段的个数即若干条链上颜色段的个数之和，但是要注意链顶和它的父亲颜色是否相同。 这两个节点也是相邻的，但是在链的查询中不会被涉及到。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 4;struct Graph &#123; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int Depth[MAXN], Son[MAXN], Fa[MAXN], Sz[MAXN]; int Dfn[MAXN], cntD, Top[MAXN]; int W[MAXN], Wp[MAXN]; int H[MAXN], cntE; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125; &#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r int Num[MAXN &lt;&lt; 2], Mark[MAXN &lt;&lt; 2], Left[MAXN &lt;&lt; 2], Right[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Num[rt] = Num[rt &lt;&lt; 1] + Num[rt &lt;&lt; 1 | 1] - (Right[rt &lt;&lt; 1] == Left[rt &lt;&lt; 1 | 1]); Left[rt] = Left[rt &lt;&lt; 1]; Right[rt] = Right[rt &lt;&lt; 1 | 1]; &#125; void pushDown(int rt, int L) &#123; int &amp;mrk = Mark[rt]; if(!mrk) &#123; return ; &#125; Mark[rt &lt;&lt; 1] = Mark[rt &lt;&lt; 1 | 1] = mrk; Num[rt &lt;&lt; 1] = Num[rt &lt;&lt; 1 | 1] = 1; Left[rt &lt;&lt; 1] = Left[rt &lt;&lt; 1 | 1] = mrk; Right[rt &lt;&lt; 1] = Right[rt &lt;&lt; 1 | 1] = mrk; mrk = 0; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Num[rt] = 1; Left[rt] = Right[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void change(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Num[rt] = 1; Left[rt] = Right[rt] = x; Mark[rt] = x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b, x); &#125; if(m &lt; b) &#123; change(RT, a, b, x); &#125; pushUp(rt); &#125; int queryNum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Num[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; int res = 0, times = 0; if(a &lt;= m) &#123; res += queryNum(LT, a, b); ++times; &#125; if(m &lt; b) &#123; res += queryNum(RT, a, b); ++times; &#125; if(times == 2 &amp;&amp; Right[rt &lt;&lt; 1] == Left[rt &lt;&lt; 1 | 1]) &#123; --res; &#125; return res; &#125; int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Left[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125; &#125; void changePath(int u, int v, int x) &#123; int tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; change(1, 1, N, Dfn[tv], Dfn[v], x); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; change(1, 1, N, Dfn[u], Dfn[v], x); &#125; int queryPath(int u, int v) &#123; int res = 0, tu = Top[u], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += queryNum(1, 1, N, Dfn[tv], Dfn[v]); if(query(1, 1, N, Dfn[tv]) == query(1, 1, N, Dfn[Fa[tv]])) &#123; --res; &#125; v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += queryNum(1, 1, N, Dfn[u], Dfn[v]); return res; &#125; void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); G.R = 1; int M = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;(); &#125; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); while(M--) &#123; char c = io::gc(); while(!isalpha(c)) &#123; c = io::gc(); &#125; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if(c == 'C') &#123; G.changePath(u, v, io::gt&lt;int&gt;()); &#125; else &#123; io::pt(G.queryPath(u, v)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2009」BZOJ 1878 HH的项链]]></title>
    <url>%2FBZOJ-1878%2F</url>
    <content type="text"><![CDATA[在序列 A[1 \cdots N] 中，有 M 个询问，查询 [L_i,R_i] 中不同的数的个数。 N\leq 500000,M\leq 200000 。 分析 原题的数据 N\leq 50000 ，莫队可以直接 O(N\sqrt{N+M}) 水过。但是数据加强后 N 增大到了原来10倍，带根号的复杂度不再满足要求，考虑一个log的方法。 这道题本质就是查询区间 [l,r] 中不同的数的数目，重点在于处理相同的数。可以显然发现这是不符合区间减法的，因此单纯统计区间中数的出现次数是不行的。 如果同一时间只维护记录所有相同的数中的一个数，那么能保证不会重复统计；如果再保证查询的时候如果这个数存在于区间中，就一定能被查询到，那么就不会保证算少。 如果满足这两条，那么就使得原本查询区间中不同数的个数变成了查询区间中数的个数。 假如查询的区间都是 [1,R_i] ，那么只需要统计同一个数中位置最靠左的那个数是否在 [1, R_i] 中；如果是 [L_i,R_i] ，同理统计的数就变成了出现位置尽可能接近 L_i 且大于它的那个数是否在 [L_i,R_i] 中。 那么维护方法就很显然了，记录每个数 A[i] 的下一个相同的数的位置 Nxt[i] ，即满足 A[i] = A[Nxt[i]] 。 随着区间的右移，删去 A[i] 并插入 A[Nxt[i]] ，再统计 [L_i,R_i] 中数的个数。 这样的话查询的区间一定是要求有序的，因此需要离线操作，将所有区间按照左端点排序。 复杂度 O(M\log{M}+M\log{N}) 。 P.S 参考代码中是按照右端点排序的，操作同理，记录最靠右的数以及它靠前的相同的数的位置即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 500000 + 5;const int MAXM = 1000000 + 5;int N, M, A[MAXN];int Lst[MAXM], Pre[MAXN];int C[MAXN];int lowbit(int x) &#123; return x &amp; -x;&#125;void add(int p, int x) &#123; for(; p &lt; MAXM; p += lowbit(p)) &#123; C[p] += x; &#125;&#125;int query(int p) &#123; int res = 0; for(; p &gt; 0; p -= lowbit(p)) &#123; res += C[p]; &#125; return res;&#125;struct Query &#123; int l, r, id; bool operator &lt; (const Query &amp;x) const &#123; return r &gt; x.r; &#125;&#125; Q[MAXN];int Ans[MAXN];int main() &#123; N = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); if(Lst[A[i]] != 0) &#123; add(Lst[A[i]], -1); Pre[i] = Lst[A[i]]; &#125; Lst[A[i]] = i; add(i, 1); &#125; int M = io::gt&lt;int&gt;(); rep(i, 0, M) &#123; Q[i].l = io::gt&lt;int&gt;(); Q[i].r = io::gt&lt;int&gt;(); Q[i].id = i; &#125; std::sort(Q, Q + M); int pre = N; rep(i, 0, M) &#123; while(pre &gt; Q[i].r) &#123; add(pre, -1); if(Pre[pre]) &#123; add(Pre[pre], 1); &#125; pre--; &#125; Ans[Q[i].id] = query(Q[i].r) - query(Q[i].l - 1); pre = Q[i].r; &#125; rep(i, 0, M) &#123; io::pt(Ans[i]); &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树状数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2012」BZOJ 2753 滑雪与时间胶囊]]></title>
    <url>%2FBZOJ-2753%2F</url>
    <content type="text"><![CDATA[有 N 个点，每个点存在权值 H_i 。有 M 条边 (u, v, w) ，如果 H_u &lt; H_v ，那么这条边就是 u\rightarrow v ，反之是 v \rightarrow u 的。如果 H_u = H_v ，那么这是一条无向边。 求以 1 为根节点的生成树的最大节点个数，以及在节点数最大的情况下的最小权值和。 1\leq N\leq 10^5,1\leq M\leq 10^ 6,1\leq H_i\leq 10^9 分析 最小树形图 如果不看数据范围，这是一个裸的最小树形图（无向边拆成两条有向边）。 先用bfs跑一遍可以得到节点 1 可以到达的所有点，即第一问。复杂度 O(N) 。 然后重新构图，使用朱刘算法在新图上求最小树形图的权值和。复杂度 O(N\times M) 。 这个上界很松，而且发现时间瓶颈很大程度在读入 3e6 的数据上。 随机数据应该是远远跑不满的，而且也没有听说专门卡它的构造数据方法。 最后提交发现该代码在BZOJ和luogu的评测机上均能通过。 BZOJ上此题时限50s，实测39.3s，并不算卡过去的。 最小生成树 实际上刚看到这个数据范围，给我的第一感觉是：“就算上界很松也肯定跑不过啊……”。 但是求有向图的最小树形图，朱刘算法已经是很高效的了。 虽然存在 R.E.Tarjan 在1986年提出的 O(E+V\log{V}) 的改进算法，但是国内基本没有相关资料。 看来出题人考不存在的（没见过=不存在）改进算法的几率不大。 相比于最小树形图，求无向图的最小生成树就有很好写，而且复杂度更低的算法。 例如 Prim's algorithm （复杂度 O(V\times \log{V} ）和 Kruskal's algorithm （复杂度 O(E\times \log{E}) ）。 再思考为什么有向图求最小树形图的时候不能用它们，是因为最后可能会出现边指向根节点的情况，这样就不是一棵生成树了。 对于这道题而言，发现反向边只会在 H_u=H_v 的时候出现。 假如可以处理掉它，那么模型就从最小树形图转化成最小生成树，复杂度也就足够优秀了。 根据这道题节点间的特殊性质，对于一棵生成树的任意节点所有可能的父亲节点，权值一定都大于等于它。 那么对于有向边 (u, v, w) ，优先处理 H_v 大的边， H_v 相同时优先选择 w 小的边，就能保证不会出现反向边。 如果生成树 T1 中某节点 y 通过边 (x,y,w) 合并到另一个生成树 T2 的节点 x 上，那么就会出现反向边（即边 (y,x,w) ）。 但是这是不会发生的，因为如果出现两棵生成树，那么图就不存在生成树了（ 已经经过了所有以 T2 根节点为终点的边，既然没有与 T1 合并，就说明无法合并了。而这是与第一问得到的都联通情况相违背） 因此通过 Kruskal's algorithm 求最小生成树是正确的，求得权值和即为第二问答案。 参考代码 最小树形图 - Chu-Liu/Edmonds' algorithm 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1e5 + 5;const int MAXM = 1e6 + 5;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace iostruct Graph &#123; struct Edge &#123; int u, v, w; &#125;; int N; std::vector&lt;Edge&gt; E; void init(int n) &#123; N = n; E.clear(); &#125; void addEdge(int u, int v, int w) &#123; E.push_back((Edge) &#123;u, v, w&#125;); &#125; ll MST_Directed(int rt) &#123; static int Pre[MAXN], Cir[MAXN], Id[MAXN]; static ll Inw[MAXN]; ll ans = 0; while(true) &#123; memset(Inw, 127 / 3, sizeof(ll) * N); memset(Pre, -1, sizeof(int) * N); memset(Cir, -1, sizeof(int) * N); memset(Id, -1, sizeof(int) * N); ll INF = Inw[0]; rep(i, 0, SZ(E)) &#123; if(Inw[E[i].v] &gt; E[i].w &amp;&amp; E[i].v != E[i].u) &#123; Inw[E[i].v] = E[i].w; Pre[E[i].v] = E[i].u; &#125; &#125; Pre[rt] = rt, Inw[rt] = 0; rep(i, 0, N) &#123; if(Inw[i] == INF) &#123; return -1; &#125; ans += Inw[i]; &#125; int circle = 0; rep(i, 0, N) &#123; if(Cir[i] != -1) &#123; continue; &#125; int t = i; while(Cir[t] == -1) &#123; Cir[t] = i; t = Pre[t]; &#125; if(t != rt &amp;&amp; Cir[t] == i) &#123; Id[t] = circle++; for(int j = Pre[t]; j != t; j = Pre[j]) &#123; Id[j] = circle - 1; &#125; &#125; &#125; if(!circle) &#123; return ans; &#125; rep(i, 0, N) &#123; if(Id[i] == -1) &#123; Id[i] = circle++; &#125; &#125; rep(i, 0, SZ(E)) &#123; E[i].w -= Inw[E[i].v]; E[i].u = Id[E[i].u]; E[i].v = Id[E[i].v]; &#125; N = circle; rt = Id[rt]; &#125; &#125;&#125;G;int H[MAXN], Id[MAXN];struct Graph2 &#123; struct Edge &#123; int v, nxt; &#125;E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; void init(int n) &#123; memset(H, -1, sizeof(int) * n); cntE = -1; &#125; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; &#125; int bfs(int x) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; static std::bitset&lt;MAXN&gt; Vis; int n = 1; Id[x] = n++; Vis[x] = 1; Que.push(x); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); for(int i = H[x]; ~i; i = E[i].nxt) &#123; if(!Vis[E[i].v]) &#123; Que.push(E[i].v); Vis[E[i].v] = 1; Id[E[i].v] = n++; &#125; &#125; &#125; return n; &#125;&#125;G2;int U[MAXM], V[MAXM], W[MAXM];int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; H[i] = io::gt&lt;int&gt;(); &#125; G2.init(N + 1); rep(i, 0, M) &#123; U[i] = io::gt&lt;int&gt;(); V[i] = io::gt&lt;int&gt;(); W[i] = io::gt&lt;int&gt;(); if(H[U[i]] &gt;= H[V[i]]) &#123; G2.addEdge(U[i], V[i]); &#125; if(H[U[i]] &lt;= H[V[i]]) &#123; G2.addEdge(V[i], U[i]); &#125; &#125; int n = G2.bfs(1); rep(i, 0, M) &#123; if(Id[U[i]] &amp;&amp; Id[V[i]]) &#123; if(H[U[i]] &gt;= H[V[i]]) &#123; G.addEdge(Id[U[i]], Id[V[i]], W[i]); &#125; if(H[V[i]] &gt;= H[U[i]]) &#123; G.addEdge(Id[V[i]], Id[U[i]], W[i]); &#125; &#125; &#125; G.addEdge(0, Id[1], 0); G.N = n; ll ans = G.MST_Directed(0); printf("%d %lld\n", n - 1, ans); return 0;&#125; 最小生成树 - Kruskal's algorithm 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;const int MAXM = 1e6 + 5;int H[MAXN];struct Graph &#123; struct Edge &#123; int u, v, w, nxt, can; bool operator &lt; (const Edge &amp;x) const &#123; return ::H[v] != ::H[x.v] ? ::H[v] &gt; ::H[x.v] : w &lt; x.w; &#125; &#125;E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; int Fa[MAXN], Rank[MAXN]; void init(int n) &#123; memset(H, -1, sizeof(int) * n); cntE = -1; rep(i, 0, n) &#123; Fa[i] = i; Rank[i] = 1; &#125; &#125; void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u], 0&#125;; H[u] = cntE; &#125; int bfs(int x) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; static std::bitset&lt;MAXN&gt; Vis; int n = 1; Vis[x] = 1; Que.push(x); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); for(int i = H[x]; ~i; i = E[i].nxt) &#123; E[i].can = 1; if(!Vis[E[i].v]) &#123; Que.push(E[i].v); Vis[E[i].v] = 1; n++; &#125; &#125; &#125; return n; &#125; int findFa(int x) &#123; return x == Fa[x] ? x : Fa[x] = findFa(Fa[x]); &#125; bool merge(int u, int v) &#123; u = findFa(u), v = findFa(v); if(u == v) &#123; return false; &#125; if(Rank[u] &lt; Rank[v]) &#123; Fa[u] = v; &#125; else &#123; Fa[v] = u; if(Rank[u] == Rank[v]) &#123; Rank[u]++; &#125; &#125; return true; &#125; ll kruskal(int n) &#123; ll ans = 0; int k = 1; static std::vector&lt;Edge&gt; V; rep(i, 0, cntE + 1) &#123; if(E[i].can) &#123; V.push_back(E[i]); &#125; &#125; std::sort(ALL(V)); rep(i, 0, SZ(V)) &#123; if(k == n) &#123; return ans; &#125; if(merge(V[i].u, V[i].v)) &#123; ans += V[i].w; ++k; &#125; &#125; &#125;&#125;G;int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; H[i] = io::gt&lt;int&gt;(); &#125; G.init(N + 1); rep(i, 0, M) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(), w = io::gt&lt;int&gt;(); if(H[u] &gt;= H[v]) &#123; G.addEdge(u, v, w); &#125; if(H[u] &lt;= H[v]) &#123; G.addEdge(v, u, w); &#125; &#125; int n = G.bfs(1); ll sum = G.kruskal(n); printf("%d %lld\n", n, sum); return 0;&#125; 参考资料 【最小树形图】——bzoj2753——朱刘算法达不到复杂度要求时的，改模板kruskal算法]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2010」BZOJ 1858 序列操作]]></title>
    <url>%2FBZOJ-1858%2F</url>
    <content type="text"><![CDATA[在一个01序列中，有五种变换操作和询问操作： 0 a b 把 [a, b] 区间内的所有数全变成 0 1 a b 把 [a, b] 区间内的所有数全变成 1 2 a b 把 [a,b] 区间内的所有数全部取反，也就是说把所有的 0 变成 1 ，把所有的 1 变成 0 3 a b 询问 [a, b] 区间内总共有多少个 1 4 a b 询问 [a, b] 区间内最多有多少个连续的 1 1\leq n, m\leq 100000 分析 这种区间操作、区间查询，且满足区间加法的题，再看一下 1e5 的数据范围，很显然是用线段树来维护。 维护区间中 1 的数目（即区间和），左右连续 0,1 的长度，最长的连续的 0,1 的长度，当然还有取反和重置 0/1 的标记。 那么合并的时候，连续的 0,1 有两种合并方式：继承左右，或者左右合并（即左区间的右+右区间的左，这两段拼起来是连续的）。 区间取反，即交换所有关于 0,1 的信息；区间重置，根据区间长度直接更新信息。 复杂度 O(m\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rstruct Segment &#123; int l, r; int sum, rev, trn; int ln[2], rn[2], mx[2];&#125; T[MAXN &lt;&lt; 2];int max3(int a, int b, int c) &#123; return std::max(a, std::max(b, c));&#125;Segment merge(Segment x, Segment y) &#123; Segment a; a.trn = -1, a.rev = 0; a.l = x.l, a.r = y.r; a.sum = x.sum + y.sum; rep(i, 0, 2) &#123; a.ln[i] = x.ln[i], a.rn[i] = y.rn[i]; a.mx[i] = max3(x.mx[i], y.mx[i], x.rn[i] + y.ln[i]); if (!x.mx[i ^ 1]) &#123; a.ln[i] = x.mx[i] + y.ln[i]; &#125; if (!y.mx[i ^ 1]) &#123; a.rn[i] = y.mx[i] + x.rn[i]; &#125; &#125; return a;&#125;void turn(Segment &amp;x, int d) &#123; x.rev = 0; x.ln[d] = x.rn[d] = x.mx[d] = x.r - x.l + 1; x.ln[d ^ 1] = x.rn[d ^ 1] = x.mx[d ^ 1] = 0; if (d == 1) &#123; x.sum = x.r - x.l + 1; &#125; else &#123; x.sum = 0; &#125;&#125;void rever(Segment &amp;x) &#123; x.sum = x.r - x.l + 1 - x.sum; std::swap(x.mx[0], x.mx[1]); std::swap(x.ln[0], x.ln[1]); std::swap(x.rn[0], x.rn[1]);&#125;void pushDown(int rt) &#123; Segment &amp;x = T[rt], &amp;ls = T[rt &lt;&lt; 1], &amp;rs = T[rt &lt;&lt; 1 | 1]; if (x.trn != -1) &#123; ls.trn = rs.trn = x.trn; turn(ls, x.trn); turn(rs, x.trn); x.trn = -1; &#125; if (x.rev) &#123; ls.rev ^= 1; rs.rev ^= 1; rever(ls); rever(rs); x.rev = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Segment &amp;x = T[rt]; x.rev = 0, x.trn = -1; x.l = x.r = l; x.sum = io::gt&lt;int&gt;(); x.ln[x.sum] = x.rn[x.sum] = x.mx[x.sum] = 1; x.ln[x.sum ^ 1] = x.rn[x.sum ^ 1] = x.mx[x.sum ^ 1] = 0; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void change(int rt, int a, int b, int x) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].trn = x; turn(T[rt], x); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; change(rt &lt;&lt; 1, a, b, x); &#125; if (m &lt; b) &#123; change(rt &lt;&lt; 1 | 1, a, b, x); &#125; T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;void reverse(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].rev ^= 1; rever(T[rt]); return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; reverse(rt &lt;&lt; 1, a, b); &#125; if (m &lt; b) &#123; reverse(rt &lt;&lt; 1 | 1, a, b); &#125; T[rt] = merge(T[rt &lt;&lt; 1], T[rt &lt;&lt; 1 | 1]);&#125;int querySum(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].sum; &#125; pushDown(rt); int res = 0; int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; res += querySum(rt &lt;&lt; 1, a, b); &#125; if (m &lt; b) &#123; res += querySum(rt &lt;&lt; 1 | 1, a, b); &#125; return res;&#125;Segment queryMax(int rt, int a, int b) &#123; int l = T[rt].l, r = T[rt].r; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (b &lt;= m) &#123; return queryMax(rt &lt;&lt; 1, a, b); &#125; else if (m &lt; a) &#123; return queryMax(rt &lt;&lt; 1 | 1, a, b); &#125; else &#123; return merge(queryMax(rt &lt;&lt; 1, a, b), queryMax(rt &lt;&lt; 1 | 1, a, b)); &#125;&#125;int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); build(1, 1, N); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); ++l, ++r; if (opt == 0 || opt == 1) &#123; change(1, l, r, opt); &#125; else if (opt == 2) &#123; reverse(1, l, r); &#125; else if (opt == 3) &#123; io::pt(querySum(1, l, r)); &#125; else if (opt == 4) &#123; io::pt(queryMax(1, l, r).mx[1]); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2007」BZOJ 1067 降雨量]]></title>
    <url>%2FBZOJ-1067%2F</url>
    <content type="text"><![CDATA[已知 N 个年份 Y_i 的降雨量 R_i 。 现有 M 个询问。给定年份 X,Y ，判断“X年是自Y年以来降雨量最多的”的正确性。 该语句正确的当且仅当 R_X\leq R_Y 且对于所有 Y&lt;Z&lt;X ，满足 R_Z&lt;R_X 。 如果判断语句正确，输出true；如果可能正确，输出maybe；如果一定错误输出false。 1\leq N\leq 50000, 1\leq M\leq 10000,&nbsp;-10^9\leq Y_i\leq&nbsp;10^9&nbsp;, 1\leq R_i\leq&nbsp;10^9 分析 比较细节的题，听取WA声一片后改起来很烦... 思路其实很简单，就是找到 X,Y 年对应的降水量和 (X,Y) 年间降水量的最大值进行一番比较。 下面分析各种情况对应的结果是什么。 如果 [X,Y] 中所有年份的降水量信息已知。那么当 R_Y\leq R_X 且 MAX(X+1,Y-1) &lt; R_Y 时，该语句是true，反之则是false。（其中 MAX(L,R) 为 [L,R] 年间已知降水量的最大值） 如果 X,Y 降水量已知。那么当 R_Y\leq R_X 且 MAX(X+1,Y-1) &lt; R_Y 时，该语句是maybe，反之则是false。 如果 X,Y 已知其一 Z 年的降水量。那么当 MAX(X+1,Y-1) &lt; R_Z 时，该语句是maybe，反之则是false。 如果 X,Y 的降水量皆未知，则该语句是maybe。 由于没有修改操作，因此用Sparse Table来查询区间最大值。 至于如何判断 X,Y 是否降水量已知，可以直接在 Y[1...N] 中二分寻找，复杂度 O(\log{N}) ； 判断是否 [X,Y] 中所有年份降水量已知，直接检查 Y-X=P_Y-P_X 。（其中 P_i 为 i 在 Y[1...N] 中的下标） 需要特别注意的一点，便是当 P_Y=P_X+1 时， TeX parse error: Undefined control sequence \empty 。查询该区间时应该直接返回一个极小值或者单独判断。不然只有稳稳50分.... 复杂度 O((N+M)\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 50000 + 5;int A[MAXN], B[MAXN];int F[MAXN][20], Log[MAXN], Pow[20];void buildST(int n) &#123;rep(i, 1, n + 1) &#123; F[i][0] = B[i];&#125;rep(i, 2, n + 1) &#123; Log[i] = Log[i &gt;&gt; 1] + 1;&#125;int k = log2(n);Pow[0] = 1;rep(i, 1, k + 1) &#123; Pow[i] = Pow[i - 1] &lt;&lt; 1;&#125;rep(j, 1, k + 1) &#123; rof(i, n + 1, 1) &#123; if (i + Pow[j - 1] &lt;= n) &#123; F[i][j] = std::max(F[i][j - 1], F[i + Pow[j - 1]][j - 1]); &#125; &#125;&#125;return ;&#125;int queryMax(int l, int r) &#123;if(l &gt; r) &#123; return -1;&#125;int k = Log[r - l + 1];return std::max(F[l][k], F[r - Pow[k] + 1][k]);&#125;int main() &#123;int N = io::gt&lt;int&gt;();rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); B[i] = io::gt&lt;int&gt;();&#125;buildST(N);int M = io::gt&lt;int&gt;();while (M--) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); int p1 = std::lower_bound(A + 1, A + N + 1, x) - A; int p2 = std::lower_bound(A + 1, A + N + 1, y) - A; if (A[p1] == x &amp;&amp; A[p2] == y &amp;&amp; p2 - p1 == y - x) &#123; int mx = queryMax(p1 + 1, p2 - 1); if (B[p2] &lt;= B[p1] &amp;&amp; B[p2] &gt; mx) &#123; puts("true"); &#125; else &#123; puts("false"); &#125; &#125; else &#123; if (A[p1] != x &amp;&amp; A[p2] != y) &#123; puts("maybe"); &#125; else if (A[p1] == x &amp;&amp; A[p2] != y) &#123; int mx = queryMax(p1 + 1, p2 - 1); if (mx &lt; B[p1]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; else if (A[p1] != x &amp;&amp; A[p2] == y) &#123; int mx = queryMax(p1, p2 - 1); if (mx &lt; B[p2]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; else &#123; int mx = queryMax(p1 + 1, p2 - 1); if (mx &lt; B[p2] &amp;&amp; B[p2] &lt;= B[p1]) &#123; puts("maybe"); &#125; else &#123; puts("false"); &#125; &#125; &#125;&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
        <tag>二分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2008」BZOJ 1012 最大数]]></title>
    <url>%2FBZOJ-1012%2F</url>
    <content type="text"><![CDATA[维护一个数列，具有 M 个以下两种操作： 查询并输出当前数列中末尾L个数中的最大的数 将 n 加上最近一次查询操作的答案，对 D 取模后，插入到数列的末尾 M \leq 200000 分析 对 [1...M] 建线段树，记录当前序列末尾的下标。 那么问题就变成了线段树区间查询最大值，单点修改（开始默认每个元素都是 0 ）。 值得注意的一点是，对 D​ 取模并不意味着一定要变成正数。例如 D=5​ ，上次结果为 1​ ， n=-10​ ，那么实际插入的数就是 -4​ ，而不是 1​ ，这一点题目并没有明确。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 200000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint N = 1, M, P;int Max[MAXN &lt;&lt; 2];void pushUp(int rt) &#123;Max[rt] = std::max(Max[rt &lt;&lt; 1], Max[rt &lt;&lt; 1 | 1]);&#125;void modify(int rt, int l, int r, int p, int x) &#123;if (l == r) &#123; Max[rt] = x; return ;&#125;int m = (l + r) &gt;&gt; 1;if (p &lt;= m) &#123; modify(LT, p, x);&#125; else &#123; modify(RT, p, x);&#125;pushUp(rt);&#125;int queryMax(int rt, int l, int r, int a, int b) &#123;if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return Max[rt];&#125;int m = (l + r) &gt;&gt; 1;int res = 0;if (a &lt;= m) &#123; res = std::max(res, queryMax(LT, a, b));&#125;if (m &lt; b) &#123; res = std::max(res, queryMax(RT, a, b));&#125;return res;&#125;int main() &#123;int res = 0;M = io::gt&lt;int&gt;(), P = io::gt&lt;int&gt;();while (M--) &#123; char opt = io::gc(); while (!isalpha(opt)) &#123; opt = io::gc(); &#125; int x = io::gt&lt;int&gt;(); if (opt == 'Q') &#123; io::pt(res = queryMax(1, 1, MAXN, N - x, N - 1)); &#125; else &#123; modify(1, 1, MAXN, N++, (x + res) % P); &#125;&#125;io::flush();return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JLOI 2014」BZOJ 3631 松鼠的新家]]></title>
    <url>%2FBZOJ-3631%2F</url>
    <content type="text"><![CDATA[一棵树有 N 个节点，需要按照 A[1...N] 的顺序依次访问，每次走最短路径。 求每个节点各经过多少次。 2\leq N\leq 300000 分析 树上差分 从 u 到 v 的路径即 u\rightarrow lca(u,v)\rightarrow v 。 由于只需要输出一次，考虑树上差分。 O(1) 修改， O(N) 查询的复杂度在这里正合适。 用Tarjan或者其他lca算法得到 lca(A[i],A[i+1]) ，然后对两段路径进行差分。 最后将除了根节点的每个节点经过次数-1，因为它们在差分的过程中既被当成前一条路径终点，又被当作后一条路径的起点，重复计算两次。 复杂度 O(N) 。 树状数组 树链剖分+区间修改/单点查询树状数组。 复杂度 O(N\log^2{N}) 。 参考代码 树上差分 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; void pt(T x, char c = '\n') &#123; static int S[20], *vp; vp = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++vp = x % 10, x /= 10; &#125; while (x); while (vp != S) &#123; *cur++ = *vp-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; fflush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 300000 + 5;int Faa[MAXN], Lca[MAXN];int H[MAXN], cnt;int N, R;int Fa[MAXN], Add[MAXN];struct Edge &#123; int v, nxt;&#125; Q[MAXN &lt;&lt; 1], E[MAXN &lt;&lt; 1];int H2[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; return ;&#125;void addQuery(int u, int v) &#123; Q[cnt] = (Edge) &#123;v, H2[u]&#125;; H2[u] = cnt++; Q[cnt] = (Edge) &#123;u, H2[v]&#125;; H2[v] = cnt++; return ;&#125;int findFa(int x) &#123; return Faa[x] == x ? x : Faa[x] = findFa(Faa[x]);&#125;void dfs(int x) &#123; Faa[x] = x; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; dfs(v); Faa[v] = x; &#125; &#125; for (int i = H2[x]; ~i; i = Q[i].nxt) &#123; int &amp;v = Q[i].v; if (Fa[v]) &#123; Lca[i &gt;&gt; 1] = findFa(v); &#125; &#125;&#125;void dfs2(int x) &#123; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; dfs2(v); Add[x] += Add[v]; &#125; &#125;&#125;int A[MAXN];int main() &#123; N = io::gt&lt;int&gt;(); memset(H2, -1, sizeof H2); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); &#125; R = A[1]; rep(i, 2, N + 1) &#123; addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); addQuery(A[i - 1], A[i]); &#125; dfs(R); rep(i, 2, N + 1) &#123; ++Add[A[i - 1]]; ++Add[A[i]]; --Add[Lca[i - 2]]; --Add[Fa[Lca[i - 2]]]; &#125; dfs2(R); ++Add[R]; rep(i, 1, N + 1) &#123; io::pt(Add[i] - 1); &#125; io::fflush(); return 0;&#125; 树状数组 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; fflush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 300000 + 5;int A[MAXN];struct Graph &#123; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int H[MAXN], cntE; int Depth[MAXN], Sz[MAXN], Son[MAXN], Fa[MAXN]; int Dfn[MAXN], cntD, Top[MAXN]; int C[MAXN]; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Sz[x] = 1, Son[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if (Sz[Son[x]] &lt; Sz[v]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if (Son[x]) &#123; dfs2(Son[x], top); &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125; &#125; int lowbit(int x) &#123; return x &amp; -x; &#125; void update(int A[], int p, int x) &#123; for (; p &lt;= N; p += lowbit(p)) &#123; A[p] += x; &#125; &#125; void add(int l, int r, int x) &#123; update(C, l, x); update(C, r + 1, -x); &#125; int sum(int A[], int p) &#123; int res = 0; for (; p &gt; 0; p -= lowbit(p)) &#123; res += A[p]; &#125; return res; &#125; int query(int x) &#123; return sum(C, x); &#125; void prepare() &#123; dfs(R); dfs2(R, R); &#125; void addPath(int u, int v, int x = 1) &#123; int tu = Top[u], tv = Top[v]; while (tu != tv) &#123; if (Depth[tu] &gt; Depth[tv]) &#123; std::swap(u, v); std::swap(tu, tv); &#125; add(Dfn[tv], Dfn[v], x); v = Fa[tv]; tv = Top[v]; &#125; if (Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; add(Dfn[u], Dfn[v], x); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; A[i] = io::gt&lt;int&gt;(); &#125; G.R = A[1]; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); rep(i, 2, G.N + 1) &#123; G.addPath(A[i], A[i - 1]); &#125; G.add(G.Dfn[A[1]], G.Dfn[A[1]], 1); rep(i, 1, G.N + 1) &#123; io::pt(G.query(G.Dfn[i]) - 1); &#125; io::fflush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>轻重链剖分</tag>
        <tag>树状数组</tag>
        <tag>树上差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2012」BZOJ 2733 永无乡]]></title>
    <url>%2FBZOJ-2733%2F</url>
    <content type="text"><![CDATA[N 个点分别有权值 W_i ，其中有 M 条无向边使其分成若干个联通分量。 现有 Q 次操作，分为两类： 查询点 x 所在的联通分量中，权值第 k 小的节点编号 合并点 x,y 所在的联通分量 M\leq N\leq 100000,Q\leq 300000 分析 动态查询第 k 大，考虑用Treap，Splay等数据结构来维护。 那么如何合并两棵平衡树？通过启发式合并。 说是启发式合并，不过就是暴力合并，把两棵树中较小的一棵的所有节点拆下来插入到较大的那棵中，复杂度 O(N\log{N}) 。 总复杂度分析，每个点至多被合并 N 次，但是复杂度显然不是 O(N^2\log{N}) ，其实不大会算... 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Treap &#123; int key, fix, belong, sz; Treap *ch[2]; Treap() &#123; key = INT_MAX, fix = rand(); belong = -1, sz = 1; ch[0] = ch[1] = NULL; &#125; Treap(int x, int y)&#123; key = x, fix = rand(); belong = y, sz = 1; ch[0] = ch[1] = NULL; &#125; int cmp(int x) &#123; return key &lt;= x; &#125; void pushUp() &#123; sz = 1; if(ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if(ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125;&#125; T[MAXN &lt;&lt; 2];int Belong[MAXN];int cntT;std::vector&lt;Treap*&gt; R;Treap* newTreap(std::pair&lt;int, int&gt; x) &#123; T[++cntT] = Treap(x.first, x.second); return &amp;T[cntT];&#125;void rotate(Treap* &amp;t, int d) &#123; Treap *k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap* &amp;t, std::pair&lt;int, int&gt; x) &#123; if(!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x.first); ++t-&gt;sz; insert(t-&gt;ch[d], x); if(t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125;&#125;int queryKth(Treap* &amp;t, int k) &#123; int num = t-&gt;ch[0] ? t-&gt;ch[0]-&gt;sz : 0; if (k == num + 1) &#123; return t-&gt;belong; &#125; else if(k &lt;= num) &#123; return queryKth(t-&gt;ch[0], k); &#125; else &#123; return queryKth(t-&gt;ch[1], k - num - 1); &#125;&#125;void merge(Treap* &amp;t, Treap* &amp;k, int rt) &#123; if(t-&gt;ch[0]) &#123; merge(t-&gt;ch[0], k, rt); &#125; if(t-&gt;ch[1]) &#123; merge(t-&gt;ch[1], k, rt); &#125; if(t-&gt;belong != -1) &#123; Belong[t-&gt;belong] = rt; insert(k, std::make_pair(t-&gt;key, t-&gt;belong)); &#125;&#125;void mergeTree(int x, int y) &#123; int bx = Belong[x], by = Belong[y]; if(bx != by) &#123; if(R[bx]-&gt;sz &gt; R[by]-&gt;sz) &#123; merge(R[by], R[bx], bx); &#125; else &#123; merge(R[bx], R[by], by); &#125; &#125;&#125;int query(int x, int k) &#123; if(R[Belong[x]]-&gt;sz &lt;= k) &#123; return -1; &#125; return queryKth(R[Belong[x]], k);&#125;int A[MAXN];int main() &#123; int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; A[i] = io::gt&lt;int&gt;(); R.push_back(new Treap); insert(R.back(), std::make_pair(A[i], i)); Belong[i] = SZ(R) - 1; &#125; while(M--) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); mergeTree(x, y); &#125; int Q = io::gt&lt;int&gt;(); while(Q--) &#123; char opt = io::gc(); while(!isalpha(opt)) &#123; opt = io::gc(); &#125; if(opt == 'Q') &#123; int x = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); io::pt(query(x, k)); &#125; else &#123; mergeTree(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2004」BZOJ 1208 宠物收养所]]></title>
    <url>%2FBZOJ-1208%2F</url>
    <content type="text"><![CDATA[有两个正整数集合 A,B ，起初都是它们都是空集。 现按顺序插入 N 个数 A[1...N] ，每个数属于 A 或 B 。 如果插入的数 x 属于集合 A ，当集合 B 不为空时，删去 B 中 与 x 差绝对值最小的数 y 。如果存在 b = x+a,c=x-a ，则优先删去 c 。该操作的代价为两数差的绝对值。当集合 B 为空时，将 x 直接插入集合 A 中，没有代价。 如果插入的数属于集合 B ，操作同理。 求插入完 N 个数后的代价，答案对 1000000 取模。 N\leq 80000,0&lt; A_i&lt; 2^{31} 分析 根据题意可得，在任何时候集合 A,B 至少有一个为空，因此只需要维护一个集合。 通过Treap等数据结构维护当前有数的集合。每次插入 x 后，查询集合中 x 的前驱后继，取较小值删去，并计算代价。 由于可能存在没有前驱后继的情况，初始化时插入一个极大值和一个极小值可以避免各种讨论，当树的 size=2 时认为其为空即可。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123;return getchar();&#125;template &lt;class T&gt; inline T gt() &#123;static T x;std::cin &gt;&gt; x;return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123;static char In[MAXSIZE], *at = In, *en = In;if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin);&#125;return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123;char c;while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125;bool f = c == '-';T x = f ? 0 : c - '0';for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0';&#125;return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123;fwrite(Out, 1, cur - Out, stdout);cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123;static int S[20], *top;top = S;if (x &lt; 0) &#123; *cur++ = '-', x = -x;&#125;do &#123; *++top = x % 10, x /= 10;&#125; while (x);while (top != S) &#123; *cur++ = *top-- + '0';&#125;*cur++ = c;if (cur &gt;= end) &#123; flush();&#125;&#125;#endif&#125; // namespace ioconst int MAXN = 80000 + 5;struct TreapTree &#123;struct Treap &#123; int key, fix; int cnt, sz; Treap *ch[2]; int cmp(int x) &#123; return key == x ? -1 : key &lt; x; &#125; void pushUp() &#123; sz = cnt; if (ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if (ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125;&#125; Pool[MAXN], *R;int cntP;Treap* newTreap(int x) &#123; Pool[++cntP] = (Treap) &#123;x, rand(), 1, 1, NULL, NULL&#125;; return &amp;Pool[cntP];&#125;void rotate(Treap* &amp;t, int d) &#123; Treap* k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k;&#125;void insert(Treap* &amp;t, int x) &#123; if (!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x); ++t-&gt;sz; if (d == -1) &#123; ++t-&gt;cnt; &#125; else &#123; insert(t-&gt;ch[d], x); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125; &#125;&#125;void erase(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; int d = t-&gt;cmp(x); if (d == -1) &#123; if (t-&gt;cnt &gt; 1) &#123; --t-&gt;cnt; --t-&gt;sz; &#125; else if (!t-&gt;ch[0]) &#123; t = t-&gt;ch[1]; &#125; else if (!t-&gt;ch[1]) &#123; t = t-&gt;ch[0]; &#125; else &#123; int e = t-&gt;ch[0]-&gt;fix &gt; t-&gt;ch[1]-&gt;fix; rotate(t, e); erase(t-&gt;ch[e], x); &#125; &#125; else &#123; erase(t-&gt;ch[d], x); &#125; if (t) &#123; t-&gt;pushUp(); &#125;&#125;int res;void queryPre(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &lt;= x) &#123; res = t-&gt;key; queryPre(t-&gt;ch[1], x); &#125; else &#123; queryPre(t-&gt;ch[0], x); &#125;&#125;void querySub(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &gt;= x) &#123; res = t-&gt;key; querySub(t-&gt;ch[0], x); &#125; else &#123; querySub(t-&gt;ch[1], x); &#125;&#125;&#125; T;int main() &#123;int N = io::gt&lt;int&gt;();int type;ll res = 0;T.insert(T.R, -INT_MAX);T.insert(T.R, INT_MAX);while (N--) &#123; int opt = io::gt&lt;int&gt;(); int x = io::gt&lt;int&gt;(); if (T.R-&gt;sz == 2 || type == opt) &#123; T.insert(T.R, x); type = opt; &#125; else &#123; T.queryPre(T.R, x); int pre = T.res; T.querySub(T.R, x); int sub = T.res; if (pre == -INT_MAX) &#123; res += sub - x; T.erase(T.R, sub); &#125; else if (sub == INT_MAX) &#123; res += x - pre; T.erase(T.R, pre); &#125; else &#123; if (x - pre &lt;= sub - x) &#123; res += x - pre; T.erase(T.R, pre); &#125; else &#123; res += sub - x; T.erase(T.R, sub); &#125; &#125; &#125;&#125;printf("%lld\n", res % 1000000);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2004」BZOJ 1212 L语言]]></title>
    <url>%2FBZOJ-1212%2F</url>
    <content type="text"><![CDATA[有 N 个字符串作为字典，一个字符串能被该字典理解当且仅当它可以被拆成若干个字串，每个字串都是字典中的单词。 现每次查询某个字符串 S_i 能被该字典理解的最长前缀大小，查询 M 次。 1\leq N,M\leq 20 ，单词长度不超过 10 ， S_i 的长度不超过 1M 。 分析 看到多个字符串做字典查询，想到Trie树。 Trie树能够进行字符串的最长前缀匹配，很明显与这道题关系密切。 记 F_i = 1 当 S[0...i] 能被若干个单词拼接而成，如果 S[i+1...k] 也能被若干个单词拼接，那么 F_k=1 。 因此在进行匹配过程中，如果中间恰好为某个单词的结束，那么置对应位置的 F 值为 1 。 进行以 S[i] 为首的字符串匹配的条件为 F_{i-1}=1 （ S[0] 除外）。 那么答案满足即为满足 F_i=1 的最大值。 复杂度不好分析，为 O(\sum{len}) 级别。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1000 + 5;const int MAXM = 1024 * 1024 + 5;struct Node &#123;static const int MAX_SIZE = 26;bool flag;int Nxt[MAX_SIZE];&#125;Pool[MAXN];int cntP = -1, root;int newNode() &#123;Node &amp;x = Pool[++cntP];x.flag = 0;memset(x.Nxt, -1, sizeof x.Nxt);return cntP;&#125;void insert(int rt, char *S) &#123;while(*S) &#123; int id = *S++ - 'a'; if(!~Pool[rt].Nxt[id]) &#123; Pool[rt].Nxt[id] = newNode(); &#125; rt = Pool[rt].Nxt[id];&#125;Pool[rt].flag = true;&#125;void match(int rt, char *S, int st, int F[]) &#123;char *s = S + st;while(*s) &#123; int id = *s++ - 'a'; if(!~Pool[rt].Nxt[id]) &#123; return ; &#125; rt = Pool[rt].Nxt[id]; if(Pool[rt].flag) &#123; F[s - S] = 1; &#125;&#125;&#125;int solve(char *S) &#123;static int F[MAXM];memset(F, 0, sizeof F);match(root, S, 0, F);F[0] = 1;rep(i, 1, strlen(S)) &#123; if(F[i]) &#123; match(root, S, i, F); &#125;&#125;rof(i, strlen(S) + 1, 0) &#123; if(F[i]) &#123; return i; &#125;&#125;&#125;int main() &#123;int n, m;root = newNode();char Str[MAXM];scanf("%d%d", &amp;n, &amp;m);rep(i, 0, n) &#123; scanf("%s", Str); insert(root, Str);&#125;rep(i, 0, m) &#123; scanf("%s", Str); printf("%d\n", solve(Str));&#125;return 0;&#125;]]></content>
      <tags>
        <tag>字典树</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2002」BZOJ 1588 营业额统计]]></title>
    <url>%2FBZOJ-1588%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A ，最小化 total = A_1+\sum\limits_{i=2}^{N}{|A_i-A_j|}(j &lt; i) 。 N\leq 32767, A_i\leq 1000000 分析 用一棵可以查询前驱后继的Treap/Splay等数据结构维护。 每次查询 A_i 的前驱后继，取与 A_i 的差较小的值计入 total ，然后将 A_i 插入。 复杂度 O(N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 32767 + 5;const int INF = 1e9;struct TreapTree &#123; struct Treap &#123; int key, fix; int cnt, sz; Treap *ch[2]; void pushUp() &#123; sz = cnt; if (ch[0]) &#123; sz += ch[0]-&gt;sz; &#125; if (ch[1]) &#123; sz += ch[1]-&gt;sz; &#125; &#125; int cmp(int x) &#123; return key == x ? -1 : key &lt; x; &#125; &#125; Pool[MAXN], *R; int cntP; Treap* newTreap(int x) &#123; Pool[++cntP] = (Treap) &#123;x, rand(), 1, 1, NULL, NULL&#125;; return &amp;Pool[cntP]; &#125; void rotate(Treap* &amp;t, int d) &#123; Treap *k = t-&gt;ch[d ^ 1]; t-&gt;ch[d ^ 1] = k-&gt;ch[d]; k-&gt;ch[d] = t; t-&gt;pushUp(); k-&gt;pushUp(); t = k; &#125; void insert(Treap* &amp;t, int x) &#123; if (!t) &#123; t = newTreap(x); return ; &#125; int d = t-&gt;cmp(x); ++t-&gt;sz; if (d == -1) &#123; ++t-&gt;cnt; &#125; else &#123; insert(t-&gt;ch[d], x); if (t-&gt;ch[d]-&gt;fix &gt; t-&gt;fix) &#123; rotate(t, d ^ 1); &#125; &#125; &#125; int res; void queryPre(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &lt;= x) &#123; res = t-&gt;key; queryPre(t-&gt;ch[1], x); &#125; else &#123; queryPre(t-&gt;ch[0], x); &#125; &#125; void querySub(Treap* &amp;t, int x) &#123; if (!t) &#123; return ; &#125; if (t-&gt;key &gt;= x) &#123; res = t-&gt;key; querySub(t-&gt;ch[0], x); &#125; else &#123; querySub(t-&gt;ch[1], x); &#125; &#125;&#125; T;int main() &#123; int N = io::gt&lt;int&gt;(); int res = io::gt&lt;int&gt;(); T.insert(T.R, res); rep(i, 2, N + 1) &#123; int x = io::gt&lt;int&gt;(); T.res = -1; T.queryPre(T.R, x); int pre = T.res != -1 ? T.res : -INF; T.res = -1; T.querySub(T.R, x); int sub = T.res != -1 ? T.res : INF; res += std::min(x - pre, sub - x); T.insert(T.R, x); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2002」BZOJ 1224 彩票]]></title>
    <url>%2FBZOJ-1224%2F</url>
    <content type="text"><![CDATA[从 [1,M] 中选取 N 个不同整数 A_i ，使得 \sum{\frac{1}{A_i}} = \frac{p}{q} 。求有多少种不同选法。 1\leq p,q\leq 100 ， 1\leq N\leq10 ， 1\leq M\leq 50 ，结果不超过 10^5 。 分析 看到这个数据范围， N\leq 10 ，比较显然是一个搜索+剪枝。 那么如何剪枝？ 最简单的便是如果当前没选完且 sum\geq \frac{p}{q} ，那么就立即返回。 还有两个比较显然的优化。 假设顺序搜索，当前值为 x ，当前和为 sum ，剩余选取 n 个数。 那么如果可能得到 \frac{p}{q} ，至少要满足 sum + \frac{1}{x} * n \geq \frac{p}{q} 且 sum + \frac{1}{M} * n\leq \frac{p}{q} 。 即当前值加上选取剩余数的最小值 min 一定小于结果，加上最大值 max 一定大于结果，否则不可能存在 min\leq a\leq max 使得 sum + a = \frac{p}{q} 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const double eps = 1e-10;int N, M, X, Y;int ans;double goal;void dfs(int x, int total, double sum) &#123; if(goal - sum - 1.0 / x * (N - total) &gt; eps) &#123; return ; &#125; if(sum + 1.0 / M * (N - total) - goal &gt; eps) &#123; return ; &#125; if(total == N) &#123; if(fabs(sum - goal) &lt;= eps) &#123; ++ans; &#125; return ; &#125; if(x &lt;= M) &#123; dfs(x + 1, total + 1, sum + 1.0 / x); dfs(x + 1, total, sum); &#125;&#125;int main() &#123; scanf("%d%d%d%d", &amp;N, &amp;M, &amp;X, &amp;Y); goal = 1.0 * X / Y; dfs(1, 0, 0); printf("%d\n", ans); return 0;&#125;`]]></content>
      <tags>
        <tag>DFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI/HEOI2016」BZOJ 4551 树]]></title>
    <url>%2FBZOJ-4551%2F</url>
    <content type="text"><![CDATA[在有根树 T 中，有两种操作：给某点 x 打标记、查询离某点 x 最近被打标记的祖先，数据范围 10^6 。 1\leq N, Q\leq 100000 分析 跟【dfs序+线段树】[USACO10FEB]「luogu P2982 Slowing down」 思路相同，反着考虑标记一个点对其他点的影响。 显然标记一个点后会影响以它为根的整棵子树。 那么用线段树维护每个点DFS序后，离它最近的被打标记的祖先。 比较原值和新值的大小关系进行更新操作，易得标号大的点更深（在同一棵子树中）。 复杂度 O(Q\log{N}) 。 P.S 不得不说的是，此题数据水到感人，直接暴力树上走路比线段树快的多。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Dfn[MAXN], Nfd[MAXN], Sz[MAXN], cntD;void dfs(int x) &#123; Dfn[x] = ++cntD; Nfd[cntD] = x; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; dfs(v); Sz[x] += Sz[v]; &#125;&#125;int Max[MAXN &lt;&lt; 2], Mrk[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rvoid pushUp(int rt) &#123; if(Max[rt &lt;&lt; 1] == Max[rt &lt;&lt; 1 | 1]) &#123; Max[rt] = Max[rt &lt;&lt; 1]; &#125; else &#123; Max[rt] = -1; &#125;&#125;void pushDown(int rt) &#123; int &amp;mrk = Mrk[rt]; if(mrk) &#123; Mrk[rt &lt;&lt; 1] = std::max(Mrk[rt &lt;&lt; 1], mrk); Mrk[rt &lt;&lt; 1 | 1] = std::max(Mrk[rt &lt;&lt; 1 | 1], mrk); Max[rt &lt;&lt; 1] = std::max(Max[rt &lt;&lt; 1], Max[rt]); Max[rt &lt;&lt; 1 | 1] = std::max(Max[rt &lt;&lt; 1 | 1], Max[rt]); mrk = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Max[rt] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void change(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; if(Max[rt] &lt;= x) &#123; Max[rt] = x; Mrk[rt] = std::max(x, Max[rt]); &#125; return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b, x); &#125; if(m &lt; b) &#123; change(RT, a, b, x); &#125; pushUp(rt);&#125;int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Max[rt]; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125;&#125;int main() &#123; int N = io::gt&lt;int&gt;(), Q = io::gt&lt;int&gt;(); rep(i, 1, N) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); addEdge(u, v); &#125; dfs(1); build(1, 1, N); while(Q--) &#123; char opt = io::gc(); while(!isalpha(opt)) &#123; opt = io::gc(); &#125; int x = io::gt&lt;int&gt;(); if(opt == 'C') &#123; change(1, 1, N, Dfn[x], Dfn[x] + Sz[x] - 1, Dfn[x]); &#125; else &#123; io::pt(Nfd[query(1, 1, N, Dfn[x])]); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2015」BZOJ 4034 树上操作]]></title>
    <url>%2FBZOJ-4034%2F</url>
    <content type="text"><![CDATA[在一棵有 N 个节点的树上，每个点有初始权值 W_i 。现有 M 个操作，分别为： ADD(u,x) 节点 u 权值增加 v ADD2(u,x)节点 u 的子树的所有节点权值增加 v QUERY(u) 查询节点 u 到根节点( 1 )的权值和 N,M\leq 100000 ，且所有输入数据的绝对值都不会超过 10^6 。 分析 树链剖分+线段树模板。 注意需要long long，否则只有30分。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Graph &#123; static const int MAXN = 100000 + 5; struct Edge &#123; int v, nxt; &#125; E[MAXN &lt;&lt; 1]; int N, R; int H[MAXN], cntE; int Depth[MAXN], Fa[MAXN], Son[MAXN], Sz[MAXN]; int Dfn[MAXN], Top[MAXN], cntD; int W[MAXN], Wp[MAXN]; void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125; void dfs(int x) &#123; Son[x] = 0, Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; Depth[v] = Depth[x] + 1; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125; &#125; void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; W[cntD] = Wp[x]; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Son[x] &amp;&amp; v != Fa[x]) &#123; dfs2(v, v); &#125; &#125; &#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r ll Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; &#125; void pushDown(int rt, int L) &#123; ll &amp;add = Add[rt]; if(!add) &#123; return ; &#125; Sum[rt &lt;&lt; 1] += add * (L - (L &gt;&gt; 1)); Sum[rt &lt;&lt; 1 | 1] += add * (L &gt;&gt; 1); Add[rt &lt;&lt; 1] += add; Add[rt &lt;&lt; 1 | 1] += add; add = 0; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = W[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void add(int rt, int l, int r, int a, int b, ll x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Sum[rt] += x * (r - l + 1); Add[rt] += x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; add(LT, a, b, x); &#125; if(m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt); &#125; ll querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; ll res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res; &#125; void addNode(int u, int x) &#123; add(1, 1, N, Dfn[u], Dfn[u], x); &#125; void addTree(int rt, int x) &#123; add(1, 1, N, Dfn[rt], Dfn[rt] + Sz[rt] - 1, x); &#125; ll queryPath(int v) &#123; ll res = 0; int u = R, tu = Top[R], tv = Top[v]; while(tu != tv) &#123; if(Depth[tu] &gt; Depth[tv]) &#123; std::swap(tu, tv); std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[tv], Dfn[v]); v = Fa[tv]; tv = Top[v]; &#125; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; res += querySum(1, 1, N, Dfn[u], Dfn[v]); return res; &#125; void prepare() &#123; dfs(R); dfs2(R, R); build(1, 1, N); &#125;&#125; G;int main() &#123; G.N = io::gt&lt;int&gt;(); G.R = 1; int M = io::gt&lt;int&gt;(); rep(i, 1, G.N + 1) &#123; G.Wp[i] = io::gt&lt;int&gt;(); &#125; rep(i, 1, G.N) &#123; G.addEdge(io::gt&lt;int&gt;(), io::gt&lt;int&gt;()); &#125; G.prepare(); rep(i, 0, M) &#123; int opt = io::gt&lt;int&gt;(); if(opt == 1) &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.addNode(u, x); &#125; else if(opt == 2) &#123; int u = io::gt&lt;int&gt;(), x = io::gt&lt;int&gt;(); G.addTree(u, x); &#125; else &#123; io::pt(G.queryPath(io::gt&lt;int&gt;())); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>轻重链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2015」BZOJ 4033 树上染色]]></title>
    <url>%2FBZOJ-4033%2F</url>
    <content type="text"><![CDATA[有一棵点数为 N 的树，树边有边权。给你一个在 0 ~ N 之内的正整数 K ，你要在这棵树中选择 K 个点，将其染成黑色，并将其他的 N-K 个点染成白色 。将所有点染色后，你会获得黑点两两之间的距离加上白点两两之间的距离的和的受益。问受益最大值是多少。 0\leq K\leq N\leq 2000 分析 感觉就是一道联赛难度的树形DP，思路很simple。 枚举当前节点的某个儿子作为根的子树中染成黑色的节点数目，如此该子树内、外各自的黑白节点个数就已知了，可以计算当前这条边（当前节点和该儿子相连的边）对答案的贡献，进行类似01背包的操作。 计算复杂度的话，复杂度上界为 \sum\limits_{x=1}^{N}{\sum\limits_{u,v\in Son[x]}{Sz[u]\times Sz[v]}} 。 Sz[u]\times Sz[v] 可以将其视作从以 x 为根的子树中任意选择两个点，使得它们的LCA是 x 的方案数。由于每个节点对只有一个最近公共祖先，因此它就是在树上选取节点对的方案数，即 N^2 。 复杂度 O(N^2) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 2000 + 5;struct Edge &#123; int v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int N, K;int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, w, H[v]&#125;; H[v] = cntE;&#125;ll F[MAXN][MAXN];int Sz[MAXN];void dfs(int x, int fa) &#123; Sz[x] = 1; memset(F[x], -1, sizeof F[x]); F[x][0] = F[x][1] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v == fa) &#123; continue; &#125; dfs(v, x); Sz[x] += Sz[v]; &#125; for (int e = H[x]; e; e = E[e].nxt) &#123; int &amp;v = E[e].v, &amp;w = E[e].w; if (v == fa) &#123; continue; &#125; rof(i, std::min(Sz[x], K) + 1, 0) &#123; rep(j, 0, std::min(Sz[v], i) + 1) &#123; if (F[x][i - j] != -1) &#123; ll val = 1ll * w * (j * (K - j) + (Sz[v] - j) * (N - Sz[v] - K + j)); F[x][i] = std::max(F[x][i], F[x][i - j] + F[v][j] + val); &#125; &#125; &#125; &#125;&#125;int main() &#123; int u, v, w; scanf("%d%d", &amp;N, &amp;K); rep(i, 1, N) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; dfs(1, 0); printf("%lld\n", F[1][K]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HAOI 2007」BZOJ1053 反素数]]></title>
    <url>%2FBZOJ-1053%2F</url>
    <content type="text"><![CDATA[求 [1,N]​ 中最大的反素数。 记 g(x) 为 x 的约束个数，反素数即满足 y \in [1,x-1], g(x) &gt; g(y) 。 1\leq N\leq 2000000000 分析 根据约数个数定理。设 x = \prod{A_{i}^{P_i}} ，则 x 的约数个数为 \prod{(P_i+1)} 。 假设 A_i 单调递增，那么 P_i 一定单调递减。 反证法：若 x 分解后，存在 A_i &lt; A_j, P_i \leq P_j ，那么互换 P_i, P_j 一定更优。 根据 N 的数据范围，发现前 11 个素数的乘积就已经超过 2e9 ，因此最多枚举 10 个素数 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;int Pri[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59&#125;;ll ans, N;int res;void dfs(int x, ll cur, int num, int last) &#123;if(cur * Pri[x] &gt; N) &#123; if(num &gt; res || num == res &amp;&amp; ans &gt; cur) &#123; res = num; ans = cur; &#125; return ;&#125;ll mul = Pri[x];rep(i, 1, last + 1) &#123; if(cur * mul &gt; N) &#123; break; &#125; dfs(x + 1, cur * mul, num * (i + 1), i); mul *= Pri[x];&#125;&#125;int main() &#123;scanf("%lld", &amp;N);dfs(0, 1, 1, 64);printf("%lld\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DFS</tag>
        <tag>约数个数定理</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2018」BZOJ 5301 异或序列]]></title>
    <url>%2FBZOJ-5301%2F</url>
    <content type="text"><![CDATA[在序列 A[1...N] 中查询 M 次，每次查询 A[L_i,R_i] 中异或和为 K 的子序列的个数。 1\leq N,M\leq 10^5,0\leq K, A_i\leq 105,1\leq L_i\leq R_i\leq N 分析 记 A[l...r] = A[l]\bigoplus A[l+1]\bigoplus...A[r] ，若 A[1...L-1] = x，A[1....R] = y ， 那么 A[L...R] = x\bigoplus y 。 也就是说如果满足 x\bigoplus y=k ，那么 A[L,R] 就是一个合法子序列。 考虑增加一个数 A[x] 产生的影响。 记 Cnt[x] 为满足 A[1...r] = x 的 r 的个数，那么区间个数会因此增加 Cnt[x\bigoplus K] 个，增加的区间分别为 A[\min(x,r)+1,\max(x,r)] 。 删除一个数同理，都是 O(1) 的。 想到莫队算法。 复杂度 O(M\log{M} + N\sqrt{N+M}) 。 P.S 注意细节， [l,r] 是通过 [1,r]\bigoplus[1,l-1] 异或得到的，而不是 [1,l] ；想清楚增加/删除一个数时，是先改统计数，还是先改答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 1e5 + 5;int Pos[MAXN];struct Query &#123; int l, r, id; bool operator &lt; (const Query &amp;x) const &#123; return Pos[l] == Pos[x.l] ? Pos[x.l] &amp; 1 ? r &gt; x.r : r &lt; x.r : Pos[l] &lt; Pos[x.l]; &#125;&#125; Q[MAXN];int N, M, K;int A[MAXN], Num[MAXN &lt;&lt; 1];int l = 1, r;ll Ans[MAXN], ans;void del(int x) &#123; --Num[A[x]]; ans -= Num[A[x] ^ K];&#125;void add(int x) &#123; ans += Num[A[x] ^ K]; Num[A[x]]++;&#125;int main() &#123; N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(), K = io::gt&lt;int&gt;(); int sz = sqrt(N); rep(i, 1, N + 1) &#123; Pos[i] = i / sz; A[i] = io::gt&lt;int&gt;(); A[i] ^= A[i - 1]; &#125; rep(i, 1, M + 1) &#123; Q[i].l = io::gt&lt;int&gt;(), Q[i].r = io::gt&lt;int&gt;(); Q[i].id = i; &#125; std::sort(Q + 1, Q + M + 1); Num[0] = 1; rep(i, 1, M + 1) &#123; while (l &lt; Q[i].l) &#123; del(l++ - 1); &#125; while (l &gt; Q[i].l) &#123; add(--l - 1); &#125; while (r &lt; Q[i].r) &#123; add(++r); &#125; while (r &gt; Q[i].r) &#123; del(r--); &#125; Ans[Q[i].id] = ans; &#125; rep(i, 1, M + 1) &#123; io::pt(Ans[i]); &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>莫队</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BJOI 2018」BZOJ 5293 求和]]></title>
    <url>%2FBZOJ-5293%2F</url>
    <content type="text"><![CDATA[在一棵有 n 个节点，根节点为 1 的树上进行 m 次询问。 每次查询 (u,v) 之间的简单路径的“ k 次深度和”。 k 次深度和即 \sum_{i\in(u,v)}Depth(i)^k ， Depth(1)=0 。 询问的结果对 998244353 取模。 1\leq n,m\leq 300000,1\leq k\leq 50 分析 首先注意到没有修改操作，只有查询。 其次注意到 k 很小， k 次方可以预处理。 最后注意到每次查询就是一个 k 次的两段连续区间的求和。 记 lca 为 (u,v) 的最近公共祖先。 那么查询的结果即为 \sum_{i=Depth(lca)}^{Depth(u)}i^k+\sum_{i=Depth(lca)+1}^{Depth(v)}i^k 预处理 F_{i,j} = \sum_{u=0}^{j}u^i 则查询的结果为 F_{k,Depth(v)}-F_{k,Depth(lca)}+F_{k,Depth(u)}-F_{k,Depth(lca)}+Depth(lca)^k 对于 m 组 (u,v) 求LCA，树剖、倍增、Tarjan都可以。 如果选择树剖、倍增，复杂度 O(n\times k+m\times \log{n}) ； 如果选择Tarjan，复杂度 O(n\times k+m) 。 实测Tarjan常数较大，运行时间相对更长（可能是写渣了）。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEinline char gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123;std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst static int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-'); register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125;const int MAXN = 300000 + 5;const int MOD = 998244353;std::vector&lt;int&gt; G[MAXN];int maxDep;int Fa[MAXN], Sz[MAXN], Depth[MAXN];int Son[MAXN], Top[MAXN];void dfs1(int x) &#123; Sz[x] = 1; if(x == 1) &#123; Depth[x] = 0; &#125; else &#123; Depth[x] = Depth[Fa[x]] + 1; &#125; maxDep = std::max(maxDep, Depth[x]); rep(i, 0, SZ(G[x])) &#123; int &amp;v = G[x][i]; if(Fa[x] != v) &#123; Fa[v] = x; dfs1(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]] || !Son[x]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int fa) &#123; Top[x] = fa; if(Son[x]) &#123; dfs2(Son[x], fa); &#125; rep(i, 0, SZ(G[x])) &#123; int &amp;v = G[x][i]; if(v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;int query(int u, int v) &#123; while(Top[u] ^ Top[v]) &#123; if(Depth[Top[u]] &gt; Depth[Top[v]]) &#123; u = Fa[Top[u]]; &#125; else &#123; v = Fa[Top[v]]; &#125; &#125; return Depth[u] &lt; Depth[v] ? u : v;&#125;std::vector&lt;int&gt; Sum[MAXN];ll poww(ll x, ll t) &#123; ll ans = 1; for(; t; t &gt;&gt;= 1, x = x * x % MOD) &#123; if(t &amp; 1) &#123; ans = ans * x % MOD; &#125; &#125; return ans;&#125;void pre() &#123; rep(i, 1, 51) &#123; Sum[i].push_back(0); rep(j, 1, maxDep + 1) &#123; ll cur = (poww(j, i) + Sum[i].back()) % MOD; Sum[i].push_back(cur); &#125; &#125;&#125;int main() &#123; rep(i, 1, io::gt&lt;int&gt;()) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); G[u].push_back(v); G[v].push_back(u); &#125; dfs1(1); dfs2(1, 1); pre(); rep(i, 0, io::gt&lt;int&gt;()) &#123; int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(), k = io::gt&lt;int&gt;(); int lca = query(u, v); int &amp;depx = Depth[u], &amp;depy = Depth[v]; int &amp;depl = Depth[lca]; int ans = ((Sum[k][depy] - Sum[k][depl] + Sum[k][depx] - Sum[k][depl] + poww(depl, k)) % MOD + MOD) % MOD; io::pt(ans); &#125; io::fflush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「AHOI 2009」BZOJ 1798 维护序列]]></title>
    <url>%2FBZOJ-1798%2F</url>
    <content type="text"><![CDATA[维护序列 A[1...N] ，共 M 次操作，分为三种： A[l,r] 所有数加 x A[l,r] 所有数乘 x A[l,r] 求和 答案对 P 取模。 N,M\leq 100000,1\leq P\leq 1000000000 分析 线段树模板，注意lazy标签先处理乘法。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct Segment &#123; int sum, add, mul;&#125; T[MAXN &lt;&lt; 2];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rll P;template&lt;class T, class G&gt; void inc(T &amp;x, G y) &#123; (x += y) %= P;&#125;template&lt;class T, class G&gt; void inu(T &amp;x, G y) &#123; (x *= y) %= P;&#125;void pushUp(int rt) &#123; inc(T[rt].sum = 0, T[rt &lt;&lt; 1].sum + T[rt &lt;&lt; 1 | 1].sum);&#125;void pushDown(int rt, int L) &#123; Segment &amp;ls = T[rt &lt;&lt; 1], &amp;rs = T[rt &lt;&lt; 1 | 1]; int &amp;add = T[rt].add, &amp;mul = T[rt].mul; if (mul != 1) &#123; inu(ls.sum, mul); inu(rs.sum, mul); inu(ls.add, mul); inu(rs.add, mul); inu(ls.mul, mul); inu(rs.mul, mul); mul = 1; &#125; if (add != 0) &#123; inc(ls.sum, add * (L - (L &gt;&gt; 1))); inc(rs.sum, add * (L &gt;&gt; 1)); inc(ls.add, add); inc(rs.add, add); add = 0; &#125;&#125;void build(int rt, int l, int r) &#123; T[rt].add = 0, T[rt].mul = 1; if (l == r) &#123; inc(T[rt].sum = 0, io::gt&lt;ll&gt;()); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void mul(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inu(T[rt].sum, x); inu(T[rt].add, x); inu(T[rt].mul, x); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; mul(LT, a, b, x); &#125; if (m &lt; b) &#123; mul(RT, a, b, x); &#125; pushUp(rt);&#125;void add(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inc(T[rt].sum, x * (r - l + 1)); inc(T[rt].add, x); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b, x); &#125; if (m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt);&#125;ll querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].sum; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; ll res = 0; if (a &lt;= m) &#123; inc(res, querySum(LT, a, b)); &#125; if (m &lt; b) &#123; inc(res, querySum(RT, a, b)); &#125; return res;&#125;int main() &#123; int N = io::gt&lt;int&gt;(); P = io::gt&lt;ll&gt;(); build(1, 1, N); int M = io::gt&lt;int&gt;(); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); if (opt == 1) &#123; mul(1, 1, N, l, r, io::gt&lt;ll&gt;() % P); &#125; else if (opt == 2) &#123; add(1, 1, N, l, r, io::gt&lt;ll&gt;() % P); &#125; else &#123; io::pt(querySum(1, 1, N, l, r)); &#125; &#125; io::flush(); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「BJWC 2018」BZOJ 5148 kakuro]]></title>
    <url>%2FBZOJ-5148%2F</url>
    <content type="text"><![CDATA[kakuro是一个神奇的数独游戏，大致规则如下： N\times M​ 的网格图中，由一些格子为空格需要填数，一些格子填线索，一些格子什么都不填 线索有两个方向，分别为右和下，线索的值表示该方向连续空格所填数之和 对于任意一个空格，其左边与上边的一定存在一个格子为线 游戏规则： 空格中填入正整数。 被斜线分开的方格中，右上角的数字等于其右侧邻接之连续方格中数字之和，左下角的数字等于其下方邻接之连续方格中数字之和。 Apia 给了Rimbaud 一个Kakuro 谜题。心不灵手不巧的Rimbaud 根本不会做Kakuro，所以只在空格里面填上了一些随机的数字，称这个为一个局面，即包含了谜题一开始给出的线索和后面填入的数字。 现在Rimbaud 希望能修改这个局面使得她的答案是一个合法解。这个局面中有些数字(包括一开始的给出线索和后面填入的数字) 是可以修改的。每个数字都有个特定的代价，将这个数字加 1 或者减 1 都得付出这个数字对应的代价。注意对于一组合法解，必须满足游戏规则，也就是空格中填的数字必须是正整数并且满足和的条件，但是不要求不重复。 Rimbaud 希望用最少的代价让这个局面变得合法，如果不可能那么输出-1 。 3 \leq n,m \leq 30 ，保证初始局面中的每个数字不超过 10^6 ，保证每个数字的代价不超过 10^6 。 分析 致谢 感谢AloNE的讲解。 正题 一个思路就是先做出一个合法解，然后再去修改权值以减少总花费。 那么最简单的合法解，就是每个空格都填 1 ，线索填对应格子的个数。 如此保证了每个空格都是正整数，这是一个最小解。 记当前花费为 Ans 。 记某个格子现在的值为 A(x,y) ，原来的值为 O(x,y) ，修改 1 的价格为 C(x,y) 。 那么每个空格和线索只能往大修改，那么有两种情况。 A(x,y) \leq O(x,y) ，那么当 A(x,y) 最初变大直到 O(x,y) 时，相当于对最开始的修改进行反悔，也就是说花费 -C(x,y) ；当然对于超出 O(x,y) 的部分继续花费 C(x,y) 。 A(x,y) \geq O(x,y) ，那么修改继续增加花费 C(x,y) 。 转化成网络流问题，将这些关系抽象成如下的边： 发现对于修改一个空格会对其左边和上边的两个线索产生影响，约束方法很简单，就是流量从其上面的线索流入，从其左边的线索流出，那么保证所有增加的流量都是合法的；也就是说空格本质就是一条连接横向和竖向线索的边； 根据上面的建模方法， S 连接所有竖向线索，费用为 C(x,y) ，流量不限； 所有横向线索连接 T ，费用为 C(x,y) ，流量不限； 对于所有空格，如果 A(x,y) \leq O(x,y) ，连接费用为 -C(x,y) 流量为 O(x,y) - A(x,y) ，意为对最初的修改进行反悔；（对应的两个线索之间连边） 对于所有空格，连接费用为 C(x,y) ，流量不限的边，因为每个格子都可以无限增大。 跑最小费用可行流，当前费用 Cost \geq 0 时结束。 得到最小费用 C ，那么最终结果 Ans + C 。 那么如何判断无解的情况？ 无解也就是说修改了不能修改的边。 那么将不能修改的边的费用置为 INF ，跑完最小费用可行流之后检查残余与网络是否存在费用为 INF 的反向边流量不为 0 或者费用为 -INF 的边流量不为 0 。 如果出现这种情况，说明了必须修改不能修改的格子权值以满足流量平衡，输出 -1 即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 30 + 5;const int INF = 1e9 + 7;namespace mcf &#123;const int MAXN = ::MAXN * ::MAXN * 4;const int MAXM = MAXN;struct Edge &#123; int v, c, f, nxt;&#125; E[MAXM &lt;&lt; 1];int S, T;ll C, F, Dis[MAXN];int H[MAXN], cntE;int Lp[MAXN], Le[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::bitset&lt;MAXN&gt; Inq; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] &lt; 0;&#125;void mcf() &#123; while (spfa()) &#123; int f = INF; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; C = F = 0;&#125;bool check() &#123; for (int i = 0; i &lt;= cntE; i += 2) &#123; if (E[i].c == INF &amp;&amp; E[i ^ 1].f &gt; 0) &#123; return false; &#125; if (E[i].c == -INF &amp;&amp; E[i].f &gt; 0) &#123; return false; &#125; &#125; return true;&#125;&#125;int N, M;int Type[MAXN][MAXN];int Column[MAXN][MAXN], Line[MAXN][MAXN], Ori[MAXN][MAXN];int ChangeC[MAXN][MAXN], ChangeL[MAXN][MAXN], ChangeO[MAXN][MAXN];int IdC[MAXN][MAXN], IdL[MAXN][MAXN];int Left[MAXN][MAXN], Up[MAXN][MAXN];int AfterC[MAXN][MAXN], AfterL[MAXN][MAXN], AfterO[MAXN][MAXN];int main() &#123; mcf::init(); int cnt = 0; N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; Type[i][j] = io::gt&lt;int&gt;(); &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; Column[i][j] = io::gt&lt;int&gt;(); IdC[i][j] = ++cnt; &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; Line[i][j] = io::gt&lt;int&gt;(); IdL[i][j] = ++cnt; &#125; if (Type[i][j] == 4) &#123; Ori[i][j] = io::gt&lt;int&gt;(); &#125; &#125; &#125; mcf::S = 0, mcf::T = cnt + 1; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; ChangeC[i][j] = io::gt&lt;int&gt;(); if (ChangeC[i][j] == -1) &#123; ChangeC[i][j] = INF; &#125; &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; ChangeL[i][j] = io::gt&lt;int&gt;(); if (ChangeL[i][j] == -1) &#123; ChangeL[i][j] = INF; &#125; &#125; if (Type[i][j] == 4) &#123; ChangeO[i][j] = io::gt&lt;int&gt;(); if (ChangeO[i][j] == -1) &#123; ChangeO[i][j] = INF; &#125; &#125; &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; int k = i + 1; while (k &lt;= N &amp;&amp; Type[k][j] == 4) &#123; Up[k++][j] = IdC[i][j]; &#125; AfterC[i][j] = k - i - 1; mcf::C += 1ll * ChangeC[i][j] * std::abs(AfterC[i][j] - Column[i][j]); &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; int k = j + 1; while (k &lt;= M &amp;&amp; Type[i][k] == 4) &#123; Left[i][k++] = IdL[i][j]; &#125; AfterL[i][j] = k - j - 1; mcf::C += 1ll * ChangeL[i][j] * std::abs(AfterL[i][j] - Line[i][j]); &#125; if (Type[i][j] == 4) &#123; AfterO[i][j] = 1; mcf::C += 1ll * ChangeO[i][j] * std::abs(AfterO[i][j] - Ori[i][j]); &#125; &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (Type[i][j] == 1 || Type[i][j] == 3) &#123; if (AfterC[i][j] &lt; Column[i][j]) &#123; mcf::addEdge(mcf::S, IdC[i][j], Column[i][j] - AfterC[i][j], -ChangeC[i][j]); &#125; mcf::addEdge(mcf::S, IdC[i][j], INF, ChangeC[i][j]); &#125; if (Type[i][j] == 2 || Type[i][j] == 3) &#123; if (AfterL[i][j] &lt; Line[i][j]) &#123; mcf::addEdge(IdL[i][j], mcf::T, Line[i][j] - AfterL[i][j], -ChangeL[i][j]); &#125; mcf::addEdge(IdL[i][j], mcf::T, INF, ChangeL[i][j]); &#125; if (Type[i][j] == 4) &#123; if (AfterO[i][j] &lt; Ori[i][j]) &#123; mcf::addEdge(Up[i][j], Left[i][j], Ori[i][j] - AfterO[i][j], -ChangeO[i][j]); &#125; mcf::addEdge(Up[i][j], Left[i][j], INF, ChangeO[i][j]); &#125; &#125; &#125; mcf::mcf(); if (!mcf::check()) &#123; printf("-1\n"); &#125; else &#123; printf("%lld\n", mcf::C); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」BZOJ 2465 小球]]></title>
    <url>%2FBZOJ-2465%2F</url>
    <content type="text"><![CDATA[n 个球放进 m 个瓶子里，每个球有分数 A_i ，每个瓶子有容积 B_i ，且瓶中球的分数都不能超过 C_i ，求可放入球的最大数量以及在该条件下的最大分数和。 1\leq n\leq 200,0\leq m\leq 200,1 \leq p\leq 10^6, 0\leq c\leq 200, 1\leq q\leq 10^6 分析 费用流 第一看看就是个很裸的费用流，用最大流来保证取的球最多，最小费用来保证总分数最大（分数取反作费用）。 用 (u,v,f,c) 表示一条由 u 到 v 流量限制为 f 费用为 c 的边，那么本题建图方法如下： (S, i, 1, 0) ,i \in[1, n] (i,T,B_i,0),i\in[n+1,n+m] (i,j,1,-A_i),A_i\leq C_j 复杂度 O(NMF) ， F 为最大流的值。 贪心 其实此题更明显的做法应该是贪心。 将球按照分数排序，由于它们空间相同（都是 1 ），因此将分数大的球放到分数限制大的瓶子里一定会放置最多的球。 复杂度 O(M\log{M}+N\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt; #define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("ball.in", "r", stdin); freopen("ball.out", "w", stdout);&#125; const int MAXN = 400 + 5;const int INF = INT_MAX;int A[MAXN], B[MAXN], C[MAXN]; struct Edge &#123; int v, c, f, nxt;&#125; E[MAXN * MAXN];int N, M, S, T;int cost, flow;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq; void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125; bool spfa() &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125; void buildGraph() &#123; S = N + M + 1, T = N + M + 2; memset(H, -1, sizeof H); cntE = -1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); &#125; rep(i, 1, M + 1) &#123; addEdge(i + N, T, B[i], 0); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; if (::A[i] &lt;= ::C[j]) &#123; addEdge(i, N + j, INF, -::A[i]); &#125; &#125; &#125;&#125; void mcmf() &#123; buildGraph(); cost = flow = 0; while (spfa()) &#123; int f = INF; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125;&#125; int main() &#123; //open(); while (true) &#123; scanf("%d%d", &amp;N, &amp;M); if (N + M == 0) &#123; break; &#125; rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); &#125; rep(i, 1, M + 1) &#123; scanf("%d%d", &amp;B[i], &amp;C[i]); &#125; mcmf(); printf("%d %d\n", flow, -cost); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」BZOJ 2466 树]]></title>
    <url>%2FBZOJ-2466%2F</url>
    <content type="text"><![CDATA[树 T 上的每个节点都一盏熄灭的灯，已知按下某个节点的开关会改变它与它相连的所有节点的灯的状态，求将所有灯变亮的最少操作次数。 1\leq n\leq 100 分析 发现每个操作都是独立的，也就是说至多每个开关按一次。 再根据按开关会改变所有与它相连的灯的状态，想到一定是自叶子到根进行操作，那么就树形DP。 DP中注意当前节点无论亮与否，它的子树一定是全亮的（因为操作是一直往根上走的）。 对于一个节点有四种状态：按开关且亮、按开关且灭、不按开关且亮、不按开关且灭。 可以发现第二种没有意义（不按都亮了那还按它干什么）。 考虑剩余三种的状态如何从儿子转移。 其中“按开关且亮”的状态最简单，因为按了它之后要保证它的子树的灯全是亮的，因此从“它的所有儿子都灭且没按”的状态转移而来。 “不按开关且灭”的状态从“当前亮+当前儿子按且亮”或“当前灭+当前儿子不按且亮”转移。 “不按开关且亮”的状态从“当前亮+当前儿子不按且亮”或“当前灭+当前儿子按且亮”转移。 复杂度 O(n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("tree.in", "r", stdin); freopen("tree.out", "w", stdout);&#125;const int MAXN = 100 + 5;const int INF = 0x03ffffff;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int F[MAXN][2][2];void dfs(int x, int fa) &#123; int a = 0, b = INF, c = 0; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; int aa = a, bb = b; dfs(v, x); a = std::min(aa + F[v][0][1], bb + F[v][1][1]); b = std::min(aa + F[v][1][1], bb + F[v][0][1]); c += F[v][0][0]; &#125; &#125; F[x][0][0] = a; F[x][0][1] = b; F[x][1][1] = c + 1;&#125;int main() &#123; //open(); int u, v; while (true) &#123; scanf("%d", &amp;N); if (N == 0) &#123; break; &#125; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(1, 0); printf("%d\n", std::min(F[1][0][1], F[1][1][1])); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「中山市选 2009」 BZOJ 2464 小明的游戏]]></title>
    <url>%2FBZOJ-2464%2F</url>
    <content type="text"><![CDATA[在一个 N\times M 的01网格图中，每次可以向相邻的格子移动，移动到同一类型的格子的花费为 0 ，否则为 1 ，求起点到终点的最小花费。 1\leq n, m\leq 500 分析 由于边权非 0 即 1 ，因此SPFA的复杂度上限就是点数，即 N^2 。 复杂度 O(T\times N^2) ，其中 T 为数据组数。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;void open() &#123; freopen("game.in", "r", stdin); freopen("game.out", "w", stdout);&#125;const int MAXN = 500 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;char Str[MAXN][MAXN];int sx, sy, ex, ey;bool check(int x, int y) &#123; return x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; N &amp;&amp; y &lt; M;&#125;int spfa() &#123; static int Dis[MAXN][MAXN]; static bool Inq[MAXN][MAXN]; std::queue&lt;int, std::deque&lt;int&gt; &gt; Qx, Qy; memset(Inq, 0, sizeof Inq); memset(Dis, 0x3f, sizeof Dis); Qx.push(sx); Qy.push(sy); Dis[sx][sy] = 0; while (!Qx.empty()) &#123; int x = Qx.front(), y = Qy.front(); Qx.pop(), Qy.pop(); Inq[x][y] = 0; rep(i, 0, 4) &#123; int nx = x + Dicx[i];; int ny = y + Dicy[i]; if (!check(nx, ny)) &#123; continue ; &#125; int dis = Dis[x][y] + (Str[x][y] != Str[nx][ny]); if (Dis[nx][ny] &gt; dis) &#123; Dis[nx][ny] = dis; if (!Inq[nx][ny]) &#123; Inq[nx][ny] = 1; Qx.push(nx); Qy.push(ny); &#125; &#125; &#125; &#125; return Dis[ex][ey];&#125;int main() &#123; //open(); while (true) &#123; scanf("%d%d", &amp;N, &amp;M); if (N + M == 0) &#123; break; &#125; rep(i, 0, N) &#123; scanf("%s", Str[i]); &#125; scanf("%d%d%d%d", &amp;sx, &amp;sy, &amp;ex, &amp;ey); printf("%d\n", spfa()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HEOI 2013」BZOJ 3166 Alo]]></title>
    <url>%2FBZOJ-3166%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A[1 \cdots N] ，定义 F[i,j] 为 A[i \cdots j] 的次大值与区间内另一个数异或的最大值。求 A 所有子区间的 F 最大值。 1\leq N\leq 50000, A_i\leq 10^9 分析 将问题反过来看，其实就是找到每一个数对应的区间，使得它在区间中是次大值，且区间长度最大。 记 L[i],R[i] 为 A[i] 左右第一个比它大的数， LL[i],RR[i] 为 A[i] 左右第二个大的数，那么区间为 [LL[i]+1,R[i]-1] 和 [L[i]+1,RR[i]-1] 。 可以通过在ST表上二分的方法求出 LL[i],RR[i] ，复杂度 O(N\log{N}) 。 最后用可持久化Trie求每个区间与 A[i] 的最大异或值，答案为这些值取max，这一步操作的复杂度为 O(N\log{max(A_i)}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153#include &lt;bits/stdc++.h&gt;const int MAXN = 50000 + 5;const int MAXM = 40;struct Trie &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], cntT;int insert(int pre, int x) &#123; int rt = ++cntT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++cntT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int N, A[MAXN];int L[MAXN], R[MAXN];int Stk[MAXN], top;int LL[MAXN], RR[MAXN];int bSearch(int x) &#123; int l = 1, r = top; int ans = 0; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (A[Stk[m]] &gt; A[x]) &#123; ans = Stk[m]; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; return ans;&#125;int F[MAXN][MAXM];void buildST(int n) &#123; for (int i = 1; i &lt;= n; ++i) &#123; F[i][0] = A[i]; &#125; int k = log2(n); for (int j = 1; j &lt;= k; ++j) &#123; for (int i = 1; i + (1 &lt;&lt; j) - 1 &lt;= n; ++i) &#123; if (F[i][j - 1] &gt; F[i + (1 &lt;&lt; (j - 1))][j - 1]) &#123; F[i][j] = F[i][j - 1]; &#125; else &#123; F[i][j] = F[i + (1 &lt;&lt; (j - 1))][j - 1]; &#125; &#125; &#125;&#125;int queryMax(int l, int r) &#123; int k = log2(r - l + 1); return std::max(F[l][k], F[r - (1 &lt;&lt; k) + 1][k]);&#125;int getL(int i) &#123; int p = L[i], x = A[i]; int l = 1, r = p - 1, ans = 1; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (queryMax(m, p - 1) &gt; x) &#123; ans = m; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; return ans;&#125;int getR(int i) &#123; int p = R[i], x = A[i]; int l = p + 1, r = N + 1, ans = N + 1; while (l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if (queryMax(p + 1, m) &gt; x) &#123; ans = m; r = m - 1; &#125; else &#123; l = m + 1; &#125; &#125; return ans;&#125;int main() &#123; scanf("%d", &amp;N); Rt[1] = insert(Rt[0], 0); ++N; for (int i = 2; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); Rt[i] = insert(Rt[i - 1], A[i]); &#125; A[1] = A[N + 1] = INT_MAX; Stk[top = 1] = 1; for (int i = 2; i &lt;= N; ++i) &#123; while (A[Stk[top]] &lt;= A[i]) &#123; --top; &#125; L[i] = Stk[top]; Stk[++top] = i; &#125; Stk[top = 1] = N + 1; for (int i = N; i &gt;= 2; --i) &#123; while (A[Stk[top]] &lt;= A[i]) &#123; --top; &#125; R[i] = Stk[top]; Stk[++top] = i; &#125; buildST(N + 1); for (int i = 2; i &lt;= N; ++i) &#123; LL[i] = getL(i); RR[i] = getR(i); &#125; int ans = 0; for (int i = 2; i &lt;= N; ++i) &#123; if (L[i] == 1 &amp;&amp; R[i] == N + 1) &#123; continue; &#125; ans = std::max(ans, query(Rt[LL[i]], Rt[R[i] - 1], A[i])); ans = std::max(ans, query(Rt[L[i]], Rt[RR[i] - 1], A[i])); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>ST表</tag>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「USACO2018 OPEN」BZOJ 5281 Talent Show]]></title>
    <url>%2FBZOJ-5281%2F</url>
    <content type="text"><![CDATA[N 个点各有权值 W_i 和 T_i ，在其中选择任意多个点，在满足 \sum{W_i} \geq A 的条件下求 \sum{T_i}/\sum{W_i} 的最大值。 1\leq N\leq 250,1\leq W\leq 1000,1\leq W_i\leq 10^6,1\leq T_i\leq 10^3 分析 套路二分答案 x ，然后背包求在 \sum{W_i}\geq A 的情况下判定 \sum{T_i-W_i\times x}\geq 0 是否成立。 由于答案是 \times 1000 取整，为了避免浮点数运算，可以直接将 T_i 放大 1000 倍。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243#include &lt;bits/stdc++.h&gt;const int MAXN = 250 + 5;const int MAXM = 1000 + 5;int N, M;int A[MAXN], B[MAXN];long long F[MAXM];bool check(int a) &#123; memset(F, 0xc2, sizeof F); long long tmp = F[0]; F[0] = 0; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = M; j &gt;= 0; --j) &#123; if (F[j] != tmp) &#123; int v = std::min(M, j + A[i]); F[v] = std::max(F[v], F[j] - (long long)A[i] * a + B[i]); &#125; &#125; &#125; return F[M] &gt;= 0;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d", &amp;A[i], &amp;B[i]); B[i] *= 1000; &#125; int l = 0, r = 2e8, ans = 0; while (l &lt;= r) &#123; int m = (l + r) / 2; if (check(m)) &#123; ans = m; l = m + 1; &#125; else &#123; r = m - 1; &#125; &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>背包</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI 2016」BZOJ 4753 最佳团体]]></title>
    <url>%2FBZOJ-4753%2F</url>
    <content type="text"><![CDATA[每个点有一个父亲，它能被选择当且仅当它父亲被选择，0号节点默认被选择。每个点有收益 X[i] ，代价 Y[i] 。选择恰好 K 个点（不算0号），使得其对应的 \sum{X[i]}/\sum{Y[i]} 最大。 N\leq 2500 分析 通过分数规划，二分答案来避免除法。 选择关系是一棵树，被选择的点处于一个联通分量。树形背包，转移时父亲被强制选择。 复杂度 O(NK\log{X[i]}) 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;bits/stdc++.h&gt;const int MAXN = 2500 + 5;const double eps = 1e-4;int N, K;int A[MAXN], B[MAXN], P[MAXN];std::vector&lt;int&gt; G[MAXN];double F[MAXN][MAXN], Tmp[MAXN];int Sz[MAXN];void dfs(int x, double m) &#123; F[x][0] = 0; F[x][1] = B[x] - A[x] * m; Sz[x] = 1; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; dfs(v, m); memset(Tmp, 0xc2, sizeof Tmp); Tmp[0] = 0; for (int j = 1; j &lt;= Sz[x]; ++j) &#123; for (int k = 0; k &lt;= Sz[v] &amp;&amp; j + k &lt;= K; ++k) &#123; Tmp[j + k] = std::max(Tmp[j + k], F[x][j] + F[v][k]); &#125; &#125; Sz[x] += Sz[v]; memcpy(F[x], Tmp, sizeof Tmp); &#125;&#125;bool check(double m) &#123; memset(F, 0xc2, sizeof F); dfs(0, m); return F[0][K] &gt;= 0;&#125;int main() &#123; scanf("%d%d", &amp;K, &amp;N); ++K; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d%d%d", &amp;A[i], &amp;B[i], &amp;P[i]); G[P[i]].push_back(i); &#125; double l = 0, r = 1e4, ans; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; l = ans = m; &#125; else &#123; r = m; &#125; &#125; printf("%.3lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
        <tag>分数规划</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2014」BZOJ 3597 方伯伯运椰子]]></title>
    <url>%2FBZOJ-3597%2F</url>
    <content type="text"><![CDATA[在有向无环图 G 中，每条边的流量与容量相等。现可以修改每条边的容量，使得新的边依然满足流量与容量相等，且总流量不变。已知扩展/缩小每条边容量的单位花费，以及流量通过该边的单位花费。记原总花费 X ，现在总花费 Y （包括修改容量和流量的花费），修改了 K 条边的容量，则收益为 w=(X-Y)/K ，求 w 的最大值。 N\leq 5000 分析 这道题的核心在于理解“总流量不变且每条边跑满”，可以用网络流的模型理解。 所谓扩容即增广，花费为扩容费用+流量费用；压缩即退流，花费为压缩费用-流量费用。 假设 a\geq(X-Y)/K ，则 Y-X+a\cdot K\geq 0 。 而 Y-X 就是增广和退流的费用之和， K 可以分摊到每条边上，即让每条边的权值增加 K 。 a 显然是可以二分的，那么若新图出现负环，则说明 a 的值不够大，直到得到解为止。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include &lt;bits/stdc++.h&gt;const int MAXN = 5000 + 5;const double INF = 1e9;const double eps = 1e-4;int N, M;struct Edge &#123; int v; double w; int nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;double Dis[MAXN];bool Vis[MAXN];bool dfs_spfa(int x, double xx) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; double dis = Dis[x] + E[i].w + xx; if (Dis[v] &gt; dis) &#123; Dis[v] = dis; if (Vis[v] || dfs_spfa(v, xx)) &#123; return true; &#125; &#125; &#125; return Vis[x] = 0;&#125;bool check(double a) &#123; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = INF; &#125; Dis[N - 1] = 0; memset(Vis, 0, sizeof Vis); for (int i = 1; i &lt;= N; ++i) &#123; if (dfs_spfa(i, a)) &#123; return true; &#125; &#125; return false;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); N += 2; int a, b, c, d, u, v; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d%d%d%d", &amp;u, &amp;v, &amp;a, &amp;b, &amp;c, &amp;d); if (u == N - 1) &#123; continue; &#125; if (c) &#123; addEdge(v, u, a - d); &#125; addEdge(u, v, b + d); &#125; double l = 0, r = INF, ans; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; ans = l = m; &#125; else &#123; r = m; &#125; &#125; printf("%.2lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2009」BZOJ 1486 最小圈]]></title>
    <url>%2FBZOJ-1486%2F</url>
    <content type="text"><![CDATA[在有向图 G 中，定义环 a 的权值 w_a=\sum{W[i]}/num ，其中 W[i] 为 a 上边的权值， num 为 a 上的节点数。求图中 w 的最小值。 n\leq 1000,m\leq 5000,|W[i]|\leq 5000 分析 设 w_a=x ，则 \sum{W[i]}/num \geq x ，即 \sum{W[i]}\geq num\cdot x 。 由于环上点数和边数相同，因此可以改写为 \sum(W[i]-x)\geq 0 。 x 显然可以二分，于是就变成了判断图中是否存在负环的问题，用SPFA可解。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include &lt;bits/stdc++.h&gt;const int MAXN = 3000 + 5;const int MAXM = 10000 + 5;const double INF = 1e7;const double eps = 1e-9;int N, M;struct Edge &#123; int v; double w; int nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;double Dis[MAXN];bool Vis[MAXN], flag;bool dfs_spfa(int x, double xx) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; double dis = Dis[x] + E[i].w - xx; if (Dis[v] &gt; dis) &#123; Dis[v] = dis; if (Vis[v] || dfs_spfa(v, xx)) &#123; return true; &#125; &#125; &#125; return Vis[x] = 0;&#125;bool check(double a) &#123; flag = 0; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = INF; &#125; memset(Vis, 0, sizeof Vis); for (int i = 1; i &lt;= N; ++i) &#123; if (dfs_spfa(i, a)) &#123; return true; &#125; &#125; return false;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); int u, v; double w; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%lf", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; double l = -INF, r = INF, ans = 0; while (r - l &gt; eps) &#123; double m = (l + r) / 2; if (check(m)) &#123; r = m; ans = m; &#125; else &#123; l = m; &#125; &#125; printf("%.8lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分答案</tag>
        <tag>SPFA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SDOI 2017」BZOJ 4819 新生舞会]]></title>
    <url>%2FBZOJ-4819%2F</url>
    <content type="text"><![CDATA[双方各有 N 个人进行两两配对， i 和 j 配对会获得 x=A[i][j] 的收益和 y=B[i][j] 的代价。最小化 \sum{x}/\sum{y} 。 N\leq 100,x,y\leq 10^4 分析 若 \sum{x}/\sum{y}\geq a ，则 \sum{x}-a\cdot\sum{y} \geq 0 ，再转化变成 \sum{x-a\cdot y}\geq 0 。 a 显然是可以二分的，然后建图跑最小费用最大流，边权为 a\cdot B[i][j]-A[i][j] ，判定合法即总费用是否小于0。 有更快的Dinkelbach算法，考虑用迭代的方式求 a 。初始化 a=0 ，得到一组合法解后，更新 a 为当前情况下的 \sum{x}/\sum{y} ，直到求得答案。此方法实测比二分快了10倍。 费用流的过程本质就是一个二分图最大权匹配，因此跑KM也是可行的，复杂度上界 O(\log{(10^6\cdot x)}\cdot n^3) ，实则远远跑不满。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include &lt;bits/stdc++.h&gt;const int MAXN = 200 + 5;const int MAXM = MAXN * MAXN;const double eps = 1e-7;const double INF = 1e7;int N, A[MAXN][MAXN], B[MAXN][MAXN];struct Edge &#123; int v; double w; int f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, double w, int f) &#123; E[++cntE] = (Edge) &#123;v, w, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -w, 0, H[v]&#125;; H[v] = cntE;&#125;int S, T;void buildGraph(double x) &#123; memset(H, 0, sizeof H); cntE = 1; S = 0; T = N * 2 + 1; for (int i = 1; i &lt;= N; ++i) &#123; addEdge(S, i, 0, 1); addEdge(i + N, T, 0, 1); for (int j = 1; j &lt;= N; ++j) &#123; addEdge(i, j + N, x * B[i][j] - A[i][j], 1); &#125; &#125;&#125;int Pe[MAXN], Pv[MAXN];double Dis[MAXN];bool Vis[MAXN];struct cmp &#123; inline bool operator () (const int &amp;x, const int &amp;y) const &#123; return Dis[x] &gt; Dis[y]; &#125;&#125;;std::priority_queue&lt;int, std::vector&lt;int&gt;, cmp&gt; pq;int spfa(int s, int t) &#123; for (int i = s; i &lt;= t; ++i) &#123; Dis[i] = INF; &#125; memset(Vis, 0, sizeof Vis); Dis[s] = 0, pq.push(s); while (!pq.empty()) &#123; int x = pq.top(); Vis[x] = 0, pq.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Pe[v] = i, Pv[v] = x; if (!Vis[v]) &#123; Vis[v] = 1; pq.push(v); &#125; &#125; &#125; &#125; return Dis[t] &lt; INF;&#125;double cost;int flow;double ai, bi;void mcmf(int s, int t) &#123; cost = flow = 0; while (spfa(s, t)) &#123; int f = INF; for (int i = t; i != s; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[t]; flow += f; for (int i = t; i != s; i = Pv[i]) &#123; E[Pe[i]].f -= f, E[Pe[i] ^ 1].f += f; &#125; &#125; ai = bi = 0; for (int x = 1; x &lt;= N; ++x) &#123; for (int i = H[x]; i; i = E[i].nxt) &#123; if (E[i].f == 0 &amp;&amp; E[i].v &gt; N) &#123; ai += A[x][E[i].v - N]; bi += B[x][E[i].v - N]; break; &#125; &#125; &#125;&#125;bool check(double lim) &#123; buildGraph(lim); mcmf(S, T); return flow == N &amp;&amp; cost &lt; -eps;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; scanf("%d", &amp;A[i][j]); &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= N; ++j) &#123; scanf("%d", &amp;B[i][j]); &#125; &#125; double ans = 0; while (check(ans)) &#123; ans = ai / bi; &#125; printf("%.6lf\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>分数规划</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 2741【FOTILE模拟赛】L]]></title>
    <url>%2FBZOJ-2741%2F</url>
    <content type="text"><![CDATA[给定长为 N 的序列 A[1 \cdots N] ， M 个询问。查询 [l,r] 的最大异或和子区间，强制在线。 N\leq 12000,M\leq 6000 分析 可持久化Trie+分块。 记 s[i] 为第 i 块的左端点， f(i,j) 表示 [s[i],r-1] 中的某个点为左端点，右端点为 r 的最大异或子区间。 记 g(i,j) 为 [s[i],r] 中的最大异或子区间，则 g(i,j)=max(g(i,j-1),f(i,j)) 。 查询时跨越的完整块直接查 g 数组，剩下的部分在可持久化Trie中查询，取最大值。 复杂度 O(n\sqrt{n}\log{max(A_i)}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include &lt;bits/stdc++.h&gt;const int MAXN = 12000 + 5;const int MAXM = 40;const int MAXK = 130;int N, M, A[MAXN];struct Trie &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], nT = 1;int insert(int pre, int x) &#123; int rt = ++nT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++nT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int len, n, Belong[MAXN], G[MAXK][MAXN];int queryLR(int l, int r) &#123; int ans = 0, t = r; for (int i = 1; i &lt;= n; ++i) &#123; if ((i - 1) * len + 1 &gt;= l &amp;&amp; (i - 1) * len + 1 &lt;= r) &#123; ans = G[i][r]; t = (i - 1) * len + 1; break; &#125; &#125; for (int i = l; i &lt;= t; ++i) &#123; ans = std::max(ans, query(Rt[l - 1], Rt[r], A[i])); &#125; return ans;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); len = sqrt(N), n = N / len + (N % len &gt; 0); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); A[i] ^= A[i - 1]; Rt[i] = insert(Rt[i - 1], A[i]); &#125; for (int i = 1; i &lt;= n; ++i) &#123; for (int j = (i - 1) * len + 1; j &lt;= N; ++j) &#123; G[i][j] = std::max(G[i][j - 1], query(Rt[(i - 1) * len], Rt[j - 1], A[j])); if (i == 1) &#123; G[i][j] = std::max(G[i][j], A[j]); &#125; &#125; &#125; int ans = 0, l, r; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d", &amp;l, &amp;r); ans %= N; l = (l + ans) % N + 1; r = (r + ans) % N + 1; if (l &gt; r) &#123; std::swap(l, r); &#125; printf("%d\n", ans = queryLR(l - 1, r)); &#125; return 0;&#125;]]></content>
      <tags>
        <tag>分块</tag>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3261 最大异或和]]></title>
    <url>%2FBZOJ-3261%2F</url>
    <content type="text"><![CDATA[开始给定一个长为 N 的序列 A[1\cdots N] ，有 M 个操作。在 A 的末尾插入 x ；或者给定 x,l,r ，查询 max(x\oplus A[p]\oplus\cdots\oplus A[N]) ，其中 p\in[l,r] ， N 为当前序列长度。 N\leq 300000,A[i]\leq 10^7 分析 维护前缀异或和，令 S[i]=A[1]\oplus\dots\oplus A[i] ，问题转化为查询 S[N]\oplus S[p-1]\oplus x 的最大值，其中 S[N] 和 x 都是已知的。 由于是区间问题，可以用可持久化Trie树维护。对于每个新插入的数在01Trie树新建一条链，并将链上所有点的状态+1。通过权值相减来判断区间内是否存在该点，剩下的就是常规01Tire树求异或最大值的操作。 需要注意的一个细节，由于存在插入操作，因此序列中的元素个数最大可能为 N+M ，需要开两倍空间。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include &lt;bits/stdc++.h&gt;const int MAXN = 600000 + 5;const int MAXM = 50;struct Node &#123; int sz; int ch[2];&#125; T[MAXN * MAXM];int Rt[MAXN], cntT;int N, M;int insert(int pre, int x) &#123; int rt = ++cntT, tmp = rt; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; T[rt].sz = T[pre].sz + 1; T[rt].ch[c] = ++cntT; T[rt].ch[c ^ 1] = T[pre].ch[c ^ 1]; rt = T[rt].ch[c]; pre = T[pre].ch[c]; &#125; T[rt].sz = T[pre].sz + 1; return tmp;&#125;int query(int u, int v, int x) &#123; int ans = 0; for (int i = 31; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (T[T[v].ch[c ^ 1]].sz - T[T[u].ch[c ^ 1]].sz) &#123; ans += (1 &lt;&lt; i); v = T[v].ch[c ^ 1], u = T[u].ch[c ^ 1]; &#125; else &#123; v = T[v].ch[c], u = T[u].ch[c]; &#125; &#125; return ans;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); int cur = 0, x, l, r; char opt[10]; ++N; Rt[1] = insert(Rt[0], 0); for (int i = 2; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); cur ^= x; Rt[i] = insert(Rt[i - 1], cur); &#125; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%s", opt); if (opt[0] == 'A') &#123; scanf("%d", &amp;x); cur ^= x; ++N; Rt[N] = insert(Rt[N - 1], cur); &#125; else &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;x); printf("%d\n", query(Rt[l - 1], Rt[r], x ^ cur)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>可持久化Trie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 4260 Codechef REBXOR]]></title>
    <url>%2FBZOJ-4260%2F</url>
    <content type="text"><![CDATA[对于长为 N 的序列 A[1\cdots N] ，求两个不相交区间的异或和之和的最大值。 2\leq N\leq 4\times 10^5,A[i]\leq 10^9 分析 根据异或的性质， 令 S[i]=A[1]\oplus A[2]\cdots \oplus A[i] ，则 A[l]\oplus\cdots \oplus A[r]=S[r]\oplus S[l-1] 。 令 L[i] 为 A[1\cdots i] 中的最大区间异或和， R[i] 为 A[i\cdots N] 中的最大区间异或和，如此 L[i],R[i+1] 一定不相交，答案为 max(L[i]+R[i+1]) 。 从前往后在01字典树中查询当前前缀异或和 cur 能异或得到的最大值，并将 cur 插入，则 L[i]=\max(L[i-1],query(cur)) 。 再从后往前插入后缀异或和，则 R[i]=\max(R[i+1],query(cur)) 。 复杂度 O(n\log{n}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include &lt;bits/stdc++.h&gt;const int MAXN = 4e5 + 5;const int MAXM = 40;struct Node &#123; int sz, num; int ch[2];&#125; T[MAXN * MAXM];int cntT;int N, A[MAXN];int L[MAXN], R[MAXN];void insert(int rt, int x) &#123; for (int i = 32; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (!T[rt].ch[c]) &#123; T[rt].ch[c] = ++cntT; T[cntT].ch[0] = T[cntT].ch[1] = 0; T[cntT].sz = 0; &#125; ++T[rt].sz; rt = T[rt].ch[c]; &#125; T[rt].num = x;&#125;int query(int rt, int x) &#123; for (int i = 32; i &gt;= 0; --i) &#123; int c = (x &gt;&gt; i) &amp; 1; if (!T[rt].ch[c ^ 1]) &#123; rt = T[rt].ch[c]; &#125; else &#123; rt = T[rt].ch[c ^ 1]; &#125; &#125; return x ^ T[rt].num;&#125;void init() &#123; cntT = 1; T[1].ch[0] = T[1].ch[1] = 0; T[1].sz = T[1].num = 0;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); &#125; int lst = 0; insert(1, 0); for (int i = 1; i &lt;= N; ++i) &#123; lst ^= A[i]; L[i] = std::max(L[i - 1], query(1, lst)); insert(1, lst); &#125; init(); lst = 0; insert(1, 0); for (int i = N; i &gt;= 1; --i) &#123; lst ^= A[i]; R[i] = std::max(R[i + 1], query(1, lst)); insert(1, lst); &#125; int ans = 0; for (int i = 1; i &lt; N; ++i) &#123; ans = std::max(ans, L[i] + R[i + 1]); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>字典树</tag>
        <tag>前缀和</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI 2011」BZOJ 2330 糖果]]></title>
    <url>%2FBZOJ-2330%2F</url>
    <content type="text"><![CDATA[有 N 个数 TeX parse error: Undefined control sequence \[，要求满足 M 个条件。条件形如： A[i] \leq A[j] ， A[i] &lt; A[j] ， A[i] = A[j] 。如果可以满足所有条件，求 \sum{A_i} 的最小值，否则输出 -1。 N,M\leq 100000 分析 将条件依次转化为 A[j] - A[i] \geq 0 ， A[j] - A[i]\geq 1 ， A[j]-A[i]\geq 0 \&amp; A[i]-A[j]\geq 0 。 根据 u - v\geq w 建有向边 (v, u, w) 的方式建图，求最长路。 如果单纯通过spfa进队 N 次来判断无解可能会导致超时，发现无解本质为出现正环。因此可以采用Tarjan求联通分量，判断各分量内是否存在非零边的方法做到 O(N+M) 判断无解。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include &lt;bits/stdc++.h&gt;const int MAXN = 100000 + 5;int N, K;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;std::queue&lt;int&gt; Que;long long Dis[MAXN];bool Inq[MAXN];long long spfa() &#123; for (int i = 1; i &lt;= N; ++i) &#123; Dis[i] = 1; Que.push(i); &#125; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &lt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; long long res = 0; for (int i = 1; i &lt;= N; ++i) &#123; res += Dis[i]; &#125; return res;&#125;int Dfn[MAXN], Low[MAXN], cntD;int Stk[MAXN], top;int Belong[MAXN], cntB;void dfs(int x) &#123; Dfn[x] = Low[x] = ++cntD; Stk[++top] = x; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (!Dfn[v]) &#123; dfs(v); Low[x] = std::min(Low[x], Low[v]); &#125; else if (!Belong[v]) &#123; Low[x] = std::min(Low[x], Dfn[v]); &#125; &#125; if (Dfn[x] == Low[x]) &#123; Belong[x] = ++cntB; do &#123; Belong[Stk[top]] = cntB; &#125; while (Stk[top--] != x); &#125;&#125;int main() &#123; int opt, x, y; scanf("%d%d", &amp;N, &amp;K); for (int i = 1; i &lt;= K; ++i) &#123; scanf("%d%d%d", &amp;opt, &amp;x, &amp;y); if (opt == 1) &#123; addEdge(x, y, 0); addEdge(y, x, 0); &#125; else if (opt == 2) &#123; addEdge(x, y, 1); &#125; else if (opt == 3) &#123; addEdge(y, x, 0); &#125; else if (opt == 4) &#123; addEdge(y, x, 1); &#125; else if (opt == 5) &#123; addEdge(x, y, 0); &#125; if (opt % 2 == 0 &amp;&amp; x == y) &#123; puts("-1"); return 0; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; if (!Dfn[i]) &#123; dfs(i); &#125; &#125; bool flag = 0; for (int i = 1; i &lt;= cntE; ++i) &#123; if (E[i].w &amp;&amp; Belong[E[i].u] == Belong[E[i].v]) &#123; flag = 1; break; &#125; &#125; if (flag) &#123; puts("-1"); &#125; else &#123; printf("%lld\n", spfa()); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「HNOI 2005」BZOJ 1202 狡猾的商人]]></title>
    <url>%2FBZOJ-1202%2F</url>
    <content type="text"><![CDATA[给定 M 组关于 l, r, x 的等式，意为 \sum\limits_{i=l}^{r}{A_i}=x ，判断是否可以构造出 A[1\cdots N] 满足这些等式。 N\leq 100,M\leq 1000 分析 将等式写成前缀和的形式，用 Sum[i] 表示 \sum\limits_{j=1}^{i}{A_j} ，等式化为 Sum[r] - Sum[l-1] = x 。 可以将等式变形成两个不等式， Sum[r] - Sum[l-1] \geq x 和 Sum[l - 1] - Sum[r] \geq -x 。 那么原问题就转化为差分约束系统求解模型。连接边 (l - 1, r, x) 和 (r, l - 1, -x) ，SPFA判断是否存在负环，复杂度 O(NM) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;bits/stdc++.h&gt;const int MAXN = 100 + 5;const int MAXM = 1000 + 5;int N, M;struct Edge &#123;int v, w, nxt;&#125; E[MAXM * 3];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123;E[++cntE] = (Edge) &#123;v, w, H[u]&#125;;H[u] = cntE;&#125;std::queue&lt;int&gt; Que;int Dis[MAXN], Cnt[MAXN], Inq[MAXN];bool Vis[MAXN];int n;bool spfa() &#123;while (!Que.empty()) &#123; Que.pop();&#125;memset(Dis, 0x3f, sizeof Dis);memset(Inq, 0, sizeof Inq);memset(Cnt, 0, sizeof Cnt);Que.push(N + 1);Dis[N + 1] = 0;while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; Cnt[v] = Cnt[x] + 1; if (Cnt[v] &gt; n) &#123; return false; &#125; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125;&#125;return true;&#125;void init() &#123;cntE = 0;memset(H, 0, sizeof H);n = 0;memset(Vis, 0, sizeof Vis);&#125;int main() &#123;int T, u, v, w;scanf("%d", &amp;T);while (T--) &#123; scanf("%d%d", &amp;N, &amp;M); init(); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); if (!Vis[u - 1]) &#123; Vis[u - 1] = 1; ++n; &#125; if (!Vis[v]) &#123; Vis[v] = 1; ++n; &#125; addEdge(u - 1, v, -w); addEdge(v, u - 1, w); &#125; for (int i = 1; i &lt;= N; ++i) &#123; addEdge(N + 1, i, 0); &#125; if (spfa()) &#123; puts("true"); &#125; else &#123; puts("false"); &#125;&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>差分约束</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「2010 集训队测验」BZOJ 2127 文理分科]]></title>
    <url>%2FBZOJ-2127%2F</url>
    <content type="text"><![CDATA[在 n\times m 的矩阵中，每个格子可以选择 0/1 ，分别获得收益 A_{i,j},B_{i,j} 。如果上下两个格子选择相同，则额外获得收益 C_{i,j} 与 D_{i,j} （都选 0 或都选 1 ），如果左右两个格子选择相同，则额外获得收益 E_{i,j} 与 F_{i,j} 。求总收益的最大值。 n,m\leq 100,A,B,C,D,E,F_{i,j}\leq 5000 分析 这是集训队论文《浅谈一类最小割问题》中的例题，也是网络流建模之二元关系的一道典型题目。 根据相关建图模型，对于每个点 x ，分别与 S,T 连边，割去 (S,x) 表示选择文科，割去 (x,T) 表示选择理科。 由于只能求最小割，因此可以先累计所有收益再减去最小割得到最大值。 由于每个点与相邻的点之间的选择会影响结果，因此 x 与相邻的点连边。 对于任意两个相邻点 x,y ，子图有边 (S,x),(S,y),(x,y),(y,x),(x,T),(y,T) 。 割去 (S,x),(S,y) 表示都选文，割去 (x,T),(y,T) 表示都选理，割去 (S,x),(x,y),(y,T) 表示 x 选文， y 选理，剩下一种情况同理第三种。 假设 x,y 选文的收益分别为 a_x,a_y ，选理的收益为 b_x,b_y ，都选文/理的收益为 c,d ，则边权应满足： (S,x)+(S,y)=b_x+b_y+d\ (x,T)+(y,T)=a_x+a_y+c\ (S,x)+(x,y)+(y,T)=a_y+b_x+c+d\ (S,y)+(y,x)+(x,T)=a_x+b_y+c+d\ 得到一组解： (x,y)=(y,x)=\frac{c+d}{2}\ (S,x)=a_x+\frac{c}{2}\ (S,y)=a_y+\frac{c}{2}\ (x,T)=b_x+\frac{d}{2}\ (y,T)=b_y+\frac{d}{2}\ 由此建图求最大流即可。 Tips：将两点间所有边的边权整合成一条边会大大提高运行速度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155/* * @Author: Skqliao * @Date: 2019-02-10 20:45:11 * @LastEditTime: 2019-02-10 21:37:48 * @Source: 2010 集训队测试题 * @Problem: 2127: happiness * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2127 */#include &lt;bits/stdc++.h&gt;namespace mxf &#123;const int MAXN = 100 * 100 + 5;const int MAXM = MAXN * 4;struct Edge &#123;int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int S, T;int H[MAXN], cntE;void addEdge(int u, int v, int f, bool directed = 1) &#123;E[++cntE] = (Edge)&#123;v, f, H[u]&#125;;H[u] = cntE;if (directed) f = 0;E[++cntE] = (Edge)&#123;u, f, H[v]&#125;;H[v] = cntE;&#125;int Dis[MAXN], Cur[MAXN];bool bfs() &#123;static std::queue&lt;int&gt; Que;while (!Que.empty()) Que.pop();memset(Dis, -1, sizeof Dis);memcpy(Cur, H, sizeof H);Dis[S] = 0;Que.push(S);while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125;&#125;return false;&#125;int dfs(int x, int maxf) &#123;if (x == T) return maxf;int left = maxf;for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; if (!left) return maxf; &#125; else Dis[v] = -1; &#125;&#125;return maxf - left;&#125;int dinic() &#123;int flow = 0;while (bfs()) &#123; flow += dfs(S, INT_MAX);&#125;return flow;&#125;void init(int tot) &#123;cntE = -1;memset(H, -1, sizeof H);S = tot + 1, T = tot + 2;&#125;&#125; // namespace mxfusing mxf::addEdge;using mxf::S;using mxf::T;const int MAXN = 100 + 5;int N, M;int Id[MAXN][MAXN];int A[MAXN][MAXN], B[MAXN][MAXN], C[MAXN][MAXN], D[MAXN][MAXN], E[MAXN][MAXN], F[MAXN][MAXN];int ans;int main() &#123;scanf("%d%d", &amp;N, &amp;M);mxf::init(N * M);for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; Id[i][j] = (i - 1) * M + j; &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); ans += A[i][j]; A[i][j] *= 2; &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;B[i][j]); ans += B[i][j]; B[i][j] *= 2; &#125;&#125;for (int i = 1; i &lt; N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;C[i][j]); ans += C[i][j]; A[i][j] += C[i][j]; A[i + 1][j] += C[i][j]; &#125;&#125;for (int i = 1; i &lt; N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;D[i][j]); ans += D[i][j]; B[i][j] += D[i][j]; B[i + 1][j] += D[i][j]; addEdge(Id[i][j], Id[i + 1][j], C[i][j] + D[i][j], 0); &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt; M; ++j) &#123; scanf("%d", &amp;E[i][j]); ans += E[i][j]; A[i][j] += E[i][j]; A[i][j + 1] += E[i][j]; &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt; M; ++j) &#123; scanf("%d", &amp;F[i][j]); ans += F[i][j]; B[i][j] += F[i][j]; B[i][j + 1] += F[i][j]; addEdge(Id[i][j], Id[i][j + 1], E[i][j] + F[i][j], 0); &#125;&#125;for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; addEdge(S, Id[i][j], A[i][j]); addEdge(Id[i][j], T, B[i][j]); &#125;&#125;printf("%d\n", ans - mxf::dinic() / 2);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二元关系</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[斯坦纳树学习笔记（Steiner Tree）]]></title>
    <url>%2FSteiner-Tree%2F</url>
    <content type="text"><![CDATA[总论 斯坦纳树可以理解为一棵使得指定点集合联通的树，而最小斯坦纳树在联通的基础上要求边权和最小。（是不是有点类似于最小生成树？） 通常通过状压DP+最短路松弛的方式来解决此类问题。 过程 具体过程不妨从一个简单问题出发。 无向图 G 上有 n 个点，选择若干个点使得它们包含点集合 S=\{a_1,a_2,\cdots,a_m\} ，且 S 联通。选择点 i 的代价为 A_i ，求最小代价。 设 F[i][S] 表示集合 S 的点被选择且当前选择节点 i 的最小花费，则 F[i][S] 有两种方式转移，一是枚举子集合并，二是集合内部松弛。 第一种： F[i][S]=\min\{F[i][T]+F[i][S-T]-A[i]\} ，其中 T 是 S 的一个子集。 可以通过 for (int x = S; x; x = (x - 1) &amp; S) 的方式枚举 S 的所有子集 x ，复杂度 O(3^m) 。 由于外层还要枚举当前集合状态 S 和当前点 i ，因此总复杂度为 n\cdot 6^m 。 第二种： F[i][S]=\min\{F[j][S]+A[i]\} ，其中点 i,j 联通。 在状压DP后，可以将所有更新过的点push进队列跑SPFA或其他最短路算法完成松弛。 总复杂度 O(n\cdot 6^m+2^m\cdot f) ， f 为最短路复杂度。 用途 最小斯坦树可以得到给定点集合所有子集的最小花费，可能会作为预处理使用。 例题 【最小斯坦纳树】[WC 2008] BZOJ 2595 游览计划 【最小斯坦纳树+状压DP】[JLOI 2015] BZOJ 4006 管道连接]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最小割树学习笔记（Gomory-Hu Tree）]]></title>
    <url>%2FGomory-Hu-Tree%2F</url>
    <content type="text"><![CDATA[总论 在无向图中，最小割树等价于所有点对间的最小割。 对于任意点对 (s,t) ，它们之间的最小割为最小割树上 (s,t) 路径间的最小边权值。 过程 可以通过求 n-1 次最大流构建出具有 n 个点的无向图 G 的最小割树。 具体步骤如下： 任意选择两点 s,t 求两点间最大流 f 得到最小割隔开的两个集合 最小割树上连接 (s,t) ，边权为 f 将图恢复成最初形态（还原边权） 递归到这两个新集合中，重复操作1，直到集合中只有 1 个点为止 由于每次集合总数增加 1 ，因此一共做 n-1 次以上流程。 Q &amp; A Q1：如何求最小割隔开的两个集合？ A1：由于最小割上的边一定将流量限制流满了，因此从 s 开始，通过未流满流量限制的边遍历到的且在当前集合中的点为与 s 联通的点集合，剩下的点与 t 联通的点集合。 Q2：用什么算法求最大流啊？会被卡吗？ A2：根据相关法律法规，ISAP和Dinic受到保护，应该不会被卡，EK死就死了。当然你愿意写HLPP也不拦着。 用途 可以得到任意点对间的最小割，通常用于预处理。 例题 luogu P4897 【模板】最小割树（Gomory-Hu Tree） 【最小割树】[CQOI 2016] BZOJ 4519 不同的最小割 【最小割树】[ZJOI 2011] BZOJ 2229 最小割]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「ZJOI 2011」BZOJ 2229 最小割]]></title>
    <url>%2FBZOJ-2229%2F</url>
    <content type="text"><![CDATA[T 组数据， Q 个询问。在无向图 G 中，求有多少个点对 (s,t) 使得它们之间的最小割不超过 x 。 T\leq 10,n\leq 150,m\leq 3000,q\leq 30 分析 建完最小割树后，问题转化为求树上有多少个点对路径上的边权最小值不超过 x 。 枚举点对再用倍增判断，复杂度 O(n^2\log{n}) 。 也存在线性做法，对于边权不超过 x 的边，统计路径通过该边新增的点对数量，复杂度 O(n) 。 然而由于复杂度瓶颈在建立最小割树上，因此两种方法实际效率相仿。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189/* * @Author: Skqliao * @Date: 2019-02-02 22:57:06 * @LastEditTime: 2019-02-03 11:53:06 * @Source: ZJOI 2011 * @Problem: 2229: [Zjoi2011]最小割 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2229 */#include &lt;bits/stdc++.h&gt;const int MAXN = 150 + 5;const int MAXM = 3000 + 5;namespace GH_Tree &#123;struct Edge &#123; int v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge)&#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, w, H[v]&#125;; H[v] = cntE;&#125;int Fa[MAXN], Sz[MAXN];int dfs(int x) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; Fa[v] = x; Sz[x] += dfs(v); &#125; &#125; return Sz[x];&#125;int ans;int dfs(int x, int sz, int mx) &#123; int tot = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; if (E[i].w &lt;= mx) &#123; tot += Sz[v]; ans += Sz[v] * (sz - Sz[v]); sz -= Sz[v]; dfs(v, Sz[v], mx); &#125; else &#123; int tmp = dfs(v, sz, mx); sz -= tmp; tot += tmp; &#125; &#125; &#125; return tot;&#125;void init() &#123; cntE = 0; memset(H, 0, sizeof H);&#125;int query(int x) &#123; ans = 0; dfs(1, Sz[1], x); return ans;&#125;namespace Init &#123; struct Edge &#123; int v, f, cap, nxt; &#125; E[MAXM &lt;&lt; 1]; int H[MAXN], cntE; int Idx[MAXN], Tmp[MAXN]; int S, T; int Dis[MAXN], Cur[MAXN]; int Col[MAXN]; void init(int n) &#123; cntE = -1; memset(H, -1, sizeof H); for (int i = 1; i &lt;= n; ++i) &#123; Idx[i] = i; &#125; &#125; void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, f, f, H[v]&#125;; H[v] = cntE; &#125; bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false; &#125; int dfs(int x, int maxf) &#123; if (x == T || !maxf) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left; &#125; int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow; &#125; void dfs(int x) &#123; Col[x] = 1; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; !Col[v]) dfs(v); &#125; &#125; void build(int l, int r) &#123; if (l == r) return; S = Idx[l], T = Idx[r]; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; int f = dinic(); GH_Tree::addEdge(S, T, f); memset(Col, 0, sizeof Col); dfs(S); int L = l, R = r; for (int i = l; i &lt;= r; ++i) &#123; if (Col[Idx[i]]) Tmp[L++] = Idx[i]; else Tmp[R--] = Idx[i]; &#125; memcpy(Idx, Tmp, sizeof Tmp); build(l, R); build(L, r); &#125; void solve(int n, int m) &#123; init(n); int u, v, f; for (int i = 1; i &lt;= m; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;f); addEdge(u, v, f); &#125; build(1, n); &#125;&#125; // namespace Init&#125; // namespace GH_Treeint T, N, M, Q;int main() &#123; int x; scanf("%d", &amp;T); while (T--) &#123; scanf("%d%d", &amp;N, &amp;M); GH_Tree::init(); GH_Tree::Init::solve(N, M); GH_Tree::dfs(1); scanf("%d", &amp;Q); while (Q--) &#123; scanf("%d", &amp;x); printf("%d\n", GH_Tree::query(x)); &#125; puts(""); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2016」BZOJ 4519 不同的最小割]]></title>
    <url>%2FBZOJ-4519%2F</url>
    <content type="text"><![CDATA[题目大意 在无向图 G 中，对于任意点对 (i,j) 有最小割 cut(i,j) ，求有多少个数值不同的最小割。 N\leq 850,M\leq 8500 分析 最小割树模板题，求出最小割树后将所有边unique得到答案。 复杂度 O(n\times f) ， f 为最大流复杂度。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128/* * @Author: Skqliao * @Date: 2019-02-02 22:26:52 * @LastEditTime: 2019-02-02 22:54:36 * @Source: CQOI 2016 * @Problem: 4519: [Cqoi2016]不同的最小割 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=4519 */#include &lt;bits/stdc++.h&gt;const int MAXN = 850 + 5;const int MAXM = 8500 + 5;namespace GH_Tree &#123;struct Edge &#123; int v, f, cap, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Idx[MAXN], Tmp[MAXN];int S, T;int Dis[MAXN], Cur[MAXN];int Col[MAXN];void init(int n) &#123; cntE = -1; memset(H, -1, sizeof H); for (int i = 1; i &lt;= n; ++i) &#123; Idx[i] = i; &#125;&#125;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge)&#123;v, f, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, f, f, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; while (!Que.empty()) Que.pop(); memcpy(Cur, H, sizeof H); memset(Dis, -1, sizeof Dis); Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == -1 &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + 1; Que.push(v); if (v == T) return true; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) return maxf; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (flow) &#123; left -= flow; E[i].f -= flow; E[i ^ 1].f += flow; &#125; else Dis[v] = -1; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (bfs()) flow += dfs(S, INT_MAX); return flow;&#125;void dfs(int x) &#123; Col[x] = 1; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; !Col[v]) dfs(v); &#125;&#125;std::vector&lt;int&gt; V;void build(int l, int r) &#123; if (l == r) return; S = Idx[l], T = Idx[r]; for (int i = 0; i &lt;= cntE; ++i) &#123; E[i].f = E[i].cap; &#125; int f = dinic(); V.push_back(f); memset(Col, 0, sizeof Col); dfs(S); int L = l, R = r; for (int i = l; i &lt;= r; ++i) &#123; if (Col[Idx[i]]) Tmp[L++] = Idx[i]; else Tmp[R--] = Idx[i]; &#125; memcpy(Idx, Tmp, sizeof Tmp); build(l, R); build(L, r);&#125;int solve(int n, int m) &#123; init(n); int u, v, f; for (int i = 1; i &lt;= m; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;f); addEdge(u, v, f); &#125; build(1, n); std::sort(V.begin(), V.end()); V.erase(std::unique(V.begin(), V.end()), V.end()); return V.size();&#125;&#125; // namespace GH_Treeint N, M;int main() &#123; scanf("%d%d", &amp;N, &amp;M); printf("%d\n", GH_Tree::solve(N, M)); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JLOI 2015」BZOJ 4006 管道连接]]></title>
    <url>%2FBZOJ-4006%2F</url>
    <content type="text"><![CDATA[无向图中有 n 个 m 条边，边有权值 W_i ，有 p 个点有编号 A_i 。现要求选择一些边，使得（有编号且）编号相同的点联通，求最小权值和。 n\leq 1000,m\leq 3000,p\leq 10 分析 如果要求所有有编号的点联通，那么这就是一个最小斯坦纳树的模板题。 现在只要求编号相同的点联通，我们可以分别考虑每个编号的点联通的费用，然后组合出最终的答案。 因此依然先求这 p 个点的最小斯坦纳树。然后再用状压DP合并费用，注意合并时（ s=a+b ）， a,b 必须分别完整包含若干个编号的节点，否则不合题意。 复杂度 O(3^p\cdot n) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113/* * @Author: Skqliao * @Date: 2019-01-27 13:24:25 * @LastEditTime: 2019-01-27 14:52:32 * @Source: JLOI 2015 * @Problem: 4006: [JLOI2015]管道连接 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=4006 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1000 + 2;const int MAXM = 30000 + 5;const int MAXS = 1 &lt;&lt; 12;const int INF = 0x3f3f3f3f;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, P;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;v, u, w, H[v]&#125;; H[v] = cntE;&#125;int F[MAXN][MAXS];std::queue&lt;int&gt; Que;bool Vis[MAXN];void spfa(int s) &#123; while (!Que.empty()) &#123; int x = Que.front(); Vis[x] = 0; Que.pop(); for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (F[x][s] + E[i].w &lt; F[v][s]) &#123; F[v][s] = F[x][s] + E[i].w; if (!Vis[v]) &#123; Que.push(v); Vis[v] = 1; &#125; &#125; &#125; &#125;&#125;int Dp[MAXS];int St[MAXN];std::vector&lt;int&gt; V[MAXN];bool check(int s) &#123; for (int i = 1; i &lt;= 10; ++i) &#123; if (!St[i]) &#123; continue; &#125; if ((St[i] &amp; s) != 0 &amp;&amp; (St[i] &amp; s) != St[i]) &#123; return false; &#125; &#125; return true;&#125;int main() &#123; scanf("%d%d%d", &amp;N, &amp;M, &amp;P); int u, v, w; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); &#125; memset(F, 0x3f, sizeof F); int p = 0; for (int i = 1; i &lt;= P; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); V[u].push_back(p); F[v][1 &lt;&lt; p++] = 0; &#125; for (int i = 1; i &lt;= 10; ++i) &#123; for (size_t j = 0; j &lt; V[i].size(); ++j) &#123; St[i] |= 1 &lt;&lt; V[i][j]; &#125; &#125; int S = (1 &lt;&lt; p) - 1; memset(Dp, 0x3f, sizeof Dp); for (int s = 0; s &lt;= S; ++s) &#123; for (int i = 1; i &lt;= N; ++i) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; F[i][s] = std::min(F[i][s], F[i][x] + F[i][s - x]); &#125; if (F[i][s] &lt; INF) &#123; Que.push(i); &#125; &#125; spfa(s); for (int i = 1; i &lt;= N; ++i) &#123; Dp[s] = std::min(Dp[s], F[i][s]); &#125; &#125; for (int s = 0; s &lt;= S; ++s) &#123; if (check(s)) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; if (check(x)) &#123; Dp[s] = std::min(Dp[s], Dp[x] + Dp[s - x]); &#125; &#125; &#125; &#125; printf("%d\n", Dp[S]); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「WC 2008」BZOJ 2595 游览计划]]></title>
    <url>%2FBZOJ-2595%2F</url>
    <content type="text"><![CDATA[在 n\times m 的网格图上有 k 个景点，图上选择任意一个点有费用 a_{i,j} 。求选择若干个点使得这 k​ 个景点联通，最小化花费并输出方案。 n,m,k\leq 10 分析 这是一道最小斯坦纳树（minimum Steiner tree）的模板题。 其实看到这么小的数据范围也不难想到状压DP。用 F[i][j][S] 表示当前选择点 (i,j) ，图的联通状态为 S 的最小花费。 转移方程有两个，一是状态间转移： F[i][j][S] = \min\limits_{T\in S}\{F[i][j][T]+F[i][j][S-T]-A[i][j]\} ；二是在同一个状态内松弛： F[i][j][S] = \min\{F[i'][j'][S]+A[i][j]\} ，其中 (i',j') 与 (i,j) 联通且属于 S 。 前者可以通过枚举子集的方法转移，复杂度 O(6^k\cdot n\cdot m) ，后者用spfa或其他最短路算法松弛，复杂度 O(2^k\cdot f) ， f 为最短路复杂度。总复杂度 O(6^k\cdot nm+2^k\cdot f) 。 在转移/松弛时记录前一个点的状态，最后从终点一遍dfs得到所有被选择的点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115 /* * @Author: Skqliao * @Date: 2019-01-27 10:29:05 * @LastEditTime: 2019-01-27 12:39:07 * @Source: WC2008 * @Problem: 2595: [Wc2008]游览计划 * @Url: https://lydsy.com/JudgeOnline/problem.php?id=2595 */#include &lt;bits/stdc++.h&gt;const int MAXN = 10 + 2;const int MAXS = 1 &lt;&lt; MAXN;const int INF = 0x3f3f3f3f;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M;int A[MAXN][MAXN];int F[MAXN][MAXN][MAXS];struct Node &#123; int x, y, s;&#125; Pre[MAXN][MAXN][MAXS];std::queue&lt;Node&gt; Que;bool Vis[MAXN][MAXN];void spfa(int s) &#123; while (!Que.empty()) &#123; Node a = Que.front(); Vis[a.x][a.y] = 0; Que.pop(); for (int i = 0; i &lt; 4; ++i) &#123; int x = a.x + Dicx[i]; int y = a.y + Dicy[i]; if (x &lt; 1 || y &lt; 1 || x &gt; N || y &gt; M) &#123; continue; &#125; if (F[a.x][a.y][s] + A[x][y] &lt; F[x][y][s]) &#123; F[x][y][s] = F[a.x][a.y][s] + A[x][y]; Pre[x][y][s] = (Node)&#123;a.x, a.y, s&#125;; if (!Vis[x][y]) &#123; Que.push((Node) &#123;x, y, 0&#125;); Vis[x][y] = 1; &#125; &#125; &#125; &#125;&#125;void dfs(int x, int y, int s) &#123; Vis[x][y] = 1; Node &amp;a = Pre[x][y][s]; if (a.x == 0 &amp;&amp; a.y == 0) &#123; return ; &#125; dfs(a.x, a.y, a.s); if (x == a.x &amp;&amp; y == a.y) &#123; dfs(a.x, a.y, s - a.s); &#125;&#125;int main() &#123; int cnt = 0; scanf("%d%d", &amp;N, &amp;M); memset(F, 0x3f, sizeof F); for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; scanf("%d", &amp;A[i][j]); if (!A[i][j]) &#123; F[i][j][1 &lt;&lt; cnt++] = 0; &#125; &#125; &#125; int S = (1 &lt;&lt; cnt) - 1; for (int s = 0; s &lt;= S; ++s) &#123; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; for (int x = s; x; x = (x - 1) &amp; s) &#123; if (F[i][j][x] + F[i][j][s - x] - A[i][j] &lt; F[i][j][s]) &#123; F[i][j][s] = F[i][j][x] + F[i][j][s - x] - A[i][j]; Pre[i][j][s] = (Node) &#123;i, j, x&#125;; &#125; &#125; if (F[i][j][s] &lt; INF) &#123; Que.push((Node) &#123;i, j, 0&#125;); Vis[i][j] = 1; &#125; &#125; &#125; spfa(s); &#125; bool flag = 0; for (int i = 1; i &lt;= N &amp;&amp; !flag; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (A[i][j] == 0) &#123; printf("%d\n", F[i][j][S]); dfs(i, j, S); flag = 1; break; &#125; &#125; &#125; for (int i = 1; i &lt;= N; ++i) &#123; for (int j = 1; j &lt;= M; ++j) &#123; if (!A[i][j]) &#123; putchar('x'); &#125; else if (Vis[i][j]) &#123; putchar('o'); &#125; else &#123; putchar('_'); &#125; &#125; puts(""); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>斯坦纳树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[51nod 1601 完全图的最小生成树计数]]></title>
    <url>%2F51nod-1601%2F</url>
    <content type="text"><![CDATA[有 n 个点，每个点有点权 a_i ，点 u,v 之间的边边权为 a_u \oplus a_v 。求该完全图的最小生成树的权值与方案数。 n\leq 10 ^ 5, 0\leq a_i &lt; 2 ^ {30} 分析 从边权为点xor得到，想到可以对点权建立Trie树。 每次合并两子树mst的权值，并加入两子树中节点可以xor得到的最小值作为连接这两棵子树的最小边，自下而上得到整棵Trie的mst的值。 根据Cayley公式，如果存在有 a(a &gt; 2) 个相同权值的点时，生成树的方案数为 a^ {a - 2} 。每次合并两子树时对方案数做乘法原理即可得到最终的方案数。 复杂度 O(n\log{a_i}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-01-26 22:59:31 * @LastEditTime: 2019-01-26 23:41:49 * @Source: 51nod * @Problem: 1601 完全图的最小生成树计数 * @Url: https://www.51nod.com/Challenge/Problem.html#!#problemId=1601 */#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;const int MOD = 1e9 + 7;int N;int Ch[MAXN &lt;&lt; 5][2], Num[MAXN &lt;&lt; 5], cnt = 1;long long sum, num = 1;void insert(int val) &#123; int x = 1; for (int i = 29; i &gt;= 0; --i) &#123; int d = (val &gt;&gt; i) &amp; 1; if (!Ch[x][d]) &#123; Ch[x][d] = ++cnt; &#125; x = Ch[x][d]; &#125; ++Num[x];&#125;long long poww(long long x, long long t) &#123; long long ans = 1; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; ans = ans * x % MOD; &#125; x = x * x % MOD; &#125; return ans;&#125;long long min, tmp;void getMin(int x, int y, int d, int v = 0) &#123; if (d &lt; 0) &#123; if (v &lt; min) &#123; min = v; tmp = (long long)Num[x] * Num[y] % MOD; &#125; else if (v == min) &#123; tmp = (tmp + (long long)Num[x] * Num[y]) % MOD; &#125; return; &#125; if (Ch[x][0] &amp;&amp; Ch[y][0]) &#123; getMin(Ch[x][0], Ch[y][0], d - 1, v); if (Ch[x][1] &amp;&amp; Ch[y][1]) &#123; getMin(Ch[x][1], Ch[y][1], d - 1, v); &#125; &#125; else if (Ch[x][1] &amp;&amp; Ch[y][1]) &#123; getMin(Ch[x][1], Ch[y][1], d - 1, v); &#125; else &#123; if (Ch[x][0]) &#123; getMin(Ch[x][0], Ch[y][1], d - 1, v + (1 &lt;&lt; d)); &#125; if (Ch[x][1]) &#123; getMin(Ch[x][1], Ch[y][0], d - 1, v + (1 &lt;&lt; d)); &#125; &#125;&#125;void cal(int x, int d) &#123; if (d &lt; 0) &#123; if (Num[x] &gt; 1) &#123; num = num * poww(Num[x], Num[x] - 2); &#125; return; &#125; if (!Ch[x][0]) &#123; cal(Ch[x][1], d - 1); &#125; else if (!Ch[x][1]) &#123; cal(Ch[x][0], d - 1); &#125; else &#123; cal(Ch[x][0], d - 1); cal(Ch[x][1], d - 1); min = 1 &lt;&lt; 30; tmp = 0; getMin(Ch[x][0], Ch[x][1], d - 1, 0); sum = sum + (1 &lt;&lt; d) + min; num = (num * tmp) % MOD; &#125;&#125;int main() &#123; scanf("%d", &amp;N); int x; for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;x); insert(x); &#125; cal(1, 29); printf("%lld\n%lld\n", sum, num); return 0;&#125;]]></content>
      <categories>
        <category>51nod</category>
      </categories>
      <tags>
        <tag>Trie</tag>
        <tag>Pruefer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JZOJ 5060 公路建设]]></title>
    <url>%2FJZOJ-5060%2F</url>
    <content type="text"><![CDATA[有 n 个点， m 条边， q 个询问。每次给定一个区间 [l_i,r_i] ，求这些边构成的图在保证联通块个数最小的情况下所需最小花费。 n\leq 100,m\leq 100000,q\leq 15000 分析 将题意翻译一下就是求区间最小生成树的权值。 假设已知 [l,m] 和 [m+1,r] 的最小生成树，那么 [l,r] 的mst显然是由这两棵mst中的边构成的。 具体地说，在线段树中，通过Kruskal保存子区间mst上的所有边，然后用归并排序合并两个子区间的边，并再做kruskal求出父亲节点的mst上的所有边。查询时按照同样方法合并答案。 复杂度 O(n\alpha(n)(m\log{m}+q\log{m})) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102/* * @Author: Skqliao * @Date: 2019-01-26 16:40:30 * @LastEditTime: 2019-01-26 17:12:13 * @Source: GDOI2017第二轮模拟day1 * @Problem: JZOJ 5060 公路建设 * @Url: https://jzoj.net/senior/#main/show/5060 */#include &lt;bits/stdc++.h&gt;void open() &#123; freopen("highway.in", "r", stdin); freopen("highway.out", "w", stdout);&#125;const int MAXN = 100 + 5;const int MAXM = 100000 + 5;int N, M, Q;struct Node &#123; int u, v, w; bool operator &lt; (const Node &amp;x) const &#123; return w &lt; x.w; &#125;&#125; A[MAXM], T[MAXM &lt;&lt; 2][MAXN], Tmp[MAXN &lt;&lt; 1];#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Len[MAXM &lt;&lt; 2];int Anc[MAXN];int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if (x != y) &#123; Anc[y] = x; return true; &#125; return false;&#125;void pushUp(int x, int l, int r) &#123; int len = std::merge(T[l], T[l] + Len[l], T[r], T[r] + Len[r], Tmp) - Tmp; for (int i = 1; i &lt;= N; ++i) &#123; Anc[i] = i; &#125; Len[x] = 0; for (int i = 0; i &lt; len; ++i) &#123; if (merge(Tmp[i].u, Tmp[i].v)) &#123; T[x][Len[x]++] = Tmp[i]; &#125; &#125;&#125;void build(int rt, int l, int r) &#123; if (l == r) &#123; Len[rt] = 1; T[rt][0] = A[l]; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt, rt &lt;&lt; 1, rt &lt;&lt; 1 | 1);&#125;void query(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; pushUp(0, rt, 0); return ; &#125; int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; query(LT, a, b); &#125; if (m &lt; b) &#123; query(RT, a, b); &#125;&#125;int main() &#123; open(); scanf("%d%d%d", &amp;N, &amp;M, &amp;Q); for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;A[i].u, &amp;A[i].v, &amp;A[i].w); &#125; build(1, 1, M); int l, r; while (Q--) &#123; long long sum = 0; scanf("%d%d", &amp;l, &amp;r); Len[0] = 0; query(1, 1, M, l, r); for (int i = 0; i &lt; Len[0]; ++i) &#123; sum += T[0][i].w; &#125; printf("%lld\n", sum); &#125; return 0;&#125;]]></content>
      <categories>
        <category>JZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[01Trie 学习笔记]]></title>
    <url>%2F01-Trie%2F</url>
    <content type="text"><![CDATA[原理 01Trie用于解决求异或最大值的问题，其本质就是按位贪心。 别于一般的字典树，01Trie的每个节点只有两个儿子， 0 和 1 。插入 x 时，将其转化成二进制，从最高位开始插入，根据当前二进制位的值跳到节点对应的儿子上，于此同时将经过的所有节点权值+1，表示有一个数可以按照该方式分解。 查询当前 x 与Trie树异或的最大值时，根据贪心的思想，尽可能跳到与 x 当前二进制位的值不同的儿子上，如此从根节点到叶子节点经过的所有点组合出的值就是与 x 异或可以达到最大值的数，复杂度 O(\log{x}) 。 空间复杂度 O(n\log{max(A_i)}) ，时间复杂度 O(\log{max(A_i)}) 。 合并两棵Trie树的方法与线段树合并类似，可持久化Trie树的方法与可持久化线段树类似。 例题 01Trie BZOJ 4260 Codechef REBXOR 题目大意：对于长为 N 的序列 A[1\cdots N] ，求两个不相交区间的异或和之和的最大值。 题解：前后缀和+01Trie。从前往后插入前缀异或和，得到 [1,i] 的最大值，从后往前同理做一遍得到 [i,N] 的最大值，答案为 max([1,i]+[i+1,N]) 。 Codeforces 706D Vasiliy's Multiset HDU 4825 Xor Sum HDU 5536 Chip Factory POJ 3764 The xor-longest Path 可持久化01Trie BZOJ 3261 最大异或和 题目大意：开始给定一个长为 N 的序列 A[1\cdots N] ，有 M 个操作。在 A 的末尾插入 x ；或者给定 x,l,r ，查询 max(x\oplus A[p]\oplus\cdots\oplus A[N]) ，其中 p\in[l,r] ， N 为当前序列长度 。 题解：可持久化01Trie树模板题，后缀转为前缀查询。 HDU 4757 Tree 题目大意：树上每个点有权值 A[1\cdots N] ， M 个询问。给定 (u,v,w) ，查询 u,v 路径上的点与 w 异或的最大值。 题解：可持久化01Trie+LCA。dfs时儿子继承父亲做可持久化，查询时求两点到LCA区间的异或最大值。 BZOJ 2741【FOTILE模拟赛】L 题目大意：给定长为 N 的序列 A[1\cdots N] ， M 个询问。查询 [l,r] 的最大异或和子区间，强制在线。 题解：可持久化Trie+分块。记 s[i] 为第 i 块的左端点， f(i,j) 表示 [s[i],r-1] 中的某个点为左端点，右端点为 r 的最大异或子区间。记 g(i,j) 为 [s[i],r] 中的最大异或子区间。查询时跨越的完整块直接查 g 数组，剩下的部分在可持久化Trie中查询，取最大值。 启发式合并01Trie BNDSOJ 985 2018-12-2模拟测验（二） 题目大意：有 N 个点， M 个操作。每次连接两个点，或查询联通的两个点的异或值的最大值。 题解：并查集+启发式合并01Trie。并查集维护连通性，合并两联通块时启发式合并两个Trie树，同时记录最大值。]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>01字典树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[树上启发式合并 学习笔记【填坑中】]]></title>
    <url>%2Fdsu%20on%20tree%2F</url>
    <content type="text"><![CDATA[传说中的"dsu on tree"，其本质就是将树轻重链剖分后，暴力维护轻儿子信息，继承重儿子信息，用于快速计算不带修改的子树查询问题。 原理 感谢NormalGod的讲解。 为什么通过这种方式维护子树信息的复杂度只有 O(n\log{n}) 呐？这要从树链剖分的性质讲起。 由于重儿子的信息被它父亲直接继承，因此一条重链上的所有点，在向上的过程中只会在链顶处计算一次贡献（因为链顶是它父亲的轻儿子，会被暴力计算贡献）。 在叶子节点到根节点上的所有点中，显然叶子节点被统计的次数最多，而到根的路径上有最多 \log{n} 条重链，即在 \log{n} 个重链链头处会被统计贡献。 因此一个叶子节点最多被统计 \log{n} 次，所有节点被统计次数之和的上限为 O(n\log{n}) ，复杂度得证。 模板 1234567891011121314151617181920212223242526272829303132// vector存边：G[MAXN]// 先轻重链剖分，Son[x]表示x的重儿子int skip;void add(int x, int fa, int val) &#123; // 根据题目要求统计 for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != skip) &#123; // 统计子树贡献，不统计那个重儿子（即skip） add(v, x, val); &#125; &#125;&#125;void dfs(int x, int fa, bool keep) &#123; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != Son[x]) &#123; // 暴力统计轻儿子 dfs(v, x, 0); &#125; &#125; if (Son[x]) &#123; dfs(Son[x], x, 1); // 继承重儿子 skip = Son[x]; &#125; add(x, fa, 1); // 计算子树贡献 // 此时获得x子树的统计结果 skip = 0; if (!keep) &#123; add(x, fa, -1); // 清除贡献 &#125;&#125; 例题 Codeforces 600 E - Lomsat gelral 根为 1 的树中，每个点有颜色。定义颜色 a 占领 x 的子树当且仅当不存在颜色 b ，使得 b 在子树中出现的次数超过 a 。令 A[x] 为所有占领 x 的子树的颜色编号之和，求所有点的 A[i] 。 n\leq 10^5 分析 用sum统计当前子树中颜色出现最多的次数mx下的颜色编号之和。如果mx被更新，清零sum，相等则累加，直接套用模板即可。注意当所有点颜色不同时，会爆int。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include &lt;bits/stdc++.h&gt;const int MAXN = 1e5 + 5;int N, Col[MAXN];std::vector&lt;int&gt; G[MAXN];int Sz[MAXN], Son[MAXN];void getSon(int x, int fa) &#123; Sz[x] = 1; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa) &#123; getSon(v, x); Sz[x] += Sz[v]; if (Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;long long Ans[MAXN], sum;int Cnt[MAXN], mx;int skip;void add(int x, int fa, int val) &#123; Cnt[Col[x]] += val; if (val &gt; 0 &amp;&amp; Cnt[Col[x]] &gt;= mx) &#123; if (Cnt[Col[x]] &gt; mx) &#123; mx = Cnt[Col[x]]; sum = 0; &#125; if (Cnt[Col[x]] == mx) &#123; sum += Col[x]; &#125; &#125; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != skip) &#123; add(v, x, val); &#125; &#125;&#125;void dfs(int x, int fa, bool keep) &#123; for (size_t i = 0; i &lt; G[x].size(); ++i) &#123; int &amp;v = G[x][i]; if (v != fa &amp;&amp; v != Son[x]) &#123; dfs(v, x, 0); &#125; &#125; if (Son[x]) &#123; dfs(Son[x], x, 1); skip = Son[x]; &#125; add(x, fa, 1); Ans[x] = sum; skip = 0; if (!keep) &#123; add(x, fa, -1); mx = sum = 0; &#125;&#125;int main() &#123; scanf("%d", &amp;N); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;Col[i]); &#125; int u, v; for (int i = 1; i &lt; N; ++i) &#123; scanf("%d%d", &amp;u, &amp;v); G[u].push_back(v); G[v].push_back(u); &#125; getSon(1, 0); dfs(1, 0, 1); for (int i = 1; i &lt;= N; ++i) &#123; printf("%lld ", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>树链剖分</tag>
        <tag>树上启发式合并</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[可持久化线段树 学习笔记]]></title>
    <url>%2Fpresident%20segment%20Tree%2F</url>
    <content type="text"><![CDATA[主席树支持静态查询区间第 k 大，可以用来维护可持久化数组。单次修改/查询的复杂度为 O(\log{n}) ，空间 O(m\log{n}) （存疑），一般开 20n 至 60n 的空间（视实际情况而定）。 原理 其实现方法为前缀和+权值线段树。 由于是权值线段树，因此需要对全局变量（初始值插入值）进行离散化。离散化后的权值线段树为了减少空间占用采取动态开点的方式存储数据。 所谓前缀和，相当于对 n 个区间 A[1,i] 分别建一棵权值线段树 T_i ，那么 A[l,r] 中在 [a,b] 范围内的数个数即 T_r 与 T_{l-1} 在 [a,b] 内个数之差 。同理查询第 k 大时也可以通过在两棵线段树上对应区间做差的方法判定查询的数的位置。 当然实际情况肯定不会真的建 n 棵线段树，因为树与树之间存在大量交集。相邻两棵树 T_{i-1},T_i 的差别只在于新加入的 A_i ，因此构造 T_i 时只需在继承 T_{i-1} 的基础之上插入 A_i 。 具体操作 初始化时先离散化得到新区间 [1,N] ，然后按序将 A_i 离散化后的值插入树中，继承 T_{i-1} 在对应节点处的子树大小并加一，即插入一条链。 查询的时候跟权值线段树的操作类似，根据 T_r 和 T_{l-1} 的当前左子树大小之差与 k 的关系来判断向左还是向右，直到叶子节点停止。 复杂度分析 离散化复杂度 O(n\log{n}) ，初始化 O(n\log{n}) ，查询 O(\log{n}) 。 静态区间第 k 大 序列 A[1\cdots n] ， m 个查询 A[l,r] 中第 k 小数。 n,m\leq 2\times 10^5,|A_i|\leq 10^9 。 题目链接 P3834 【模板】可持久化线段树 1（主席树） 分析 模板题，离散化后建主席树。复杂度 O((N+M)\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071#include &lt;bits/stdc++.h&gt;const int MAXN = 2e5 + 5;const int LOG = 40;int N, M, n;int A[MAXN], B[MAXN];int Rt[MAXN], cntP;int L[MAXN * LOG], R[MAXN * LOG], Sum[MAXN * LOG];int getX(int x) &#123; return std::lower_bound(B + 1, B + n + 1, x) - B;&#125;int build(int l, int r) &#123; int rt = ++cntP; int m = (l + r) &gt;&gt; 1; if (l &lt; r) &#123; L[rt] = build(l, m); R[rt] = build(m + 1, r); &#125; return rt;&#125;int update(int pre, int l, int r, int x) &#123; int rt = ++cntP; L[rt] = L[pre], R[rt] = R[pre]; Sum[rt] = Sum[pre] + 1; if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (x &lt;= m) &#123; L[rt] = update(L[pre], l, m, x); &#125; else &#123; R[rt] = update(R[pre], m + 1, r, x); &#125; &#125; return rt;&#125;int query(int u, int v, int l, int r, int k) &#123; if (l == r) &#123; return l; &#125; int x = Sum[L[v]] - Sum[L[u]]; int m = (l + r) &gt;&gt; 1; if (x &gt;= k) &#123; return query(L[u], L[v], l, m, k); &#125; else &#123; return query(R[u], R[v], m + 1, r, k - x); &#125;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); for (int i = 1; i &lt;= N; ++i) &#123; scanf("%d", &amp;A[i]); B[i] = A[i]; &#125; std::sort(B + 1, B + N + 1); n = std::unique(B + 1, B + N + 1) - B - 1; Rt[0] = build(1, n); for (int i = 1; i &lt;= N; ++i) &#123; Rt[i] = update(Rt[i - 1], 1, n, getX(A[i])); &#125; int l, r, k; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;k); printf("%d\n", B[query(Rt[l - 1], Rt[r], 1, n, k)]); &#125; return 0;&#125; 可持久化数组 维护一个数组 A[1\cdots N] ， M 次操作，查询或修改第 k 个版本的 A_i ，每次操作都会得到一个新版本（查询则继承该版本）。 N,M\leq 10^6, |A_i|\leq 10^9 。 题目链接 P3919 【模板】可持久化数组（可持久化线段树/平衡树） 分析 线段树中的叶子节点存储每个点的值，单次修改只影响一个叶子节点。因此可以通过主席树每次新建一条链连接其他所有点，并修改该叶子节点的值。查询时从该版本的根向下找即可。复杂度 O(N+M\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include &lt;bits/stdc++.h&gt;const int MAXN = 1e6 + 5;const int LOG = 20;int N, M;int A[MAXN];int Rt[MAXN], cntP;int L[MAXN * LOG], R[MAXN * LOG], Val[MAXN * LOG];int build(int l, int r) &#123; int rt = ++cntP; if (l == r) &#123; scanf("%d", &amp;Val[rt]); &#125; else &#123; int m = (l + r) &gt;&gt; 1; L[rt] = build(l, m); R[rt] = build(m + 1, r); &#125; return rt;&#125;int update(int pre, int l, int r, int p, int x) &#123; int rt = ++cntP; L[rt] = L[pre], R[rt] = R[pre]; Val[rt] = Val[pre]; if (l == r) &#123; Val[rt] = x; &#125; else &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; L[rt] = update(L[pre], l, m, p, x); &#125; else &#123; R[rt] = update(R[pre], m + 1, r, p, x); &#125; &#125; return rt;&#125;int query(int rt, int l, int r, int p) &#123; if (l == r) &#123; return Val[rt]; &#125; else if (l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; if (p &lt;= m) &#123; return query(L[rt], l, m, p); &#125; else &#123; return query(R[rt], m + 1, r, p); &#125; &#125;&#125;int main() &#123; scanf("%d%d", &amp;N, &amp;M); Rt[0] = build(1, N); int ver, opt, p, x; for (int i = 1; i &lt;= M; ++i) &#123; scanf("%d%d%d", &amp;ver, &amp;opt, &amp;p); if (opt == 1) &#123; scanf("%d", &amp;x); Rt[i] = update(Rt[ver], 1, N, p, x); &#125; else &#123; Rt[i] = Rt[ver]; printf("%d\n", query(Rt[ver], 1, N, p)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>主席树</tag>
        <tag>可持久化数组</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI2009」BZOJ 1558 等差数列]]></title>
    <url>%2FBZOJ-1558%2F</url>
    <content type="text"><![CDATA[长为 N 的序列 A 上 M 个操作，分为两类： 对于 i\in [l,r] ， 使 A[i] = A[i] + (i-l)\times b + a 查询 A[l,r] 最少能分成多少个等差数列表示 N,M\leq 100000 分析 操作一是对区间增加一个等差数列，因此将原数组差分，用线段树进行区间加和单点加。那么操作二就转化为查询区间能分成多少个相等的子区间。 差分后区间长度变成 N-1 ，则对 A[l,r] 增加 a+b\cdot i 的等差数列的具体操作为 A[l-1]\rightarrow A[l-1]+a ， A[l,r]\rightarrow A[l,r]+b ， A[r+1]\rightarrow A[r+1]-(a+(r-l)\cdot b) 。由于对原数组进行了差分，因此注意判定 l=1 和 r=N 时的边界问题。 需要注意的是，两个数也可以构成等差数列，所以两个相邻不同数可以合并以减少答案。 因此合并答案的时候会复杂一些，用 s[0/1][0/1] 表示左右端点取不取，注意左区间的右端点和右区间的左端点必须至少选择一个。 s[0][0] = \min(lc\rightarrow s[1][0] + rc\rightarrow s[0][1] - [lc\rightarrow right = rc\rightarrow left],lc\rightarrow s[0][0] + rc\rightarrow s[0][1],lc\rightarrow s[1][1] + rc\rightarrow s[0][0]) ，剩余三个合并方法类似。 复杂度 O(M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (__typeof(l) i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (__typeof(l) i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define irep(i, x) for (__typeof(x.begin()) i = x.begin(); i != x.end(); ++i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())#define debug(...) fprintf(stderr, __VA_ARGS__)#define DEBUG debug("passing %d in %s\n", __LINE__, __FUNCTION__)typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;inline int read() &#123; static char c; while (c = getchar(), !isdigit(c) &amp;&amp; c != '-'); bool f = c == '-'; int x = f ? 0 : c - '0'; for (c = getchar(); isdigit(c); c = getchar()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;const int MAXN = 100000 + 5;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint N, Q, A[MAXN];struct Data &#123; ll left, right; int num[4]; Data operator + (const Data &amp;a) &#123; Data x; x.left = left; x.right = a.right; x.num[0] = num[2] + a.num[1] - (right == a.left); chkMin(x.num[0], num[0] + a.num[1]); chkMin(x.num[0], num[2] + a.num[0]); x.num[1] = num[3] + a.num[1] - (right == a.left); chkMin(x.num[1], num[3] + a.num[0]); chkMin(x.num[1], num[1] + a.num[1]); x.num[2] = num[2] + a.num[3] - (right == a.left); chkMin(x.num[2], num[0] + a.num[3]); chkMin(x.num[2], num[2] + a.num[2]); x.num[3] = num[3] + a.num[3] - (right == a.left); chkMin(x.num[3], num[3] + a.num[2]); chkMin(x.num[3], num[1] + a.num[3]); return x; &#125;&#125;;struct Node &#123; ll add; Data x;&#125; T[MAXN &lt;&lt; 2];void pushDown(int rt) &#123; ll &amp;add = T[rt].add; if (add) &#123; T[rt &lt;&lt; 1].add += add; T[rt &lt;&lt; 1 | 1].add += add; T[rt &lt;&lt; 1].x.left += add; T[rt &lt;&lt; 1].x.right += add; T[rt &lt;&lt; 1 | 1].x.left += add; T[rt &lt;&lt; 1 | 1].x.right += add; add = 0; &#125;&#125;void buildTree(int rt, int l, int r) &#123; if (l == r) &#123; T[rt].x.left = T[rt].x.right = A[l]; T[rt].x.num[0] = 0; T[rt].x.num[1] = T[rt].x.num[2] = T[rt].x.num[3] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; buildTree(LT); buildTree(RT); T[rt].x = T[rt &lt;&lt; 1].x + T[rt &lt;&lt; 1 | 1].x;&#125;void add(int rt, int l, int r, int a, int b, ll x) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; T[rt].add += x; T[rt].x.left += x; T[rt].x.right += x; return ; &#125; pushDown(rt); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b, x); &#125; if (m &lt; b) &#123; add(RT, a, b, x); &#125; T[rt].x = T[rt &lt;&lt; 1].x + T[rt &lt;&lt; 1 | 1].x;&#125;Data cal(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return T[rt].x; &#125; int m = (l + r) &gt;&gt; 1; pushDown(rt); if (b &lt;= m) &#123; return cal(LT, a, b); &#125; else if (a &gt; m) &#123; return cal(RT, a, b); &#125; else &#123; return cal(LT, a, b) + cal(RT, a, b); &#125;&#125;void open() &#123; freopen("1558.in", "r", stdin); freopen("1558.out", "w", stdout);&#125;int main() &#123; // open(); int l, r, a, b; char opt[5]; N = read(); rep(i, 1, N + 1) &#123; A[i] = read(); &#125; rep(i, 1, N) &#123; A[i] = A[i + 1] - A[i]; &#125; buildTree(1, 1, N - 1); Q = read(); while (Q--) &#123; scanf("%s", opt); l = read(), r = read(); if (opt[0] == 'A') &#123; a = read(), b = read(); if (l &gt; 1) &#123; add(1, 1, N - 1, l - 1, l - 1, a); &#125; if (l &lt; r) &#123; add(1, 1, N - 1, l, r - 1, b); &#125; if (r &lt; N) &#123; add(1, 1, N - 1, r, r, -1ll * b * (r - l) - a); &#125; &#125; else &#123; if (l == r) &#123; puts("1"); &#125; else &#123; printf("%d\n", cal(1, 1, N - 1, l, r - 1).num[3]); &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>差分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CTSC 2007」BZOJ 1150 数据备份]]></title>
    <url>%2FBZOJ-1150%2F</url>
    <content type="text"><![CDATA[直线上有 N 个点，距离原点距离分别为 A_i 。有 M 条线用来连接。每条线连接两个点，且每个点只能被连接一次，线的长度为两点间的距离。求这些线长度和的最小值。 2\leq N\leq 100000, A_i \leq 1000000000 分析 很显然的是，线连接的一定是相邻的两个点，因此原本的 N 个点被差分成 N-1 条线段，记 len(i,i+1) 表示点 i 和 i+1 点之间的距离。 考虑贪心，每次取距离最小的两个点连接。但是这么做是显然错误的，例如 1 3 50 100 且 M=2 。 因为选完 (i-1,i) 之后，会导致 (i-2,i-1) 和 (i,i+1) 不能再选，这就是直接贪心错误的问题所在。 因此它需要一个可以「反悔」的机制。 如果选择完 (i-1,i) 后反悔，那么意味着它会去应该选择 (i-2,i-1) 或 (i,i+1) 。 那么取出 len(i-1,i) 后，只需加入 len(i-2,i-1)+len(i,i+1)-len(i-1,i) ，这意味着它可以将已经选择的 (i-1,i) 反悔成 (i-2,i-1) 和 (i,i+1) （反悔加上当前这次所以是一共选择 2 条线段）。 当然反悔 (i-1,i) 不代表 (i-2,i-1) 和 (i,i+1) 都要选，可能只选择其中一个。不过对于它们同样可以继续反悔从而找到更优的策略，因此这个贪心是成立的。 记录每个点（线段抽象成点看待）的前驱后继，每次选择一条线段相当于删除这个点，与此同时更新前驱后继。 可以通过堆来实现，但是需要记录的东西会多一些。所以我选择直接使用 std::set ，它可以直接删除非堆顶的元素。当然实测它也要慢一些。 需要注意一下边界取值以及溢出。 复杂度 O(M\log{N}) 。 类似的题：夹克老爷的逢三抽一 ，是对此题模型展开后的描述。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1e5 + 5;int N, M;ll A[MAXN];int Lst[MAXN], Nxt[MAXN];std::set&lt;std::pair&lt;ll, int&gt; &gt; Set;void insert(int x) &#123;Set.insert(std::make_pair(A[x], x));&#125;void erase(int x) &#123;Set.erase(std::make_pair(A[x], x));&#125;void del(int p) &#123;Nxt[Lst[p]] = Nxt[p];Lst[Nxt[p]] = Lst[p];erase(p);&#125;int main() &#123;ll res = 0;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N + 1) &#123; scanf("%lld", &amp;A[i]); if (i &gt; 1) &#123; A[i - 1] = A[i] - A[i - 1]; insert(i - 1); &#125; Lst[i] = i - 1; Nxt[i] = i + 1;&#125;A[0] = 1000000000LL + 5;rep(i, 0, M) &#123; int p = Set.begin()-&gt;second; ll l = A[Lst[p]], x = A[p], r = A[Nxt[p]]; res += x; del(Lst[p]), del(Nxt[p]); erase(p); A[p] = l + r - x; insert(p);&#125;printf("%lld\n", res);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2007 Dec」BZOJ 1691 挑剔的美食家]]></title>
    <url>%2FBZOJ-1691%2F</url>
    <content type="text"><![CDATA[N 头奶牛， M 种草料。第 i 头奶牛要求其草料价格不小于 A_i ，鲜嫩程度不小于 B_i 。要求奶牛吃的草料互不相同，求最小花费。如果无解，输出 -1 。 N,M\leq 100000 。 分析 贪心的想，每头奶牛肯定选择满足要求的最小价格的草料。 将草料和奶牛按照其鲜嫩程度从大到小排序，对每头奶牛，将所有鲜嫩程度满足要求的草料价格插入到一个 multiset中，在里面lower_bound得到满足条件的最小价格，统计答案并将它删去。如果找不到，输出 -1 。 由于草料的鲜嫩程度是不增的，因此已经插入的所有草料价格一定都满足鲜嫩程度不小于当前奶牛的要求，只需要继续插入后面满足条件的草料。 因此每个草料最多按顺序插入一次。 复杂度 O(N\log{N}+M\log{M}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Node &#123; int cost, val; bool operator &lt; (const Node &amp;x) const &#123; return val &gt; x.val; &#125;&#125; A[MAXN], B[MAXN];std::multiset&lt;int&gt; S;int main() &#123; int N, M; ll ans = 0; scanf("%d%d", &amp;N, &amp;M); rep(i, 0, N) &#123; scanf("%d%d", &amp;A[i].cost, &amp;A[i].val); &#125; rep(i, 0, M) &#123; scanf("%d%d", &amp;B[i].cost, &amp;B[i].val); &#125; std::sort(A, A + N); std::sort(B, B + M); int cur = 0; rep(i, 0, N) &#123; while(cur &lt; M &amp;&amp; B[cur].val &gt;= A[i].val) &#123; S.insert(B[cur++].cost); &#125; std::multiset&lt;int&gt;::iterator p = S.lower_bound(A[i].cost); if(p == S.end()) &#123; puts("-1"); return 0; &#125; else &#123; ans += *p; S.erase(p); &#125; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>平衡树</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「JSOI2010」BZOJ 1826 缓存交换]]></title>
    <url>%2FBZOJ-1826%2F</url>
    <content type="text"><![CDATA[起初有 M 个空位置。有 N 次插入，若插入的数在位置上，则无需操作；否则需要用它替换掉原位置中的一个数。每次可以自由选择替换的位置，求最小替换次数。 M\leq N\leq 100000 。 分析 对于一个插入的数 x ，若当前位置未满且 x 不在任意位置中，则直接插入 x ，次数 +1 。 若 x 存在于某个位置中，则无需任何操作。 如果不存在，应该替换掉位置上 M 个数中下一次出现最晚的那个数（如果不再出现，则当其下一次出现的位置为 INF ）。 这是个贪心的策略， 形象的理解就是，该元素占了那个位置最长的没有意义的时间，（元素两次插入间隔的时间被认为是没有意义的）。 预处理出 Nxt[i] ，表示 i 位置的元素下一次出现的下标，如果没有下一次，将其置为 N+1 。 维护大根堆，每次插入 Nxt[i] 。 若 i 不在堆中，则说明需要进行了一次替换，并删除堆顶元素。 复杂度 O(N\log{N}) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;int N, M;std::multiset&lt;int&gt; In;std::map&lt;int, int&gt; Lst;int A[MAXN], Nxt[MAXN];int main() &#123; int res = 0; scanf("%d%d", &amp;N, &amp;M); rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); Nxt[i] = N + 1; Nxt[Lst[A[i]]] = i; Lst[A[i]] = i; &#125; rep(i, 1, N + 1) &#123; if(In.find(i) != In.end()) &#123; In.erase(i); &#125; else &#123; ++res; if(SZ(In) == M) &#123; In.erase(--In.end()); &#125; &#125; In.insert(Nxt[i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>堆</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2010」BZOJ 2086 Blocks]]></title>
    <url>%2FBZOJ-2086%2F</url>
    <content type="text"><![CDATA[序列 A 有 N 个数，有 M 次查询。每次给定 K 并可以进行以下操作：如果 A[i] &gt; K 则可以将其减 1 并使 A[i-1] 或 A[i+1] 加 1 。经过任意多次操作后，求最长的连续子序列，其中元素值均不小于 K 。 N\leq 1000000,M\leq 50 。 分析 若 \sum\limits_{i=l}^{r}{A_i} \geq K\times (r - l + 1) ，则 A[l\cdots r] 一定可以经过若干次操作使得其中每个元素均不小于 K 。 为了方便起见，使 A[i] = A[i]-K ，则当 \sum\limits_{i=l}^{r}{A_i} \geq 0 成立时即可。 记 Sum[i] = \sum\limits_{i=1}^{i}{A_i} ，则 Sum[r]\geq Sum[l-1] 与上式等价。 问题转化为求 \max(r-l) 使得 Sum[r]\geq Sum[l-1] 成立。 而所有可能成为最大区间的左端点的前缀和一定是单调递减的，因为若 i &lt; j 且 Sum[i] \leq Sum[j] ，则选择 i 作为左端点一定强于选 j 。 同理若 i &gt; j 且 Sum[i] \geq Sum[j] ，则选择 i 作为右端点一定强于选 j ，因此 r 可以直接从右向左扫描右端点。 记当前栈顶（左端点）为 S[top] ，若 Sum[r] \geq Sum[S[top]] 则弹出栈顶，直到满足 Sum[r] &lt; Sum[S[top]] 为止。 那么之前的栈顶 S[top+1]+1 到 r ，是以 r​ 为右端点满足条件的最大区间。 答案为这些区间大小的最大值，复杂度 O(NM) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1000000 + 5;int N, M, A[MAXN];int solve(int x) &#123;static ll F[MAXN];static int Stk[MAXN];int top = 0, res = 0;rep(i, 1, N + 1) &#123; F[i] = F[i - 1] + A[i] - x; if (F[Stk[top]] &gt; F[i]) &#123; Stk[++top] = i; &#125;&#125;rof(i, N + 1, 1) &#123; if (F[i] &gt;= 0) &#123; return std::max(res, i); &#125; while (top &amp;&amp; F[i] &gt;= F[Stk[top - 1]]) &#123; --top; &#125; chkMax(res, i - Stk[top]);&#125;return res;&#125;int main() &#123;int x;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]);&#125;rep(i, 0, M) &#123; scanf("%d", &amp;x); printf("%d ", solve(x));&#125;return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调栈</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2011」BZOJ 2276 Temperature]]></title>
    <url>%2FBZOJ-2276%2F</url>
    <content type="text"><![CDATA[长为 N 的序列中，每个数的取值范围为 [L_i,R_i] 。求最长不下降连续子序列的长度。 N\leq 10^6 分析 单调队列维护递减的 l ，如果当前 r 比队首的 l 小，则弹出队首直到 r 大于等于它为止。 读入数据很大，需要读入优化。 复杂度 O(N) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iostruct Mqueue &#123; std::deque&lt;int&gt; Q, M; void push(int x) &#123; while(!M.empty() &amp;&amp; M.back() &lt; x) &#123; M.pop_back(); &#125; M.push_back(x); Q.push_back(x); &#125; void pop() &#123; int x = Q.front(); Q.pop_front(); if(x == M.front()) &#123; M.pop_front(); &#125; &#125; void maintain(int x) &#123; while(!M.empty() &amp;&amp; M.front() &gt; x) &#123; pop(); &#125; &#125; size_t size() &#123; return SZ(Q); &#125;&#125;Q;int main() &#123; int res = 0; int N = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); Q.maintain(r); Q.push(l); chkMax(res, SZ(Q)); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SCOI2010」BZOJ 1855 股票交易]]></title>
    <url>%2FBZOJ-1855%2F</url>
    <content type="text"><![CDATA[一共 T 天，每天股票的买入价为 A_i ，卖出价为 B_i ，最多允许购买 C_i 股，售出 D_i 股。要求两次交易之间至少间隔 W 天，持有的总股票数不超过 P 。假设可以无利息借钱购买股票，求最大收益。 T\leq 2000 。 分析 记 F(i,j) 表示第 i 天持有 j 股的最大收益。 首先 F(i,j) 可以直接购买获得， F(i,j) = -A_i\times j(j\leq C_i) 。 其次可以由前一天直接转移获得， F(i,j) = F(i-1,j) 。 最后可以通过 i-w-1 天的状态转移， F(i,j) = \max\limits_{max(1,j-C_i)\leq k\leq j}{F(i-w-1,k)+(k-j)\times A_i}\ F(i,j)=\max\limits_{max(1,j-C_i)\leq k\leq j}{F(i-w-1,k)+(k-j)\times B_i} 如果枚举 k ，复杂度会达到 TP^2 ，显然不行。 再观察转移方程，它可以转化成 F(i,j) = \max\limits_{max(1,j-C_i)\leq k\leq j}{(F(i-w-1,k)+k\times A_i})-j\times A_i 。 这是典型的单调队列可以优化的形式（形如 f[x] = \max(g[k])+w[x] ）。 单调队列分别维护 F(i-w-1,k)+k\times A_i 和 F(i-w-1,k)+k\times B_i 。 需要注意的是，前者 k 从 0 到 j 枚举，而后者是从 P 到 j 枚举。因为随着 j 的增大，前者当 k &lt; j - C_i 时不在枚举范围，而后者当 k &gt; j + D_i 时不在枚举范围。 如此使得 F[i][1\cdots P] 的决策分摊 O(P) 的复杂度，复杂度降至 O(TP) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 2000 + 5;int N, P, W;int F[MAXN][MAXN];int Que[MAXN];int main() &#123; int a, b, maxa, maxb; scanf("%d%d%d", &amp;N, &amp;P, &amp;W); memset(F, 0x80, sizeof F); rep(i, 1, N + 1) &#123; scanf("%d%d%d%d", &amp;a, &amp;b, &amp;maxa, &amp;maxb); rep(j, 0, maxa + 1) &#123; F[i][j] = -a * j; &#125; rep(j, 0, P + 1) &#123; chkMax(F[i][j], F[i - 1][j]); &#125; if (i - W &lt;= 1) &#123; continue; &#125; int h = 0, t = -1; rep(j, 0, P + 1) &#123; while (h &lt;= t &amp;&amp; Que[h] &lt; j - maxa) &#123; ++h; &#125; while (h &lt;= t &amp;&amp; F[i - W - 1][Que[t]] + Que[t] * a &lt;= F[i - W - 1][j] + j * a) &#123; --t; &#125; Que[++t] = j; chkMax(F[i][j], F[i - W - 1][Que[h]] + (Que[h] - j) * a); &#125; h = 0, t = -1; rof(j, P + 1, 0) &#123; while (h &lt;= t &amp;&amp; Que[h] &gt; j + maxb) &#123; ++h; &#125; while (h &lt;= t &amp;&amp; F[i - W - 1][Que[t]] + Que[t] * b &lt;= F[i - W - 1][j] + j * b) &#123; --t; &#125; Que[++t] = j; chkMax(F[i][j], F[i - W - 1][Que[h]] + (Que[h] - j) * b); &#125; &#125; int res = 0; rep(i, 0, P + 1) &#123; chkMax(res, F[N][i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>DP</tag>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「POI2010」BZOJ 2096 PIL-Pilots]]></title>
    <url>%2FBZOJ-2096%2F</url>
    <content type="text"><![CDATA[给定一个长度为 N 的序列，求最长的最大值与最小值的差不超过 K 的子段。 N\leq 3000000,k\leq 2000000000 。 分析 记 l, r 为当前子段的首尾下标。开始尽可能让 r 向右拓展。 当最小最大值的差超过 K 时，让 l 向右移动，直到满足条件为止。 通过两个单调队列维护极值， \max {r-l+1} 为答案。 复杂度 O(N) 。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;int N, K;std::deque&lt;int&gt; Dup, Ddown;std::deque&lt;int&gt; Qup, Qdown;void push(int x) &#123; while(!Dup.empty() &amp;&amp; Dup.back() &lt; x) &#123; Dup.pop_back(); &#125; while(!Ddown.empty() &amp;&amp; Ddown.back() &gt; x) &#123; Ddown.pop_back(); &#125; Dup.push_back(x); Ddown.push_back(x); Qup.push_back(x); Qdown.push_back(x);&#125;void pop() &#123; int x = Qup.front(); Qup.pop_front(); if(x == Dup.front()) &#123; Dup.pop_front(); &#125; x = Qdown.front(); Qdown.pop_front(); if(x == Ddown.front()) &#123; Ddown.pop_front(); &#125;&#125;void moveRight(int x) &#123; push(x); while(!Dup.empty() &amp;&amp; Dup.front() - Ddown.front() &gt; K) &#123; pop(); &#125;&#125;int main() &#123; int x, ans = 0; scanf("%d%d", &amp;K, &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;x); moveRight(x); chkMax(ans, SZ(Qup)); &#125; printf("%d\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>单调队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「[BJOI 2014」BZOJ 4530 大融合]]></title>
    <url>%2FBZOJ-4530%2F</url>
    <content type="text"><![CDATA[开始有 N 个点， M 个操作。每次插入一条边（保证不成环），或者查询一条边的负载值。负载值的定义为当前树上经过它的简单路径条数。 N,Q\leq 100000 分析 边的负载值等价于删去它后该边两点所在联通块大小的乘积。 现在问题在于如何计算联通块的大小。 在线做需要LCT，我不会，于是考虑将森林建好后离线做。 那么现在一条边所涉及的两个联通块大小，分别就是父亲所在的联通块大小 Sz[x] 和儿子所在的子树大小 Sz[y] ，负载值为 (Sz[x]-Sz[y])\times Sz[y] （因为父亲所在联通块一定包含儿子所在的子树）。 插入一条边的影响就是，父亲节点到「它所在并查集中深度最小的点（即当前树的根节点）」的那条链上所有节点的子树大小增加 Sz[y] 。 如何找到这个根节点，显然是并查集维护联通块，让联通块内深度最小的点作祖先。 而对一条链进行区间加法和单点查询，显然是树链剖分+线段树/树状数组。 复杂度为 O(N+Q\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, Q;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Fa[MAXN], Son[MAXN], Sz[MAXN], Depth[MAXN];int Top[MAXN], Dfn[MAXN], cntD;void dfs(int x) &#123; Depth[x] = Depth[Fa[x]] + 1; Sz[x] = 1; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x]) &#123; Fa[v] = x; dfs(v); Sz[x] += Sz[v]; if(Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if(Son[x]) &#123; dfs2(Son[x], top); &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2];void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1];&#125;void pushDown(int rt, int L) &#123; int &amp;add = Add[rt]; if(add) &#123; Add[rt &lt;&lt; 1] += add; Add[rt &lt;&lt; 1 | 1] += add; Sum[rt &lt;&lt; 1] += add * (L - (L &gt;&gt; 1)); Sum[rt &lt;&lt; 1 | 1] += add * (L &gt;&gt; 1); add = 0; &#125;&#125;void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = 1; return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt);&#125;void add(int rt, int l, int r, int a, int b, int x) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; Sum[rt] += (r - l + 1) * x; Add[rt] += x; return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; add(LT, a, b, x); &#125; if(m &lt; b) &#123; add(RT, a, b, x); &#125; pushUp(rt);&#125;int query(int rt, int l, int r, int p) &#123; if(l == r) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if(p &lt;= m) &#123; return query(LT, p); &#125; else &#123; return query(RT, p); &#125;&#125;int Anc[MAXN];void init(int n) &#123; rep(i, 1, n + 1) &#123; Anc[i] = i; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;void merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if(Depth[x] &gt; Depth[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; &#125;&#125;void modify(int x, int sz) &#123; int y = findAnc(x); while(x &amp;&amp; Depth[Top[x]] &gt;= Depth[y]) &#123; add(1, 1, N, Dfn[Top[x]], Dfn[x], sz); x = Fa[Top[x]]; &#125; if(x) &#123; add(1, 1, N, Dfn[y], Dfn[x], sz); &#125;&#125;int Type[MAXN], U[MAXN], V[MAXN];int main() &#123; char opt[5]; scanf("%d%d", &amp;N, &amp;Q); init(N); rep(i, 0, Q) &#123; scanf("%s%d%d", opt, &amp;U[i], &amp;V[i]); Type[i] = opt[0] == 'A'; if(Type[i]) &#123; addEdge(U[i], V[i]); &#125; &#125; rep(i, 1, N + 1) &#123; if(!Fa[i]) &#123; dfs(i); dfs2(i, i); &#125; &#125; init(N); build(1, 1, N); rep(i, 0, Q) &#123; if(Type[i]) &#123; merge(U[i], V[i]); if(Depth[U[i]] &lt; Depth[V[i]]) &#123; modify(U[i], query(1, 1, N, Dfn[V[i]])); &#125; else &#123; modify(V[i], query(1, 1, N, Dfn[U[i]])); &#125; &#125; else &#123; if(Depth[U[i]] &lt; Depth[V[i]]) &#123; std::swap(U[i], V[i]); &#125; V[i] = findAnc(V[i]); int num = query(1, 1, N, Dfn[V[i]]); int num2 = query(1, 1, N, Dfn[U[i]]); printf("%d\n", num2 * (num - num2)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>并查集</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「LNOI 2014」BZOJ 3626 LCA]]></title>
    <url>%2FBZOJ-3626%2F</url>
    <content type="text"><![CDATA[给定一棵 N 个节点的有根树，有 M 组询问。每组询问给定 l, r, z ，查询 \sum\limits_{l\leq i\leq r}{depth(lca(i, z))} 。 N,M\leq 50000 。 分析 约定： u\rightarrow v 指的是 u 到 v 路径上的所有点，默认根节点为 1 。 由于只是求 lca(u,v) 的深度，因此将 u\rightarrow 1 上的所有节点权值 +1 ，那么答案应该是 v\rightarrow 1 上节点的权值和。（因为 v\rightarrow 1 上所有有权值的点都在 lca(u,v) \rightarrow 1 上） 那么假设求 \sum{depth(lca(u_i,v))} ，同理可以分别将 u_i\rightarrow 1 上所有点权值 +1 ，最后统计 v\rightarrow 1 上的权值和。 实现起来很简单，树链剖分+线段树，复杂度 O(m\log^2{n}) ，其中 m 为组数， n 为节点数。 假如把 v 换成 z ，其实只需要将最后统计的链从 v\rightarrow 1 改成了 z\rightarrow 1 ，对前面 +1 的操作没有影响，单次只是 O(\log^2{n}) 的复杂度。 那么再看这道题的询问 \sum\limits_{l\leq i\leq r}{depth(lca(i, z))} ，可以发现与上面的式子是类似的。 由于每次都是 [l_i,r_i] 这样一个连续区间，将它差分成 [1,r_i]-[1,l_i-1] 。 那么如果节点编号按从 1\cdots n 的顺序进行 +1 的操作， +1 后计算 u_i\rightarrow 1 的权值和。 所有查询的区间差分后得到的 [1,r_i] 和 [1,l_i-1] 都能算出来，而且所有点只操作（增加）了一次，如此复杂度是可以接受的。 那么把所有查询都分别挂在节点 l_i-1 和 r_i 上，让 i 从 1 开始按顺序对 i\rightarrow 1 进行 +1 操作。 +1 之后处理所有挂在上面的询问。分别 u_i\rightarrow 1 的权值和，若 i 是左区间则减，反之则加。 复杂度 O(N+M\log^2{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 50000 + 5;const int MOD = 201314;struct Edge &#123; int v, nxt;&#125; E[MAXN];int N, M;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Fa[MAXN], Son[MAXN], Sz[MAXN];int Top[MAXN], Dfn[MAXN], cntD;void dfs(int x) &#123; Sz[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x]) &#123; dfs(v); Sz[x] += Sz[v]; if (Sz[v] &gt; Sz[Son[x]]) &#123; Son[x] = v; &#125; &#125; &#125;&#125;void dfs2(int x, int top) &#123; Top[x] = top; Dfn[x] = ++cntD; if (Son[x]) &#123; dfs2(Son[x], top); &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != Fa[x] &amp;&amp; v != Son[x]) &#123; dfs2(v, v); &#125; &#125;&#125;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, rint Sum[MAXN &lt;&lt; 2], Add[MAXN &lt;&lt; 2];void inc(int &amp;x, int y) &#123; (x += y) %= MOD; if (x &lt; 0) &#123; x += MOD; &#125;&#125;void pushUp(int rt) &#123; inc(Sum[rt] = 0, Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]);&#125;void pushDown(int rt, int L) &#123; int &amp;add = Add[rt]; if (add) &#123; inc(Add[rt &lt;&lt; 1], add); inc(Add[rt &lt;&lt; 1 | 1], add); inc(Sum[rt &lt;&lt; 1], add * (L - (L &gt;&gt; 1))); inc(Sum[rt &lt;&lt; 1 | 1], add * (L &gt;&gt; 1)); add = 0; &#125;&#125;void add(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; inc(Sum[rt], r - l + 1); inc(Add[rt], 1); return ; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; if (a &lt;= m) &#123; add(LT, a, b); &#125; if (m &lt; b) &#123; add(RT, a, b); &#125; pushUp(rt);&#125;int querySum(int rt, int l, int r, int a, int b) &#123; if (a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; pushDown(rt, r - l + 1); int m = (l + r) &gt;&gt; 1; int res = 0; if (a &lt;= m) &#123; inc(res, querySum(LT, a, b)); &#125; if (m &lt; b) &#123; inc(res, querySum(RT, a, b)); &#125; return res;&#125;void modify(int u) &#123; while (u) &#123; add(1, 1, N, Dfn[Top[u]], Dfn[u]); u = Fa[Top[u]]; &#125;&#125;int query(int u) &#123; int res = 0; while (u) &#123; inc(res, querySum(1, 1, N, Dfn[Top[u]], Dfn[u])); u = Fa[Top[u]]; &#125; return res;&#125;std::vector&lt;int&gt; L[MAXN], R[MAXN];int Ask[MAXN], Ans[MAXN];int main() &#123; int l, r; scanf("%d%d", &amp;N, &amp;M); rep(i, 2, N + 1) &#123; scanf("%d", &amp;Fa[i]); addEdge(++Fa[i], i); &#125; dfs(1); dfs2(1, 1); rep(i, 0, M) &#123; scanf("%d%d%d", &amp;l, &amp;r, &amp;Ask[i]); L[l].push_back(i); R[r + 1].push_back(i); ++Ask[i]; &#125; rep(i, 1, N + 1) &#123; modify(i); rep(j, 0, SZ(R[i])) &#123; inc(Ans[R[i][j]], query(Ask[R[i][j]])); &#125; rep(j, 0, SZ(L[i])) &#123; inc(Ans[L[i][j]], -query(Ask[L[i][j]])); &#125; &#125; rep(i, 0, M) &#123; printf("%d\n", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
        <tag>差分</tag>
        <tag>树链剖分</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「TJOI 2017」BZOJ 4890 城市]]></title>
    <url>%2FBZOJ-4890%2F</url>
    <content type="text"><![CDATA[在一棵无向树上修改一条边的起点终点，使得新图依然是树，并最小化新树的直径。 N\leq 5000 分析 由于最多只有 5000-1 条边，因此可以直接枚举要删除的边。 如果可以在 O(N) 的时间求出修改该边后的直径，就可以在 O(N^2) 的时间求解本题， 3 s 的时间是可以接受的。 删去一条边后，原树被拆成了两棵新树 A,B ，那么新直径的端点位置有两类情况： 两个端点在同一棵树中 一个端点在 A 一个端点在 B 对于第一类，直接 O(N) 求树的直径，链的长度分别为 d1,d2 ，但是对于第二种，其实就是分别在两棵树中找到「最长距离最小」的点，并将它们连接，那么这条链的长度为 r1+r2+w ，其中 r 为树中的距离， w 为修改边的变长。 因此答案为 \min{\max{d1,d2,r1+r2+w}} 。 求 r 只需要从任意一点遍历该树，距离某点最远距离的点要么为根节点，要么为其子树中某点，所以树形dp就能得到这个「最小的最长距离」。 还可以强力剪枝（当然上面的做法已经可以AC了）。 易得如果修改的边不在原树的直径上，是没有意义的（因为新树的中该直径依然存在），因此先得到原树的直径，再去枚举直径上的边完成前面的操作，会大大减少枚举量。实测由8876ms降至777ms。 复杂度依然是 O(N^2) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 5000 + 5;struct Edge &#123; int u, v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;int Nxt[MAXN], Vis[MAXN], F[MAXN], G[MAXN];int dis, rad;int Dis[MAXN], Lst[MAXN], W[MAXN];void dfs(int x) &#123; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(!Dis[v]) &#123; Dis[v] = Dis[x] + E[i].w; Lst[v] = x; W[v] = E[i].w; dfs(v); &#125; &#125;&#125;void getD(int x) &#123; Vis[x] = 1; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v]) &#123; continue; &#125; getD(v); int d = F[v] + E[i].w; if (d &gt; F[x]) &#123; G[x] = F[x]; F[x] = d; Nxt[x] = v; &#125; else &#123; chkMax(G[x], d); &#125; &#125; chkMax(dis, F[x] + G[x]);&#125;void getR(int x, int r) &#123; chkMin(rad, std::max(r, F[x])); Vis[x] = 0; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Vis[v]) &#123; if (v == Nxt[x]) &#123; getR(v, std::max(G[x] + E[i].w, r + E[i].w)); &#125; else &#123; getR(v, std::max(F[x] + E[i].w, r + E[i].w)); &#125; &#125; &#125;&#125;void clear() &#123; dis = 0, rad = INT_MAX; memset(Vis, 0, sizeof Vis); memset(F, 0, sizeof F); memset(G, 0, sizeof G);&#125;int res = INT_MAX;void cal(int u, int v, int w) &#123; int d1, d2, r1, r2; clear(); Vis[v] = 1; dis = 0; getD(u); d1 = dis; dis = 0; getD(v); d2 = dis; dis = Vis[v] = 0; getR(u, 0); r1 = rad; rad = INT_MAX; getR(v, 0); r2 = rad; rad = INT_MAX; chkMin(res, std::max(r1 + r2 + w, std::max(d1, d2)));&#125;int main() &#123; int u, v, w, N; scanf("%d", &amp;N); rep(i, 1, N) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); addEdge(u, v, w); addEdge(v, u, w); &#125; int d = 0, st, st2; dfs(1); rep(i, 2, N + 1) &#123; if(chkMax(d, Dis[i])) &#123; st = i; &#125; &#125; memset(Dis, 0, sizeof Dis); dfs(st); d = 0; rep(i, 2, N + 1) &#123; if(chkMax(d, Dis[i])) &#123; st2 = i; &#125; &#125; for(int i = st2; i != st; i = Lst[i]) &#123; cal(i, Lst[i], W[i]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Baltic2004」BZOJ 1367 sequence]]></title>
    <url>%2FBZOJ-1367%2F</url>
    <content type="text"><![CDATA[对于序列 A_1,A_2,\cdots,A_n ，构造递增序列 B_1,B_2,\cdots,B_n ，使得 R=\sum{|A_i-B_i|} 最小。求 R 的最小值。 n\leq 10^6,A_i\leq 2\times 10^9 。 分析 这是2005年黄清河同学的集训队论文《左偏树的特点及其应用》中的例题。 那我就简化一下他的分析求解，给出基本思路和解法。 首先， A 有两种极端情况： A_1\leq A_2\leq \cdots\leq A_n ，此时 B_i = A_i 时 R 最小（也可以理解为 B_i 取 [A_i,A_i] 的中位数）； A_1 \geq A_2\geq \cdots \geq A_n ，此时 B_1,\cdots,B_n 取 [A_1,A_n] 的中位数时 R 最小； 而如果 A 不是单调的，也可以由若干个小的单调区间组成。 那么把 A 分成 M 个区间，每个区间对应一个解 W_i ， W_i 为 A 在该区间的中位数。 （最优性通过归纳法证明，详情可以自行翻阅论文） 那么当 A_1,\cdots,A_k 已经得到最优解 W_1,\cdots,W_p ，那么新插入 A_{k+1} ，先将 A_{k+1} 视作单独的一个区间，则该区间的解 W_{p+1}=A_{k+1} 。 但是要求 B 是单调递增的，因此若 W_{p+1} &lt; W_{p} ，则需要将这两个解合并，直到 W 满足单调性为止。 而新区间的最优解（即 W_p 和 W_{p+1} 合并后），应该为大区间的中位数。那如何快速得到新区间的中位数呐？ 第一种想法就是每个区间建一棵平衡树，启发式合并两棵树，并查询第 K （树大小一半）大得到新的中位数。复杂度 O(n\log{n}) 。 但是我们发现这样做复杂度较高，为 O(n^2\log{n}) ，需要更快速的方法。 考虑中位数的定义，中位数的值为 A[\lfloor\frac{n}{2}\rfloor+1] 。也就是说集合中有恰好 \lfloor\frac{n}{2}\rfloor 个数小于它。 那么构造一个大根堆，包含集合中较小的一半元素，堆顶就是中位数。 合并两个堆，如果堆中元素个数超过新区间大小的一半，就将多余的全部弹出，则新的堆顶就是新区间的中位数。 通过左偏树实现大根堆，合并的复杂度为 O(\log{n}) 。 需要注意的是，由于要求 B 是单调递增而不是不递减的，因此需要将 A_i 预处理为 A_i-i 。 如此总复杂度降至 O(n\log{n}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1e6 + 5;struct Leftist &#123; struct Node &#123; int key, sz; int lc, rc, dis; bool operator &lt; (const Node &amp;x) const &#123; return key &gt; x.key; &#125; &#125; A[MAXN]; int tot; int merge(int x, int y) &#123; if(!x || !y) &#123; return x + y; &#125; if(A[y] &lt; A[x]) &#123; std::swap(x, y); &#125; Node &amp;a = A[x]; a.rc = merge(a.rc, y); a.sz = A[a.lc].sz + A[a.rc].sz + 1; if(A[a.rc].dis &gt; A[a.lc].dis) &#123; std::swap(a.lc, a.rc); &#125; a.dis = A[a.rc].dis + 1; return x; &#125; int push(int x) &#123; A[++tot] = (Node) &#123;x, 1, 0, 0, 0&#125;; return tot; &#125; int size(int x) &#123; return A[x].sz; &#125; int top(int x) &#123; return A[x].key; &#125; int pop(int x) &#123; return merge(A[x].lc, A[x].rc); &#125;&#125; T;int A[MAXN], Rt[MAXN], L[MAXN], R[MAXN];int main() &#123; int N; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;A[i]); A[i] -= i; &#125; int cnt = 0; rep(i, 1, N + 1) &#123; Rt[++cnt] = T.push(A[i]); L[cnt] = R[cnt] = i; while(cnt &gt; 1 &amp;&amp; T.top(Rt[cnt]) &lt; T.top(Rt[cnt - 1])) &#123; --cnt; Rt[cnt] = T.merge(Rt[cnt], Rt[cnt + 1]); R[cnt] = R[cnt + 1]; while(T.size(Rt[cnt]) * 2 &gt; R[cnt] - L[cnt] + 2) &#123; Rt[cnt] = T.pop(Rt[cnt]); &#125; &#125; &#125; ll ans = 0; rep(i, 1, cnt + 1) &#123; int x = T.top(Rt[i]); rep(j, L[i], R[i] + 1) &#123; ans += abs(x - A[j]); &#125; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
        <tag>左偏树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 1455 罗马游戏]]></title>
    <url>%2FBZOJ-1455%2F</url>
    <content type="text"><![CDATA[有 N 个集合，每个集合中包含一个元素 A_i 。有 M 个操作：将 x,y 所在的集合合并；查询并删去 x 所在集合中元素的最小值。 N\leq 1000000, M\leq 100000 分析 如果没有合并集合的操作，直接使用stl的priority_queue即可完成所有查询删除的操作。 支持合并的堆的有不少，左偏树（leftist tree）就是其中之一。 左偏树合并复杂度为 O(\log{n_1}+\log{n_2})=O(\log{n}) ，查询堆顶复杂度 O(1) ，删除堆顶复杂度 O(\log{n}) ，插入新节点复杂度 O(\log{n}) ，修改节点权值复杂度 O(n) 。 用并查集维护点所在的集合，左偏树维护查询/删除与合并。复杂度 O(M(\alpha(N)+\log{N})) 。 当然，pb_ds的priority_queue是支持合并的，默认是配对堆（pairing heap），各项操作的复杂度均不差于左偏树，修改的复杂度更低，为 O(\log{n}) 。 但是由于本题中没有涉及decrease key的操作，因此复杂度相同。 不过开N个priority_queue似乎空间占用较大，直接MLE了。 我猜N是100w的原因的其中之一就是为了卡pbds，而配对堆的空间复杂度本就高于左偏树。 因此还是乖乖写左偏树吧。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 1000000 + 5;struct Union &#123; int Anc[MAXN]; void init(int n) &#123; rep(i, 1, n + 1) &#123; Anc[i] = i; &#125; &#125; int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]); &#125;&#125; S;struct Leftist &#123; struct Node &#123; int key; int lc, rc, dis; Node (): key(0), lc(0), rc(0), dis(0) &#123;&#125; bool operator &lt; (const Node &amp;x) const &#123; return key &lt; x.key; &#125; &#125; A[MAXN]; void init(int n) &#123; rep(i, 1, n + 1) &#123; scanf("%d", &amp;A[i].key); &#125; A[0].dis = -1; &#125; int merge(int x, int y) &#123; if(!x || !y) &#123; return x + y; &#125; if(A[y] &lt; A[x]) &#123; std::swap(x, y); &#125; Node &amp;a = A[x]; a.rc = merge(a.rc, y); if(A[a.rc].dis &gt; A[a.lc].dis) &#123; std::swap(a.lc, a.rc); &#125; a.dis = A[a.rc].dis + 1; return x; &#125; int get_min(int x) &#123; return A[x].key; &#125; int delete_min(int x) &#123; A[x].key = -1; return merge(A[x].lc, A[x].rc); &#125;&#125; T;int main() &#123; int N, M, x, y; char opt[10]; scanf("%d", &amp;N); T.init(N); S.init(N); scanf("%d", &amp;M); while(M--) &#123; scanf("%s", opt); if(opt[0] == 'M') &#123; scanf("%d%d", &amp;x, &amp;y); if(T.get_min(x) == -1 || T.get_min(y) == -1) &#123; continue; &#125; x = S.findAnc(x), y = S.findAnc(y); if(x != y) &#123; int bl = T.merge(x, y); S.Anc[x] = S.Anc[y] = bl; &#125; &#125; else &#123; scanf("%d", &amp;x); if(T.get_min(x) == -1) &#123; puts("0"); &#125; else &#123; x = S.findAnc(x); printf("%d\n", T.get_min(x)); int bl = T.delete_min(x); S.Anc[x] = S.Anc[bl] = bl; &#125; &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>左偏树</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Baltic 2003」BZOJ 1369 Gem]]></title>
    <url>%2FBZOJ-1369%2F</url>
    <content type="text"><![CDATA[在树上给所有节点标上正整数权值，要求相连的节点权值不同，求权值和的最小值。 N\leq 10000 分析 如果确定了权值的范围，那么这就是个很简单的树形DP。 类似于SDOI2015R2D2T2，树上权值最大为 log_2{N} ，在1e4U群里问了一下原理，但是没有结果... 不过可以想象这个值一定很小，不会超过20 。实际上不超过14 。 那么 F(x,y) 表示以 x 为根的子树中当 x 的权值为 y 时的最小权值和。 则转移方程为 F(x,y) = \sum{min(F(s,i)(i\not= y))}+y （ s 为 x 的儿子）。 复杂度 O(N\log^2{N})​ 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int F[15][MAXN];void dfs(int x, int fa) &#123; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); rep(i, 1, 15) &#123; int mn = INT_MAX; rep(j, 1, 15) &#123; if(i != j) &#123; chkMin(mn, F[j][v]); &#125; &#125; F[i][x] += mn; &#125; &#125; &#125; rep(i, 1, 15) &#123; F[i][x] += i; &#125;&#125;int main() &#123; int u, v; scanf("%d", &amp;N); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(1, -1); int res = INT_MAX; rep(i, 1, 15) &#123; chkMin(res, F[i][1]); &#125; printf("%d\n", res); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2010 Dec」BZOJ 2097 Exercise]]></title>
    <url>%2FBZOJ-2097%2F</url>
    <content type="text"><![CDATA[边权为 1 的树上删去 S 条边，求剩下森林中所有树的直径的最大值的最小值。 N\leq 100000 。 分析 求最大值的最小值，这让我们想到了贪心。 二分确定当前直径的最大值 L ，再通过贪心去删边，检查是否删去超过 S 条边。 记 f(i) 为以 x 为根的子树中经过 x 的最长链，对 f(i) 进行排序。 删去最长链，直到当前最长链和次长链 f(i)+f(i-1)\leq L 。 那么 f(x) 的递推关系式为 f(x) = \max{f(i)} ，显然 f(i) \leq L 。 复杂度 O(N\log^2{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;struct Edge &#123;int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M;int H[MAXN], cntE;void addEdge(int u, int v) &#123;E[++cntE] = (Edge) &#123;v, H[u]&#125;;H[u] = cntE;E[++cntE] = (Edge) &#123;u, H[v]&#125;;H[v] = cntE;&#125;int F[MAXN], A[MAXN], total;void dfs(int x, int fa, int limit) &#123;int cnt = 0;for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; dfs(v, x, limit); &#125;&#125;for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; A[++cnt] = F[v] + 1; &#125;&#125;std::sort(A, A + cnt + 1);while(cnt &amp;&amp; A[cnt] + A[cnt - 1] &gt; limit) &#123; --cnt, ++total;&#125;F[x] = A[cnt];&#125;int check(int limit) &#123;total = 0;dfs(1, -1, limit);return total &lt;= M;&#125;int main() &#123;int u, v;scanf("%d%d", &amp;N, &amp;M);rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v);&#125;int l = 1, r = N, ans = N;while(l &lt;= r) &#123; int m = (l + r) &gt;&gt; 1; if(check(m)) &#123; ans = m; r = m - 1; &#125; else &#123; l = m + 1; &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「CQOI 2009」BZOJ 1304 叶子的颜色]]></title>
    <url>%2FBZOJ-1304%2F</url>
    <content type="text"><![CDATA[树上有 N 个节点，其中 1-M 是叶子节点。每个节点可以被染成黑、白，或者不染色。指定某个不是叶子节点的节点作为根，要求给若干个节点染色后使得每个叶子节点到根的路径中第一个被染色节点的颜色为 C_i 。求需要染色的节点的最少个数。 N\leq 1000 。 分析 假设根已经存在，那么这个树形DP很简单。用 F[x][0/1] 表示染完以 x 为根的子树且将 x 染成 0/1 所需要的染色的最少节点数。 则： F[x][0] = 1 +\sum{\min(F[son][0]-1,F[son][1])} F[x][1] = 1 + \sum{\min(F[son][1]-1,F[son][0])} F[x][!C_x] = +\infty (x\leq M) 但是这道题没有指定根，则继续考虑不同根对染色节点数的影响。 假设将根节点 R 修改为 R 的某个儿子 S （移动了一条边），由于 S 和 R 的颜色必定不同（否则原先就不需要染 S ) ，因此换根后答案不变。 因此根可以随意移动，也就是说随意选择一个非叶子节点为根，答案均不变。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE; &#125;int N, M, C[MAXN];int F[2][MAXN];void dfs(int x, int fa) &#123; F[0][x] = F[1][x] = 1; if(x &lt;= M) &#123; F[C[x]^1][x] = INT_MAX; &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(v != fa) &#123; dfs(v, x); F[1][x] += std::min(F[1][v] - 1, F[0][v]); F[0][x] += std::min(F[0][v] - 1, F[1][v]); &#125; &#125;&#125;int main() &#123; int u, v; scanf("%d%d", &amp;N, &amp;M); rep(i, 1, M + 1) &#123; scanf("%d", &amp;C[i]); &#125; rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; dfs(M + 1, -1); printf("%d\n", std::min(F[0][M + 1], F[1][M + 1])); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>树形DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3910 火车]]></title>
    <url>%2FBZOJ-3910%2F</url>
    <content type="text"><![CDATA[N 个节点的树上，指定一条共 M 个节点的路径，每次会前往剩余节点中没有经过的最靠前的节点。求经过的总边数。 N\leq 500000 ,M\leq 400000 分析 根据 dis(u,v) = depth(u) + depth(v) - 2 * depth(lca(u,v )) ，可以在 O(\log{N}) 的时间求得两点间的距离。 现在的问题是如何快速判定某个点是否已经经过。 易得 u\rightarrow v 的路径为 u\rightarrow lca(u,v)\rightarrow v ，那么一个简单的思路就是直接更新这两条链上所有节点的状态，实现方法为树链剖分后用树状数组做区间覆盖，复杂度为 O(N+M\log^{2}{N}) ，过不了。 那么还有一个想法就是缩点，将已经经过的联通的所有点缩成一个点，可以通过并查集实现。 每次合并联通块的个数必会减一，所以最多进行 N 次合并。 复杂度 O(N\alpha(N)+M\log{N}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 500000 + 5;struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M, R;int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v]&#125;; H[v] = cntE;&#125;int Depth[MAXN], Par[20][MAXN];void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Par[0][x] = fa; rep(i, 1, 20) &#123; Par[i][x] = Par[i - 1][Par[i - 1][x]]; &#125; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (v != fa) &#123; dfs(v, x); &#125; &#125;&#125;int queryLCA(int u, int v) &#123; if (Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; rof(i, 20, 0) &#123; if ((Depth[v] - Depth[u]) &gt;&gt; i &amp; 1) &#123; v = Par[i][v]; &#125; &#125; if (u == v) &#123; return u; &#125; rof(i, 20, 0) &#123; if (Par[i][u] != Par[i][v]) &#123; u = Par[i][u]; v = Par[i][v]; &#125; &#125; return Par[0][u];&#125;int Anc[MAXN], Vis[MAXN];void init() &#123; rep(i, 1, N + 1) &#123; Anc[i] = i; &#125;&#125;int findAnc(int x) &#123; return x == Anc[x] ? x : Anc[x] = findAnc(Anc[x]);&#125;void update(int u, int v) &#123; while(Depth[u] &gt; Depth[v]) &#123; Vis[u] = 1; Anc[u] = Par[0][u]; u = findAnc(Par[0][u]); &#125;&#125;int main() &#123; int u, v, w; ll ans = 0; scanf("%d%d%d", &amp;N, &amp;M, &amp;R); rep(i, 1, N) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v); &#125; init(); dfs(R, 0); u = R; rep(i, 0, M) &#123; scanf("%d", &amp;v); if (Vis[v]) &#123; continue; &#125; int lca = queryLCA(u, v); ans += Depth[u] + Depth[v] - 2 * Depth[lca]; update(u, lca); update(v, lca); u = v; &#125; printf("%lld\n", ans); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>并查集</tag>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「PA 2014」BZOJ 3712 Fiolki]]></title>
    <url>%2FBZOJ-3712%2F</url>
    <content type="text"><![CDATA[N 个瓶子里起初各有 G_i 克第 i 种物质。共 M 步操作，第 i 步会将第 A_i 瓶中物质全部倒入第 B_i 瓶中。已知共有 K 组反应，瓶中每一克 C_i 和 D_i 可以转化为两克沉淀，沉淀不再参与反应。瓶中物质若可以进行多种反应，按照反应出现的前后次序进行。求最后剩下多少沉淀。 0\leq M&lt; N\leq 200000,0\leq K\leq 500000,1\leq G_i \leq 10^9 。 分析 这种合并两个瓶子内物质的操作，可以用树形结构来表示。 将初始状态作为叶子节点，若将 a 倒入 b ，则建立一个新点 x 作为 a,b 的父亲，若再将 b 倒入 c ，则再建立新点 y 作为 x,c 的父亲，依次类推，将 a 倒入 b 转化为建立新点作为 a,b 祖先的父亲。 那么会形成一个森林，而根据瓶中物质的初始状态，易得物质 x,y 反应只会出现在节点 lca(x,y) 处。 那么剩下需要处理的就是反应顺序的问题了。 根据建图的方法，若 depth(x) &lt; depth(y) ，则 x 一定先于 y 发生，或者 x,y 中的物质交集为空；如果 depth(x)=depth(y) ，则根据给定顺序进行反应。如此就确定了所有反应发生的顺序。 用倍增求LCA，根据 depth(lca(C_i,D_i)) 排序，复杂度 O(N\log{N}+K\log{K}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = (200000 + 5) &lt;&lt; 1;const int MAXK = 500000 + 5;int N, M, K;int G[MAXN];struct Edge &#123; int v, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v) &#123; E[++cntE] = (Edge) &#123;v, H[u]&#125;; H[u] = cntE;&#125;int Anc[MAXN];int Depth[MAXN];int Fa[20][MAXN];void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Fa[0][x] = fa; rep(i, 1, 20) &#123; Fa[i][x] = Fa[i - 1][Fa[i - 1][x]]; &#125; for(int i = H[x]; i; i = E[i].nxt) &#123; dfs(E[i].v, x); &#125;&#125;int queryLCA(int u, int v) &#123; if(Depth[u] &gt; Depth[v]) &#123; std::swap(u, v); &#125; rep(i, 0, 20) &#123; if((Depth[v] - Depth[u]) &gt;&gt; i &amp; 1) &#123; v = Fa[i][v]; &#125; &#125; if(u == v) &#123; return v; &#125; rof(i, 20, 0) &#123; if(Fa[i][v] != Fa[i][u]) &#123; u = Fa[i][u]; v = Fa[i][v]; &#125; &#125; return Fa[0][u];&#125;struct Node &#123; int u, v, dep, ord; bool operator &lt; (const Node &amp;x) const &#123; return dep == x.dep ? ord &lt; x.ord : dep &gt; x.dep; &#125;&#125; P[MAXK];int main() &#123; int u, v; scanf("%d%d%d", &amp;N, &amp;M, &amp;K); rep(i, 1, N + 1) &#123; scanf("%d", &amp;G[i]); Anc[i] = i; &#125; int cntP = N + 1; rep(i, 1, M + 1) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(N + i, Anc[u]); addEdge(N + i, Anc[v]); Anc[v] = N + i; &#125; rof(i, N + M + 1, N + 1) &#123; if(!Depth[i]) &#123; dfs(i, 0); &#125; &#125; cntE = 0; rep(i, 0, K) &#123; scanf("%d%d", &amp;u, &amp;v); int lca = queryLCA(u, v); if(lca) &#123; P[cntE++] = (Node) &#123;u, v, Depth[lca], i&#125;; &#125; &#125; std::sort(P, P + cntE); ll ans = 0; rep(i, 0, cntE) &#123; ll add = std::min(G[P[i].u], G[P[i].v]); G[P[i].u] -= add; G[P[i].v] -= add; ans += add; &#125; printf("%lld\n", ans &lt;&lt; 1); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2010 Hol」BZOJ 1776 cowpol 奶牛政坛]]></title>
    <url>%2FBZOJ-1776%2F</url>
    <content type="text"><![CDATA[在 N 个节点的有根树 T 中，节点被分成 K 。求每一组组内距离最远的两个节点的距离值。 N\leq 200000,K\leq N/2 分析 可以证明集合中距离最远的点对的其中之一一定是集合中深度最大的点。 证明如下： depth(x) 表示节点 x 的深度， dis(u,v) 表示节点 u,v 的距离， lca(u,v) 表示节点 u,v 的最近公共祖先。 利用反证法。假设集合中节点 u,v 均不是深度最大的节点，且 dis(u,v) 为集合中点对距离的最大值。 设该集合中深度最大的节点为 x 。 则有 dis(u,v)=depth(u)+depth(v)-2 * depth(lca(u,v)) ， dis(x,v)=depth(x)+depth(v)-2 * depth(lca(x,v)) 。 由于 dis(u,v)&gt;dis(x,v) ，则 depth(u)-2 * depth(lca(u,v))&gt;depth(x)-2 * depth(lca(x,v)) ；又因为 depth(x)&gt;depth(u) ，则 depth(lca(u,v)) &lt; depth(lca(x,v)) 。 那么 x 的位置有两个可能， x 在 v 的子树中； x 不在 v 的子树中。 若是前者，则 dis(u,x) &gt; dis(u,v) 是毫无疑问的；若是后者，若 x 不在 u 的子树中，则一定存在 lca(u,v)=lca(x,u) ，显然 depth(lca(u,v)) &lt; depth(lca(x,v)) 不成立，若 x 在 u 的子树中，则又转化为前者。 因此若 dis(u,v) 为集合中距离最大的点对，其中之一一定是集合内深度最大的节点。 那么求距离的最大值，只需要求集合内所有节点和深度最大的节点之间的距离，取最大值即可。 利用在线算法求LCA，复杂度 O(N\log{N}) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 200000 + 5;const int MAXM = 20;int N, K;std::vector&lt;int&gt; Son[MAXN], V[MAXN];int Depth[MAXN], Fir[MAXN];int Id[MAXN &lt;&lt; 1], cntI;void dfs(int x, int fa) &#123; Depth[x] = Depth[fa] + 1; Id[++cntI] = x; Fir[x] = cntI; rep(i, 0, SZ(Son[x])) &#123; dfs(Son[x][i], x); Id[++cntI] = x; &#125;&#125;int F[MAXM][MAXN &lt;&lt; 1];int Log[MAXN &lt;&lt; 1], Pow[MAXM];void buildST(int N) &#123; int k = log2(N); Pow[0] = 1; rep(i, 1, k + 1) &#123; Pow[i] = Pow[i - 1] &lt;&lt; 1; &#125; rep(i, 2, N + 1) &#123; Log[i] = Log[i &gt;&gt; 1] + 1; &#125; rep(i, 1, N + 1) &#123; F[0][i] = Id[i]; &#125; rep(j, 0, k) &#123; rof(i, N + 1, 1) &#123; if (i + Pow[j] &lt;= N) &#123; if (Depth[F[j][i]] &lt; Depth[F[j][i + Pow[j]]]) &#123; F[j + 1][i] = F[j][i]; &#125; else &#123; F[j + 1][i] = F[j][i + Pow[j]]; &#125; &#125; &#125; &#125;&#125;int queryLCA(int l, int r) &#123; if (l &gt; r) &#123; std::swap(l, r); &#125; int k = Log[r - l + 1]; int &amp;a = F[k][l], &amp;b = F[k][r - Pow[k] + 1]; return Depth[a] &lt; Depth[b] ? a : b;&#125;int main() &#123; int a, f, R; scanf("%d%d", &amp;N, &amp;K); rep(i, 1, N + 1) &#123; scanf("%d%d", &amp;a, &amp;f); V[a].push_back(i); Son[f].push_back(i); if (f == 0) &#123; R = i; &#125; &#125; dfs(R, 0); buildST(cntI); rep(i, 1, K + 1) &#123; int max_dep = 0, id = 0; rep(j, 0, SZ(V[i])) &#123; if (chkMax(max_dep, Depth[V[i][j]])) &#123; id = V[i][j]; &#125; &#125; int max_dis = 0; rep(j, 0, SZ(V[i])) &#123; if (V[i][j] != id) &#123; int dep = Depth[queryLCA(Fir[V[i][j]], Fir[id])]; chkMax(max_dis, Depth[V[i][j]] + Depth[id] - dep * 2); &#125; &#125; printf("%d\n", max_dis); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最近公共祖先</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「SHOI2010」BZOJ 2521 最小生成树]]></title>
    <url>%2FBZOJ-2521%2F</url>
    <content type="text"><![CDATA[N 点 M 边的无向图 G 中，每次可以使一条边边权+1。求最少进行多少次操作可以使得第 id 条边一定出现在 G 的最小生成树中。 1\leq N\leq 500,1\leq M\leq 800 分析 首先题目中的“除了指定一条边，其他所有边边权-1”的操作本质上就是使该边边权+1，其他边不变。 根据Kruskal的流程，若某条边权为 x 的边 e(u,v) 出现在MST中，就说明加完所有边权小于等于它的边后， u,v 两点不联通。 在这道题中，边权小于等于 x 的边构成了子图 T ，为了保证 e 一定在MST上，必须使得 T 中 u,v 不联通，而可以进行的操作就是增加边权。 若增加后某边的边权超过 x ，这条边就相当于从 T 中被删去。也就是说删去一条边权为 w 的边，只需要将其增加至 x+1 ，即增加了 x+1-w 次。 既然是破坏 T 中两点的联通性，就想到割。最小割即为将破坏源汇点联通性所需要的最小代价。第 i 条边被割的代价为 x+1-w_i 。 那么把 u 做源点， v 做汇点，建图，图的边权为 x+1-w_i(w_i\leq x) ，求得的最小割的值即为答案。 注意加边的时候需要加双向边，因为原图是无向图。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 500 + 5;const int MAXM = 800 * 2 + 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int N, M, S, T;int H[MAXN], cntE;int Cur[MAXN], Lv[MAXN], Dis[MAXN], tim, ffffc;int Flow[MAXM &lt;&lt; 1];void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || maxf == 0) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof Cur); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof Flow); &#125; return F;&#125;std::vector&lt;std::pair&lt;int, pii&gt; &gt; V;int main() &#123; int u, v, w, id; scanf("%d%d%d", &amp;N, &amp;M, &amp;id); memset(H, -1, sizeof H); cntE = -1; --id; rep(i, 0, M) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); V.push_back(std::make_pair(w, std::make_pair(u, v))); &#125; S = V[id].second.first, T = V[id].second.second; rep(i, 0, M) &#123; if(V[i].first &lt;= V[id].first &amp; i != id) &#123; addEdge(V[i].second.first, V[i].second.second, V[id].first - V[i].first + 1); addEdge(V[i].second.second, V[i].second.first, V[id].first - V[i].first + 1); &#125; &#125; printf("%d\n", dinic()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小割</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3031 理科男]]></title>
    <url>%2FBZOJ-3031%2F</url>
    <content type="text"><![CDATA[求 \frac{A}{B} 在 K 进制下的混循环位数以及循环节长度。 A,B,K\leq 10^{12} 分析 根据小学奥数的相关知识，如果一个混循环小数的混循环部分长度为 M ，循环节长度为 N ，那么转化成分数，分母为 10^M(10^N-1) 。 这是在十进制下的情况，在 K 进制下分母为 K^M(K^N-1) 。 那么 \frac{A}{B}=\frac{C}{K^M(K^N-1)} ，那么 B 可以写成TeX parse error: Double subscripts: use braces to clarify ，而 TeX parse error: Double subscripts: use braces to clarify ，一定存在某个 i 满足 p_i=M\times q_i 。 那么每次使 B = B / (B, K) ，直到 (B,K)=1 ，进行的次数为 max{\lceil p_i/q_i\rceil}=M ，即为混循环小数的位数。 那么剩下的问题就是如何求 N 。 令 a_i 为第 i-1 次除 B 的余数，则 a_1=A ；设 r_i 为第 i 位小数。 由于求 N 时的终止条件为 (B,K)=1 ，也就是说新的 A / B 在 K 进制下一定是个纯循环小数。 根据模运算的周期性，当 r_1=r_p 时， r[1,p-1] 就构成了循环节，其长度为 p 。 若 r_1=r_p 则一定存在 a_1=a_p 。由于TeX parse error: Double subscripts: use braces to clarify， 因此 TeX parse error: Double subscripts: use braces to clarify 。 而 a_1\equiv a_p\pmod{B} ，代入得 a_1\equiv a_1\times K^P\pmod{B} ，即 K^p\equiv 1\pmod{B} 。 N 转化为求 K 模 B 的阶的问题。 根据欧拉定理， K^{\varphi(B)}\equiv 1\pmod{B} ，即 \varphi(B) 一定为循环节的长度，但是不一定为循环节的最短长度。 若对 B 分解质因数得 B=\prod{a_i^{p_i}} ，则 \varphi(B)=\prod{(1-\frac{1}{a_i})} ，通过试除法或者Pollard-Rho+Miller-Rabin分解质因数可以求得。 那么最短循环节的长度一定为 \varphi(B) 的因数，Pollard-Rho+Miller-Rabin分解质因数后，依次通过快速幂检验 K^{\frac{\varphi{B}}{a}}\equiv 1\pmod{B} 是否成立，即可求得长度的最小值。 复杂度分析 通过gcd求混循环节长度的复杂度为 O(\log{B}) ，Pollard-Rho+Miller-Rabin的复杂度为 O(B^{\frac{1}{4}}) ，快速幂复杂度为 O(\log{\varphi(B)}) ，因此复杂度为 O(\log{B}+B^{\frac{1}{4}}+\log^2{\varphi(B)}) ，即 O(B^{\frac{1}{4}}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;ll mul(ll x, ll t, ll p) &#123; ll res = 0; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; res = (res + x) % p; &#125; x = (x + x) % p; &#125; return res;&#125;ll pow(ll x, ll t, ll p) &#123; ll res = 1; for (; t; t &gt;&gt;= 1) &#123; if (t &amp; 1) &#123; res = mul(res, x, p); &#125; x = mul(x, x, p); &#125; return res;&#125;bool Miller_Rabin(ll x) &#123; static ll Prime[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41&#125;; if (x == 2 || x == 3) &#123; return true; &#125; if (x &lt; 2 || (x % 6 != 1 &amp;&amp; x % 6 != 5)) &#123; return false; &#125; ll s = x - 1; while (!(s &amp; 1)) &#123; s &gt;&gt;= 1; &#125; rep(i, 0, 13) &#123; if (x == Prime[i]) &#123; return true; &#125; ll t = s, m = pow(Prime[i], s, x); while (t != x - 1 &amp;&amp; m != 1 &amp;&amp; m != x - 1) &#123; m = mul(m, m, x); t &lt;&lt;= 1; &#125; if (!(t &amp; 1) &amp;&amp; m != x - 1) &#123; return false; &#125; &#125; return true;&#125;ll Factor[1000];int cntP;ll gcd(ll a, ll b) &#123; while (b ^= a ^= b ^= a %= b); return a;&#125;ll Pollard_Rho(ll n, ll c) &#123; ll i = 1, k = 2; ll x = rand() % (n - 1) + 1, y = x; while (1) &#123; i++; x = (mul(x, x, n) + c) % n; ll d = gcd(((y - x) + n) % n, n) % n; if (d &gt; 1 &amp;&amp; d &lt; n) &#123; return d; &#125; if (y == x) &#123; return n; &#125; if (i == k) &#123; y = x; k &lt;&lt;= 1; &#125; &#125;&#125;void findFac(ll n, ll c) &#123; if (n == 1) &#123; return; &#125; if (Miller_Rabin(n)) &#123; Factor[cntP++] = n; return; &#125; ll p = n; while (p &gt;= n) &#123; p = Pollard_Rho(n, c--); &#125; findFac(n / p, c); findFac(p, c);&#125;ll getPhi(ll x) &#123; cntP = 0; findFac(x, 120); std::sort(Factor, Factor + cntP); cntP = std::unique(Factor, Factor + cntP) - Factor; double ans = x; rep(i, 0, cntP) &#123; ans *= 1 - (1.0 / Factor[i]); &#125; return ans;&#125;ll cal(ll A, ll B) &#123; ll x = getPhi(B), y = x; cntP = 0; findFac(x, 120); std::sort(Factor, Factor + cntP); cntP = std::unique(Factor, Factor + cntP) - Factor; rep(j, 0, cntP) &#123; ll &amp;i = Factor[j]; while (y % i == 0 &amp;&amp; pow(A, y / i, B) == 1) &#123; y /= i; &#125; &#125; return y;&#125;int main() &#123; ll A, B, K, T; scanf("%lld", &amp;T); while (T--) &#123; scanf("%lld%lld%lld", &amp;A, &amp;B, &amp;K); ll _gcd = gcd(A, B); A /= _gcd, B /= _gcd; int a = 0; while (true) &#123; ll _gcd = gcd(B, K); if (_gcd == 1) &#123; break; &#125; B /= _gcd; ++a; &#125; if (B == 1) &#123; printf("%d %d\n", a, 0); &#125; else &#123; printf("%d %lld\n", a, cal(K, B)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉函数</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3033 太鼓达人]]></title>
    <url>%2FBZOJ-3033%2F</url>
    <content type="text"><![CDATA[给定字串长度 K ，需要构造一个长度为 M 的01串（环状），使得所有长度为 K 的子串互不相同。求 M 的最大值以及对应的字典序最小串。 K\leq 11 分析 将 k 位二进制都看成点，图中一共有 2^k 个不同的点。 每一个点可以删去第一位并在最后填充 0 或 1 转移到其它点，所有所有点的出度入度都是 2 。 这个有向图所有点出入度相等，因此存在欧拉回路，即这是一个欧拉图。 那么 M 即在该图中的回路长度的最大值，根据欧拉回路的性质， M=2^k 。 由于要求串的字典序最小，因此前 k 位皆为 0 ，在此基础上爆搜即可得到整个串的排序。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647// Copyright (C) 2018 SNqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chNMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chNMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = (1 &lt;&lt; 11) + 5;int N, T;int Ans[MAXN];bool Vis[MAXN];bool dfs(int x, int y) &#123; if(Vis[x]) &#123; return false; &#125; if(y == T) &#123; return true; &#125; Ans[y] = x &amp; 1; Vis[x] = 1; if(dfs((x &lt;&lt; 1) &amp; (T - 1), y + 1) || dfs((x &lt;&lt; 1 | 1) &amp; (T - 1), y + 1)) &#123; return true; &#125; Vis[x] = 0; return false;&#125;int main() &#123; scanf("%d", &amp;N); T = 1 &lt;&lt; N; printf("%d ", T); dfs(0, 1); rep(i, 1, N) &#123; printf("0"); &#125; rep(i, 1, T - N + 2) &#123; printf("%d", Ans[i]); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>欧拉回路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3032 七夕祭]]></title>
    <url>%2FBZOJ-3032%2F</url>
    <content type="text"><![CDATA[N\times M 的黑白矩阵中某些格子是黑色的。每次可以交换相邻两个格子的颜色，尽可能使得行与行/列与列之间的黑色格子数量相同，如果可行 ，输出最少交换次数。 1\leq N,&nbsp;M\leq 100000 。 分析 首先如果 T 不是 N,M 的倍数，那么肯定不能均分，如此可以判断输出 both 还是什么其它的情况。 可以发现行与列颜色个数相同的要求是相互独立的，可以通过左右交互使得列相同，上下交换使得行相同。 令 a_i 为第 i 行已有的黑色格子个数， x_i 为第 i 行和第 i+1 行交换的格子个数，那么能得到以下等式： \begin{equation} x_1=a_1+x_n-p\ x_2=a_2+x_1-p\ \cdots\ x_n=a_n+x_{n-1}-p\ \end{equation} 那么交换的总次数为 \sum{|x_i|} ，代入上式得 \sum{|x_i|}=\sum|a_i+x_{i-1}-p| 。 再将 x_i 的表达式代入 x_{i+1} 可得： \begin{equation} x_1=a_1+x_n-p\ x_2=a_2+(a_1+x_n-p)-p=a_1+a_2+x_n-2p\ \cdots\ x_n=a_1+a_2+\cdots+a_n+x_n-np \end{equation} 令 s_i = \sum\limits_{j=1}^{i}{a_j}-ip ，即 {a_i-p} 的前缀和，化简为 \sum{|x_i|}=|s_i+x_n| 。 根据绝对值不等式， x_n 为 s[1...n] 的中位数的相反数时，原式取最小值。 对于列同理。 具体即先统计每行/列的黑格子个数，前缀和后通过 std::nth_element() O(N) 实现。 复杂度 O(N) 。 参考代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 100000 + 5;ll N, M, Q;int Col[MAXN], Row[MAXN];ll cal(int A[], ll n) &#123; static ll Num[MAXN]; ll num = Q / n, ans = 0; Num[0] = 0; rep(i, 1, n) &#123; Num[i] = 1ll * Num[i - 1] + A[i] - num; &#125; std::nth_element(Num + 1, Num + (n &gt;&gt; 1), Num + n); ll x = Num[n &gt;&gt; 1]; rep(i, 0, n) &#123; ans += (ll)std::abs(x - Num[i]); &#125; return ans;&#125;ll cal() &#123; ll sum = 0; if (Q % N == 0) &#123; sum += cal(Row, N); &#125; if (Q % M == 0) &#123; sum += cal(Col, M); &#125; return sum;&#125;int main() &#123; int x, y; scanf("%lld%lld%lld", &amp;N, &amp;M, &amp;Q); rep(i, 0, Q) &#123; scanf("%d%d", &amp;x, &amp;y); ++Row[x]; ++Col[y]; &#125; if (Q % N != 0 &amp;&amp; Q % M != 0) &#123; puts("impossible"); return 0; &#125; if (Q % N == 0 &amp;&amp; Q % M == 0) &#123; printf("both "); &#125; else if (Q % N == 0) &#123; printf("row "); &#125; else &#123; printf("column "); &#125; printf("%lld\n", cal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「IOI2003」Trail Maintenance]]></title>
    <url>%2FIOI2003-Trail%20Mainrenance%2F</url>
    <content type="text"><![CDATA[起初图有 N 个点，没有边。共进行 M 次操作，每次增加一条有边权的无向边，并查询图的连通情况。若图连通，求最小生成树的权值和，若不联通，输出 -1 。 N\leq 200,M\leq 6000 。 分析 如果每次求一遍最小生成树，复杂度为 O(M^2\log{N}) ，按照当时评测机的运行能力显然是不能通过的。 首先判断图的连通情况，只需要通过并查集维护集合的元素个数，如果小于 N ，直接输出 -1 。 当第一次得到连通图的时候，利用MST的一种算法计算得到权值和， 复杂度 O(M\log{N}) 。 树上再增加一条边，就一定会出现环，那么删去该环上的任意一条边就能得到一棵新的生成树。由于我们要得到的是最小生成树，所以删去环上权值最大的边即可满足要求。 也就说后面的操作即“破环”法，通过DFS实现。即通过无向图中环上两点，遍历该环上所有边，并找到权值最大的边，完成替换，复杂度为 O(M) 。 那么总复杂度为 O(M\log{N}+M^2) 。 题库链接 由于暂时没有找到国内OJ可以测这道题，听说LOJ暑假结束前要增加往年IOI试题，我对此表示期待。 俄罗斯的yandex OJ有历年的IOI原题，本题的链接为https://contest.yandex.ru/ioi/contest/558/problems/， 请注意一定要使用std::cout和std::endl，否则会出现Idleness limit exceeded的情况。 当然也可以选择自行下载官方数据并使用lemon等工具评测，IOI2003的数据链接为http://www.ioinformatics.org/locations/ioi03/contest/， 将ioi03替换成其它时间可以得到其它年IOI的数据，如ioi05。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 6000 + 5;struct Edge &#123; int u, v, w, mrk, nxt;&#125; E[MAXN &lt;&lt; 1];int N, M;int sum, tot;int H[MAXN], cntE = -1;int Anc[MAXN], Rnk[MAXN];void init() &#123; rep(i, 1, N + 1) &#123; Anc[i] = i; Rnk[i] = 1; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if (x == y) &#123; return false; &#125; if (Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; if (Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, 0, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;v, u, w, 0, H[v]&#125;; H[v] = cntE; tot += merge(u, v);&#125;int Prim() &#123; static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq; static int Vis[MAXN], Dis[MAXN], Id[MAXN]; memset(Vis, 0, sizeof Vis); memset(Dis, 0x3f, sizeof Dis); Dis[1] = 0; Pq.push(std::make_pair(0, 1)); int cnt = 0, sum = 0; while (!Pq.empty() &amp;&amp; cnt &lt; N) &#123; pii x = Pq.top(); Pq.pop(); if (!chkMax(Vis[x.second], 1)) &#123; continue; &#125; if (E[Id[x.second]].w == x.first) &#123; E[Id[x.second]].mrk = 1; E[Id[x.second] ^ 1].mrk = 1; &#125; sum += x.first; ++cnt; for (int i = H[x.second]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (chkMin(Dis[v], E[i].w)) &#123; Id[v] = i; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125; &#125; return sum;&#125;int Vis[MAXN];int dfs(int id, int x, int v) &#123; Vis[x] = 1; if (id &gt;=0 &amp;&amp; E[id].v == v) &#123; return id; &#125; else &#123; for (int i = H[x]; ~i; i = E[i].nxt) &#123; if (E[i].mrk &amp;&amp; !Vis[E[i].v]) &#123; int res = dfs(i, E[i].v, v); if (res != -1) &#123; if (E[res].w &lt; E[i].w) &#123; return i; &#125; else &#123; return res; &#125; &#125; &#125; &#125; &#125; return -1;&#125;int cal(int u, int v, int w) &#123; if (!sum) &#123; sum = Prim(); &#125; else &#123; memset(Vis, 0, sizeof Vis); Vis[u] = 1; int id = dfs(-1, u, v); if (E[id].w &gt; w) &#123; addEdge(u, v, w); sum = sum - E[id].w + w; E[id].mrk = E[id ^ 1].mrk = 0; E[cntE].mrk = E[cntE ^ 1].mrk = 1; &#125; &#125; return sum;&#125;int main() &#123; int u, v, w; memset(H, -1, sizeof H); scanf("%d%d", &amp;N, &amp;M); init(); rep(i, 0, M) &#123; scanf("%d%d%d", &amp;u, &amp;v, &amp;w); if (tot != N - 1) &#123; addEdge(u, v, w); &#125; if (tot != N - 1) &#123; puts("-1"); &#125; else &#123; printf("%d\n", cal(u, v, w)); &#125; &#125; return 0;&#125;]]></content>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「PA 2014」BZOJ 3714 Kuglarz]]></title>
    <url>%2FBZOJ-3714%2F</url>
    <content type="text"><![CDATA[一排 N 个杯子中某些杯子里有小球。可以花费 C_{l,r} 来获取 [l,r] 中小球总数的奇偶性，求得知每个杯子小球状态的最小花费。 N\leq 2000 。 分析 首先注意到花费的数据范围是 10^9 ，因此可能会爆int，需要使用long long。 由于区间球总数的奇偶性满足区间加减法，即 [l,r] = [1,r]-[1,l-1] ，若已知 [1,l] 和 [1,l+1] 那么就能得到杯子 l 是否有球。 那么如果想知道每个杯子下面是否有球，最少需要购买 n 次，即 [1,1],[2,2],...[n,n] ，可以证明这是购买次数的下界。 那么把杯子抽象成点，购买关系抽象成边，由于奇偶性满足区间减法/加法，因此让 [l+1,r] 区间转化为边 i\rightarrow j ，边权为花费。 如此路径 i\rightarrow j\rightarrow k 即 [i+1,j],[j+1,k] ，合并即可知道 [i+1,k] 的奇偶性。也就是说在同一个联通分量的两个点 l,r ，我们可以通过它们之间的路径得到 [l+1,r] 的奇偶性。 易得图中出现环显然是不优的，那么考虑生成树（生成森林）。 由于可以购买任意 [l,r] 的奇偶性，也就是说生成树可以得到任意 [l,r] 的奇偶性，也就能得到任意一个杯子是否有球在下面。 而构造新图中同时构造了一个新点 0 （通过 [1,x] 得到 0\rightarrow x ） ，所以新图的生成树是 n 条边，符合之前的推论。 如此求得新图的最小生成树的权值和即为最小花费。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 2000 + 5;struct Edge &#123; int u, v, w; bool operator &lt; (const Edge &amp;x) const &#123; return w &lt; x.w; &#125;&#125; E[MAXN * MAXN];int N, cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w&#125;;&#125;int Anc[MAXN], Rnk[MAXN];void init() &#123; rep(i, 0, N + 1) &#123; Anc[i] = i; Rnk[i] = 1; &#125;&#125;int findAnc(int x) &#123; return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123; x = findAnc(x), y = findAnc(y); if(x == y) &#123; return false; &#125; if(Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y; &#125; else &#123; Anc[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;ll Kruskal() &#123; init(); std::sort(E + 1, E + cntE + 1); ll sum = 0; int cnt = -1; rep(i, 1, cntE + 1) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].w; if(++cnt == N) &#123; break; &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; rep(j, i, N + 1) &#123; scanf("%d", &amp;w); addEdge(i - 1, j, w); &#125; &#125; printf("%lld\n", Kruskal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 2654 tree]]></title>
    <url>%2FBZOJ-2654%2F</url>
    <content type="text"><![CDATA[在一张无向带权连通图中，每条边是黑色或白色。求一棵恰好有need条白色边的生成树，并使得权值和最小。 V\leq 50000,E\leq 100000 。 分析 直接求最小生成树显然不能保证一定出现need条白边，而最小生成树只跟边权有关，因此需要对这些边权做一些手脚。 记 f(x) 为所有白边边权增加 x 后，新图的最小生成树中白边的个数，易得 f(x) 随 x 增大而单调不递增。 证明如下：考虑Kruskal算法的流程，如果 x 增加，新排序的白边一定会集体向后移动，而黑边则会排在更前面的位置，因此生成树上白边的数量一定不会增加，最多维持不变。 那么假设白边边权全部增加 x 后新图的最小生成树的白边数量恰好为need条，权值和为 sum ，则实际生成树的权值和为 sum-need\times x 。 如此就可以对 x 二分，极端情况就是将权值最小的白边排在权值最大的黑边后面，因此 x 的上界是为 max{w_i} ， w_i 为原图的边权。 当出现黑边和白边边权相等的情况时，将白边排在前面，如此可以使得白边尽可能的多。 复杂度 O(E\log{E}\log{\max{w_i}}) 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;typedef std::pair&lt;int, int&gt; pii;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 50000 + 5;const int MAXM = 100000 + 5;struct Edge &#123;int u, v, val, col;bool operator &lt; (const Edge &amp;x) const &#123; return val == x.val ? col &lt; x.col : val &lt; x.val;&#125;&#125; E[MAXM];int N, M, Q;int Anc[MAXN], Rnk[MAXN];void init() &#123;rep(i, 0, N) &#123; Anc[i] = i; Rnk[i] = 1;&#125;&#125;int findAnc(int x) &#123;return Anc[x] == x ? x : Anc[x] = findAnc(Anc[x]);&#125;bool merge(int x, int y) &#123;x = findAnc(x), y = findAnc(y);if(x == y) &#123; return false;&#125;if(Rnk[x] &lt; Rnk[y]) &#123; Anc[x] = y;&#125; else &#123; Anc[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125;&#125;return true;&#125;pii Kruskal(int x) &#123;init();rep(i, 0, M) &#123; if(!E[i].col) &#123; E[i].val += x; &#125;&#125;std::sort(E, E + M);int sum = 0, cnt = 1, num = 0;rep(i, 0, M) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].val; if(!E[i].col) &#123; ++num; &#125; if(++cnt == N) &#123; break; &#125; &#125;&#125;rep(i, 0, M) &#123; if(!E[i].col) &#123; E[i].val -= x; &#125;&#125;return std::make_pair(num, sum - x * Q);&#125;int main() &#123;int u, v, w, c;int l, r = 0, ans = 0;scanf("%d%d%d", &amp;N, &amp;M, &amp;Q);rep(i, 0, M) &#123; scanf("%d%d%d%d", &amp;u, &amp;v, &amp;w, &amp;c); E[i] = (Edge) &#123;u, v, w, c&#125;; r = std::max(r, w + 1);&#125;l = -r;while(l &lt; r) &#123; int m = (l + r) &gt;&gt; 1; pii x = Kruskal(m); if(x.first &gt;= Q) &#123; ans = x.second; l = m + 1; &#125; else &#123; r = m; &#125;&#125;printf("%d\n", ans);return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>二分</tag>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Usaco2008 Oct」BZOJ 1601 灌水]]></title>
    <url>%2FBZOJ-1601%2F</url>
    <content type="text"><![CDATA[有 N 块农田，连通两块农田的花费为 W_{i,j} ，直接在农田上建水站费用为 A_i ，求使得所有农田被水灌溉的最小费用。 N\leq 300 。 分析 如果没有直接建水站的费用，那么使得整个图联通的最小代价即最小生成树的权值和。 但是由于可以建水站，且费用可能低于直接连边，因此可能会存在将图划分成多个连通块，每个块内建立最小生成树使得覆盖所有点的情况（即建多个水站）。 对于这种多个连通块的情况，有一种思路就是建一个虚拟点连接所有点，然后以该点为根构建最小生成树，如此便只需要求一棵MST。 那么对于这道题而言，显然这个根连接其他点的权值为在该点建水站的费用。 由于是张完全图，因此选择Prim算法求MST显然在常数上优于Kruskal算法，因为 E 是 V^2 级别的。 复杂度 O(E\log{V}) 或者 O(E\log{E}) ，即 O(n^2\log{n}) 。 参考代码 Prim 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 300 + 5;int N, R;struct Edge &#123; int v, w, nxt;&#125; E[MAXN * MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;typedef std::pair&lt;int, int&gt; pii;int Prim(int x) &#123; static std::priority_queue&lt;pii, std::vector&lt;pii&gt;, std::greater&lt;pii&gt; &gt; Pq; static int Vis[MAXN], Dis[MAXN]; memset(Vis, 0, sizeof Vis); memset(Dis, 0x3f, sizeof Dis); Dis[x] = 0; Pq.push(std::make_pair(0, x)); int cnt = -1, sum = 0; while (!Pq.empty() &amp;&amp; cnt &lt; N) &#123; pii x = Pq.top(); Pq.pop(); if (!chkMax(Vis[x.second], 1)) &#123; continue; &#125; sum += x.first; ++cnt; for (int i = H[x.second]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (chkMin(Dis[v], E[i].w)) &#123; Pq.push(std::make_pair(Dis[v], v)); &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;w); addEdge(0, i, w); addEdge(i, 0, w); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; scanf("%d", &amp;w); if (i != j) &#123; addEdge(i, j, w); &#125; &#125; &#125; printf("%d\n", Prim(R)); return 0;&#125; Kruskal 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;const int MAXN = 300 + 5;int N, R;struct Edge &#123; int u, v, w, nxt; bool operator &lt; (const Edge &amp;x) const &#123; return w &lt; x.w; &#125;&#125; E[MAXN * MAXN];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;u, v, w, H[u]&#125;; H[u] = cntE;&#125;int Fa[MAXN], Rnk[MAXN];void init() &#123; rep(i, 0, N + 1) &#123; Fa[i] = i; Rnk[i] = 1; &#125;&#125;int findFa(int x) &#123; return x == Fa[x] ? x : Fa[x] = findFa(Fa[x]);&#125;bool merge(int x, int y) &#123; x = findFa(x), y = findFa(y); if(x == y) &#123; return false; &#125; if(Rnk[x] &lt; Rnk[y]) &#123; Fa[x] = y; &#125; else &#123; Fa[y] = x; if(Rnk[x] == Rnk[y]) &#123; ++Rnk[x]; &#125; &#125; return true;&#125;int Kruskal() &#123; int sum = 0, cnt = 0; init(); std::sort(E + 1, E + cntE + 1); rep(i, 1, cntE + 1) &#123; if(merge(E[i].u, E[i].v)) &#123; sum += E[i].w; if(++cnt == N) &#123; break; &#125; &#125; &#125; return sum;&#125;int main() &#123; int w; scanf("%d", &amp;N); rep(i, 1, N + 1) &#123; scanf("%d", &amp;w); addEdge(0, i, w); &#125; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; scanf("%d", &amp;w); if (i &lt; j) &#123; addEdge(i, j, w); &#125; &#125; &#125; printf("%d\n", Kruskal()); return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最小生成树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Miller–Rabin学习笔记]]></title>
    <url>%2FMiller-Rabin%2F</url>
    <content type="text"><![CDATA[对于检查一个数是否为素数，有不少方法。比如基于素数定义的朴素算法，复杂度 O(\sqrt{N}) ；比如当筛取 [1,N] 中所有素数时，可以通过欧拉筛实现 O(N) 的线性筛. 如果要检测大量的随机数是否为素数，这两个方法显然都不适用。对于这种情况，我们使用基于素数定理逆命题的Miller-Rabin素性测试。 前置定理 威尔逊定理 若 p 为素数，则 (p-1)!\equiv -1\pmod{p} ，其逆定理也成立。 费马小定理 定理的特殊形式 若 p 是素数， a 为正整数，且 a 与 p 互质，则 a^{p-1}\equiv 1 \pmod{p} 。 证明 由于 a 与 p 互质，则 a,2a,3a,\cdots,(p-1)a 都与 p 互质，且不存在 i\times a \equiv j\times a\pmod p(1\leq i &lt; j &lt; p) 。 因此 a,2a,3a,\cdots,(p-1)a 对 p 的取余构成 1,2,\cdots,p-1 的排列。 那么 a\times 2a\times 3a\times \cdots\times (p-1)a\equiv1\times 2\times 3\times \cdots\times (p-1) \pmod{p} 。 化简为 a^{p-1}\times(p-1)!\equiv (p-1)!\pmod{p} ，即 a^{p-1}\equiv 1\pmod{p} 。 定理的一般形式 若 p 是素数，则 a^p\equiv a\pmod{p} 。 证明 如果 a 能被 p 整除，则上式显然成立；如果不能整除，那么 gcd(a,p)=1 ，对于这种情况前面已经证明。 而费马小定理是欧拉定理的一个特殊形式， a^{\varphi(p)}\equiv 1\pmod{p} 。因为根据定义，当 p 是质数时， \varphi(p)=p-1 。 素性测试 Fermat素性测试 人们经过测试发现，如果一个数 b 满足费马小定理的逆命题（令 a=2 ， 2^{b-1}\equiv 1\pmod{b} )，那么 b 有很大可能是一个素数。 但是仅仅通过费马小定理的逆命题来判断素性显然是错误的，比如 2^{560}\equiv 1\pmod{561} 但是 561=11\times 51 ，这类数被称为伪素数。 后来人们把满足 a^{b-1}\equiv 1\pmod{b} 的合数 b 称为以 a 为底的伪素数。 基于此，有一种方法就是预处理区间内的所有伪素数，那么满足 2^{b-1}\equiv 1\pmod{b} 且不在伪素数表中的数就是素数。 然而使用这种方法过于麻烦，不用它错误率却不低，因此需要对原测试方法进行改进。 这种算法的问题在于无法鉴别出某些合数，由于费马小定理成立是素数的必要条件，因此不会出现将素数被判定成合数的情况。 既然它有一定概率判断正确，那么有一个很自然的想法。那便是用多组 a_i(a_i &lt; b) 去检查 b 是否满足 a_{i}^{b-1}\equiv 1\pmod{b} 。如果同时成立， b 是素数的概率应该会大幅增加，反之如果一次被判定为合数就确定其为合数。 简而言之，通过若干个小于待测数的正整数 a 做底数进行测试素性的方法被称为Fermat素性测试。 Miller-Rabin素性测试 二次探测定理优化 定理 若 p 是素数， x 为小于 p 的正整数，且 x^2\equiv 1\pmod{p} ，则 x 为 1 或 p-1 。 证明 x^2=(x+1)(x-1)+1 ，即 p 能整除 (x+1)(x-1) ，那么 x 只能为 1 或 -1 ，在模 p 意义下即 1 或 p-1 。 通过二次探测定理，我们可以加强费马小定理，以此降低素性探测的错误率。 假设 a 被判定为素数，即 2^{a-1}\equiv 1\pmod{a} ，那么根据二次探测定理， 2^{\frac{a-1}{2}}\bmod a 只能为 1 或 a-1 。 拿 561 举例子，虽然满足 2^{280}\bmod 561 = 1 ，但是再往下一步却发现 2^{140}\bmod 561=67 ，因此 561 不是素数。 将其转化一般形式，用于检测正整数 n​ 的素性。 1.将 n-1 表示为 d\times 2^{r} 的形式，其中 d 是一个奇数。 2.依次检查 2^{d\times 2^{r-i}}\bmod n 的值，如果 2^{d\times 2^{r-i}}\bmod n = 1 ，那么二次探测定理就继续适用于 2^{d\times 2^{r-i-1}} ，于是递增 i 直到某个 i 满足 2^{d\times {r-i}}\bmod n =n-1 或 r=i 结束。 换句话说，如果 n 是一个素数，那么一定存在 0\leq i\leq r 使得 2^{d\times 2^i}\bmod n = n-1 或 2^d\bmod n=1 。不满足的 n 一定是合数。 同理Fermat素性探测优化的想法，依然采取使用多个底数来降低错误率，即检测 2^{d\times 2^r},3^{d\times 2^r},\cdots 。 Miller-Rabin素性测试同样是不确定算法，我们把可以通过以 a 为底的Miller-Rabin测试的合数称作以 a 为底的强伪素数。 第一个以 2 为底的强伪素数为 2047 ，而第一个以 2 和 3 为底的强伪素数则达到了 1373653 ，可以直观感受到Miller-Rabin素性探测的正确率之高。 根据 Wikipedia的相关词条，如果检测的正整数在 int 中（ 2^{32} ，即 2.5\times 10^9 ），底数只需要前 4 个素数作为底数，即 2,3,5,7 ；如果是 long long （ 2^{64} ，即 1.85\times 10^{19} ），则需要前 13 个素数做底数，即 2,3,5,\cdots,41 。如此可以保证数据范围内的所有检测不会出错。 具体实现 算法流程 首先得到关于 n-1 的 r 和 d 。对于每一轮（不同底数）通过快速幂得到 a^{d} ，再依次检查 2^{d\times 2^i}\bmod n 的值 ，直到 i &gt; r 或者值为 1 或 n-1 。 若 i &gt; r ，则判定 n 为合数，否则继续测试下一个底数 。 注意事项 int 与溢出 即使素数测试的数据范围是 int，也不要吝啬使用 long long。两个 int 相乘会有溢出的可能，导致死循环或者判定结果出错。 浮点数与自然溢出 如果数据范围是 long long ，那么两个 long long 相乘溢出是很有可能的，但是没有更大的类型可以使用。 常规解决方法就是采取类似快速幂的方法，通过二进制分解来实现乘法取模，但是复杂度为 O(\log{N}) 。 还有一种 O(1) 的方法，那便是将 a\times b\bmod p 转化成 a\times b - (a / p\times b)\times p 。将 a 强转成 long double 进行计算。 更具体地： 1234long long mul(long long x, long long y, long long m) &#123; // x ^ y % mx %= m, y %= m;return (x * y - m * (long long)((long double)x / m * y) % m + m) % m;&#125; 然而我没有理解C++对溢出的处理方式，所以无法对这个函数做出准确的解释。 不过这种方法在[2012集训队互测]JZPKIL的多份题解中被使用，实测也得到了正确的结果。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657// Copyright (C) 2018 Skqliao. All rights served.#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;template&lt;typename T&gt; inline bool chkMin(T &amp;a, const T &amp;b) &#123; return a &gt; b ? a = b, 1 : 0; &#125;template&lt;typename T&gt; inline bool chkMax(T &amp;a, const T &amp;b) &#123; return a &lt; b ? a = b, 1 : 0; &#125;ll mul(ll x, ll y, ll m) &#123;x %= m, y %= m;return (x * y - m * (ll)((long double)x / m * y) % m + m) % m;&#125;ll pow(ll x, ll t, ll m) &#123;ll res = 1;for(; t; t &gt;&gt;= 1, x = mul(x, x, m)) &#123; if(t &amp; 1) &#123; res = mul(res, x, m); &#125;&#125;return res;&#125;bool miller_rabin(ll x) &#123;static ll Prime[] = &#123;2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41&#125;;if(x == 2 || x == 3) &#123; return true;&#125;if(x &lt; 2 || (x % 6 != 1 &amp;&amp; x % 6 != 5)) &#123; return false;&#125;ll s = x - 1;while(!(s &amp; 1)) &#123; s &gt;&gt;= 1;&#125;rep(i, 0, 13) &#123; if(x == Prime[i]) &#123; return true; &#125; ll t = s, m = pow(Prime[i], s, x); while(t != x - 1 &amp;&amp; m != 1 &amp;&amp; m != x - 1) &#123; m = mul(m, m, x); t &lt;&lt;= 1; &#125; if(!(t &amp; 1) &amp;&amp; m != x - 1) &#123; return false; &#125;&#125;return true;&#125;int main() &#123;return 0;&#125; 参考资料 Miller_Rabin素数测试[Fermat小定理][二次探测定理][同余式][Wilson定理] | 学步园 Miller–Rabin primality test - Wikipedia 《信息学奥赛之数学一本通》]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Miller-Rabin</tag>
        <tag>数论</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3436 小 K 的农场]]></title>
    <url>%2FBZOJ-3436%2F</url>
    <content type="text"><![CDATA[有若干组关系，形如 A_i - A_j \leq x, \geq x, = x 。 求 A[1 \cdots N] 是否能满足所有关系。 分析 将三种形式转化成不等式的形式，即： a - b \leq c a-b \geq c a = b 要求这个不等式组是否有解。 通过查分约束，转换成图上问题。 根据三角不等式 d_u + d(u,v)\geq d_v ，转化一下即 d_u - d_v \geq d(u,v) 。 那么按照如下方法建图： a - b\leq c ，即 d(b,a) = c a-b \geq c ，即 d(a,b) = -c a=b ，即 d(a,b)=d(b,a)=0 。其中 d(u,v) 表示 u 到 v 的有向边的距离。 无解的条件即图中出现负环。 通过 SPFA算法， 如果一个点入队 n 次说明存在负环。 复杂度上界 O(nm) ，实际数据很弱。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;#define ONLINE_JUDGEnamespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if (cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace iovoid open() &#123; freopen("farm.in", "r", stdin); freopen("farm.out", "w", stdout);&#125;const int MAXN = 10000 + 5;struct Edge &#123; int v, w, nxt;&#125; E[MAXN &lt;&lt; 1];int H[MAXN], cntE;void addEdge(int u, int v, int w) &#123; E[++cntE] = (Edge) &#123;v, w, H[u]&#125;; H[u] = cntE;&#125;int N, M;int Dis[MAXN], Cnt[MAXN], Inq[MAXN];bool spfa(int n) &#123; static std::queue&lt;int, std::deque&lt;int&gt; &gt; Que; rep(i, 0, n) &#123; Inq[i] = true; Que.push(i); &#125; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] &gt; Dis[x] + E[i].w) &#123; Dis[v] = Dis[x] + E[i].w; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; if (++Cnt[v] &gt; n) &#123; return true; &#125; &#125; &#125; &#125; &#125; return false;&#125;int main() &#123; //open(); int N = io::gt&lt;int&gt;(), M = io::gt&lt;int&gt;(); while (M--) &#123; int opt = io::gt&lt;int&gt;(); int u = io::gt&lt;int&gt;(), v = io::gt&lt;int&gt;(); if (opt == 1) &#123; addEdge(u, v, -io::gt&lt;int&gt;()); &#125; else if (opt == 2) &#123; addEdge(v, u, io::gt&lt;int&gt;()); &#125; else &#123; addEdge(u, v, 0); &#125; &#125; rep(i, 0, N + 1) &#123; addEdge(0, i, 0); &#125; if (spfa(N + 1)) &#123; puts("No"); &#125; else &#123; puts("Yes"); &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>最短路</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BZOJ 3211 花神游历各国]]></title>
    <url>%2FBZOJ-3211%2F</url>
    <content type="text"><![CDATA[维护一个序列，支持区间开方（向下取整）和区间求和。 序列长为 N ，共 M 次操作。 1\leq N.M\leq 100000&nbsp; ，序列中元素 0\leq A_i\leq 10^{12} 。 分析 区间开方并不满足区间加法，所以只能每个数暴力开方。 由于开方是向下取整，因此对于 1 和 0 而言，开方后还是自己，对区间和没有产生影响。 而对于最大值 10^{12} 而言，最多开 5 次方就会变成 1 ，也就是说开方对一个数的影响最多只有 5 次。 那么假如对于操作区间 [l,r] 而言，其中的元素非 0 即 1 ，那么这个区间就无需继续操作。 因此用线段树维护区间和，同时对无需继续操作的区间打标记。 每次区间开方的时候，如果两个子树都被打了标记，则无需继续；否则递归到单个元素进行开方，并检查是否成为 0 和 1 ，对其打标记；如果两个子树都被打上标记，那么就将标记上移到父亲节点。 复杂度 O(M\log{N}\log{\log{W}}) ，其中 W 为元素最大值。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rep(i, l, r) for (int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; static T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void flush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; bool f = c == '-'; T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out, *end = Out + MAXSIZE - 100;void flush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c; if(cur &gt;= end) &#123; flush(); &#125;&#125;#endif&#125; // namespace ioconst int MAXN = 100000 + 5;struct SegmentTree &#123;#define LT rt &lt;&lt; 1, l, m#define RT rt &lt;&lt; 1 | 1, m + 1, r ll Sum[MAXN &lt;&lt; 2], Flag[MAXN &lt;&lt; 2]; void pushUp(int rt) &#123; Sum[rt] = Sum[rt &lt;&lt; 1] + Sum[rt &lt;&lt; 1 | 1]; Flag[rt] = Flag[rt &lt;&lt; 1] &amp; Flag[rt &lt;&lt; 1 | 1]; &#125; void build(int rt, int l, int r) &#123; if(l == r) &#123; Sum[rt] = io::gt&lt;ll&gt;(); return ; &#125; int m = (l + r) &gt;&gt; 1; build(LT); build(RT); pushUp(rt); &#125; void change(int rt, int l, int r, int a, int b) &#123; if(Flag[rt]) &#123; return ; &#125; if(l == r) &#123; Sum[rt] = sqrt(Sum[rt]); if(Sum[rt] == 1 || Sum[rt] == 0) &#123; Flag[rt] = 1; &#125; return ; &#125; int m = (l + r) &gt;&gt; 1; if(a &lt;= m) &#123; change(LT, a, b); &#125; if(m &lt; b) &#123; change(RT, a, b); &#125; pushUp(rt); &#125; ll querySum(int rt, int l, int r, int a, int b) &#123; if(a &lt;= l &amp;&amp; r &lt;= b) &#123; return Sum[rt]; &#125; int m = (l + r) &gt;&gt; 1; ll res = 0; if(a &lt;= m) &#123; res += querySum(LT, a, b); &#125; if(m &lt; b) &#123; res += querySum(RT, a, b); &#125; return res; &#125;&#125; T;int main() &#123; int N = io::gt&lt;int&gt;(); T.build(1, 1, N); int M = io::gt&lt;int&gt;(); while(M--) &#123; int opt = io::gt&lt;int&gt;(); int l = io::gt&lt;int&gt;(), r = io::gt&lt;int&gt;(); if(opt == 2) &#123; T.change(1, 1, N, l, r); &#125; else &#123; printf("%lld\n", T.querySum(1, 1, N, l, r)); &#125; &#125; return 0;&#125;]]></content>
      <categories>
        <category>BZOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6009 软件补丁问题]]></title>
    <url>%2FLOJ-6009%2F</url>
    <content type="text"><![CDATA[A 是一个数的集合，包含 n 种元素，存在 m 种方法转移。 A 能通过第 i 种方法转移，当且仅当 A 不包含 C_i 中的任何元素且包含 D_i 中的所有元素。 A 通过第 i 种方法转移的方法为：删去 A 中所有与 E_i 相同的元素， 增加所有 F_i 中 A 没有出现的元素。 通过第 i 种方法转移的代价为 P_i ，开始时 A 包含所有元素，求转移到没有元素的最小代价。如果无解，输出-1。 1\leq n\leq 20,1\leq m\leq 100 。 分析 考虑暴力转移，每次转移是 O(n\times m) 的，至多有 2^n 种状态，所以复杂度是 2^n\times n\times m 的，发现这么小的数据范围是可以过的。 发现合并、检查集合时比较麻烦，根据 n\leq 20 ，考虑转移状态压缩，用二进制下第 i 位表示第 i 个数是否存在。 位运算转移 检查 C_i 即按位与，看结果是否为 C_i 本身。 检查 D_i 还是按位与，看结果是否为 0 。 通过 E_i 转移，这个是最复杂度的，需要两步。首先按位与得到两方都有的元素，再与原数异或。 通过 F_i 转移，按位或即可。 原理 按位与，某一位为 1 当且仅当两数该位同为 1 。 按位或，某一位为 1 当且仅当两数中至少一个数该位为 1 。 异或，某一位为 1 当且仅当两数中一个数该位为 1 ，另一个数该位为 0 。 那么根据转移规则发现就是这三种运算而已，单独解释一下关于 E_i 的转移。 该操作的目的即某一位若两位都是 1 ，则置为 0 ，其他不变。 那么按位与得到所有同时为 1 的位，再根据 1 ^ 1 = 0 ^ 0 = 0、0 ^ 1 = 1 ^ 0 = 1，可以发现新数与原数异或即可满足要求。 参考代码 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast((x).size())typedef long long ll;const int MAXN = (1 &lt;&lt; 20) + 5;const int MAXM = 100 + 5;int F[MAXN];int n, m, Cost[MAXM];int A1[MAXM], A2[MAXM];int B1[MAXM], B2[MAXM];std::bitset Inq;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cin &gt;&gt; n &gt;&gt; m; std::string str1, str2; rep(i, 0, m) &#123; std::cin &gt;&gt; Cost[i] &gt;&gt; str1 &gt;&gt; str2; rep(j, 0, n) &#123; if(str1[j] == '+') &#123; A1[i] |= 1 &lt;&lt; j; &#125; else if(str1[j] == '-') &#123; A2[i] |= 1 &lt;&lt; j; &#125; if(str2[j] == '-') &#123; B1[i] |= 1 &lt;&lt; j; &#125; else if(str2[j] == '+') &#123; B2[i] |= 1 &lt;&lt; j; &#125; &#125; &#125; std::queue Que; memset(F, 0x3f, sizeof F); F[(1 &lt;&lt; n) - 1] = 0; Que.push((1 &lt;&lt; n) - 1); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = 0; rep(i, 0, m) &#123; if((x &amp; A1[i]) == A1[i] &amp;&amp; (x &amp; A2[i]) == 0) &#123; int y = x &amp; B1[i]; y = y ^ x | B2[i]; if(F[y] &gt; Cost[i] + F[x]) &#123; F[y] = Cost[i] + F[x]; if(!Inq[y]) &#123; Inq[y] = 1; Que.push(y); &#125; &#125; &#125; &#125; &#125; if(F[0] == F[1 &lt;&lt; n]) &#123; F[0] = 0; &#125; std::cout &lt;&lt; F[0] &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>状压DP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6003 魔术球]]></title>
    <url>%2FLOJ-6003%2F</url>
    <content type="text"><![CDATA[将 [1, N] 分成 K 组序列，使得每组序列相邻两数的和为完全平方数，且序列递增。 已知 K ，求 N 的最大值，并给出一组方案（按顺序输出 K 个序列）。 1\leq K\leq 55 分析 假如 [1,N-1] 已经分好组了，那么 N 只能自成一组或者放到某个序列的最后。 所以显而易见的一点就是，当 N 增大时， K 是单调不递减的。 根据单调性，一个基本的思路便是二分答案。 考虑如何检查合法性。 由于每个点之只能和一个前驱后继匹配（或者没有），那么便相当于一个DAG（有向无环图）求最小路径覆盖（拆成 K' 条不相交的链，覆盖所有点）。 若 K' \leq K ，解就是合法的。 求解最小路径匹配数，考虑网络流算法。 将每个点 i 拆成 A_i, B_i 两部分，如果存在 i+j=k^2(i&lt; j) ，则连接 A_i 和 B_j 。 建立源汇点 S 和 T ， S 和所有 A_i 连边，所有 B_i 和 T 连边。 皆为有向边，流量限制为 1 。 最小路径覆盖数的值即节点数 N 和 S-T 最大流的差。 根据Dinic算法的流程，易得每次在残余网络上加边再找可行流，与之前的最大流相加即为新图的最大流。 所以如果只是在原图的基础上加边，不需要重复构图，单次增广复杂度 O(nm) 。 那么二分答案显然不如直接递增枚举了，因为它需要每次重新构图跑最大流，而后者只需要加边寻找可行流。 因此算法流程为：从 1 开始递增枚举 N ，寻找可行流，直到最小路径数超过 K ，答案即为 N - 1 。 至于输出答案，重新建图跑最大流，然后找到 B_i 相连的所有反向弧为 1 的边，纪录对应的点（即前驱）。 记录每个节点是否被输出。从后往前枚举序列的尾结点，如果没有标记，那么该点即为一个新序列的最后一个元素。 由于每个数的前驱只会有一个，所以从尾结点开始，每次跳到前驱，并同时输出，打上标记。 复杂度分析 枚举 N ，最大流跑二分图复杂度 O(N^2\times \sqrt{M}) ，如果利用了capacity scaling技巧，复杂度似乎会降（？），至少会快很多。 uoj blog 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 10000 + 5;const int MAXM = 180000 + 5;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Lv[MAXN], Cur[MAXN];int N, M, S, T, K = 5000, tim, ffffc, F;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;void dinic() &#123; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1;&#125;std::bitset&lt;MAXM&gt; Issquare, Vis;int Match[MAXM];std::vector&lt;int&gt; V;void solve() &#123; int n; scanf("%d", &amp;n); rep(i, 1, std::sqrt(MAXM)) &#123; Issquare[i * i] = 1; &#125; init(); S = 0; T = 8000; int cur = 0; do &#123; ++cur; addEdge(S, cur, 1); addEdge(cur + K, T, 1); rep(i, 1, cur) &#123; if(Issquare[i + cur]) &#123; addEdge(i, cur + K, 1); &#125; &#125; dinic(); &#125; while(cur - F &lt;= n); printf("%d\n", cur - 1); init(); rep(i, 1, cur) &#123; addEdge(S, i, 1); addEdge(i + K, T, 1); rep(j, 1, i) &#123; if(Issquare[i + j]) &#123; addEdge(j, i + K, 1); &#125; &#125; &#125; dinic(); rof(i, K + cur, K + 1) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(E[j].f) &#123; Match[E[j].v] = i - K; break; &#125; &#125; &#125; rep(i, 1, cur) &#123; if(Vis[i]) &#123; continue; &#125; V.clear(); for(int j = i; j; j = Match[j]) &#123; V.push_back(j); Vis[j] = true; &#125; rep(j, 0, SZ(V)) &#123; printf("%d ", V[j]); &#125; printf("\n"); &#125;&#125;&#125;int main() &#123; dinic::solve(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>最小路径覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6002 最小路径覆盖问题]]></title>
    <url>%2FLOJ-6002%2F</url>
    <content type="text"><![CDATA[给一个 N 个点， M 条边的DAG，求最小路径覆盖数及其方案。 1\leq N\leq 150,1\leq M\leq 6000 分析 弱化版【P2765 魔术球问题】 随便搞即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 500 + 5;const int MAXM = 6000 + 5;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM &lt;&lt; 1], Cur[MAXN], Lv[MAXN], Dis[MAXN];int N, M, S, T, K = 100, ffffc, tim;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); scanf("%d%d", &amp;N, &amp;M); S = 0, T = 500; int u, v; rep(i, 1, N + 1) &#123; addEdge(S, i); addEdge(i + K, T); &#125; rep(i, 0, M) &#123; scanf("%d%d", &amp;u, &amp;v); addEdge(u, v + K); &#125;&#125;std::bitset&lt;MAXN&gt; Vis;int Match[MAXN];void maxFlow() &#123; init(); int ans = N - dinic(); rep(i, K + 1, K + N + 1) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(E[j].f &amp;&amp; E[j].v != T) &#123; Match[E[j].v] = i - K; break; &#125; &#125; &#125; rep(i, 1, N + 1) &#123; if(Vis[i]) &#123; continue; &#125; for(int j = i; j; j = Match[j]) &#123; printf("%d ", j); Vis[j] = true; &#125; printf("\n"); &#125; printf("%d\n", ans);&#125;&#125;int main() &#123; dinic::maxFlow(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>最小路径覆盖</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6011 运输问题]]></title>
    <url>%2FLOJ-6011%2F</url>
    <content type="text"><![CDATA[有 N 个仓库，库存为 A_i ， M 个商店，需求为 B_i ，保证 \sum{A_i} =\sum{B_i} 。 第 i 个仓库每单位运送给第 j 个商店的费用为 C_{i,j} 。 求满足商店需求所需的最小运费。 1\leq n,m\leq 100 分析 仓库商店之间，费用建成 -C_{i,j} ，限制为 INF 。 S 连接所有仓库，所有商店连接 T ，限制分别为 A_i 和 B_i ，费用为 0 。 跑 S-T 最小费用最大流 C ，答案即为 -C 。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 20000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, C, F;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE; &#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int X[MAXN], Y[MAXN], Z[MAXN][MAXN];void init() &#123; int x; std::cin &gt;&gt; M &gt;&gt; N; cntE = -1; memset(H, -1, sizeof H); S = 0, T = N + M + 1; rep(i, 1, M + 1) &#123; std::cin &gt;&gt; X[i]; addEdge(S, i, X[i], 0); &#125; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; Y[i]; addEdge(i + M, T, Y[i], 0); &#125; rep(i, 1, M + 1) &#123; rep(j, 1, N + 1) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(i, j + M, INT_MAX, Z[i][j]); &#125; &#125;&#125;void init2() &#123; cntE = -1; memset(H, -1, sizeof H); S = 0, T = N + M + 1; rep(i, 1, M + 1) &#123; addEdge(S, i, X[i], 0); &#125; rep(i, 1, N + 1) &#123; addEdge(i + M, T, Y[i], 0); &#125; rep(i, 1, M + 1) &#123; rep(j, 1, N + 1) &#123; addEdge(i, j + M, INT_MAX, -Z[i][j]); &#125; &#125;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6012 分配问题]]></title>
    <url>%2FLOJ-6012%2F</url>
    <content type="text"><![CDATA[有 n 件工作要分配给 n 个人做。第 i 个人做第 j 件工作产生的效益为 c_{i,j} 。 试设计一个将 n 件工作分配给 n 个人做的分配方案，使产生的总效益最大。 每个人只能做一个工作。 1\leq n\leq 100 分析 两次建图，限制均为 1 ，费用分别为 C_{i,j} 和 -C_{i,j} ，跑最小费用最大流即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 20000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, C, F;int Lp[MAXN], Le[MAXN];int Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;int Z[MAXN][MAXN];void init() &#123; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N; S = 0, T = N * 2 + 1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); addEdge(i + N, T, 1, 0); rep(j, 1, N + 1) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(i, j + N, 1, Z[i][j]); &#125; &#125;&#125;void init2() &#123; memset(H, -1, sizeof H); cntE = -1; rep(i, 1, N + 1) &#123; addEdge(S, i, 1, 0); addEdge(i + N, T, 1, 0); rep(j, 1, N + 1) &#123; addEdge(i, j + N, 1, -Z[i][j]); &#125; &#125;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6010 数字梯形]]></title>
    <url>%2FLOJ-6010%2F</url>
    <content type="text"><![CDATA[一个梯形，第一行有 m 个数，共 n 行，每行比上一行多一个数，每个数有一个权值 A_i 。 从第一行的 m 个数开始，每次向左下或右下移动，到第 n 层结束。 求以下三种情况的权值和最大值： m 条路径不相交 m 条路径可以在数字处相交 m 条路径可以在数字和边处相交 1\leq n,m\leq 20 分析 一道三合一，主要考察建图如何去限制流量走向。 对于不相交的情况，很显然，还是拆点 i\rightarrow(X_i,Y_i) ，然后每个点的 X_i 向下面的两个点 Y_j 连一条限制为 1 ，费用为 -A_i 。最后 S 连接第一行，最后一行连接 T ，跑费用流。 对于可以在数字处相交的情况就可以不用拆点了。直接连接 (i, j) ，限制为 1 ，费用为 -A_i 。注意最后一行连接 T 的限制为 INF ，因为可以多个数最后均到达该点。 对于没有限制的情况，将第二次建图的所有流量限制均改成 INF 即可（ S 到第一行除外）。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 3000 + 5;const int MAXM = 40000 + 5;namespace mcmf &#123;struct Edge &#123; int v, c, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, C, F;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];std::bitset&lt;MAXN&gt; Inq;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, c, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -c, 0, H[v]&#125;; H[v] = cntE; &#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; Inq = 0; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int Z[MAXN][MAXN];int getId(int x, int y) &#123; return (x - 1) * (N + M) + y;&#125;void init() &#123; int x; std::cin &gt;&gt; M &gt;&gt; N; cntE = -1; memset(H, -1, sizeof H); S = 0, T = (N + M) * N * 3; int up = (N + M) * N * 2; rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; std::cin &gt;&gt; Z[i][j]; addEdge(getId(i, j), getId(i, j) + up, 1, 0); &#125; &#125; rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j) + up, T, 1, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j) + up, getId(i + 1, j), 1, -Z[i][j]); addEdge(getId(i, j) + up, getId(i + 1, j + 1), 1, -Z[i][j]); &#125; &#125; &#125;&#125;void init2() &#123; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j), T, INT_MAX, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j), getId(i + 1, j), 1, -Z[i][j]); addEdge(getId(i, j), getId(i + 1, j + 1), 1, -Z[i][j]); &#125; &#125; &#125;&#125;void init3() &#123; cntE = -1; memset(H, -1, sizeof H); rep(i, 1, N + 1) &#123; rep(j, 1, M + i) &#123; if(i == 1) &#123; addEdge(S, getId(i, j), 1, 0); &#125; if(i == N) &#123; addEdge(getId(i, j), T, INT_MAX, -Z[i][j]); &#125; else &#123; addEdge(getId(i, j), getId(i + 1, j), INT_MAX, -Z[i][j]); addEdge(getId(i, j), getId(i + 1, j + 1), INT_MAX, -Z[i][j]); &#125; &#125; &#125;&#125;int mcmf() &#123; C = F = 0; while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; C += f * Dis[T]; F += f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main() &#123; mcmf::init(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; mcmf::init2(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; mcmf::init3(); std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6224 深海机器人问题]]></title>
    <url>%2FLOJ-6224%2F</url>
    <content type="text"><![CDATA[一个 N * M 的网格图，每条边都存在权值。 现有 A 个起点， B 个终点。 第 i 个起点可以作为 X_i 条路径的起点，第 i 个终点可以作为 Y_i 条路径的终点。保证 \sum{X_i}=\sum{Y_i} 。 每条路径只能向右或者向上移动，可以重复经过某一条边或者某个点。 求这 \sum{X_i} 条路径覆盖的所有边的最大权值和（同一条边的权值只算一次）。 1\leq N,M\leq 15 1\leq A\leq 4 1\leq B\leq 6 分析 既然是求最大价值，第一反应自然是连负边跑最小费用最大流。 边权算一次，那就流量限制置为 1 ，但是可以多次经过，那就再连一条花费为 0 ，不限流量的边。 S 向所有起点连流量限制为 A_i 的边，终点同理。 跑最小费用最大流。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 20 * 20 * 2;const int MAXM = MAXN;const int INF = 1e9 + 7;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int N, M, S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];std::bitset&lt;MAXN&gt; Inq;int getId(int x, int y) &#123; return x * (M + 1) + y;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge)&#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge)&#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; int a, b, k, x, y; std::cin &gt;&gt; a &gt;&gt; b &gt;&gt; N &gt;&gt; M; S = (N + 1) * (M + 1), T = S + 1; memset(H, -1, sizeof H); cntE = -1; rep(i, 0, N + 1) &#123; rep(j, 0, M) &#123; std::cin &gt;&gt; x; addEdge(getId(i, j), getId(i, j + 1), 1, -x); addEdge(getId(i, j), getId(i, j + 1), INF, 0); &#125; &#125; rep(i, 0, M + 1) &#123; rep(j, 0, N) &#123; std::cin &gt;&gt; x; addEdge(getId(j, i), getId(j + 1, i), 1, -x); addEdge(getId(j, i), getId(j + 1, i), INF, 0); &#125; &#125; rep(i, 0, a)&#123; std::cin &gt;&gt; k &gt;&gt; x &gt;&gt; y; addEdge(S, getId(x, y), k, 0); &#125; rep(i, 0, b) &#123; std::cin &gt;&gt; k &gt;&gt; x &gt;&gt; y; addEdge(getId(x, y), T, k, 0); &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x; Le[v] = i; if(!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;int mcmf() &#123; init(); while(spfa()) &#123; int f = INF; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += f * Dis[T]; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; return C;&#125;&#125;int main()&#123; std::cout &lt;&lt; -mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6014 最长 k 可重区间集]]></title>
    <url>%2FLOJ-6014%2F</url>
    <content type="text"><![CDATA[直线上有 N 个开区间 (x_i,y_i) ，从中选取任意多个，满足该直线上任意一个点最多被 K 个区间覆盖，求选取区间的最大长度和。 1\leq N\leq 500 1\leq K\leq 3 分析 O(N^2) 建图方法 以区间长度作为费用，目标即让总费用最大。 每个区间只能选一次，所以要拆点。 问题在于如果保证任何一个点至多被覆盖 K 次。 显然，如果任意选择 K 个区间，那么不可能出现某个点被覆盖超过 K 次。 如果选择一个区间，再去选择一个与它不相交的区间，那么依然不会出现某个点被覆盖超过 K 次的情况。 那么如果在这个基础上再选择一个与另一个区间不相交的区间呐？是否会出现某个点被覆盖 K + 1 次的情况？ 令开始选取的区间为 A_1....A_K ，第一次增加了与 A_1 不相交的区间 B_1 ，第二次增加了与 A_2 不相交的区间 B_2 ，以 X{a,b,c}=s 表示区间集合 {a,b,c} 覆盖的点中，被覆盖次数最大次数为 s 。 根据之前的描述， X{A_1...A_K} \leq K ， X{A_1,B_1,A_2...A_k} \leq K 。 由于 A_1\cap B_1=\emptyset ，所以 X{B_1,A_2...A_k} \leq K 。 如果增加 B_2 之后覆盖了某个点 K + 1 次，那么就是 X{A_1,B_1,A_2,B_2,A_3...A_K} = K+1 。 由于 A_2\cap B_2=\emptyset ，所以等价为 X{A_1,B_1,B_2...A_k} = K+1 。 集合中共有 K+1 个数，若满足上式，即需要其中任意两个集合都有交，且所有交集的交不为 \emptyset 。 但是 A_1\cap B_1=\emptyset ，所以上式一定不成立。 也就是说增加 B_2 依然不会出现某个点被覆盖 K+1 次。 同理按照选取不相交区间的原则增加 B_3 ， B_4 ... ，都不会出现某个点被覆盖 K+1 次的情况。 所以说问题转化为从 N 个区间中任意选取 K 个，选择完某区间后可以再选择一个与它不相交的区间，求选取的所有区间总长度最大值。 转化成网络流模型： 每个区间拆点成 X_i,Y_i S 向 S' 连一条流量限制为 K ，费用为 0 的边 S' 向所有 X_i 连接流量限制为 1 ，费用为 0 的边 X_i 向 Y_i 连接流量限制为 1 ，费用为区间长度的边 Y_i 向 X_j 连接流量限制为 1 ，费用为 0 的边，其中 i\leq j 且区间 i,j 不相交 所有 Y_i 向 T 连接一条流量限制为 1 ， 费用为 0 的边。 求最大费用最大流。 费用取反跑最小费用流，其结果再取反即为答案。 O(N\times \log{N}) 建图方法 根据 O(N^2) 建图方法，我们明白了网络流模型转化的核心，即共 K 条流量，任意一个点可以流向与其不相交的区间所对应的点，跑费用流。 建图的瓶颈在于找到所有不相交的区间，需要 O(N^2) 的遍历。 比较显然的一点，就是如果按照左端点排序区间，如果 (x_i,y_i) 与 (x_j,y_j) 不相交，且 j-i 最小，那么对于区间 (x_k,y_k)(k\geq j) ，一定也不和 (x_i,y_i) 相交。 也就是说我们可以在 O(\log{N}) 的时间内找到第一个与 (x_i,y_i) 不相交的区间。 那么如果能让流量到达 (x_j,y_j) 后“自然地向后流“，就相当于可以流到所有和 (x_i,y_i) 不相交的区间。 想象整个直线是一条河，入河口流入 K 点流量。这条河可以通过无限流量且费用为 0 。每个节点在对应的坐标上，是一块河中一块小陆地。那么在所有区间的左右端点之间架一座桥，允许 1 的流量通过，费用为区间长度。 流量从 x_i\rightarrow y_i 之后，这一点流量可以选择再跨越后面任何一座没有流量经过的桥，或者一直沿着河流，直到河的尽头。 这么流依然保证了其合法性，但是建图复杂度大大降低了。 离散化所有结点，即 h(a) 为 a 的重标号， 0 和 n' 分别为第一个和最后一个点 h(x_i)\rightarrow h(y_i) ，费用为 y_i-x_i ，流量限制为 1 i\rightarrow i+1 ，费用为 0 ，流量限制为无穷 s\rightarrow 0 ，费用为 0 ，流量限制为 K n'\rightarrow T ，费用为 0 ，流量限制为 K 求 S-T 最大费用最大流，方法同理 离散化复杂度 O(N\times \log{N}) ，求 h(a) 的复杂度 O(\log{N}) ，所以建图复杂度为 O(N\times \log{N}) 。 注意事项 从来没有说过 y_i\geq x_i 参考代码 法一 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1000 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int S, T, F, C;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; static int N, K; static std::pair&lt;int, int&gt; P[MAXN]; scanf("%d%d", &amp;N, &amp;K); S = N * 2, T = N * 2 + 2; addEdge(S, S + 1, K, 0); rep(i, 0, N) &#123; scanf("%d%d", &amp;P[i].first, &amp;P[i].second); if(P[i].first &gt; P[i].second) &#123; std::swap(P[i].first, P[i].second); &#125; &#125; std::sort(P, P + N); rep(i, 0, N) &#123; addEdge(S + 1, i, 1, 0); addEdge(i + N, T, 1, 0); addEdge(i, i + N, 1, P[i].first - P[i].second); rep(j, i + 1, N) &#123; if(P[j].first &gt;= P[i].second) &#123; addEdge(i + N, j, 1, 0); &#125; &#125; &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += Dis[T] * f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125; 法二 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1000 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 2];int S, T, F, C;int H[MAXN], cntE;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; static int N, K; static std::pair&lt;int, int&gt; P[MAXN]; scanf("%d%d", &amp;N, &amp;K); static int Hash[MAXN], total = 0; rep(i, 0, N) &#123; scanf("%d%d", &amp;P[i].first, &amp;P[i].second); if(P[i].first &gt; P[i].second) &#123; std::swap(P[i].first, P[i].second); &#125; Hash[total++] = P[i].first; Hash[total++] = P[i].second; &#125; std::sort(Hash, Hash + total); total = std::unique(Hash, Hash + total) - Hash; S = total, T = total + 1; addEdge(S, 0, K, 0); addEdge(total - 1, T, K, 0); rep(i, 1, total) &#123; addEdge(i - 1, i, INT_MAX, 0); &#125; rep(i, 0, N) &#123; int x = std::lower_bound(Hash, Hash + total, P[i].first) - Hash; int y = std::lower_bound(Hash, Hash + total, P[i].second) - Hash; addEdge(x, y, 1, P[i].first - P[i].second); &#125;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += Dis[T] * f; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6227 最长 k 可重线段集问题]]></title>
    <url>%2FLOJ-6227%2F</url>
    <content type="text"><![CDATA[有 N 条开线段，可以从中选择任意数量的开线段，使得对于任意直线 x=p ，至多有 K 条线段和它有交点。求选取的开线段的长度之和的最大值。 1\leq N\leq 500 1\leq K\leq 13 分析 和【【网络流24题】【最小费用最大流】luogu P3358 最长k可重区间集问题】几乎是一样的，但是有一个细节区分了这两道题（标程也没注意到）。 那就是对于某一条在直线 x=p 上的开线段，和一条左/右端点为 (p,q) 的开线段是没有交点的。 还要注意的一点，就是如果是 O(N\times\log{N}) 的建图方法，会出现自环且负环，需要特殊处理，比较麻烦，所以不如直接拆点跑网络流。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 1200 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 1];int S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];bool Inq[MAXN];bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;struct Point &#123; int x, y, c; inline bool operator &lt; (const Point&amp; a) const &#123; return x == a.x ? y &lt; a.y : x &lt; a.x; &#125;&#125;;#define sqr(x) (x) * (x)void init() &#123; memset(H, -1, sizeof H); cntE = -1; int N, K; ll x0, x1, y0, y1; scanf("%d%d", &amp;N, &amp;K); static Point P[MAXN]; rep(i, 0, N) &#123;g scanf("%lld%lld%lld%lld", &amp;x0, &amp;y0, &amp;x1, &amp;y1); P[i] = (Point) &#123;std::min(x0, x1), std::max(x0, x1), std::sqrt(sqr(x0 - x1) + sqr(y0 - y1))&#125;; &#125; std::sort(P, P + N); S = N * 2, T = N * 2 + 2; addEdge(S, S + 1, K, 0); rep(i, 0, N) &#123; addEdge(S + 1, i, 1, 0); addEdge(i + N, T, 1, 0); addEdge(i, i + N, 1, -P[i].c); rep(j, i + 1, N) &#123; if(P[j].x &gt;= P[i].y &amp;&amp; !(P[i].x == P[i].y &amp;&amp; P[j].x == P[j].y &amp;&amp; P[i].x == P[j].x)) &#123; addEdge(i + N, j, 1, 0); &#125; &#125; &#125;&#125;void mcmf() &#123; init(); while(spfa()) &#123; int f = INT_MAX; for(int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); &#125; F += f; C += f * Dis[T]; for(int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; &#125; printf("%d\n", -C);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6225 火星探险问题]]></title>
    <url>%2FLOJ-6225%2F</url>
    <content type="text"><![CDATA[Q\times P 的网格图，起点位于左上角 (1,1) ，终点位于右下角 (Q,P) 。 现在有 N 个机器人从起点出发，每次只能向右或向下移动一格，且不能碰到障碍物。 每个格子有三种可能的状态：空地、有标本、有障碍物。 第一个抵达有标本的格子的机器人会取走该格子的标本，每个格子可以同时容纳多个机器人。 如果不能抵达终点，路上收集的标本将作废。 给出每个机器人的移动方案，使得采集到最多的标本，且最多的机器人达到终点。 P,Q\leq 35 分析 显然是最大费用最大流。流量是机器人的个数，保证每个机器人都能到终点，费用是标本数。 输出方案也很简单，直接就是在回溯更新每条边流量的时候的存储路径上的点，然后再从起点到终点，比照一下相连两个点的位置关系，按照要求输出即可。 不过需要注意的一点是，很可能跑不到 N 次就已经得到最大费用最大流了，所以剩下的机器人只需要随便找一条合法的路径输出。比较偷懒的方法就是剩下的全部输出最后一次增广的路径方案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 35 * 40 * 2 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f, c;&#125; E[MAXM &lt;&lt; 1];int N, P, Q, S, T, F, C;int H[MAXN], cntE;int Dis[MAXN], Lp[MAXN], Le[MAXN];bool Inq[MAXN];bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if (!Inq[v]) &#123; Inq[v] = 1; Que.push(v); &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;int A[MAXN][MAXN];int getId(int x, int y) &#123; return x * P + y;&#125;bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; x &lt;= Q &amp;&amp; y &gt;= 1 &amp;&amp; y &lt;= P &amp;&amp; A[x][y] != 1;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N &gt;&gt; P &gt;&gt; Q; rep(i, 1, Q + 1) &#123; rep(j, 1, P + 1) &#123; std::cin &gt;&gt; A[i][j]; &#125; &#125; int up = getId(Q, P); S = 0, T = up * 2; addEdge(S, getId(1, 1), N, 0); rep(i, 1, Q + 1) &#123; rep(j, 1, P + 1) &#123; if (A[i][j] == 2) &#123; addEdge(getId(i, j), getId(i, j) + up, 1, -1); &#125; if (A[i][j] != 1) &#123; addEdge(getId(i, j), getId(i, j) + up, INT_MAX, 0); if (check(i, j + 1)) &#123; addEdge(getId(i, j) + up, getId(i, j + 1), INT_MAX, 0); &#125; if (check(i + 1, j)) &#123; addEdge(getId(i, j) + up, getId(i + 1, j), INT_MAX, 0); &#125; &#125; &#125; &#125;&#125;void mcmf() &#123; static std::stack&lt;int&gt; Stk; static int A[MAXN], total; init(); int cnt = 1; while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Lp[i]) &#123; f = std::min(f, E[Le[i]].f); if(i &lt;= getId(Q, P)) &#123; Stk.push(i); &#125; &#125; F += f; C += Dis[T] * f; int last = Stk.top(); Stk.pop(); total = 0; while (!Stk.empty()) &#123; int x = Stk.top(); Stk.pop(); if (x == last + 1) &#123; A[total++] = 1; &#125; else &#123; A[total++] = 0; &#125; last = x; &#125; rep(j, 0, total) &#123; std::cout &lt;&lt; cnt &lt;&lt; " " &lt;&lt; A[j] &lt;&lt; std::endl; &#125; for (int i = T; i != S; i = Lp[i]) &#123; E[Le[i]].f -= f; E[Le[i] ^ 1].f += f; &#125; ++cnt; &#125; rep(i, cnt, N + 1) &#123; rep(j, 0, total) &#123; std::cout &lt;&lt; i &lt;&lt; " " &lt;&lt; A[j] &lt;&lt; std::endl; &#125; &#125;&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6008 餐巾计划]]></title>
    <url>%2FLOJ-6008%2F</url>
    <content type="text"><![CDATA[共 n 天，每天需要 R_i 块干净的纸巾。纸巾用完一次就脏了，可以选择清洗后使用或不再使用。 已知新买纸巾的价格为 p ，花 m 天快洗纸巾的价格为 f ，花 n 天慢洗纸巾的价格为 s 。 求最小花费。 n \leq 2000 ， R_i \leq 10^7 ， p,f,s \leq 10^4 。 分析 考虑网络流算法。 第一天为源点 S ，最后一天为汇点 T ，纸巾为流量，价格为费用。 通过简单贪心可以得到每天的干净纸巾刚好为所需要的数量时，总花费一定最小。 由此问题转化为求建图后跑满流的情况下的最小费用。 最小费用最大流。 考虑如何使得满足每天恰好使用 R_i 块纸巾。 将每天拆成两个点，即使用前 X_i 和使用后 Y_i 。 建图方法如下（ (c, f) 即费用为 c 、流量为 f 的边）： S 与 X_i 连接一条 (0, V_i) 的边，即第 i 天纸巾需要的数量； Y_i 与 T 连接一条 (0, V_i) 的边，即第 i 天使用的纸巾的数量； S 与 Y_i 连接一条 (p, inf) 的边，即第 i 天购买新纸巾，花费为 p ； X_i 与 X_{i+1} 连接一条 (0, inf) 的边，即第 i 天没用完的纸巾留给第 i + 1 天，没有费用； X_i 与 Y_{i+m} 连接一条 (f, inf) 的边，即第 i 天快洗后的纸巾第 i+m 天拿到干净纸巾，花费为 f ； X_i 与 Y_{i+n} 连接一条 (s, inf) 的边，即第 i 天慢洗后的纸巾第 i+n 天拿到干净纸巾，花费为 s 。 由于所有与源点 S 的所有边都与每一个 X_i 相连，由此保证了每天都有 R_i 的流量流入，即 R_i 块新纸巾。 由于所有与汇点 T 的所有边都与 Y_i 相连，由此限制了每天必须有 R_i 的流量流出（因为是跑最大流）。 可以发现所有所有与 T 相连的边 e ，边权和 \sum{e_f}=\sum{R_i} ，保证了最大流为所需纸巾数之和，即上文说道的通过贪心得到最小费用的情况。 至于购买新纸巾，快洗和慢洗就都不难理解了。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156// Copyright 2018, Skqliao// 最小费用最大流#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace mcmf &#123;const int MAXN = 4000 + 5;const int MAXM = MAXN * 3;const ll INF = LLONG_MAX;struct Edge &#123; int v, nxt; ll c, f;&#125; E[MAXM &lt;&lt; 1];int S, T;int Path[MAXN &lt;&lt; 1], Pre[MAXN &lt;&lt; 1];int H[MAXN &lt;&lt; 1], cntE;void addEdge(int u, int v, ll c, ll f) &#123; E[++cntE] = (Edge) &#123;v, H[u], c, f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], -c, 0&#125;; H[v] = cntE;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); int N = io::gt&lt;int&gt;(); S = 0, T = N &lt;&lt; 1 | 1; rep(i, 1, N + 1) &#123; ll f = io::gt&lt;ll&gt;(); addEdge(0, i, 0, f); addEdge(i + N, T, 0, f); &#125; rep(i, 1, N) &#123; addEdge(i, i + 1, 0, INF); &#125; int p = io::gt&lt;int&gt;(); int m = io::gt&lt;int&gt;(), f = io::gt&lt;int&gt;(); int n = io::gt&lt;int&gt;(), s = io::gt&lt;int&gt;(); rep(i, 1, N + 1) &#123; addEdge(0, i + N, p, INF); &#125; rep(i, 1, N - m + 1) &#123; addEdge(i, i + m + N, f, INF); &#125; rep(i, 1, N - n + 1) &#123; addEdge(i, i + n + N, s, INF); &#125;&#125;bool Vis[MAXN];ll Dis[MAXN];bool dijkstra() &#123; std::queue&lt;int&gt; pq; memset(Dis, 0x3f, sizeof Dis); memset(Vis, 0, sizeof Vis); Dis[S] = 0; pq.push(S); while (!pq.empty()) &#123; int x = pq.front(); pq.pop(); Vis[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Path[v] = i, Pre[v] = x; if (!Vis[v]) &#123; pq.push(v); Vis[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != Dis[T + 1];&#125;ll mcmf() &#123; ll cost = 0; init(); while (dijkstra()) &#123; ll f = LLONG_MAX; for (int i = T; i != S; i = Pre[i]) &#123; f = std::min(f, E[Path[i]].f); &#125; cost += f * Dis[T]; for (int i = T; i != S; i = Pre[i]) &#123; E[Path[i]].f -= f; E[Path[i]^1].f += f; &#125; &#125; return cost;&#125;&#125;int main() &#123; printf("%lld\n", mcmf::mcmf()); return 0;&#125; 体会与心得 选择spfa还是Dijkstra真是玄学，有时前者快得多，有时反之 问题主要在于转换模型，对本题而言核心在于拆点，从而将状态分成两部分 贪心那一步比较显然但是很重要，它使得求解的模型从有上下界的网络流变成了最大流]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6013 负载平衡]]></title>
    <url>%2FLOJ-6013%2F</url>
    <content type="text"><![CDATA[G公司有 N 个沿铁路运输线环形排列的仓库，每个仓库存储的货物数量为 A_i 。 如何用最少搬运量可以使 N 个仓库的库存数量相同。 搬运货物时，只能在相邻的仓库之间搬运。 1\leq N\leq 100 分析 两个任务，一是要保证最后每个点的权值相同，二是在此基础上使得总转移量最低。 那么状态量显然也是二维的。 考虑费用流，用流量保证任务一能完成，用费用使得任务二的结果最小。 每个点的最后状态为 T=\frac{\sum{A_i}}{N} ，需要额外流入/转出流量 |T-A_i| 。 先考虑流量。 常规思路，拆点 i\rightarrow(X_i, Y_i) ，即开始和结束两个状态。 建立源点 S 和汇点 T ，如果 A_i &lt; T ，连接 S \rightarrow X_i ，流量限制为 T - A_i ，否则连接 Y_i\rightarrow T ，流量限制为 A_i - T 。 如此便保证了跑出最大流之后，每个点的权值最终一定为平均值（对盈余和缺少的流量强制流入流出）。 然后看费用。 每个点只能向左右两个点转移。 有两种情况。 一是，当前转移到 j 的流量只是路过，即 j 是中转站； 二是，转移的流量就是给 j 的，即 j 是目的地。 根据拆点后的状态，显然对于两种情况分别连接 X_i\rightarrow X_j 和 X_i\rightarrow Y_j 。 费用为 1 ，流量限制为 INF 。 对于为了满足任务一建的边，显然费用为 0 。 S-T 最小费用最大流之最小费用即为答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 200 + 5;const int MAXM = 1000 + 5;const int INF = INT_MAX / 3;namespace mcmf &#123;const int MAXN = 200 + 5;const int MAXM = 5000 + 5;struct Edge &#123; int v, f, c, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, cost, flow;int Pe[MAXN], Pv[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, f, c, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, -c, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); memset(Inq, 0, sizeof Inq); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Pe[v] = i, Pv[v] = x; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;void init() &#123; static int A[MAXN]; memset(H, -1, sizeof H); cntE = -1; int total = 0; std::cin &gt;&gt; N; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; A[i]; total += A[i]; &#125; total /= N; S = 0, T = N * 2 + 1; rep(i, 1, N + 1) &#123; if(A[i] &lt; total) &#123; addEdge(S, i, total - A[i], 0); &#125; else &#123; addEdge(i + N, T, A[i] - total, 0); &#125; int lst = i - 1, nxt = i + 1; if(i != 1) &#123; addEdge(i, lst, INF, 1); addEdge(i, lst + N, INF, 1); &#125; if(i != N) &#123; addEdge(i, nxt, INF, 1); addEdge(i, nxt + N, INF, 1); &#125; &#125; addEdge(1, N, INF, 1); addEdge(1, N + N, INF, 1); addEdge(N, 1, INF, 1); addEdge(N, 1 + N, INF, 1);&#125;int mcmf() &#123; init(); while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Pv[i]) &#123; E[Pe[i]].f -= f; E[Pe[i] ^ 1].f += f; &#125; &#125; return cost;&#125;&#125;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout &lt;&lt; mcmf::mcmf() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ-6122 航空路线问题]]></title>
    <url>%2FLOJ-6122%2F</url>
    <content type="text"><![CDATA[有 N 个结点， M 条无向边。现想从结点 1 走到 N 再走回 1 ，且每个结点至多只能访问一次（除了结点 1 ）。 求该路径的最大长度并顺序输出途经结点，如果不存在，输出No Solution! 1\leq N\leq 100 分析 首先将问题转化一下，由于除了起点可以经过两次，其他结点均只能经过一次。那么问题可以等价于寻找两条起点为 1 ，终点为 N 的不相交路径（除了起点终点），使得两条路径的长度和最大。 构造跑最大流显然是不够的，因为最大流只会使得流量最大，而不会关心沿途结点个数。 构造图的方法很简单，依旧是拆点，然后边流量限制置为 1 ，起点终点限制置为 2 。 如果存在路径 (u, v) ，连边 (u.y, v.x) ，即访问完 u 后可以访问 v 。 然后连接 (i.x, i.y) ， (S, 1.x) ， (N.y, T) ，构图完成。 但是它和最大流是有关系的，因为存在路径条数为 2 的限制，即最大流为 2 。 对于无解情况很好判断，最大流 F &lt; 2 时，即不存在两条路径，无解。 那么问题在于如何使得途径点数最多。 考虑再引入一维，使得在满足最大流最大的情况下，该值最大。 想到费用流。由于途径的每个点，根据拆点的思想，一定会从“未访问”到“访问”，而且根据限制，每个点至多访问一次。 那么将 (i.x, i.y) 的费用置为 1 ，其他边均为 0 , 那么 S-T 跑得的费用即为经过点的个数。 最小费用最大流使用 SPFA 根据EK的思路增广即可，求最大费用也很简单，费用 c_i 置成 -c_i 即可。 关于路径输出，我们可以发现如果增广路途经 i.y(i \not= N) ，那么它一定是通过某 j.x 而来，而且这个 j 是唯一的（流量限制为 1 ）。那么从 T 开始寻找两条增广路，分别纪录前驱后继，最后一个正序，一个逆序输出即可。 注意的点： 可能会存在边 (1, N) ，那么这个时候 1-&gt;N-&gt;1 是一条合法路径，但是按照之前的方法建图最大流不一定是 2 （比如 1 到 N 只存在这条路径，最大流为 1 ）。那么对于这条边，流量置为 2 。输出路径的时候如果发现不存在两条增广路，直接输出 1\ N\ 1 即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace mcmf &#123;const int MAXN = 200 + 5;const int MAXM = 5000 + 5;struct Edge &#123; int v, f, c, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int N, M, S, T, cost, flow;int Pe[MAXN], Pv[MAXN], Dis[MAXN];bool Inq[MAXN];void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, f, c, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, -c, H[v]&#125;; H[v] = cntE;&#125;bool spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); memset(Inq, 0, sizeof Inq); int INF = Dis[0]; Dis[S] = 0; Que.push(S); while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; Dis[v] &gt; Dis[x] + E[i].c) &#123; Dis[v] = Dis[x] + E[i].c; Pe[v] = i, Pv[v] = x; if (!Inq[v]) &#123; Que.push(v); Inq[v] = true; &#125; &#125; &#125; &#125; return Dis[T] != INF;&#125;std::map&lt;std::string, int&gt; Map;std::vector&lt;std::string&gt; Vs;void init() &#123; std::string str, str2; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; N &gt;&gt; M; S = 0, T = N * 2 + 1; Vs.push_back(""); rep(i, 1, N + 1) &#123; std::cin &gt;&gt; str; Map[str] = i; if(i != 1 &amp;&amp; i != N) &#123; addEdge(i, i + N, 1, 0); &#125; else &#123; addEdge(i, i + N, 2, 0); &#125; Vs.push_back(str); &#125; rep(i, 0, M) &#123; std::cin &gt;&gt; str &gt;&gt; str2; int u = Map[str], v = Map[str2]; if(u &gt; v) &#123; std::swap(u, v); &#125; if(u == 1 &amp;&amp; v == N) &#123; addEdge(u + N, v, 2, -1); &#125; else &#123; addEdge(u + N, v, 1, -1); &#125; &#125; addEdge(S, 1, 2, 0); addEdge(N * 2, T, 2, 0);&#125;void mcmf() &#123; init(); while (spfa()) &#123; int f = INT_MAX; for (int i = T; i != S; i = Pv[i]) &#123; f = std::min(f, E[Pe[i]].f); &#125; cost += f * Dis[T]; flow += f; for (int i = T; i != S; i = Pv[i]) &#123; E[Pe[i]].f -= f; E[Pe[i] ^ 1].f += f; &#125; &#125;&#125;int Match[MAXN];std::vector&lt;int&gt; V;void print() &#123; if(flow &lt; 2) &#123; std::cout &lt;&lt; "No Solution!" &lt;&lt; std::endl; &#125; else &#123; std::cout &lt;&lt; -cost &lt;&lt; std::endl; int cnt = -1, A[2]; for(int i = H[N]; ~i; i = E[i].nxt) &#123; if(E[i].f) &#123; A[++cnt] = E[i].v - N; &#125; &#125; if(cnt == 0) &#123; std::cout &lt;&lt; Vs[1] &lt;&lt; std::endl; std::cout &lt;&lt; Vs[N] &lt;&lt; std::endl; std::cout &lt;&lt; Vs[1] &lt;&lt; std::endl; return; &#125; rof(x, N, 1) &#123; for(int i = H[x]; ~i; i = E[i].nxt) &#123; if(E[i].f &amp;&amp; E[i].v != x + N) &#123; Match[x] = E[i].v - N; break; &#125; &#125; &#125; for(int i = A[0]; i &gt; 0; i = Match[i]) &#123; V.push_back(i); &#125; std::reverse(ALL(V)); rep(i, 0, SZ(V)) &#123; std::cout &lt;&lt; Vs[V[i]] &lt;&lt; std::endl; &#125; std::cout &lt;&lt; Vs[N] &lt;&lt; std::endl; for(int i = A[1]; i &gt; 0; i = Match[i]) &#123; std::cout &lt;&lt; Vs[i] &lt;&lt; std::endl; &#125; &#125;&#125;&#125; // namespace mcmfint main() &#123; mcmf::mcmf(); mcmf::print(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6004 圆桌聚餐]]></title>
    <url>%2FLOJ-6004%2F</url>
    <content type="text"><![CDATA[有 N 个单位分别有 A_i 个代表，有 M 张餐桌，分别可容纳 B_i 个人。 不存在同一个单位的两名代表再同一张餐桌上，求是否存在分配方案可以满足该要求。 如果有，输出每个单位各个代表的餐桌编号。 1\leq m\leq150, 1\leq n\leq 270 分析 比较明显转化成最大流问题。 S,T 分别和各个单位和餐桌连边，流量限制为 A_i,B_i 。 单位和餐桌之间连接流量限制为 1 的边。 如果 S-T 最大流和 \sum{A_i} 相等，则说明存在分配方案，反之不存在。 至于具体编号，考虑第 i 个单位，如果与它相连的边流量限制剩余 0 且不是 S ，则说明存在流量增广，输出边对应点即为餐桌编号。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 500 * 2 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, nxt, f;&#125; E[MAXM &lt;&lt; 1];int M, N, S, T, F, ffffc, tim, total;int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Cur[MAXN], Lv[MAXN];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, H[u], f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0&#125;; H[v] = cntE;&#125;bool bfs() &#123; static std::queue&lt;int&gt; Que; Que.push(S); Dis[S] = 0; Lv[S] = ++tim; while (!Que.empty()) &#123; int x = Que.front(); Que.pop(); if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != Lv[x] &amp;&amp; E[i].f) &#123; Lv[v] = Lv[x]; Dis[v] = Dis[x] + 1; Que.push(v); &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int f = dfs(v, std::min(E[i].f, left)); if (!f) &#123; Dis[v] = -1; &#125; else &#123; left -= f; E[i].f -= f; Flow[i ^ 1] += f; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;void init() &#123; int x; memset(H, -1, sizeof H); cntE = -1; std::cin &gt;&gt; M &gt;&gt; N; S = N + M, T = N + M + 1; rep(i, 0, M) &#123; std::cin &gt;&gt; x; total += x; addEdge(S, i, x); rep(j, 0, N) &#123; addEdge(i, j + M, 1); &#125; &#125; rep(i, 0, N) &#123; std::cin &gt;&gt; x; addEdge(M + i, T, x); &#125;&#125;void dinic() &#123; init(); while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof Flow); &#125; if(total != F) &#123; std::cout &lt;&lt; 0 &lt;&lt; std::endl; &#125; else &#123; std::cout &lt;&lt; 1 &lt;&lt; std::endl; rep(i, 0, M) &#123; for(int j = H[i]; ~j; j = E[j].nxt) &#123; if(!E[j].f &amp;&amp; E[j].v &gt;= M) &#123; std::cout &lt;&lt; E[j].v + 1 - M &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; &#125; &#125;&#125;&#125;int main() &#123; dinic::dinic(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6001 太空飞行计划]]></title>
    <url>%2FLOJ-6001%2F</url>
    <content type="text"><![CDATA[有 n 个集合，选择第 i 个集合可以获得 C_i 的收益，但是必须购买其中包含的所有元素（不同集合中出现的相同元素只需要购买一次），购买 第 j 个元素的花费为 A_j 。 求最大收益，以及选择的集合及其包含的所有元素。 1\leq n\leq 50 、 1\leq m\leq 100 。 分析 将 n 个集合看作二分图的 X 集合中的顶点，所有元素作为二分图的 Y 集合中的结点。 - S 向 X_i 连接一条边权为 C_i 的有向边 - Y_i 向 T 连接一条边权为 A_i 的有向边 - 对所有集合包含元素的点对 (X_i, Y_j) （元素 j 在集合 i 中） 连接一条边权为无限的有向边求原图的最大流 MaxFlow ，以及总收益 Total = \sum{C_i} 。那么最大收益为 MaxFlow - Total 。 那么找到选择的集合与所有元素，即找到跑满流的边所连接的顶点。 即最后一次增广经过的所有结点。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 200 + 5;const int MAXM = MAXN * MAXN;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int n, m, S, T, ffffc, tim;int Dis[MAXN], Lv[MAXN];int H[MAXN], cntE;int Cur[MAXN], Flow[MAXM &lt;&lt; 1];int B[MAXN], tot;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;std::string str;int cur;int gt() &#123; int x = 0, flag = false; while(cur &lt; SZ(str) &amp;&amp; !isdigit(str[cur])) &#123; ++cur; &#125; rep(i, cur, SZ(str)) &#123; if(!isdigit(str[i])) &#123; break; &#125; x = x * 10 + str[i] - '0'; flag = true; cur = i + 1; &#125; return flag ? x : -1;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); std::getline(std::cin, str); m = gt(), n = gt(); S = 0, T = n + m + 1; int x; rep(i, 1, m + 1) &#123; cur = 0; std::getline(std::cin, str); addEdge(S, i, B[i] = gt()); tot += B[i]; while(true) &#123; if((x = gt()) == -1) &#123; break; &#125; addEdge(i, m + x, INT_MAX); &#125; &#125; rep(i, 1, n + 1) &#123; std::cin &gt;&gt; x; addEdge(m + i, T, x); &#125;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for(Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if(x == T) &#123; return true; &#125; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if(x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for(int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if(!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if(!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while(true) &#123; while(bfs()) &#123; memcpy(Cur, H, sizeof H); int f = dfs(S, INT_MAX); flow += f; &#125; if(!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; rep(i, 1, m + 1) &#123; if(Lv[i] == tim) &#123; std::cout &lt;&lt; i &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; rep(i, m + 1, n + m + 1) &#123; if(Lv[i] == tim) &#123; std::cout &lt;&lt; i - m &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; return tot - flow;&#125;int maxflow() &#123; init(); return dinic();&#125;&#125;int main() &#123; std::ios_base::sync_with_stdio(false); std::cin.tie(NULL); std::cout &lt;&lt; dinic::maxflow() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>网络流</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6121 孤岛营救问题]]></title>
    <url>%2FLOJ-6121%2F</url>
    <content type="text"><![CDATA[一个 N \times M 的网格图，其中相邻的格子之间可能互通，共有三种情况如下： - 已经连通 - 有一堵墙，无法逾越 - 有一扇编号为 A_i 的门，需要对应编号的钥匙打开（钥匙可以多次使用） 已知你现在位于 (1,1) ，需要抵达 (N, M) 。 有 P 种门，门和墙的总数为 K ，共 S 把钥匙。 走到相邻的格子花费 1 时间，捡起钥匙和打开门不消耗时间。 求抵达目的地的最短时间，如果无法抵达，输出 -1 。 N,M,P\leq 10 K\leq 150 S\leq 14 分析 每得到一个钥匙，图的连通性就发生了改变。放在一起处理比较麻烦，考虑单独处理。 一共有 P 种钥匙，那么共有 2^P 种不同连通性的图，分别跑最短路即可。 具体实现即每次到达一个有钥匙的格子后，如果有新钥匙，那么进入下一层跑最短路。 钥匙的状态有两进制状压，记 D_{i,j,k} 为在钥匙数 i 状态下 (1,1) 转移到 (j,k) 的最短时间，答案为 \min{D_{i,N,M} \mid i \in[0, 2^S)} 。 注意事项 同一个格子可能会有多把钥匙 注意空间 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 10 + 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;int N, M, P, K, S;int Dis[1 &lt;&lt; MAXN][MAXN][MAXN];int Map[MAXN][MAXN][4];std::vector&lt;int&gt;Key[MAXN][MAXN];bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= M;&#125;bool bfs() &#123; std::queue&lt;std::pair&lt;int, int&gt; &gt; Que; Que.push(std::make_pair(1, 1)); while(!Que.empty()) &#123; std::pair&lt;int, int&gt; x = Que.front(); Que.pop(); if(x.first == N &amp;&amp; x.second == M) &#123; return true; &#125; rep(i, 0, 4) &#123; int nx = x.first + Dicx[i], ny = x.second + Dicy[i]; if(check(nx, ny) &amp;&amp; Map[x.first][x.second][i] &amp;&amp; !Dis[0][nx][ny]) &#123; Dis[0][nx][ny] = 1; Que.push(std::make_pair(nx, ny)); &#125; &#125; &#125; return false;&#125;void check(int cur, int lst, int lx, int ly) &#123; std::queue&lt;std::pair&lt;int, int&gt; &gt; Que; std::bitset&lt;MAXN&gt; Bt = cur; Que.push(std::make_pair(lx, ly)); Dis[cur][lx][ly] = Dis[lst][lx][ly]; while(!Que.empty()) &#123; std::pair&lt;int, int&gt; x = Que.front(); Que.pop(); if(!Key[x.first][x.second].empty()) &#123; rep(i, 0, SZ(Key[x.first][x.second])) &#123; if(!Bt[Key[x.first][x.second][i]]) &#123; check(cur | (1 &lt;&lt; Key[x.first][x.second][i]), cur, x.first, x.second); &#125; &#125; &#125; rep(i, 0, 4) &#123; int nx = x.first + Dicx[i], ny = x.second + Dicy[i]; if(check(nx, ny) &amp;&amp; (Map[x.first][x.second][i] == -1 || Bt[Map[x.first][x.second][i]])) &#123; if(Dis[cur][nx][ny] &gt; Dis[cur][x.first][x.second] + 1) &#123; Dis[cur][nx][ny] = Dis[cur][x.first][x.second] + 1; Que.push(std::make_pair(nx, ny)); &#125; &#125; &#125; &#125;&#125;int main() &#123; int x1, y1, x2, y2, z; std::cin &gt;&gt; N &gt;&gt; M &gt;&gt; P &gt;&gt; K; memset(Map, -1, sizeof Map); rep(i, 0, K) &#123; std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; z; if(x1 == x2) &#123; Map[x1][y1][y1 &gt; y2 ? 1 : 3] = z; Map[x2][y2][y1 &gt; y2 ? 3 : 1] = z; &#125; else &#123; Map[x1][y1][x1 &gt; x2 ? 2 : 0] = z; Map[x2][y2][x1 &gt; x2 ? 0 : 2] = z; &#125; &#125; std::cin &gt;&gt; S; rep(i, 0, S) &#123; std::cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; z; Key[x1][y1].push_back(z); &#125; if(!bfs()) &#123; std::cout &lt;&lt; -1 &lt;&lt; std::endl; &#125; else &#123; memset(Dis, 0x3f, sizeof Dis); Dis[0][1][1] = 0; check(0, 0, 1, 1); int ans = INT_MAX; rep(i, 0, 1 &lt;&lt; (P + 1)) &#123; ans = std::min(ans, Dis[i][N][M]); &#125; std::cout &lt;&lt; ans &lt;&lt; std::endl; &#125; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>BFS</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6005 最长递增子序列]]></title>
    <url>%2FLOJ-6005%2F</url>
    <content type="text"><![CDATA[有一个长度为 N 的序列 A ，求解以下询问： 最长不下降子序列的长度 K 原序列最多可以取出长度为 K 的不下降子序列的个数 （每个数只能用一次） 如果 A_1 和 A_N 可以取无数次，再求第二问 1\leq N\leq 500 分析 第一问，随便 O(N ^2) dp一下即可。 第二问，由于每个数只能用一次，那么基本思想还是拆点。将每个点拆成 B_i 和 C_i ，即结点 i 选择前和选择后的两种状态。 记 F_i 为以 A_i 为结尾的最长不下降子序列的长度。 首先，源点 S 和所有 B_i 满足 F_i = 1 的结点相连。同理，所有 C_i 满足 F_i = K 的结点和 T 相连。流量限制为 1 。 对于一个合法的子序列，相邻元素一定满足 A_i \geq A_j 且 F_i = F_j + 1(j&lt; i) 。 那么对满足这种条件的点对 (i,j) 便需要连一条 (C_j, B_i) 的边，流量限制为 1 ，意为选择 j 后可以再选择 i 作为后继。 当然， B_i 和 C_i 也有一条流量限制为 1 的边，因为选择结点 i 之后，状态便由未选择转移到了选择完。 跑 S-T 最大流即为第二问结果。 对于第三问，很显然的做法便是放开对结点 1 和结点 N 的限制。将原来流量限制为 1 的边修改为 INF 即可（或者直接加新边）。 需要注意的几点细节： 对于单调下降的序列 A ， K = 1 。因此所有结点既满足 F_i = 1 也满足 F_i = K ，判断和源汇点连边的时候是，注意是if()if()而不是if()else if() 对于第三问的修改操作，直接加边更方便。但是要注意的是， F_1 = 1 是一定成立的，但是 F_N = K 是不一定成立的。所以加边之前需要检查一下是否原图存在边。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 1200 + 5;const int MAXM = MAXN * MAXN;namespace dinic &#123;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Flow[MAXM], Dis[MAXN], Lv[MAXN], Cur[MAXN];int N, M, S, T, tim, ffffc, F;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1;&#125;&#125;int A[MAXN], F[MAXN];int main() &#123; int n, ans = 0; scanf("%d", &amp;n); dinic::S = 0, dinic::T = n * 2 + 1; dinic::init(); rep(i, 1, n + 1) &#123; dinic::addEdge(i, i + n); scanf("%d", &amp;A[i]); F[i] = 1; rep(j, 1, i) &#123; if(A[j] &lt;= A[i]) &#123; F[i] = std::max(F[i], F[j] + 1); &#125; &#125; ans = std::max(ans, F[i]); &#125; rep(i, 1, n + 1) &#123; rep(j, 1, i) &#123; if(A[i] &gt;= A[j] &amp;&amp; F[i] == F[j] + 1) &#123; dinic::addEdge(j + n, i); &#125; &#125; &#125; rep(i, 1, n + 1) &#123; if(F[i] == 1) &#123; dinic::addEdge(dinic::S, i); &#125; if(F[i] == ans) &#123; dinic::addEdge(i + n, dinic::T); &#125; &#125; printf("%d\n", ans); printf("%d\n", dinic::dinic()); dinic::addEdge(dinic::S, 1, INT_MAX); dinic::addEdge(1, 1 + n, INT_MAX); dinic::addEdge(n, n + n, INT_MAX); if(F[n] == ans) &#123; dinic::addEdge(n + n, dinic::T, INT_MAX); &#125; printf("%d\n", dinic::dinic()); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6015 星际转移]]></title>
    <url>%2FLOJ-6015%2F</url>
    <content type="text"><![CDATA[地球和月球中间有 n 个太空站，有 m 艘太空船， k 个人要从地球前往月球。 已知每个太空站可以容纳无限多的人，每艘太空船的承载人数为 H_i ，以及它们的行驶路线（经过的每一个太空站编号）。 任意两个太空站之间的行驶时间均为 1 ，太空船周期行驶（终点站再回到初始站） 乘客可以选择在任意整数时刻下车或上车，这个操作不消耗时间。 假设所有太空船0时刻都在初始站，求所有人从地球转移到月球的最短时间。 如果不能到达，输出0。 n \leq 13 ， m \leq 20 ， k \leq 50 。 分析 首先判断是否有解。 很显然只要地球和月球之间存在路径，那么就一定有解。 用并查集维护所有点的连通关系，最后判断地球和月球是否属于同一集合即可。 然后是求最小值。 可以发现对于任意时刻 t_i ，所有太空船的位置是已知的。 那么我们将太空船的承载人数设为边的容量，乘客设为流量。 当存在流量 f \geq k 进入月球时，转移结束。 那么该如何建图？ 那么按照时间建分层图，对于时刻 t 的点 P_i ，建立新点 P_{i,t} ，根据太空船的行驶路径连接新边，继续跑最大流，直到流量达到 k 结束。 具体而言，即： 如果存在太空船 i 从 e 行驶到 v ，即存在边 e(u, v) ，那么对于新的第 t 层，连接 P_{u,t} 和 P_{v, t} ，流量限制为 H_i ，即太空船 i 的承载上限； 由于人可以在任意太空站上一直等，所以对于所有点 P_i ，连接 P_{i,t-1} 和 P_{i,t} ，流量限制为 INF ，因为太空站的承载能力是无限的； 设汇点为初始时刻的月球编号 T_0 ，那么连接 T_{t+1} 和 T_{t} ，流量限制为 INF ，如此任意时刻新增的流量可以回到 T_0 方便统计。 不能使用ISAP跑最大流，选择用Dinic。 因为Dinic是多次分层，而ISAP是一次分层，无法处理新加进来的点。 循环当前时刻 t 并直接在残余网络上加边构建分层图，累计流量直到超过 k 输出 t 并跳出。 注意不能使用capacity scaling来优化Dinic，这样增加新边后似乎是跑不出最大流的... 复杂度分析 Dinic算法求最大流的复杂度上界为 O(V^2\times E) 。 分层图新建 t 层，复杂度 O(t\times V^2 \times E) 。 E 最大为 n\times m ，最坏情况下只存在一条路径经过所有点从地球到达月球，且限制为1，此时 t 为 n\times k 。 所以复杂度的上界为 O(n^3\times m^2 \times k) ，对于如此小的 n,m,k ，跑起来毫无压力。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace uf &#123;const int MAXN = 20;int Fa[MAXN];void init(int n) &#123; rep(i, 0, n) &#123; Fa[i] = i; &#125;&#125;int find(int x) &#123; return Fa[x] == x ? x : Fa[x] = find(Fa[x]);&#125;void merge(int x, int y) &#123; x = find(x), y = find(y); if (x != y) &#123; Fa[y] = x; &#125;&#125;&#125; // namespace ufnamespace dinic &#123;const int MAXN = 1200 + 5;const int MAXM = 12000 + 5;const int MAXK = 50 + 5;const int INF = INT_MAX;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int K, n, S, T;int A[MAXN][MAXK];int H[MAXN], cntE;int Dis[MAXN];bool bfs() &#123; static std::queue&lt;int&gt; q; memset(Dis, -1, sizeof Dis); Dis[S] = 0; q.push(S); while (!q.empty()) &#123; int x = q.front(); q.pop(); for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &gt; 0 &amp;&amp; !~Dis[v]) &#123; Dis[v] = Dis[x] + 1; q.push(v); &#125; &#125; &#125; return ~Dis[T];&#125;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, -f, H[v]&#125;; H[v] = cntE;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int curf = 0; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &gt; 0) &#123; int flow = dfs(v, std::min(E[i].f, maxf - curf)); E[i].f -= flow, E[i ^ 1].f += flow; curf += flow; if (curf == maxf) &#123; return curf; &#125; &#125; &#125; return curf;&#125;int dinic() &#123; static int ans = 0; while (bfs()) &#123; ans += dfs(S, INF); &#125; return ans;&#125;void init() &#123; cntE = -1; memset(H, -1, sizeof H); n = io::gt&lt;int&gt;(), A[0][0] = io::gt&lt;int&gt;(), K = io::gt&lt;int&gt;(); T = n + 1; uf::init(T + 1); rep(i, 1, A[0][0] + 1) &#123; A[0][i] = io::gt&lt;int&gt;(); A[i][0] = io::gt&lt;int&gt;(); rep(j, 1, A[i][0] + 1) &#123; int x = io::gt&lt;int&gt;(); A[i][j] = ~x ? x : T; if (j &gt; 1) &#123; uf::merge(A[i][j - 1], A[i][j]); &#125; &#125; &#125; if (uf::find(S) != uf::find(T)) &#123; puts("0"); exit(0); &#125;&#125;void addGraph(int t) &#123; rep(i, 0, n + 1) &#123; addEdge(i + (t - 1) * (n + 2), i + t * (n + 2), INF); &#125; addEdge(n + 1 + t * (n + 2), n + 1 + (t - 1) * (n + 2), INF); rep(i, 1, A[0][0] + 1) &#123; int tmp = (t - 1) % A[i][0] + 1; addEdge(A[i][tmp] + (t - 1) * (n + 2) , A[i][t % A[i][0] + 1] + t * (n + 2), A[0][i]); &#125;&#125;int maxFlow() &#123; init(); for (int t = 1; ; ++t) &#123; addGraph(t); if (dinic() &gt;= K) &#123; return t; &#125; &#125;&#125;&#125; // namespace dinicint main() &#123; printf("%d\n", dinic::maxFlow()); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6223 汽车加油行驶问题]]></title>
    <url>%2FLOJ-6223%2F</url>
    <content type="text"><![CDATA[一个 N * N 的网格图，起点为 (1,1) （左上角），终点为 (N,N) （右下角）。 一辆汽车从起点出发，油量为满（ K ），每走一格油量消耗 1 ，剩余 0 的时候无法行驶。 有些点有加油站，如果走到该点，必须加满，费用为 A 。 如果该点没有加油站，可以选择增设加油站，费用为 C （不算加油的费用）。 每经过一条网格边，如果是往左或往上走，费用为 B ；如果向下或者向右走，没有花费。 求最小花费。 2\leq N\leq 100,2\leq K\leq 10 分析 如果没有油量这个限制，就是一个最短路问题。 那么把剩余油量作为表示状态的一维。用 (x, y, k) 表示坐标为 (x,y) ，剩余流量为 k 的状态。 根据条件，可以得到 ： (x,y,k)\rightarrow(x-1,y,k-1) ，费用为 B （ k\geq1, x&gt;1 ）； (x,y,k)\rightarrow(x+1,y,k-1) ，费用为 0 （ k\geq1, x&lt;N ）； (x,y,k)\rightarrow(x,y-1,k-1) ，费用为 1 （ k\geq1, y&gt;1 ）； (x,y,k)\rightarrow(x,y+1,k-1) ，费用为 0 （ k\geq1, y&lt;N ）； (x,y,k)\rightarrow(x,y,K) ，费用为 A 或 A+C （ k\geq 0 ）。 这么建图有一个可能的问题在于：增设加油站只需要花费一次 C ，下一次再加就只需要花费 A 了，但是这么建图会导致每次费用都是 A+C 。 那么存在一个结论：每个点只会走一次。 简略证明：回去的目的就是再加油；如果加完油回来，跟之前的剩余油量相同，又要多付路费；如果加完油走别的路径会更优，那么在第一次到达这个点就会直接那么走，故回去加油不会更优。 最后增加 S\rightarrow (1,1,K) (N,N,i)\rightarrow T(0\leq i\leq K) ，流量全部置为 1 。 跑最小费用最大流即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;template &lt;typename T&gt; inline void pt(T x, const char c = '\n') &#123; std::cout &lt;&lt; x &lt;&lt; c;&#125;void fflush() &#123;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;char Out[MAXSIZE], *cur = Out;template &lt;typename T&gt; inline void pt(T x, char c = '\n') &#123; static int S[20], *top; top = S; if (x &lt; 0) &#123; *cur++ = '-', x = -x; &#125; do &#123; *++top = x % 10, x /= 10; &#125; while (x); while (top != S) &#123; *cur++ = *top-- + '0'; &#125; *cur++ = c;&#125;void fflush() &#123; fwrite(Out, 1, cur - Out, stdout); cur = Out;&#125;#endif&#125; // namespace ionamespace mcmf &#123;const int MAXN = 100 * 100 * 12 + 5;const int MAXM = MAXN * 5;const int Dicx[] = &#123;1, 0, -1, 0&#125;;const int Dicy[] = &#123;0, -1, 0, 1&#125;;struct Edge &#123; int v, nxt, f, c;&#125;E[MAXM &lt;&lt; 1];int N, S, T, F, C;int H[MAXN], cntE;int getId(int x, int y, int k) &#123; return x * N + y + k * N * N;&#125;void addEdge(int u, int v, int f, int c) &#123; E[++cntE] = (Edge) &#123;v, H[u], f, c&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0, -c&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; S = 0, T = 1; N = io::gt&lt;int&gt;(); int K = io::gt&lt;int&gt;(), A = io::gt&lt;int&gt;(), B = io::gt&lt;int&gt;(), C = io::gt&lt;int&gt;(); addEdge(S, getId(1, 1, K), 1, 0); rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; int opt = io::gt&lt;int&gt;(); rep(k, 0, K + 1) &#123; if(k != K) &#123; addEdge(getId(i, j, k), getId(i, j, K), 1, opt ? A : A + C); &#125; rep(d, 0, 4) &#123; int nx = i + Dicx[d], ny = j + Dicy[d]; if(((!opt &amp;&amp; k != 0) || k == K) &amp;&amp; (nx &gt;= 1 &amp;&amp; ny &gt;= 1 &amp;&amp; nx &lt;= N &amp;&amp; ny &lt;= N)) &#123; addEdge(getId(i, j, k), getId(nx, ny, k - 1), 1, (d == 1 || d == 2) ? B : 0); &#125; &#125; &#125; &#125; &#125; rep(i, 0, K) &#123; addEdge(getId(N, N, i), T, 1, 0); &#125;&#125;int Lp[MAXN], Le[MAXN], Dis[MAXN];bool Inq[MAXN];void spfa() &#123; static std::queue&lt;int&gt; Que; memset(Dis, 0x3f, sizeof Dis); Dis[S] = 0; Que.push(S); while(!Que.empty()) &#123; int x = Que.front(); Que.pop(); Inq[x] = false; for(int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if(Dis[v] &gt; Dis[x] + E[i].c &amp;&amp; E[i].f) &#123; Dis[v] = Dis[x] + E[i].c; Lp[v] = x, Le[v] = i; if(!Inq[v]) &#123; Inq[v] = true; Que.push(v); &#125; &#125; &#125; &#125;&#125;void mcmf() &#123; init(); spfa(); printf("%d\n", Dis[T]);&#125;&#125;int main() &#123; mcmf::mcmf(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>费用流</tag>
        <tag>分层图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6226 骑士共存问题]]></title>
    <url>%2FLOJ-6226%2F</url>
    <content type="text"><![CDATA[一个位于点 S 的骑士可以攻击到所有标记为 X 的红色格子，在一个 N * N 的棋盘上，有 M 个格子不能放置骑士，坐标为 (X_i,Y_i) 。 求最多能放多少个骑士，使得他们两两之间无法相互攻击。 1\leq N\leq 200 M\leq N^2 分析 根据观察可以发现，棋盘的红色和黄色两部分是互相影响的，但是其内部相互独立。任意放置一个骑士后，只会导致某些异色的格子无法再放置。 这是两个独立的部分，由此想到二分图。互不影响，我们可以想到独立集。 合在一起就是二分图最大独立集。 求二分图最大独立集，根据 二分图最大匹配=最大流=最小顶点覆盖=总结点数-最大独立集 转化成网络流问题。 建模方法如下： S 连接二分图 X 部， 二分图 Y 部连接 T ，流量限制皆为 1 ，不能同时放置骑士的点之间连接边，不设流量限制。 N\times N - M 为总结点数，与求得的 S-T 最大流做差即为答案。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = (200 + 5) * (200 + 5) + 5;const int MAXM = MAXN * 10;struct Edge &#123; int v, nxt, f;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, F, tim, ffffc;int H[MAXN], cntE;int Dis[MAXN], Lv[MAXN], Cur[MAXN], Flow[MAXM];void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, H[u], f&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, H[v], 0&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;std::bitset&lt;MAXN&gt; Bt;const int Dicx[] = &#123;2, 1, -1, -2, -2, -1, 1, 2&#125;;const int Dicy[] = &#123;-1, -2, -2, -1, 1, 2, 2, 1&#125;;int getId(int x, int y) &#123; return x * N + y;&#125;bool check(int x, int y) &#123; return x &gt;= 1 &amp;&amp; y &gt;= 1 &amp;&amp; x &lt;= N &amp;&amp; y &lt;= N &amp;&amp; !Bt[getId(x, y)];&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; int x, y; std::cin &gt;&gt; N &gt;&gt; M; rep(i, 0, M) &#123; std::cin &gt;&gt; x &gt;&gt; y; Bt[getId(x, y)] = 1; &#125; S = getId(N, N) + 1, T = S + 1; rep(i, 1, N + 1) &#123; rep(j, 1, N + 1) &#123; if(!Bt[getId(i, j)]) &#123; if((i + j) &amp; 1) &#123; addEdge(getId(i, j), T, 1); &#125; else &#123; addEdge(S, getId(i, j), 1); rep(k, 0, 8) &#123; int nx = i + Dicx[k], ny = j + Dicy[k]; if(check(nx, ny)) &#123; addEdge(getId(i, j), getId(nx, ny), INT_MAX); &#125; &#125; &#125; &#125; &#125; &#125;&#125;void dinic() &#123; init(); while(true) &#123; while(bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if(!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; Flow[i] = 0; &#125; &#125; std::cout &lt;&lt; N * N - M - F &lt;&lt; std::endl;&#125;&#125;int main() &#123; dinic::dinic(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
        <tag>最大独立集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6007 方格取数]]></title>
    <url>%2FLOJ-6007%2F</url>
    <content type="text"><![CDATA[有一个 N\times M 的矩阵，第 i 行 第 j 列的元素值为 A_{i,j} 。 现想从中选择任意多个数，使得权值和最大，要求选择的任意两个数在原矩阵中不相邻。 输出最大的权值和即可，无需具体方案。 1\leq N,M\leq 100 分析 首先将原图进行黑白染色，显然任意一个格子被选择后，都不能选择相邻的异色格子。这是一个二分图。 将每个格子与周围的异色格子连一条边，原问题转化为求二分图的最大点权独立集，即选择的任意两点没有边相连，且要求集合中的点权和最大。 对于这种问题，解法为： - 构造源点 S ，连接 S 和 X_i ，流量限制置为 A_{X_i} - 构造汇点 T ，连接 Y_i 和 T ，流量限制置为 A_{Y_i} - 原 X_i 和 Y_j 相连的边，流量限制置为 INF 那么最大点权独立集（maximum weight vertex independent set,MaxWVIS），即为点权和与最大流的差。 简单的理解就是说边 S-X_i 和 Y_j-T ，视作选择 X_i/Y_j 的代价。那么在总收益一定的前提下（即总边权和），总代价最小即最后收益最大。 根据最大流最小割定理，最大流即为最小割。对于任意一条 S-X_i-Y_j-T 的增广路径，被割掉的边要么为 S-X_i ，要么为 Y_i-T 。 割最小，即总代价最小，即总收益最大。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;const int MAXN = 100 * 100 + 5;const int MAXM = MAXN * 10 + 5;namespace dinic &#123;struct Edge &#123; int v, f, nxt;&#125;E[MAXM &lt;&lt; 1];int N, M, S, T, tim, ffffc;int Flow[MAXM &lt;&lt; 1], Cur[MAXN], Lv[MAXN], Dis[MAXN];int H[MAXN], cntE;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int F = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); F += dfs(S, INT_MAX); &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return F;&#125;int init() &#123; cntE = -1; memset(H, -1, sizeof H); std::cin &gt;&gt; N &gt;&gt; M; S = 0, T = N * M + 1; int x, sum = 0; rep(i, 1, N + 1) &#123; rep(j, 1, M + 1) &#123; std::cin &gt;&gt; x; sum += x; int cur = (i - 1) * M + j; if((i + j) &amp; 1) &#123; addEdge(S, cur, x); if(j != 1) &#123; addEdge(cur, cur - 1, INT_MAX); &#125; if(j != M) &#123; addEdge(cur, cur + 1, INT_MAX); &#125; if(i != 1) &#123; addEdge(cur, cur - M, INT_MAX); &#125; if(i != N) &#123; addEdge(cur, cur + M, INT_MAX); &#125; &#125; else &#123; addEdge(cur, T, x); &#125; &#125; &#125; return sum;&#125;int maxFlow() &#123; int sum = init(); return sum - dinic();&#125;&#125;int main() &#123; std::cout &lt;&lt; dinic::maxFlow() &lt;&lt; std::endl; return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
        <tag>最大点权独立集</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6000 搭配飞行员]]></title>
    <url>%2FLOJ-6000%2F</url>
    <content type="text"><![CDATA[有 N 个点，其中编号为 1-M 的点可以和编号为 M+1-N 的点匹配。 已知所有允许的匹配点对 (a,b) ，求最大匹配数，并输出配对方案。 如果不存在，输出No Solution! 。 1\leq M\leq N\leq 100 分析 裸的二分图最大匹配。 考虑匈牙利算法，复杂度 O(n\times m) ，复杂度有点高（虽然也能跑过）。 考虑Hopcroft-Karp算法，复杂度 O(\sqrt{n}\times m) ，但是我不会写。 考虑最大流算法。 根据陈胤伯的集训队论文《浅谈图的匹配算法及其应用》，得知利用Dinic算法进行二分图最大匹配的复杂度亦为 O(\sqrt{n}\times m) ，遂选择之。 建图方法很简单，新建源点 S 和汇点 T ， S 、 T 分别与二分图的两部分的每个点连接流量限度为 1 的边， 可以匹配的点对 (a,b) 亦连接流量限制为 1 的边。跑得 S-T 最大流即原二分图最大匹配数。 至于匹配方案，根据残余网络，输出所有剩余流量为 0 且不与 S、T 、 相连的边的点对即可。 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace io &#123;#ifndef ONLINE_JUDGEchar gc() &#123; return getchar();&#125;template &lt;class T&gt; inline T gt() &#123; register T x; std::cin &gt;&gt; x; return x;&#125;#elseconst int MAXSIZE = 1 &lt;&lt; 22;int EN = 1;inline char gc() &#123; static char In[MAXSIZE], *at = In, *en = In; if (at == en) &#123; en = (at = In) + fread(In, 1, MAXSIZE, stdin); &#125; return at == en ? EN = EOF : *at++;&#125;template &lt;class T&gt; inline T gt() &#123; register char c; while (c = gc(), !isdigit(c) &amp;&amp; c != '-') &#123;&#125; register bool f = c == '-'; register T x = f ? 0 : c - '0'; for (c = gc(); isdigit(c); c = gc()) &#123; x = x * 10 + c - '0'; &#125; return f ? -x : x;&#125;#endif&#125; // namespace ionamespace dinic &#123;const int MAXN = 100 + 5;const int MAXM = 10000 + 5;const int INF = INT_MAX;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int N, M, S, T, flow, ffffc, tim;int H[MAXN], cntE;int Dis[MAXN], Cur[MAXN], Lv[MAXN];int Flow[MAXM &lt;&lt; 1];bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;u = Que[qh++]; if (u == T) &#123; return true; &#125; else &#123; for (int i = H[u]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (E[i].f &amp;&amp; Lv[v] != tim) &#123; Dis[v] = Dis[u] + 1; Lv[v] = tim; Que[qt++] = v; &#125; &#125; &#125; &#125; return false;&#125;void addEdge(int u, int v, int f = 1) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init() &#123; M = io::gt&lt;int&gt;(), N = io::gt&lt;int&gt;(); S = 0, T = N + 1; cntE = -1; memset(H, -1, sizeof H); while (io::EN == 1) &#123; int x = io::gt&lt;int&gt;(), y = io::gt&lt;int&gt;(); if (x &gt; y) std::swap(x, y); addEdge(x, y); &#125; rep(i, 1, M + 1) &#123; addEdge(S, i); &#125; rep(i, M + 1, N + 1) &#123; addEdge(i, T); &#125;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f &amp;&amp; Lv[v] == tim) &#123; int flow = dfs(v, std::min(E[i].f, left)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int ans = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof(int) * (N + 1)); int res = dfs(S, INF); ans += res; &#125; if (!ffffc) &#123; break; &#125; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); ffffc = 0; &#125; return ans;&#125;void match() &#123; init(); printf("%d\n", dinic());&#125;&#125; // namespace dinicint main() &#123; dinic::match(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[LOJ 6006 试题库]]></title>
    <url>%2FLOJ-6006%2F</url>
    <content type="text"><![CDATA[有 n 个数， m 个属性。第 i 个数有 A_i 个属性，分别为 B_{i,j} 。 从中选择 k 个数，使得这 m 个属性中，第 i 个属性有 C_i 个数。 输出任意一组解的每个属性对应的数，如果无解输出No Solution!。 2\leq k\leq 20, k\leq n\leq 1000 分析 二分图多重匹配。 二分图的 X_i 为这 n 个数， Y_i 为这 m 个属性，建立源点 S 和汇点 T 。 建图方案： - S 和 X_i 连接一条边权为 1 的有向边 - X_i 和 Y_i 根据属性和数的关系连接边权为 1 的有向边 - Y_i 和 T 连接边权为 C_i 的有向边。 跑 S-T 最大流，方案即为残余网络为 0 的边对应的结点 参考代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133// Copyright 2018, Skqliao#include &lt;bits/stdc++.h&gt;#define rg register#define rep(i, l, r) for (rg int i = (l), _##i##_ = (r); i &lt; _##i##_; ++i)#define rof(i, l, r) for (rg int i = (l) - 1, _##i##_ = (r); i &gt;= _##i##_; --i)#define ALL(x) (x).begin(), (x).end()#define SZ(x) static_cast&lt;int&gt;((x).size())typedef long long ll;namespace dinic &#123;const int MAXN = 2000 + 5;const int MAXM = 240000 + 5;struct Edge &#123; int v, f, nxt;&#125; E[MAXM &lt;&lt; 1];int H[MAXN], cntE;int Cur[MAXN], Flow[MAXM &lt;&lt; 1];int Dis[MAXN], Lv[MAXN];int N, M, S, T, K, ffffc, tim;void addEdge(int u, int v, int f) &#123; E[++cntE] = (Edge) &#123;v, f, H[u]&#125;; H[u] = cntE; E[++cntE] = (Edge) &#123;u, 0, H[v]&#125;; H[v] = cntE;&#125;void init() &#123; memset(H, -1, sizeof H); cntE = -1; int x, y; std::cin &gt;&gt; K &gt;&gt; N; S = 0, T = N + K + 1; rep(i, 1, K + 1) &#123; std::cin &gt;&gt; x; M += x; addEdge(i + N, T, x); &#125; rep(i, 1, N + 1) &#123; std::cin &gt;&gt; x; while (x--) &#123; std::cin &gt;&gt; y; addEdge(i, y + N, 1); &#125; addEdge(S, i, 1); &#125;&#125;bool bfs() &#123; static int Que[MAXN]; int qh = 0, qt = 0; Dis[S] = 1, Lv[S] = ++tim; for (Que[qt++] = S; qh &lt; qt;) &#123; int &amp;x = Que[qh++]; if (x == T) &#123; return true; &#125; for (int i = H[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] != tim &amp;&amp; E[i].f) &#123; Lv[v] = tim; Dis[v] = Dis[x] + 1; Que[qt++] = v; &#125; &#125; &#125; return false;&#125;int dfs(int x, int maxf) &#123; if (x == T || !maxf) &#123; return maxf; &#125; int left = maxf; for (int &amp;i = Cur[x]; ~i; i = E[i].nxt) &#123; int &amp;v = E[i].v; if (Lv[v] == tim &amp;&amp; Dis[v] == Dis[x] + 1 &amp;&amp; E[i].f) &#123; int flow = dfs(v, std::min(left, E[i].f)); if (!flow) &#123; Dis[v] = -1; &#125; else &#123; left -= flow; E[i].f -= flow; Flow[i ^ 1] += flow; ffffc = 1; if (!left) &#123; return maxf; &#125; &#125; &#125; &#125; return maxf - left;&#125;int dinic() &#123; int flow = 0; while (true) &#123; while (bfs()) &#123; memcpy(Cur, H, sizeof H); int f = dfs(S, INT_MAX); flow += f; &#125; if (!ffffc) &#123; break; &#125; ffffc = 0; rep(i, 0, cntE + 1) &#123; E[i].f += Flow[i]; &#125; memset(Flow, 0, sizeof(int) * (cntE + 1)); &#125; return flow;&#125;void maxflow() &#123; init(); int maxflow = dinic(); if (maxflow != M) &#123; std::cout &lt;&lt; "No Solution!\n"; &#125; else &#123; rep(i, 1, K + 1) &#123; std::cout &lt;&lt; i &lt;&lt; ": "; for (int j = H[i + N]; ~j; j = E[j].nxt) &#123; if (E[j].f) &#123; std::cout &lt;&lt; E[j].v &lt;&lt; " "; &#125; &#125; std::cout &lt;&lt; std::endl; &#125; &#125; return ;&#125;&#125;int main() &#123; dinic::maxflow(); return 0;&#125;]]></content>
      <categories>
        <category>LOJ</category>
      </categories>
      <tags>
        <tag>二分图多重匹配</tag>
      </tags>
  </entry>
</search>
